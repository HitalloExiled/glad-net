using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Diagnostics.CodeAnalysis;

namespace OpenGL
{
    public delegate nint GetProcAddressHandler(string funcName);
    public delegate void DebugProc(int source, int type, uint id, int severity, nint length, byte[] message, nint userParam);
    public delegate void DebugProcAMD(uint id, int category, int severity, nint length, byte[] message, nint userParam);
    public delegate void VulkanDebugProcNV();

    [AttributeUsage(AttributeTargets.All)]
    class GLExtensionAttribute : Attribute
    {
        public string Name { get; }

        public GLExtensionAttribute(string name) => Name = name;
    }


    [Flags]
    public enum AttribMask : uint
    {
        CurrentBit = 0x00000001,
        PointBit = 0x00000002,
        LineBit = 0x00000004,
        PolygonBit = 0x00000008,
        PolygonStippleBit = 0x00000010,
        PixelModeBit = 0x00000020,
        LightingBit = 0x00000040,
        FogBit = 0x00000080,
        DepthBufferBit = 0x00000100,
        AccumBufferBit = 0x00000200,
        StencilBufferBit = 0x00000400,
        ViewportBit = 0x00000800,
        TransformBit = 0x00001000,
        EnableBit = 0x00002000,
        ColorBufferBit = 0x00004000,
        HintBit = 0x00008000,
        EvalBit = 0x00010000,
        ListBit = 0x00020000,
        TextureBit = 0x00040000,
        ScissorBit = 0x00080000,
        MultisampleBit = 0x20000000,

        [GLExtension("GL_ARB_multisample")]
        MultisampleBitARB = 0x20000000,

        [GLExtension("GL_EXT_multisample")]
        MultisampleBitEXT = 0x20000000,

        [GLExtension("GL_3DFX_multisample")]
        MultisampleBit3DFX = 0x20000000,
        AllAttribBits = 0xFFFFFFFF,
    }

    [Flags]
    public enum ClearBufferMask : uint
    {
        DepthBufferBit = 0x00000100,
        AccumBufferBit = 0x00000200,
        StencilBufferBit = 0x00000400,
        ColorBufferBit = 0x00004000,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageBufferBitNV = 0x00008000,
    }

    [Flags]
    public enum BufferStorageMask : uint
    {

        [GLExtension("GL_ARB_buffer_storage")]
        DynamicStorageBit = 0x0100,

        [GLExtension("GL_EXT_buffer_storage")]
        DynamicStorageBitEXT = 0x0100,

        [GLExtension("GL_ARB_buffer_storage")]
        ClientStorageBit = 0x0200,

        [GLExtension("GL_EXT_buffer_storage")]
        ClientStorageBitEXT = 0x0200,

        [GLExtension("GL_ARB_sparse_buffer")]
        SparseStorageBitARB = 0x0400,

        [GLExtension("GL_NVX_linked_gpu_multicast")]
        LgpuSeparateStorageBitNvx = 0x0800,

        [GLExtension("GL_NV_gpu_multicast")]
        PerGpuStorageBitNV = 0x0800,

        [GLExtension("GL_NVX_cross_process_interop")]
        ExternalStorageBitNvx = 0x2000,

        [GLExtension("GL_ARB_buffer_storage")]
        MapReadBit = 0x0001,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapReadBitEXT = 0x0001,

        [GLExtension("GL_ARB_buffer_storage")]
        MapWriteBit = 0x0002,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapWriteBitEXT = 0x0002,

        [GLExtension("GL_ARB_buffer_storage")]
        MapPersistentBit = 0x0040,

        [GLExtension("GL_EXT_buffer_storage")]
        MapPersistentBitEXT = 0x0040,

        [GLExtension("GL_ARB_buffer_storage")]
        MapCoherentBit = 0x0080,

        [GLExtension("GL_EXT_buffer_storage")]
        MapCoherentBitEXT = 0x0080,
    }

    [Flags]
    public enum ClientAttribMask : uint
    {
        ClientPixelStoreBit = 0x00000001,
        ClientVertexArrayBit = 0x00000002,
        ClientAllAttribBits = 0xFFFFFFFF,
    }

    [Flags]
    public enum ContextFlagMask : uint
    {
        ContextFlagForwardCompatibleBit = 0x00000001,

        [GLExtension("GL_KHR_debug")]
        ContextFlagDebugBit = 0x00000002,

        [GLExtension("GL_KHR_debug")]
        ContextFlagDebugBitKhr = 0x00000002,
        ContextFlagRobustAccessBit = 0x00000004,

        [GLExtension("GL_ARB_robustness")]
        ContextFlagRobustAccessBitARB = 0x00000004,
        ContextFlagNoErrorBit = 0x00000008,

        [GLExtension("GL_KHR_no_error")]
        ContextFlagNoErrorBitKhr = 0x00000008,

        [GLExtension("GL_EXT_protected_textures")]
        ContextFlagProtectedContentBitEXT = 0x00000010,
    }

    [Flags]
    public enum ContextProfileMask : uint
    {
        ContextCoreProfileBit = 0x00000001,
        ContextCompatibilityProfileBit = 0x00000002,
    }

    [Flags]
    public enum MapBufferAccessMask : uint
    {

        [GLExtension("GL_ARB_buffer_storage")]
        MapReadBit = 0x0001,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapReadBitEXT = 0x0001,

        [GLExtension("GL_ARB_buffer_storage")]
        MapWriteBit = 0x0002,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapWriteBitEXT = 0x0002,

        [GLExtension("GL_ARB_map_buffer_range")]
        MapInvalidateRangeBit = 0x0004,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapInvalidateRangeBitEXT = 0x0004,

        [GLExtension("GL_ARB_map_buffer_range")]
        MapInvalidateBufferBit = 0x0008,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapInvalidateBufferBitEXT = 0x0008,

        [GLExtension("GL_ARB_map_buffer_range")]
        MapFlushExplicitBit = 0x0010,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapFlushExplicitBitEXT = 0x0010,

        [GLExtension("GL_ARB_map_buffer_range")]
        MapUnsynchronizedBit = 0x0020,

        [GLExtension("GL_EXT_map_buffer_range")]
        MapUnsynchronizedBitEXT = 0x0020,

        [GLExtension("GL_ARB_buffer_storage")]
        MapPersistentBit = 0x0040,

        [GLExtension("GL_EXT_buffer_storage")]
        MapPersistentBitEXT = 0x0040,

        [GLExtension("GL_ARB_buffer_storage")]
        MapCoherentBit = 0x0080,

        [GLExtension("GL_EXT_buffer_storage")]
        MapCoherentBitEXT = 0x0080,
    }

    [Flags]
    public enum MemoryBarrierMask : uint
    {

        [GLExtension("GL_ARB_shader_image_load_store")]
        VertexAttribArrayBarrierBit = 0x00000001,

        [GLExtension("GL_EXT_shader_image_load_store")]
        VertexAttribArrayBarrierBitEXT = 0x00000001,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ElementArrayBarrierBit = 0x00000002,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ElementArrayBarrierBitEXT = 0x00000002,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UniformBarrierBit = 0x00000004,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UniformBarrierBitEXT = 0x00000004,

        [GLExtension("GL_ARB_shader_image_load_store")]
        TextureFetchBarrierBit = 0x00000008,

        [GLExtension("GL_EXT_shader_image_load_store")]
        TextureFetchBarrierBitEXT = 0x00000008,

        [GLExtension("GL_NV_shader_buffer_store")]
        ShaderGlobalAccessBarrierBitNV = 0x00000010,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ShaderImageAccessBarrierBit = 0x00000020,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ShaderImageAccessBarrierBitEXT = 0x00000020,

        [GLExtension("GL_ARB_shader_image_load_store")]
        CommandBarrierBit = 0x00000040,

        [GLExtension("GL_EXT_shader_image_load_store")]
        CommandBarrierBitEXT = 0x00000040,

        [GLExtension("GL_ARB_shader_image_load_store")]
        PixelBufferBarrierBit = 0x00000080,

        [GLExtension("GL_EXT_shader_image_load_store")]
        PixelBufferBarrierBitEXT = 0x00000080,

        [GLExtension("GL_ARB_shader_image_load_store")]
        TextureUpdateBarrierBit = 0x00000100,

        [GLExtension("GL_EXT_shader_image_load_store")]
        TextureUpdateBarrierBitEXT = 0x00000100,

        [GLExtension("GL_ARB_shader_image_load_store")]
        BufferUpdateBarrierBit = 0x00000200,

        [GLExtension("GL_EXT_shader_image_load_store")]
        BufferUpdateBarrierBitEXT = 0x00000200,

        [GLExtension("GL_ARB_shader_image_load_store")]
        FramebufferBarrierBit = 0x00000400,

        [GLExtension("GL_EXT_shader_image_load_store")]
        FramebufferBarrierBitEXT = 0x00000400,

        [GLExtension("GL_ARB_shader_image_load_store")]
        TransformFeedbackBarrierBit = 0x00000800,

        [GLExtension("GL_EXT_shader_image_load_store")]
        TransformFeedbackBarrierBitEXT = 0x00000800,

        [GLExtension("GL_ARB_shader_image_load_store")]
        AtomicCounterBarrierBit = 0x00001000,

        [GLExtension("GL_EXT_shader_image_load_store")]
        AtomicCounterBarrierBitEXT = 0x00001000,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBarrierBit = 0x00002000,

        [GLExtension("GL_ARB_buffer_storage")]
        ClientMappedBufferBarrierBit = 0x00004000,

        [GLExtension("GL_EXT_buffer_storage")]
        ClientMappedBufferBarrierBitEXT = 0x00004000,

        [GLExtension("GL_ARB_query_buffer_object")]
        QueryBufferBarrierBit = 0x00008000,

        [GLExtension("GL_ARB_shader_image_load_store")]
        AllBarrierBits = 0xFFFFFFFF,

        [GLExtension("GL_EXT_shader_image_load_store")]
        AllBarrierBitsEXT = 0xFFFFFFFF,
    }

    [Flags]
    public enum OcclusionQueryEventMaskAMD : uint
    {

        [GLExtension("GL_AMD_occlusion_query_event")]
        QueryDepthPassEventBitAMD = 0x00000001,

        [GLExtension("GL_AMD_occlusion_query_event")]
        QueryDepthFailEventBitAMD = 0x00000002,

        [GLExtension("GL_AMD_occlusion_query_event")]
        QueryStencilFailEventBitAMD = 0x00000004,

        [GLExtension("GL_AMD_occlusion_query_event")]
        QueryDepthBoundsFailEventBitAMD = 0x00000008,

        [GLExtension("GL_AMD_occlusion_query_event")]
        QueryAllEventBitsAMD = 0xFFFFFFFF,
    }

    [Flags]
    public enum SyncObjectMask : uint
    {

        [GLExtension("GL_ARB_sync")]
        SyncFlushCommandsBit = 0x00000001,

        [GLExtension("GL_APPLE_sync")]
        SyncFlushCommandsBitAPPLE = 0x00000001,
    }

    [Flags]
    public enum UseProgramStageMask : uint
    {

        [GLExtension("GL_ARB_separate_shader_objects")]
        VertexShaderBit = 0x00000001,

        [GLExtension("GL_EXT_separate_shader_objects")]
        VertexShaderBitEXT = 0x00000001,

        [GLExtension("GL_ARB_separate_shader_objects")]
        FragmentShaderBit = 0x00000002,

        [GLExtension("GL_EXT_separate_shader_objects")]
        FragmentShaderBitEXT = 0x00000002,

        [GLExtension("GL_ARB_separate_shader_objects")]
        GeometryShaderBit = 0x00000004,

        [GLExtension("GL_EXT_geometry_shader")]
        GeometryShaderBitEXT = 0x00000004,

        [GLExtension("GL_OES_geometry_shader")]
        GeometryShaderBitOES = 0x00000004,

        [GLExtension("GL_ARB_separate_shader_objects")]
        TessControlShaderBit = 0x00000008,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessControlShaderBitEXT = 0x00000008,

        [GLExtension("GL_OES_tessellation_shader")]
        TessControlShaderBitOES = 0x00000008,

        [GLExtension("GL_ARB_separate_shader_objects")]
        TessEvaluationShaderBit = 0x00000010,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessEvaluationShaderBitEXT = 0x00000010,

        [GLExtension("GL_OES_tessellation_shader")]
        TessEvaluationShaderBitOES = 0x00000010,

        [GLExtension("GL_ARB_compute_shader")]
        ComputeShaderBit = 0x00000020,

        [GLExtension("GL_NV_mesh_shader")]
        MeshShaderBitNV = 0x00000040,

        [GLExtension("GL_NV_mesh_shader")]
        TaskShaderBitNV = 0x00000080,

        [GLExtension("GL_ARB_separate_shader_objects")]
        AllShaderBits = 0xFFFFFFFF,

        [GLExtension("GL_EXT_separate_shader_objects")]
        AllShaderBitsEXT = 0xFFFFFFFF,
    }

    [Flags]
    public enum SubgroupSupportedFeatures : uint
    {

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureBasicBitKhr = 0x00000001,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureVoteBitKhr = 0x00000002,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureArithmeticBitKhr = 0x00000004,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureBallotBitKhr = 0x00000008,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureShuffleBitKhr = 0x00000010,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureShuffleRelativeBitKhr = 0x00000020,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureClusteredBitKhr = 0x00000040,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupFeatureQuadBitKhr = 0x00000080,

        [GLExtension("GL_NV_shader_subgroup_partitioned")]
        SubgroupFeaturePartitionedBitNV = 0x00000100,
    }

    [Flags]
    public enum TextureStorageMaskAMD : uint
    {

        [GLExtension("GL_AMD_sparse_texture")]
        TextureStorageSparseBitAMD = 0x00000001,
    }

    [Flags]
    public enum FragmentShaderDestMaskATI : uint
    {

        [GLExtension("GL_ATI_fragment_shader")]
        RedBitATI = 0x00000001,

        [GLExtension("GL_ATI_fragment_shader")]
        GreenBitATI = 0x00000002,

        [GLExtension("GL_ATI_fragment_shader")]
        BlueBitATI = 0x00000004,

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,
    }

    [Flags]
    public enum FragmentShaderDestModMaskATI : uint
    {

        [GLExtension("GL_ATI_fragment_shader")]
        TwoXBitATI = 0x00000001,

        [GLExtension("GL_ATI_fragment_shader")]
        FourXBitATI = 0x00000002,

        [GLExtension("GL_ATI_fragment_shader")]
        EightXBitATI = 0x00000004,

        [GLExtension("GL_ATI_fragment_shader")]
        HalfBitATI = 0x00000008,

        [GLExtension("GL_ATI_fragment_shader")]
        QuarterBitATI = 0x00000010,

        [GLExtension("GL_ATI_fragment_shader")]
        EighthBitATI = 0x00000020,

        [GLExtension("GL_ATI_fragment_shader")]
        SaturateBitATI = 0x00000040,

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,
    }

    [Flags]
    public enum FragmentShaderColorModMaskATI : uint
    {

        [GLExtension("GL_ATI_fragment_shader")]
        TwoXBitATI = 0x00000001,

        [GLExtension("GL_ATI_fragment_shader")]
        CompBitATI = 0x00000002,

        [GLExtension("GL_ATI_fragment_shader")]
        NegateBitATI = 0x00000004,

        [GLExtension("GL_ATI_fragment_shader")]
        BiasBitATI = 0x00000008,
    }

    [Flags]
    public enum TraceMaskMESA : uint
    {
        TraceOperationsBitMESA = 0x0001,
        TracePrimitivesBitMESA = 0x0002,
        TraceArraysBitMESA = 0x0004,
        TraceTexturesBitMESA = 0x0008,
        TracePixelsBitMESA = 0x0010,
        TraceErrorsBitMESA = 0x0020,
        TraceAllBitsMESA = 0xFFFF,
    }

    [Flags]
    public enum PathRenderingMaskNV : uint
    {

        [GLExtension("GL_NV_path_rendering")]
        BoldBitNV = 0x01,

        [GLExtension("GL_NV_path_rendering")]
        ItalicBitNV = 0x02,

        [GLExtension("GL_NV_path_rendering")]
        GlyphWidthBitNV = 0x01,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHeightBitNV = 0x02,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHorizontalBearingXBitNV = 0x04,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHorizontalBearingYBitNV = 0x08,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHorizontalBearingAdvanceBitNV = 0x10,

        [GLExtension("GL_NV_path_rendering")]
        GlyphVerticalBearingXBitNV = 0x20,

        [GLExtension("GL_NV_path_rendering")]
        GlyphVerticalBearingYBitNV = 0x40,

        [GLExtension("GL_NV_path_rendering")]
        GlyphVerticalBearingAdvanceBitNV = 0x80,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHasKerningBitNV = 0x100,

        [GLExtension("GL_NV_path_rendering")]
        FontXMinBoundsBitNV = 0x00010000,

        [GLExtension("GL_NV_path_rendering")]
        FontYMinBoundsBitNV = 0x00020000,

        [GLExtension("GL_NV_path_rendering")]
        FontXMaxBoundsBitNV = 0x00040000,

        [GLExtension("GL_NV_path_rendering")]
        FontYMaxBoundsBitNV = 0x00080000,

        [GLExtension("GL_NV_path_rendering")]
        FontUnitsPerEmBitNV = 0x00100000,

        [GLExtension("GL_NV_path_rendering")]
        FontAscenderBitNV = 0x00200000,

        [GLExtension("GL_NV_path_rendering")]
        FontDescenderBitNV = 0x00400000,

        [GLExtension("GL_NV_path_rendering")]
        FontHeightBitNV = 0x00800000,

        [GLExtension("GL_NV_path_rendering")]
        FontMaxAdvanceWidthBitNV = 0x01000000,

        [GLExtension("GL_NV_path_rendering")]
        FontMaxAdvanceHeightBitNV = 0x02000000,

        [GLExtension("GL_NV_path_rendering")]
        FontUnderlinePositionBitNV = 0x04000000,

        [GLExtension("GL_NV_path_rendering")]
        FontUnderlineThicknessBitNV = 0x08000000,

        [GLExtension("GL_NV_path_rendering")]
        FontHasKerningBitNV = 0x10000000,

        [GLExtension("GL_NV_path_rendering")]
        FontNumGlyphIndicesBitNV = 0x20000000,
    }

    public enum PathFontStyle
    {

        [GLExtension("GL_NV_path_rendering")]
        BoldBitNV = 0x01,

        [GLExtension("GL_NV_path_rendering")]
        ItalicBitNV = 0x02,

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,
    }

    public enum PathMetricMask
    {

        [GLExtension("GL_NV_path_rendering")]
        GlyphWidthBitNV = 0x01,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHeightBitNV = 0x02,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHorizontalBearingXBitNV = 0x04,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHorizontalBearingYBitNV = 0x08,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHorizontalBearingAdvanceBitNV = 0x10,

        [GLExtension("GL_NV_path_rendering")]
        GlyphVerticalBearingXBitNV = 0x20,

        [GLExtension("GL_NV_path_rendering")]
        GlyphVerticalBearingYBitNV = 0x40,

        [GLExtension("GL_NV_path_rendering")]
        GlyphVerticalBearingAdvanceBitNV = 0x80,

        [GLExtension("GL_NV_path_rendering")]
        GlyphHasKerningBitNV = 0x100,

        [GLExtension("GL_NV_path_rendering")]
        FontXMinBoundsBitNV = 0x00010000,

        [GLExtension("GL_NV_path_rendering")]
        FontYMinBoundsBitNV = 0x00020000,

        [GLExtension("GL_NV_path_rendering")]
        FontXMaxBoundsBitNV = 0x00040000,

        [GLExtension("GL_NV_path_rendering")]
        FontYMaxBoundsBitNV = 0x00080000,

        [GLExtension("GL_NV_path_rendering")]
        FontUnitsPerEmBitNV = 0x00100000,

        [GLExtension("GL_NV_path_rendering")]
        FontAscenderBitNV = 0x00200000,

        [GLExtension("GL_NV_path_rendering")]
        FontDescenderBitNV = 0x00400000,

        [GLExtension("GL_NV_path_rendering")]
        FontHeightBitNV = 0x00800000,

        [GLExtension("GL_NV_path_rendering")]
        FontMaxAdvanceWidthBitNV = 0x01000000,

        [GLExtension("GL_NV_path_rendering")]
        FontMaxAdvanceHeightBitNV = 0x02000000,

        [GLExtension("GL_NV_path_rendering")]
        FontUnderlinePositionBitNV = 0x04000000,

        [GLExtension("GL_NV_path_rendering")]
        FontUnderlineThicknessBitNV = 0x08000000,

        [GLExtension("GL_NV_path_rendering")]
        FontHasKerningBitNV = 0x10000000,

        [GLExtension("GL_NV_path_rendering")]
        FontNumGlyphIndicesBitNV = 0x20000000,
    }

    [Flags]
    public enum PerformanceQueryCapsMaskINTEL : uint
    {

        [GLExtension("GL_INTEL_performance_query")]
        PerfquerySingleContextINTEL = 0x00000000,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryGlobalContextINTEL = 0x00000001,
    }

    [Flags]
    public enum VertexHintsMaskPGI : uint
    {

        [GLExtension("GL_PGI_vertex_hints")]
        Vertex23BitPGI = 0x00000004,

        [GLExtension("GL_PGI_vertex_hints")]
        Vertex4BitPGI = 0x00000008,

        [GLExtension("GL_PGI_vertex_hints")]
        Color3BitPGI = 0x00010000,

        [GLExtension("GL_PGI_vertex_hints")]
        Color4BitPGI = 0x00020000,

        [GLExtension("GL_PGI_vertex_hints")]
        EdgeflagBitPGI = 0x00040000,

        [GLExtension("GL_PGI_vertex_hints")]
        IndexBitPGI = 0x00080000,

        [GLExtension("GL_PGI_vertex_hints")]
        MatAmbientBitPGI = 0x00100000,

        [GLExtension("GL_PGI_vertex_hints")]
        MatAmbientAndDiffuseBitPGI = 0x00200000,

        [GLExtension("GL_PGI_vertex_hints")]
        MatDiffuseBitPGI = 0x00400000,

        [GLExtension("GL_PGI_vertex_hints")]
        MatEmissionBitPGI = 0x00800000,

        [GLExtension("GL_PGI_vertex_hints")]
        MatColorIndexesBitPGI = 0x01000000,

        [GLExtension("GL_PGI_vertex_hints")]
        MatShininessBitPGI = 0x02000000,

        [GLExtension("GL_PGI_vertex_hints")]
        MatSpecularBitPGI = 0x04000000,

        [GLExtension("GL_PGI_vertex_hints")]
        NormalBitPGI = 0x08000000,

        [GLExtension("GL_PGI_vertex_hints")]
        Texcoord1BitPGI = 0x10000000,

        [GLExtension("GL_PGI_vertex_hints")]
        Texcoord2BitPGI = 0x20000000,

        [GLExtension("GL_PGI_vertex_hints")]
        Texcoord3BitPGI = 0x40000000,

        [GLExtension("GL_PGI_vertex_hints")]
        Texcoord4BitPGI = 0x80000000,
    }

    [Flags]
    public enum BufferBitQCOM : uint
    {

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit0QCOM = 0x00000001,

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit1QCOM = 0x00000002,

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit2QCOM = 0x00000004,

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit3QCOM = 0x00000008,

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit4QCOM = 0x00000010,

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit5QCOM = 0x00000020,

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit6QCOM = 0x00000040,

        [GLExtension("GL_QCOM_tiled_rendering")]
        ColorBufferBit7QCOM = 0x00000080,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit0QCOM = 0x00000100,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit1QCOM = 0x00000200,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit2QCOM = 0x00000400,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit3QCOM = 0x00000800,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit4QCOM = 0x00001000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit5QCOM = 0x00002000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit6QCOM = 0x00004000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        DepthBufferBit7QCOM = 0x00008000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit0QCOM = 0x00010000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit1QCOM = 0x00020000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit2QCOM = 0x00040000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit3QCOM = 0x00080000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit4QCOM = 0x00100000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit5QCOM = 0x00200000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit6QCOM = 0x00400000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        StencilBufferBit7QCOM = 0x00800000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit0QCOM = 0x01000000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit1QCOM = 0x02000000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit2QCOM = 0x04000000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit3QCOM = 0x08000000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit4QCOM = 0x10000000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit5QCOM = 0x20000000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit6QCOM = 0x40000000,

        [GLExtension("GL_QCOM_tiled_rendering")]
        MultisampleBufferBit7QCOM = 0x80000000,
    }

    [Flags]
    public enum FoveationConfigBitQCOM : uint
    {

        [GLExtension("GL_QCOM_framebuffer_foveated")]
        FoveationEnableBitQCOM = 0x00000001,

        [GLExtension("GL_QCOM_framebuffer_foveated")]
        FoveationScaledBinMethodBitQCOM = 0x00000002,

        [GLExtension("GL_QCOM_texture_foveated_subsampled_layout")]
        FoveationSubsampledLayoutMethodBitQCOM = 0x00000004,
    }

    [Flags]
    public enum FfdMaskSGIX : uint
    {

        [GLExtension("GL_SGIX_polynomial_ffd")]
        TextureDeformationBitSGIX = 0x00000001,

        [GLExtension("GL_SGIX_polynomial_ffd")]
        GeometryDeformationBitSGIX = 0x00000002,
    }

    public enum CommandOpcodesNV
    {

        [GLExtension("GL_NV_command_list")]
        TerminateSequenceCommandNV = 0x0000,

        [GLExtension("GL_NV_command_list")]
        NopCommandNV = 0x0001,

        [GLExtension("GL_NV_command_list")]
        DrawElementsCommandNV = 0x0002,

        [GLExtension("GL_NV_command_list")]
        DrawArraysCommandNV = 0x0003,

        [GLExtension("GL_NV_command_list")]
        DrawElementsStripCommandNV = 0x0004,

        [GLExtension("GL_NV_command_list")]
        DrawArraysStripCommandNV = 0x0005,

        [GLExtension("GL_NV_command_list")]
        DrawElementsInstancedCommandNV = 0x0006,

        [GLExtension("GL_NV_command_list")]
        DrawArraysInstancedCommandNV = 0x0007,

        [GLExtension("GL_NV_command_list")]
        ElementAddressCommandNV = 0x0008,

        [GLExtension("GL_NV_command_list")]
        AttributeAddressCommandNV = 0x0009,

        [GLExtension("GL_NV_command_list")]
        UniformAddressCommandNV = 0x000A,

        [GLExtension("GL_NV_command_list")]
        BlendColorCommandNV = 0x000B,

        [GLExtension("GL_NV_command_list")]
        StencilRefCommandNV = 0x000C,

        [GLExtension("GL_NV_command_list")]
        LineWidthCommandNV = 0x000D,

        [GLExtension("GL_NV_command_list")]
        PolygonOffsetCommandNV = 0x000E,

        [GLExtension("GL_NV_command_list")]
        AlphaRefCommandNV = 0x000F,

        [GLExtension("GL_NV_command_list")]
        ViewportCommandNV = 0x0010,

        [GLExtension("GL_NV_command_list")]
        ScissorCommandNV = 0x0011,

        [GLExtension("GL_NV_command_list")]
        FrontFaceCommandNV = 0x0012,
    }

    public enum MapTextureFormatINTEL
    {

        [GLExtension("GL_INTEL_map_texture")]
        LayoutDefaultINTEL = 0,

        [GLExtension("GL_INTEL_map_texture")]
        LayoutLinearINTEL = 1,

        [GLExtension("GL_INTEL_map_texture")]
        LayoutLinearCpuCachedINTEL = 2,
    }

    public enum PathRenderingTokenNV
    {

        [GLExtension("GL_NV_path_rendering")]
        ClosePathNV = 0x00,

        [GLExtension("GL_NV_path_rendering")]
        MoveToNV = 0x02,

        [GLExtension("GL_NV_path_rendering")]
        RelativeMoveToNV = 0x03,

        [GLExtension("GL_NV_path_rendering")]
        LineToNV = 0x04,

        [GLExtension("GL_NV_path_rendering")]
        RelativeLineToNV = 0x05,

        [GLExtension("GL_NV_path_rendering")]
        HorizontalLineToNV = 0x06,

        [GLExtension("GL_NV_path_rendering")]
        RelativeHorizontalLineToNV = 0x07,

        [GLExtension("GL_NV_path_rendering")]
        VerticalLineToNV = 0x08,

        [GLExtension("GL_NV_path_rendering")]
        RelativeVerticalLineToNV = 0x09,

        [GLExtension("GL_NV_path_rendering")]
        QuadraticCurveToNV = 0x0A,

        [GLExtension("GL_NV_path_rendering")]
        RelativeQuadraticCurveToNV = 0x0B,

        [GLExtension("GL_NV_path_rendering")]
        CubicCurveToNV = 0x0C,

        [GLExtension("GL_NV_path_rendering")]
        RelativeCubicCurveToNV = 0x0D,

        [GLExtension("GL_NV_path_rendering")]
        SmoothQuadraticCurveToNV = 0x0E,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmoothQuadraticCurveToNV = 0x0F,

        [GLExtension("GL_NV_path_rendering")]
        SmoothCubicCurveToNV = 0x10,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmoothCubicCurveToNV = 0x11,

        [GLExtension("GL_NV_path_rendering")]
        SmallCcwArcToNV = 0x12,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmallCcwArcToNV = 0x13,

        [GLExtension("GL_NV_path_rendering")]
        SmallCwArcToNV = 0x14,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmallCwArcToNV = 0x15,

        [GLExtension("GL_NV_path_rendering")]
        LargeCcwArcToNV = 0x16,

        [GLExtension("GL_NV_path_rendering")]
        RelativeLargeCcwArcToNV = 0x17,

        [GLExtension("GL_NV_path_rendering")]
        LargeCwArcToNV = 0x18,

        [GLExtension("GL_NV_path_rendering")]
        RelativeLargeCwArcToNV = 0x19,

        [GLExtension("GL_NV_path_rendering")]
        ConicCurveToNV = 0x1A,

        [GLExtension("GL_NV_path_rendering")]
        RelativeConicCurveToNV = 0x1B,

        [GLExtension("GL_NV_path_rendering_shared_edge")]
        SharedEdgeNV = 0xC0,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRectNV = 0xE8,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRectNV = 0xE9,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRect2NV = 0xEA,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRect2NV = 0xEB,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRect4NV = 0xEC,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRect4NV = 0xED,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRect8NV = 0xEE,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRect8NV = 0xEF,

        [GLExtension("GL_NV_path_rendering")]
        RestartPathNV = 0xF0,

        [GLExtension("GL_NV_path_rendering")]
        DupFirstCubicCurveToNV = 0xF2,

        [GLExtension("GL_NV_path_rendering")]
        DupLastCubicCurveToNV = 0xF4,

        [GLExtension("GL_NV_path_rendering")]
        RectNV = 0xF6,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRectNV = 0xF7,

        [GLExtension("GL_NV_path_rendering")]
        CircularCcwArcToNV = 0xF8,

        [GLExtension("GL_NV_path_rendering")]
        CircularCwArcToNV = 0xFA,

        [GLExtension("GL_NV_path_rendering")]
        CircularTangentArcToNV = 0xFC,

        [GLExtension("GL_NV_path_rendering")]
        ArcToNV = 0xFE,

        [GLExtension("GL_NV_path_rendering")]
        RelativeArcToNV = 0xFF,
    }

    public enum PathCoordType
    {

        [GLExtension("GL_NV_path_rendering")]
        ClosePathNV = 0x00,

        [GLExtension("GL_NV_path_rendering")]
        MoveToNV = 0x02,

        [GLExtension("GL_NV_path_rendering")]
        RelativeMoveToNV = 0x03,

        [GLExtension("GL_NV_path_rendering")]
        LineToNV = 0x04,

        [GLExtension("GL_NV_path_rendering")]
        RelativeLineToNV = 0x05,

        [GLExtension("GL_NV_path_rendering")]
        HorizontalLineToNV = 0x06,

        [GLExtension("GL_NV_path_rendering")]
        RelativeHorizontalLineToNV = 0x07,

        [GLExtension("GL_NV_path_rendering")]
        VerticalLineToNV = 0x08,

        [GLExtension("GL_NV_path_rendering")]
        RelativeVerticalLineToNV = 0x09,

        [GLExtension("GL_NV_path_rendering")]
        QuadraticCurveToNV = 0x0A,

        [GLExtension("GL_NV_path_rendering")]
        RelativeQuadraticCurveToNV = 0x0B,

        [GLExtension("GL_NV_path_rendering")]
        CubicCurveToNV = 0x0C,

        [GLExtension("GL_NV_path_rendering")]
        RelativeCubicCurveToNV = 0x0D,

        [GLExtension("GL_NV_path_rendering")]
        SmoothQuadraticCurveToNV = 0x0E,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmoothQuadraticCurveToNV = 0x0F,

        [GLExtension("GL_NV_path_rendering")]
        SmoothCubicCurveToNV = 0x10,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmoothCubicCurveToNV = 0x11,

        [GLExtension("GL_NV_path_rendering")]
        SmallCcwArcToNV = 0x12,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmallCcwArcToNV = 0x13,

        [GLExtension("GL_NV_path_rendering")]
        SmallCwArcToNV = 0x14,

        [GLExtension("GL_NV_path_rendering")]
        RelativeSmallCwArcToNV = 0x15,

        [GLExtension("GL_NV_path_rendering")]
        LargeCcwArcToNV = 0x16,

        [GLExtension("GL_NV_path_rendering")]
        RelativeLargeCcwArcToNV = 0x17,

        [GLExtension("GL_NV_path_rendering")]
        LargeCwArcToNV = 0x18,

        [GLExtension("GL_NV_path_rendering")]
        RelativeLargeCwArcToNV = 0x19,

        [GLExtension("GL_NV_path_rendering")]
        ConicCurveToNV = 0x1A,

        [GLExtension("GL_NV_path_rendering")]
        RelativeConicCurveToNV = 0x1B,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRectNV = 0xE8,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRectNV = 0xE9,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRect2NV = 0xEA,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRect2NV = 0xEB,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRect4NV = 0xEC,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRect4NV = 0xED,

        [GLExtension("GL_NV_path_rendering")]
        RoundedRect8NV = 0xEE,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRoundedRect8NV = 0xEF,

        [GLExtension("GL_NV_path_rendering")]
        RestartPathNV = 0xF0,

        [GLExtension("GL_NV_path_rendering")]
        DupFirstCubicCurveToNV = 0xF2,

        [GLExtension("GL_NV_path_rendering")]
        DupLastCubicCurveToNV = 0xF4,

        [GLExtension("GL_NV_path_rendering")]
        RectNV = 0xF6,

        [GLExtension("GL_NV_path_rendering")]
        RelativeRectNV = 0xF7,

        [GLExtension("GL_NV_path_rendering")]
        CircularCcwArcToNV = 0xF8,

        [GLExtension("GL_NV_path_rendering")]
        CircularCwArcToNV = 0xFA,

        [GLExtension("GL_NV_path_rendering")]
        CircularTangentArcToNV = 0xFC,

        [GLExtension("GL_NV_path_rendering")]
        ArcToNV = 0xFE,

        [GLExtension("GL_NV_path_rendering")]
        RelativeArcToNV = 0xFF,
    }

    public enum TransformFeedbackTokenNV
    {

        [GLExtension("GL_NV_transform_feedback")]
        NextBufferNV = -2,

        [GLExtension("GL_NV_transform_feedback")]
        SkipComponents4NV = -3,

        [GLExtension("GL_NV_transform_feedback")]
        SkipComponents3NV = -4,

        [GLExtension("GL_NV_transform_feedback")]
        SkipComponents2NV = -5,

        [GLExtension("GL_NV_transform_feedback")]
        SkipComponents1NV = -6,
    }

    public enum TriangleListSUN
    {

        [GLExtension("GL_SUN_triangle_list")]
        RestartSUN = 0x0001,

        [GLExtension("GL_SUN_triangle_list")]
        ReplaceMiddleSUN = 0x0002,

        [GLExtension("GL_SUN_triangle_list")]
        ReplaceOldestSUN = 0x0003,
    }

    public enum Boolean
    {
        False = 0,
        True = 1,
    }

    public enum VertexShaderWriteMaskEXT
    {
        False = 0,
        True = 1,
    }

    public enum ClampColorModeARB
    {
        False = 0,
        True = 1,
        FixedOnly = 0x891D,

        [GLExtension("GL_ARB_color_buffer_float")]
        FixedOnlyARB = 0x891D,
    }

    public enum GraphicsResetStatus
    {

        [GLExtension("GL_ARB_robustness")]
        NoError = 0,

        [GLExtension("GL_KHR_robustness")]
        GuiltyContextReset = 0x8253,

        [GLExtension("GL_KHR_robustness")]
        InnocentContextReset = 0x8254,

        [GLExtension("GL_KHR_robustness")]
        UnknownContextReset = 0x8255,
    }

    public enum ErrorCode
    {

        [GLExtension("GL_ARB_robustness")]
        NoError = 0,
        InvalidEnum = 0x0500,
        InvalidValue = 0x0501,
        InvalidOperation = 0x0502,

        [GLExtension("GL_KHR_debug")]
        StackOverflow = 0x0503,

        [GLExtension("GL_KHR_debug")]
        StackUnderflow = 0x0504,
        OutOfMemory = 0x0505,

        [GLExtension("GL_ARB_framebuffer_object")]
        InvalidFramebufferOperation = 0x0506,

        [GLExtension("GL_EXT_framebuffer_object")]
        InvalidFramebufferOperationEXT = 0x0506,

        [GLExtension("GL_OES_framebuffer_object")]
        InvalidFramebufferOperationOES = 0x0506,

        [GLExtension("GL_EXT_histogram")]
        TableTooLargeEXT = 0x8031,

        [GLExtension("GL_ARB_imaging")]
        TableTooLarge = 0x8031,

        [GLExtension("GL_EXT_texture")]
        TextureTooLargeEXT = 0x8065,
    }

    public enum TextureSwizzle
    {

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        Zero = 0,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        One = 1,

        [GLExtension("GL_AMD_interleaved_elements")]
        Red = 0x1903,

        [GLExtension("GL_AMD_interleaved_elements")]
        Green = 0x1904,

        [GLExtension("GL_AMD_interleaved_elements")]
        Blue = 0x1905,

        [GLExtension("GL_AMD_interleaved_elements")]
        Alpha = 0x1906,
    }

    public enum StencilOp
    {

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        Zero = 0,

        [GLExtension("GL_NV_blend_equation_advanced")]
        Invert = 0x150A,
        Keep = 0x1E00,
        Replace = 0x1E01,
        Incr = 0x1E02,
        Decr = 0x1E03,
        IncrWrap = 0x8507,
        DecrWrap = 0x8508,
    }

    public enum BlendingFactor
    {

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        Zero = 0,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        One = 1,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        SrcColor = 0x0300,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        OneMinusSrcColor = 0x0301,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        SrcAlpha = 0x0302,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        OneMinusSrcAlpha = 0x0303,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        DstAlpha = 0x0304,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        OneMinusDstAlpha = 0x0305,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        DstColor = 0x0306,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        OneMinusDstColor = 0x0307,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        SrcAlphaSaturate = 0x0308,

        [GLExtension("GL_ARB_imaging")]
        ConstantColor = 0x8001,

        [GLExtension("GL_ARB_imaging")]
        OneMinusConstantColor = 0x8002,

        [GLExtension("GL_ARB_imaging")]
        ConstantAlpha = 0x8003,

        [GLExtension("GL_ARB_imaging")]
        OneMinusConstantAlpha = 0x8004,

        [GLExtension("GL_ARB_blend_func_extended")]
        Src1Alpha = 0x8589,

        [GLExtension("GL_ARB_blend_func_extended")]
        Src1Color = 0x88F9,

        [GLExtension("GL_ARB_blend_func_extended")]
        OneMinusSrc1Color = 0x88FA,

        [GLExtension("GL_ARB_blend_func_extended")]
        OneMinusSrc1Alpha = 0x88FB,
    }

    public enum FragmentShaderGenericSourceATI
    {

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        Zero = 0,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        One = 1,

        [GLExtension("GL_NV_path_rendering")]
        PrimaryColor = 0x8577,

        [GLExtension("GL_ARB_texture_env_combine")]
        PrimaryColorARB = 0x8577,

        [GLExtension("GL_EXT_texture_env_combine")]
        PrimaryColorEXT = 0x8577,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg0ATI = 0x8921,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg1ATI = 0x8922,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg2ATI = 0x8923,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg3ATI = 0x8924,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg4ATI = 0x8925,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg5ATI = 0x8926,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg6ATI = 0x8927,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg7ATI = 0x8928,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg8ATI = 0x8929,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg9ATI = 0x892A,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg10ATI = 0x892B,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg11ATI = 0x892C,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg12ATI = 0x892D,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg13ATI = 0x892E,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg14ATI = 0x892F,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg15ATI = 0x8930,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg16ATI = 0x8931,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg17ATI = 0x8932,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg18ATI = 0x8933,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg19ATI = 0x8934,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg20ATI = 0x8935,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg21ATI = 0x8936,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg22ATI = 0x8937,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg23ATI = 0x8938,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg24ATI = 0x8939,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg25ATI = 0x893A,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg26ATI = 0x893B,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg27ATI = 0x893C,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg28ATI = 0x893D,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg29ATI = 0x893E,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg30ATI = 0x893F,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg31ATI = 0x8940,

        [GLExtension("GL_ATI_fragment_shader")]
        Con0ATI = 0x8941,

        [GLExtension("GL_ATI_fragment_shader")]
        Con1ATI = 0x8942,

        [GLExtension("GL_ATI_fragment_shader")]
        Con2ATI = 0x8943,

        [GLExtension("GL_ATI_fragment_shader")]
        Con3ATI = 0x8944,

        [GLExtension("GL_ATI_fragment_shader")]
        Con4ATI = 0x8945,

        [GLExtension("GL_ATI_fragment_shader")]
        Con5ATI = 0x8946,

        [GLExtension("GL_ATI_fragment_shader")]
        Con6ATI = 0x8947,

        [GLExtension("GL_ATI_fragment_shader")]
        Con7ATI = 0x8948,

        [GLExtension("GL_ATI_fragment_shader")]
        Con8ATI = 0x8949,

        [GLExtension("GL_ATI_fragment_shader")]
        Con9ATI = 0x894A,

        [GLExtension("GL_ATI_fragment_shader")]
        Con10ATI = 0x894B,

        [GLExtension("GL_ATI_fragment_shader")]
        Con11ATI = 0x894C,

        [GLExtension("GL_ATI_fragment_shader")]
        Con12ATI = 0x894D,

        [GLExtension("GL_ATI_fragment_shader")]
        Con13ATI = 0x894E,

        [GLExtension("GL_ATI_fragment_shader")]
        Con14ATI = 0x894F,

        [GLExtension("GL_ATI_fragment_shader")]
        Con15ATI = 0x8950,

        [GLExtension("GL_ATI_fragment_shader")]
        Con16ATI = 0x8951,

        [GLExtension("GL_ATI_fragment_shader")]
        Con17ATI = 0x8952,

        [GLExtension("GL_ATI_fragment_shader")]
        Con18ATI = 0x8953,

        [GLExtension("GL_ATI_fragment_shader")]
        Con19ATI = 0x8954,

        [GLExtension("GL_ATI_fragment_shader")]
        Con20ATI = 0x8955,

        [GLExtension("GL_ATI_fragment_shader")]
        Con21ATI = 0x8956,

        [GLExtension("GL_ATI_fragment_shader")]
        Con22ATI = 0x8957,

        [GLExtension("GL_ATI_fragment_shader")]
        Con23ATI = 0x8958,

        [GLExtension("GL_ATI_fragment_shader")]
        Con24ATI = 0x8959,

        [GLExtension("GL_ATI_fragment_shader")]
        Con25ATI = 0x895A,

        [GLExtension("GL_ATI_fragment_shader")]
        Con26ATI = 0x895B,

        [GLExtension("GL_ATI_fragment_shader")]
        Con27ATI = 0x895C,

        [GLExtension("GL_ATI_fragment_shader")]
        Con28ATI = 0x895D,

        [GLExtension("GL_ATI_fragment_shader")]
        Con29ATI = 0x895E,

        [GLExtension("GL_ATI_fragment_shader")]
        Con30ATI = 0x895F,

        [GLExtension("GL_ATI_fragment_shader")]
        Con31ATI = 0x8960,

        [GLExtension("GL_ATI_fragment_shader")]
        SecondaryInterpolatorATI = 0x896D,
    }

    public enum FragmentShaderValueRepATI
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_AMD_interleaved_elements")]
        Red = 0x1903,

        [GLExtension("GL_AMD_interleaved_elements")]
        Green = 0x1904,

        [GLExtension("GL_AMD_interleaved_elements")]
        Blue = 0x1905,

        [GLExtension("GL_AMD_interleaved_elements")]
        Alpha = 0x1906,
    }

    public enum SyncBehaviorFlags
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,
    }

    public enum TextureCompareMode
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,
        CompareRToTexture = 0x884E,
        CompareRefToTexture = 0x884E,
    }

    public enum PathColorFormat
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_AMD_interleaved_elements")]
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,
        Intensity = 0x8049,
    }

    public enum CombinerBiasNV
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_NV_register_combiners")]
        BiasByNegativeOneHalfNV = 0x8541,
    }

    public enum CombinerScaleNV
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_NV_register_combiners")]
        ScaleByTwoNV = 0x853E,

        [GLExtension("GL_NV_register_combiners")]
        ScaleByFourNV = 0x853F,

        [GLExtension("GL_NV_register_combiners")]
        ScaleByOneHalfNV = 0x8540,
    }

    public enum DrawBufferMode
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_OES_framebuffer_object")]
        NoneOES = 0,
        FrontLeft = 0x0400,
        FrontRight = 0x0401,
        BackLeft = 0x0402,
        BackRight = 0x0403,
        Front = 0x0404,

        [GLExtension("GL_ARB_ES3_1_compatibility")]
        Back = 0x0405,
        Left = 0x0406,
        Right = 0x0407,
        FrontAndBack = 0x0408,
        Aux0 = 0x0409,
        Aux1 = 0x040A,
        Aux2 = 0x040B,
        Aux3 = 0x040C,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment0 = 0x8CE0,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment0NV = 0x8CE0,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment1 = 0x8CE1,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment1NV = 0x8CE1,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment2 = 0x8CE2,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment2NV = 0x8CE2,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment3 = 0x8CE3,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment3NV = 0x8CE3,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment4 = 0x8CE4,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment4NV = 0x8CE4,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment5 = 0x8CE5,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment5NV = 0x8CE5,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment6 = 0x8CE6,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment6NV = 0x8CE6,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment7 = 0x8CE7,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment7NV = 0x8CE7,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment8 = 0x8CE8,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment8NV = 0x8CE8,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment9 = 0x8CE9,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment9NV = 0x8CE9,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment10 = 0x8CEA,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment10NV = 0x8CEA,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment11 = 0x8CEB,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment11NV = 0x8CEB,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment12 = 0x8CEC,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment12NV = 0x8CEC,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment13 = 0x8CED,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment13NV = 0x8CED,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment14 = 0x8CEE,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment14NV = 0x8CEE,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment15 = 0x8CEF,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment15NV = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }

    public enum PixelTexGenModeSGIX
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_AMD_interleaved_elements")]
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        PixelTexGenQCeilingSGIX = 0x8184,
        PixelTexGenQRoundSGIX = 0x8185,
        PixelTexGenQFloorSGIX = 0x8186,
        PixelTexGenAlphaLsSGIX = 0x8189,
        PixelTexGenAlphaMsSGIX = 0x818A,
    }

    public enum ReadBufferMode
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_OES_framebuffer_object")]
        NoneOES = 0,
        FrontLeft = 0x0400,
        FrontRight = 0x0401,
        BackLeft = 0x0402,
        BackRight = 0x0403,
        Front = 0x0404,

        [GLExtension("GL_ARB_ES3_1_compatibility")]
        Back = 0x0405,
        Left = 0x0406,
        Right = 0x0407,
        Aux0 = 0x0409,
        Aux1 = 0x040A,
        Aux2 = 0x040B,
        Aux3 = 0x040C,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment0 = 0x8CE0,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment1 = 0x8CE1,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment2 = 0x8CE2,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment3 = 0x8CE3,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment4 = 0x8CE4,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment5 = 0x8CE5,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment6 = 0x8CE6,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment7 = 0x8CE7,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment8 = 0x8CE8,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment9 = 0x8CE9,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment10 = 0x8CEA,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment11 = 0x8CEB,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment12 = 0x8CEC,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment13 = 0x8CED,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment14 = 0x8CEE,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment15 = 0x8CEF,
    }

    public enum ColorBuffer
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,
        FrontLeft = 0x0400,
        FrontRight = 0x0401,
        BackLeft = 0x0402,
        BackRight = 0x0403,
        Front = 0x0404,

        [GLExtension("GL_ARB_ES3_1_compatibility")]
        Back = 0x0405,
        Left = 0x0406,
        Right = 0x0407,
        FrontAndBack = 0x0408,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment0 = 0x8CE0,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment1 = 0x8CE1,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment2 = 0x8CE2,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment3 = 0x8CE3,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment4 = 0x8CE4,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment5 = 0x8CE5,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment6 = 0x8CE6,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment7 = 0x8CE7,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment8 = 0x8CE8,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment9 = 0x8CE9,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment10 = 0x8CEA,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment11 = 0x8CEB,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment12 = 0x8CEC,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment13 = 0x8CED,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment14 = 0x8CEE,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,
    }

    public enum PathGenMode
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,
        EyeLinear = 0x2400,
        ObjectLinear = 0x2401,
        Constant = 0x8576,

        [GLExtension("GL_NV_path_rendering")]
        PathObjectBoundingBoxNV = 0x908A,
    }

    public enum PathTransformType
    {

        [GLExtension("GL_KHR_context_flush_control")]
        None = 0,

        [GLExtension("GL_NV_path_rendering")]
        TranslateXNV = 0x908E,

        [GLExtension("GL_NV_path_rendering")]
        TranslateYNV = 0x908F,

        [GLExtension("GL_NV_path_rendering")]
        Translate2DNV = 0x9090,

        [GLExtension("GL_NV_path_rendering")]
        Translate3DNV = 0x9091,

        [GLExtension("GL_NV_path_rendering")]
        Affine2DNV = 0x9092,

        [GLExtension("GL_NV_path_rendering")]
        Affine3DNV = 0x9094,

        [GLExtension("GL_NV_path_rendering")]
        TransposeAffine2DNV = 0x9096,

        [GLExtension("GL_NV_path_rendering")]
        TransposeAffine3DNV = 0x9098,
    }

    public enum PrimitiveType
    {
        Points = 0x0000,
        Lines = 0x0001,
        LineLoop = 0x0002,
        LineStrip = 0x0003,

        [GLExtension("GL_ARB_tessellation_shader")]
        Triangles = 0x0004,
        TriangleStrip = 0x0005,
        TriangleFan = 0x0006,

        [GLExtension("GL_ARB_tessellation_shader")]
        Quads = 0x0007,

        [GLExtension("GL_EXT_tessellation_shader")]
        QuadsEXT = 0x0007,
        QuadStrip = 0x0008,
        Polygon = 0x0009,
        LinesAdjacency = 0x000A,

        [GLExtension("GL_ARB_geometry_shader4")]
        LinesAdjacencyARB = 0x000A,

        [GLExtension("GL_EXT_geometry_shader")]
        LinesAdjacencyEXT = 0x000A,
        LineStripAdjacency = 0x000B,

        [GLExtension("GL_ARB_geometry_shader4")]
        LineStripAdjacencyARB = 0x000B,

        [GLExtension("GL_EXT_geometry_shader")]
        LineStripAdjacencyEXT = 0x000B,
        TrianglesAdjacency = 0x000C,

        [GLExtension("GL_ARB_geometry_shader4")]
        TrianglesAdjacencyARB = 0x000C,

        [GLExtension("GL_EXT_geometry_shader")]
        TrianglesAdjacencyEXT = 0x000C,
        TriangleStripAdjacency = 0x000D,

        [GLExtension("GL_ARB_geometry_shader4")]
        TriangleStripAdjacencyARB = 0x000D,

        [GLExtension("GL_EXT_geometry_shader")]
        TriangleStripAdjacencyEXT = 0x000D,

        [GLExtension("GL_ARB_tessellation_shader")]
        Patches = 0x000E,

        [GLExtension("GL_EXT_tessellation_shader")]
        PatchesEXT = 0x000E,
    }

    public enum Constants
    {

        [GLExtension("GL_OES_tessellation_shader")]
        QuadsOES = 0x0007,

        [GLExtension("GL_OES_geometry_shader")]
        LinesAdjacencyOES = 0x000A,

        [GLExtension("GL_OES_geometry_shader")]
        LineStripAdjacencyOES = 0x000B,

        [GLExtension("GL_OES_geometry_shader")]
        TrianglesAdjacencyOES = 0x000C,

        [GLExtension("GL_OES_geometry_shader")]
        TriangleStripAdjacencyOES = 0x000D,

        [GLExtension("GL_OES_tessellation_shader")]
        PatchesOES = 0x000E,

        [GLExtension("GL_EXT_blend_func_extended")]
        SrcAlphaSaturateEXT = 0x0308,

        [GLExtension("GL_KHR_debug")]
        StackOverflowKhr = 0x0503,

        [GLExtension("GL_KHR_debug")]
        StackUnderflowKhr = 0x0504,

        [GLExtension("GL_KHR_robustness")]
        ContextLost = 0x0507,

        [GLExtension("GL_KHR_robustness")]
        ContextLostKhr = 0x0507,

        [GLExtension("GL_NV_polygon_mode")]
        PolygonModeNV = 0x0B40,

        [GLExtension("GL_NV_path_rendering")]
        PathModelviewStackDepthNV = 0x0BA3,

        [GLExtension("GL_NV_path_rendering")]
        PathProjectionStackDepthNV = 0x0BA4,

        [GLExtension("GL_NV_path_rendering")]
        PathModelviewMatrixNV = 0x0BA6,

        [GLExtension("GL_NV_path_rendering")]
        PathProjectionMatrixNV = 0x0BA7,

        [GLExtension("GL_IMG_user_clip_plane")]
        MaxClipPlanesImg = 0x0D32,

        [GLExtension("GL_EXT_clip_cull_distance")]
        MaxClipDistancesEXT = 0x0D32,

        [GLExtension("GL_APPLE_clip_distance")]
        MaxClipDistancesAPPLE = 0x0D32,

        [GLExtension("GL_NV_path_rendering")]
        PathMaxModelviewStackDepthNV = 0x0D36,

        [GLExtension("GL_NV_path_rendering")]
        PathMaxProjectionStackDepthNV = 0x0D38,

        [GLExtension("GL_EXT_texture_border_clamp")]
        TextureBorderColorEXT = 0x1004,

        [GLExtension("GL_OES_texture_border_clamp")]
        TextureBorderColorOES = 0x1004,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureTarget = 0x1006,

        [GLExtension("GL_NV_path_rendering")]
        2BytesNV = 0x1407,

        [GLExtension("GL_NV_path_rendering")]
        3BytesNV = 0x1408,

        [GLExtension("GL_NV_path_rendering")]
        4BytesNV = 0x1409,

        [GLExtension("GL_OES_fixed_point")]
        FixedOES = 0x140C,

        [GLExtension("GL_NV_blend_equation_advanced")]
        XorNV = 0x1506,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview0ARB = 0x1700,

        [GLExtension("GL_NV_path_rendering")]
        PathModelviewNV = 0x1700,

        [GLExtension("GL_NV_path_rendering")]
        PathProjectionNV = 0x1701,

        [GLExtension("GL_NV_blend_equation_advanced")]
        RedNV = 0x1903,

        [GLExtension("GL_NV_blend_equation_advanced")]
        GreenNV = 0x1904,

        [GLExtension("GL_NV_blend_equation_advanced")]
        BlueNV = 0x1905,

        [GLExtension("GL_NV_polygon_mode")]
        PointNV = 0x1B00,

        [GLExtension("GL_NV_polygon_mode")]
        LineNV = 0x1B01,

        [GLExtension("GL_NV_path_rendering")]
        EyeLinearNV = 0x2400,

        [GLExtension("GL_NV_path_rendering")]
        ObjectLinearNV = 0x2401,

        [GLExtension("GL_NV_polygon_mode")]
        PolygonOffsetPointNV = 0x2A01,

        [GLExtension("GL_NV_polygon_mode")]
        PolygonOffsetLineNV = 0x2A02,

        [GLExtension("GL_IMG_user_clip_plane")]
        ClipPlane0Img = 0x3000,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance0EXT = 0x3000,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance0APPLE = 0x3000,

        [GLExtension("GL_IMG_user_clip_plane")]
        ClipPlane1Img = 0x3001,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance1EXT = 0x3001,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance1APPLE = 0x3001,

        [GLExtension("GL_IMG_user_clip_plane")]
        ClipPlane2Img = 0x3002,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance2EXT = 0x3002,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance2APPLE = 0x3002,

        [GLExtension("GL_IMG_user_clip_plane")]
        ClipPlane3Img = 0x3003,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance3EXT = 0x3003,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance3APPLE = 0x3003,

        [GLExtension("GL_IMG_user_clip_plane")]
        ClipPlane4Img = 0x3004,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance4EXT = 0x3004,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance4APPLE = 0x3004,

        [GLExtension("GL_IMG_user_clip_plane")]
        ClipPlane5Img = 0x3005,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance5EXT = 0x3005,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance5APPLE = 0x3005,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance6EXT = 0x3006,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance6APPLE = 0x3006,

        [GLExtension("GL_EXT_clip_cull_distance")]
        ClipDistance7EXT = 0x3007,

        [GLExtension("GL_APPLE_clip_distance")]
        ClipDistance7APPLE = 0x3007,

        [GLExtension("GL_EXT_blend_color")]
        ConstantColorEXT = 0x8001,

        [GLExtension("GL_EXT_blend_color")]
        OneMinusConstantColorEXT = 0x8002,

        [GLExtension("GL_EXT_blend_color")]
        ConstantAlphaEXT = 0x8003,

        [GLExtension("GL_EXT_blend_color")]
        OneMinusConstantAlphaEXT = 0x8004,

        [GLExtension("GL_OES_blend_subtract")]
        FuncAddOES = 0x8006,

        [GLExtension("GL_EXT_blend_equation_separate")]
        BlendEquationRgbEXT = 0x8009,

        [GLExtension("GL_OES_blend_equation_separate")]
        BlendEquationRgbOES = 0x8009,

        [GLExtension("GL_OES_blend_subtract")]
        FuncSubtractOES = 0x800A,

        [GLExtension("GL_OES_blend_subtract")]
        FuncReverseSubtractOES = 0x800B,

        [GLExtension("GL_EXT_polygon_offset")]
        PolygonOffsetEXT = 0x8037,

        [GLExtension("GL_EXT_polygon_offset")]
        PolygonOffsetFactorEXT = 0x8038,
        RescaleNormal = 0x803A,

        [GLExtension("GL_EXT_texture")]
        IntensityEXT = 0x8049,

        [GLExtension("GL_EXT_texture")]
        TextureRedSizeEXT = 0x805C,

        [GLExtension("GL_EXT_texture")]
        TextureGreenSizeEXT = 0x805D,

        [GLExtension("GL_EXT_texture")]
        TextureBlueSizeEXT = 0x805E,

        [GLExtension("GL_EXT_texture")]
        TextureAlphaSizeEXT = 0x805F,

        [GLExtension("GL_EXT_texture")]
        TextureLuminanceSizeEXT = 0x8060,

        [GLExtension("GL_EXT_texture")]
        TextureIntensitySizeEXT = 0x8061,

        [GLExtension("GL_EXT_texture_object")]
        TextureResidentEXT = 0x8067,

        [GLExtension("GL_EXT_texture_object")]
        Texture1DBindingEXT = 0x8068,

        [GLExtension("GL_EXT_texture_object")]
        Texture2DBindingEXT = 0x8069,
        Texture3DBindingOES = 0x806A,

        [GLExtension("GL_OES_texture_3D")]
        TextureBinding3DOES = 0x806A,
        TextureDepth = 0x8071,

        [GLExtension("GL_OES_texture_3D")]
        Max3DTextureSizeOES = 0x8073,

        [GLExtension("GL_EXT_vertex_array")]
        VertexArrayEXT = 0x8074,

        [GLExtension("GL_KHR_debug")]
        VertexArrayKhr = 0x8074,

        [GLExtension("GL_EXT_vertex_array")]
        NormalArrayEXT = 0x8075,

        [GLExtension("GL_EXT_vertex_array")]
        ColorArrayEXT = 0x8076,

        [GLExtension("GL_EXT_vertex_array")]
        IndexArrayEXT = 0x8077,

        [GLExtension("GL_EXT_vertex_array")]
        TextureCoordArrayEXT = 0x8078,

        [GLExtension("GL_EXT_vertex_array")]
        EdgeFlagArrayEXT = 0x8079,

        [GLExtension("GL_EXT_vertex_array")]
        VertexArraySizeEXT = 0x807A,

        [GLExtension("GL_EXT_vertex_array")]
        VertexArrayTypeEXT = 0x807B,

        [GLExtension("GL_EXT_vertex_array")]
        VertexArrayStrideEXT = 0x807C,

        [GLExtension("GL_EXT_vertex_array")]
        NormalArrayTypeEXT = 0x807E,

        [GLExtension("GL_EXT_vertex_array")]
        NormalArrayStrideEXT = 0x807F,

        [GLExtension("GL_EXT_vertex_array")]
        ColorArraySizeEXT = 0x8081,

        [GLExtension("GL_EXT_vertex_array")]
        ColorArrayTypeEXT = 0x8082,

        [GLExtension("GL_EXT_vertex_array")]
        ColorArrayStrideEXT = 0x8083,

        [GLExtension("GL_EXT_vertex_array")]
        IndexArrayTypeEXT = 0x8085,

        [GLExtension("GL_EXT_vertex_array")]
        IndexArrayStrideEXT = 0x8086,

        [GLExtension("GL_EXT_vertex_array")]
        TextureCoordArraySizeEXT = 0x8088,

        [GLExtension("GL_EXT_vertex_array")]
        TextureCoordArrayTypeEXT = 0x8089,

        [GLExtension("GL_EXT_vertex_array")]
        TextureCoordArrayStrideEXT = 0x808A,

        [GLExtension("GL_EXT_vertex_array")]
        EdgeFlagArrayStrideEXT = 0x808C,

        [GLExtension("GL_ARB_multisample")]
        MultisampleARB = 0x809D,

        [GLExtension("GL_EXT_multisample")]
        MultisampleEXT = 0x809D,

        [GLExtension("GL_ARB_multisample")]
        SampleAlphaToCoverageARB = 0x809E,

        [GLExtension("GL_EXT_multisample")]
        SampleAlphaToMaskEXT = 0x809E,

        [GLExtension("GL_ARB_multisample")]
        SampleAlphaToOneARB = 0x809F,

        [GLExtension("GL_EXT_multisample")]
        SampleAlphaToOneEXT = 0x809F,

        [GLExtension("GL_ARB_multisample")]
        SampleCoverageARB = 0x80A0,

        [GLExtension("GL_EXT_multisample")]
        SampleMaskEXT = 0x80A0,

        [GLExtension("GL_ARB_multisample")]
        SampleBuffersARB = 0x80A8,

        [GLExtension("GL_EXT_multisample")]
        SampleBuffersEXT = 0x80A8,

        [GLExtension("GL_ARB_multisample")]
        SamplesARB = 0x80A9,

        [GLExtension("GL_EXT_multisample")]
        SamplesEXT = 0x80A9,

        [GLExtension("GL_ARB_multisample")]
        SampleCoverageValueARB = 0x80AA,

        [GLExtension("GL_EXT_multisample")]
        SampleMaskValueEXT = 0x80AA,

        [GLExtension("GL_ARB_multisample")]
        SampleCoverageInvertARB = 0x80AB,

        [GLExtension("GL_EXT_multisample")]
        SampleMaskInvertEXT = 0x80AB,

        [GLExtension("GL_EXT_multisample")]
        SamplePatternEXT = 0x80AC,

        [GLExtension("GL_ARB_imaging")]
        ColorMatrix = 0x80B1,

        [GLExtension("GL_ARB_imaging")]
        ColorMatrixStackDepth = 0x80B2,

        [GLExtension("GL_ARB_imaging")]
        MaxColorMatrixStackDepth = 0x80B3,

        [GLExtension("GL_ARB_shadow_ambient")]
        TextureCompareFailValueARB = 0x80BF,

        [GLExtension("GL_EXT_blend_func_separate")]
        BlendDstRgbEXT = 0x80C8,

        [GLExtension("GL_OES_blend_func_separate")]
        BlendDstRgbOES = 0x80C8,

        [GLExtension("GL_EXT_blend_func_separate")]
        BlendSrcRgbEXT = 0x80C9,

        [GLExtension("GL_OES_blend_func_separate")]
        BlendSrcRgbOES = 0x80C9,

        [GLExtension("GL_EXT_blend_func_separate")]
        BlendDstAlphaEXT = 0x80CA,

        [GLExtension("GL_OES_blend_func_separate")]
        BlendDstAlphaOES = 0x80CA,

        [GLExtension("GL_EXT_blend_func_separate")]
        BlendSrcAlphaEXT = 0x80CB,

        [GLExtension("GL_OES_blend_func_separate")]
        BlendSrcAlphaOES = 0x80CB,

        [GLExtension("GL_EXT_422_pixels")]
        422EXT = 0x80CC,

        [GLExtension("GL_EXT_422_pixels")]
        422RevEXT = 0x80CD,

        [GLExtension("GL_EXT_422_pixels")]
        422AverageEXT = 0x80CE,

        [GLExtension("GL_EXT_422_pixels")]
        422RevAverageEXT = 0x80CF,

        [GLExtension("GL_EXT_paletted_texture")]
        ColorIndex1EXT = 0x80E2,

        [GLExtension("GL_EXT_paletted_texture")]
        ColorIndex2EXT = 0x80E3,

        [GLExtension("GL_EXT_paletted_texture")]
        ColorIndex4EXT = 0x80E4,

        [GLExtension("GL_EXT_paletted_texture")]
        ColorIndex8EXT = 0x80E5,

        [GLExtension("GL_EXT_paletted_texture")]
        ColorIndex12EXT = 0x80E6,

        [GLExtension("GL_EXT_paletted_texture")]
        ColorIndex16EXT = 0x80E7,

        [GLExtension("GL_EXT_draw_range_elements")]
        MaxElementsVerticesEXT = 0x80E8,

        [GLExtension("GL_EXT_draw_range_elements")]
        MaxElementsIndicesEXT = 0x80E9,

        [GLExtension("GL_WIN_phong_shading")]
        PhongWin = 0x80EA,

        [GLExtension("GL_WIN_specular_fog")]
        FogSpecularTextureWin = 0x80EC,

        [GLExtension("GL_EXT_paletted_texture")]
        TextureIndexSizeEXT = 0x80ED,

        [GLExtension("GL_ARB_indirect_parameters")]
        ParameterBufferARB = 0x80EE,
        ParameterBufferBinding = 0x80EF,

        [GLExtension("GL_ARB_indirect_parameters")]
        ParameterBufferBindingARB = 0x80EF,

        [GLExtension("GL_EXT_texture_border_clamp")]
        ClampToBorderEXT = 0x812D,

        [GLExtension("GL_OES_texture_border_clamp")]
        ClampToBorderOES = 0x812D,

        [GLExtension("GL_APPLE_texture_max_level")]
        TextureMaxLevelAPPLE = 0x813D,

        [GLExtension("GL_HP_convolution_border_modes")]
        IgnoreBorderHp = 0x8150,

        [GLExtension("GL_ARB_imaging")]
        ConstantBorder = 0x8151,

        [GLExtension("GL_HP_convolution_border_modes")]
        ConstantBorderHp = 0x8151,

        [GLExtension("GL_ARB_imaging")]
        ReplicateBorder = 0x8153,

        [GLExtension("GL_HP_convolution_border_modes")]
        ReplicateBorderHp = 0x8153,

        [GLExtension("GL_HP_convolution_border_modes")]
        ConvolutionBorderColorHp = 0x8154,

        [GLExtension("GL_HP_image_transform")]
        CubicHp = 0x815F,

        [GLExtension("GL_HP_image_transform")]
        AverageHp = 0x8160,

        [GLExtension("GL_HP_image_transform")]
        PostImageTransformColorTableHp = 0x8162,

        [GLExtension("GL_HP_image_transform")]
        ProxyPostImageTransformColorTableHp = 0x8163,

        [GLExtension("GL_HP_occlusion_test")]
        OcclusionTestHp = 0x8165,

        [GLExtension("GL_HP_occlusion_test")]
        OcclusionTestResultHp = 0x8166,

        [GLExtension("GL_HP_texture_lighting")]
        TextureLightingModeHp = 0x8167,

        [GLExtension("GL_HP_texture_lighting")]
        TexturePostSpecularHp = 0x8168,

        [GLExtension("GL_HP_texture_lighting")]
        TexturePreSpecularHp = 0x8169,

        [GLExtension("GL_SGIX_polynomial_ffd")]
        MaxDeformationOrderSGIX = 0x8197,

        [GLExtension("GL_EXT_compiled_vertex_array")]
        ArrayElementLockFirstEXT = 0x81A8,

        [GLExtension("GL_EXT_compiled_vertex_array")]
        ArrayElementLockCountEXT = 0x81A9,

        [GLExtension("GL_EXT_cull_vertex")]
        CullVertexEXT = 0x81AA,

        [GLExtension("GL_EXT_index_array_formats")]
        IuiV2fEXT = 0x81AD,

        [GLExtension("GL_EXT_index_array_formats")]
        IuiV3fEXT = 0x81AE,

        [GLExtension("GL_EXT_index_array_formats")]
        IuiN3fV2fEXT = 0x81AF,

        [GLExtension("GL_EXT_index_array_formats")]
        IuiN3fV3fEXT = 0x81B0,

        [GLExtension("GL_EXT_index_array_formats")]
        T2fIuiV2fEXT = 0x81B1,

        [GLExtension("GL_EXT_index_array_formats")]
        T2fIuiV3fEXT = 0x81B2,

        [GLExtension("GL_EXT_index_array_formats")]
        T2fIuiN3fV2fEXT = 0x81B3,

        [GLExtension("GL_EXT_index_array_formats")]
        T2fIuiN3fV3fEXT = 0x81B4,

        [GLExtension("GL_EXT_index_func")]
        IndexTestEXT = 0x81B5,

        [GLExtension("GL_EXT_index_func")]
        IndexTestFuncEXT = 0x81B6,

        [GLExtension("GL_EXT_index_func")]
        IndexTestRefEXT = 0x81B7,

        [GLExtension("GL_EXT_index_material")]
        IndexMaterialEXT = 0x81B8,

        [GLExtension("GL_EXT_index_material")]
        IndexMaterialParameterEXT = 0x81B9,

        [GLExtension("GL_EXT_index_material")]
        IndexMaterialFaceEXT = 0x81BA,

        [GLExtension("GL_SUN_convolution_border_modes")]
        WrapBorderSUN = 0x81D4,

        [GLExtension("GL_SUNX_constant_data")]
        UnpackConstantDataSunx = 0x81D5,

        [GLExtension("GL_SUNX_constant_data")]
        TextureConstantDataSunx = 0x81D6,

        [GLExtension("GL_SUN_triangle_list")]
        TriangleListSUN = 0x81D7,

        [GLExtension("GL_SUN_triangle_list")]
        ReplacementCodeSUN = 0x81D8,

        [GLExtension("GL_SUN_global_alpha")]
        GlobalAlphaSUN = 0x81D9,

        [GLExtension("GL_SUN_global_alpha")]
        GlobalAlphaFactorSUN = 0x81DA,

        [GLExtension("GL_SGIS_texture_color_mask")]
        TextureColorWritemaskSgis = 0x81EF,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferDefault = 0x8218,

        [GLExtension("GL_OES_surfaceless_context")]
        FramebufferUndefinedOES = 0x8219,

        [GLExtension("GL_EXT_buffer_storage")]
        BufferImmutableStorageEXT = 0x821F,

        [GLExtension("GL_EXT_buffer_storage")]
        BufferStorageFlagsEXT = 0x8220,

        [GLExtension("GL_EXT_tessellation_shader")]
        PrimitiveRestartForPatchesSupported = 0x8221,

        [GLExtension("GL_OES_tessellation_shader")]
        PrimitiveRestartForPatchesSupportedOES = 0x8221,

        [GLExtension("GL_ARB_framebuffer_object")]
        Index = 0x8222,

        [GLExtension("GL_EXT_texture_rg")]
        RgEXT = 0x8227,

        [GLExtension("GL_ARB_cl_event")]
        SyncClEventARB = 0x8240,

        [GLExtension("GL_ARB_cl_event")]
        SyncClEventCompleteARB = 0x8241,

        [GLExtension("GL_ARB_debug_output")]
        DebugOutputSynchronousARB = 0x8242,

        [GLExtension("GL_KHR_debug")]
        DebugOutputSynchronousKhr = 0x8242,

        [GLExtension("GL_KHR_debug")]
        DebugNextLoggedMessageLength = 0x8243,

        [GLExtension("GL_ARB_debug_output")]
        DebugNextLoggedMessageLengthARB = 0x8243,

        [GLExtension("GL_KHR_debug")]
        DebugNextLoggedMessageLengthKhr = 0x8243,

        [GLExtension("GL_ARB_debug_output")]
        DebugCallbackFunctionARB = 0x8244,

        [GLExtension("GL_KHR_debug")]
        DebugCallbackFunctionKhr = 0x8244,

        [GLExtension("GL_ARB_debug_output")]
        DebugCallbackUserParamARB = 0x8245,

        [GLExtension("GL_KHR_debug")]
        DebugCallbackUserParamKhr = 0x8245,

        [GLExtension("GL_ARB_debug_output")]
        DebugSourceApiARB = 0x8246,

        [GLExtension("GL_KHR_debug")]
        DebugSourceApiKhr = 0x8246,

        [GLExtension("GL_ARB_debug_output")]
        DebugSourceWindowSystemARB = 0x8247,

        [GLExtension("GL_KHR_debug")]
        DebugSourceWindowSystemKhr = 0x8247,

        [GLExtension("GL_ARB_debug_output")]
        DebugSourceShaderCompilerARB = 0x8248,

        [GLExtension("GL_KHR_debug")]
        DebugSourceShaderCompilerKhr = 0x8248,

        [GLExtension("GL_ARB_debug_output")]
        DebugSourceThirdPartyARB = 0x8249,

        [GLExtension("GL_KHR_debug")]
        DebugSourceThirdPartyKhr = 0x8249,

        [GLExtension("GL_ARB_debug_output")]
        DebugSourceApplicationARB = 0x824A,

        [GLExtension("GL_KHR_debug")]
        DebugSourceApplicationKhr = 0x824A,

        [GLExtension("GL_ARB_debug_output")]
        DebugSourceOtherARB = 0x824B,

        [GLExtension("GL_KHR_debug")]
        DebugSourceOtherKhr = 0x824B,

        [GLExtension("GL_ARB_debug_output")]
        DebugTypeErrorARB = 0x824C,

        [GLExtension("GL_KHR_debug")]
        DebugTypeErrorKhr = 0x824C,

        [GLExtension("GL_ARB_debug_output")]
        DebugTypeDeprecatedBehaviorARB = 0x824D,

        [GLExtension("GL_KHR_debug")]
        DebugTypeDeprecatedBehaviorKhr = 0x824D,

        [GLExtension("GL_ARB_debug_output")]
        DebugTypeUndefinedBehaviorARB = 0x824E,

        [GLExtension("GL_KHR_debug")]
        DebugTypeUndefinedBehaviorKhr = 0x824E,

        [GLExtension("GL_ARB_debug_output")]
        DebugTypePortabilityARB = 0x824F,

        [GLExtension("GL_KHR_debug")]
        DebugTypePortabilityKhr = 0x824F,

        [GLExtension("GL_ARB_debug_output")]
        DebugTypePerformanceARB = 0x8250,

        [GLExtension("GL_KHR_debug")]
        DebugTypePerformanceKhr = 0x8250,

        [GLExtension("GL_ARB_debug_output")]
        DebugTypeOtherARB = 0x8251,

        [GLExtension("GL_KHR_debug")]
        DebugTypeOtherKhr = 0x8251,

        [GLExtension("GL_KHR_robustness")]
        LoseContextOnReset = 0x8252,

        [GLExtension("GL_ARB_robustness")]
        LoseContextOnResetARB = 0x8252,

        [GLExtension("GL_EXT_robustness")]
        LoseContextOnResetEXT = 0x8252,

        [GLExtension("GL_KHR_robustness")]
        LoseContextOnResetKhr = 0x8252,

        [GLExtension("GL_ARB_robustness")]
        GuiltyContextResetARB = 0x8253,

        [GLExtension("GL_EXT_robustness")]
        GuiltyContextResetEXT = 0x8253,

        [GLExtension("GL_KHR_robustness")]
        GuiltyContextResetKhr = 0x8253,

        [GLExtension("GL_ARB_robustness")]
        InnocentContextResetARB = 0x8254,

        [GLExtension("GL_EXT_robustness")]
        InnocentContextResetEXT = 0x8254,

        [GLExtension("GL_KHR_robustness")]
        InnocentContextResetKhr = 0x8254,

        [GLExtension("GL_ARB_robustness")]
        UnknownContextResetARB = 0x8255,

        [GLExtension("GL_EXT_robustness")]
        UnknownContextResetEXT = 0x8255,

        [GLExtension("GL_KHR_robustness")]
        UnknownContextResetKhr = 0x8255,

        [GLExtension("GL_KHR_robustness")]
        ResetNotificationStrategy = 0x8256,

        [GLExtension("GL_ARB_robustness")]
        ResetNotificationStrategyARB = 0x8256,

        [GLExtension("GL_EXT_robustness")]
        ResetNotificationStrategyEXT = 0x8256,

        [GLExtension("GL_KHR_robustness")]
        ResetNotificationStrategyKhr = 0x8256,

        [GLExtension("GL_EXT_separate_shader_objects")]
        ProgramSeparableEXT = 0x8258,

        [GLExtension("GL_EXT_separate_shader_objects")]
        ActiveProgramEXT = 0x8259,

        [GLExtension("GL_EXT_separate_shader_objects")]
        ProgramPipelineBindingEXT = 0x825A,

        [GLExtension("GL_NV_viewport_array")]
        MaxViewportsNV = 0x825B,

        [GLExtension("GL_OES_viewport_array")]
        MaxViewportsOES = 0x825B,
        ViewportSubpixelBitsEXT = 0x825C,

        [GLExtension("GL_NV_viewport_array")]
        ViewportSubpixelBitsNV = 0x825C,

        [GLExtension("GL_OES_viewport_array")]
        ViewportSubpixelBitsOES = 0x825C,
        ViewportBoundsRangeEXT = 0x825D,

        [GLExtension("GL_NV_viewport_array")]
        ViewportBoundsRangeNV = 0x825D,

        [GLExtension("GL_OES_viewport_array")]
        ViewportBoundsRangeOES = 0x825D,

        [GLExtension("GL_EXT_geometry_shader")]
        LayerProvokingVertexEXT = 0x825E,

        [GLExtension("GL_OES_geometry_shader")]
        LayerProvokingVertexOES = 0x825E,
        ViewportIndexProvokingVertexEXT = 0x825F,

        [GLExtension("GL_NV_viewport_array")]
        ViewportIndexProvokingVertexNV = 0x825F,

        [GLExtension("GL_OES_viewport_array")]
        ViewportIndexProvokingVertexOES = 0x825F,

        [GLExtension("GL_ARB_viewport_array")]
        UndefinedVertex = 0x8260,

        [GLExtension("GL_EXT_geometry_shader")]
        UndefinedVertexEXT = 0x8260,

        [GLExtension("GL_OES_geometry_shader")]
        UndefinedVertexOES = 0x8260,

        [GLExtension("GL_KHR_robustness")]
        NoResetNotification = 0x8261,

        [GLExtension("GL_ARB_robustness")]
        NoResetNotificationARB = 0x8261,

        [GLExtension("GL_EXT_robustness")]
        NoResetNotificationEXT = 0x8261,

        [GLExtension("GL_KHR_robustness")]
        NoResetNotificationKhr = 0x8261,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeSharedMemorySize = 0x8262,

        [GLExtension("GL_KHR_debug")]
        DebugTypeMarkerKhr = 0x8268,

        [GLExtension("GL_KHR_debug")]
        DebugTypePushGroupKhr = 0x8269,

        [GLExtension("GL_KHR_debug")]
        DebugTypePopGroupKhr = 0x826A,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityNotificationKhr = 0x826B,

        [GLExtension("GL_KHR_debug")]
        MaxDebugGroupStackDepthKhr = 0x826C,

        [GLExtension("GL_KHR_debug")]
        DebugGroupStackDepthKhr = 0x826D,

        [GLExtension("GL_ARB_internalformat_query2")]
        MaxCombinedDimensions = 0x8282,

        [GLExtension("GL_ARB_internalformat_query2")]
        DepthComponents = 0x8284,

        [GLExtension("GL_ARB_internalformat_query2")]
        StencilComponents = 0x8285,

        [GLExtension("GL_ARB_internalformat_query2")]
        ManualGenerateMipmap = 0x8294,

        [GLExtension("GL_ARB_internalformat_query2")]
        SrgbDecodeARB = 0x8299,

        [GLExtension("GL_ARB_internalformat_query2")]
        FullSupport = 0x82B7,

        [GLExtension("GL_ARB_internalformat_query2")]
        CaveatSupport = 0x82B8,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass4X32 = 0x82B9,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass2X32 = 0x82BA,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass1X32 = 0x82BB,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass4X16 = 0x82BC,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass2X16 = 0x82BD,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass1X16 = 0x82BE,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass4X8 = 0x82BF,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass2X8 = 0x82C0,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass1X8 = 0x82C1,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass111110 = 0x82C2,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageClass1010102 = 0x82C3,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass128Bits = 0x82C4,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass96Bits = 0x82C5,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass64Bits = 0x82C6,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass48Bits = 0x82C7,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass32Bits = 0x82C8,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass24Bits = 0x82C9,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass16Bits = 0x82CA,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClass8Bits = 0x82CB,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassS3tcDxt1Rgb = 0x82CC,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassS3tcDxt1Rgba = 0x82CD,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassS3tcDxt3Rgba = 0x82CE,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassS3tcDxt5Rgba = 0x82CF,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassRgtc1Red = 0x82D0,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassRgtc2Rg = 0x82D1,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassBptcUnorm = 0x82D2,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassBptcFloat = 0x82D3,

        [GLExtension("GL_ARB_texture_view")]
        TextureViewMinLevel = 0x82DB,

        [GLExtension("GL_EXT_texture_view")]
        TextureViewMinLevelEXT = 0x82DB,

        [GLExtension("GL_OES_texture_view")]
        TextureViewMinLevelOES = 0x82DB,

        [GLExtension("GL_ARB_texture_view")]
        TextureViewNumLevels = 0x82DC,

        [GLExtension("GL_EXT_texture_view")]
        TextureViewNumLevelsEXT = 0x82DC,

        [GLExtension("GL_OES_texture_view")]
        TextureViewNumLevelsOES = 0x82DC,

        [GLExtension("GL_ARB_texture_view")]
        TextureViewMinLayer = 0x82DD,

        [GLExtension("GL_EXT_texture_view")]
        TextureViewMinLayerEXT = 0x82DD,

        [GLExtension("GL_OES_texture_view")]
        TextureViewMinLayerOES = 0x82DD,

        [GLExtension("GL_ARB_texture_view")]
        TextureViewNumLayers = 0x82DE,

        [GLExtension("GL_EXT_texture_view")]
        TextureViewNumLayersEXT = 0x82DE,

        [GLExtension("GL_OES_texture_view")]
        TextureViewNumLayersOES = 0x82DE,

        [GLExtension("GL_ARB_texture_view")]
        TextureImmutableLevels = 0x82DF,

        [GLExtension("GL_KHR_debug")]
        BufferKhr = 0x82E0,

        [GLExtension("GL_KHR_debug")]
        ShaderKhr = 0x82E1,

        [GLExtension("GL_KHR_debug")]
        ProgramKhr = 0x82E2,

        [GLExtension("GL_KHR_debug")]
        QueryKhr = 0x82E3,

        [GLExtension("GL_KHR_debug")]
        ProgramPipelineKhr = 0x82E4,
        MaxVertexAttribStride = 0x82E5,

        [GLExtension("GL_KHR_debug")]
        SamplerKhr = 0x82E6,

        [GLExtension("GL_KHR_debug")]
        DisplayList = 0x82E7,

        [GLExtension("GL_KHR_debug")]
        MaxLabelLengthKhr = 0x82E8,
        NumShadingLanguageVersions = 0x82E9,

        [GLExtension("GL_ARB_transform_feedback_overflow_query")]
        TransformFeedbackOverflowARB = 0x82EC,
        TransformFeedbackStreamOverflow = 0x82ED,

        [GLExtension("GL_ARB_transform_feedback_overflow_query")]
        TransformFeedbackStreamOverflowARB = 0x82ED,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        VerticesSubmittedARB = 0x82EE,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        PrimitivesSubmittedARB = 0x82EF,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        VertexShaderInvocationsARB = 0x82F0,
        TessControlShaderPatches = 0x82F1,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        TessControlShaderPatchesARB = 0x82F1,
        TessEvaluationShaderInvocations = 0x82F2,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        TessEvaluationShaderInvocationsARB = 0x82F2,
        GeometryShaderPrimitivesEmitted = 0x82F3,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        GeometryShaderPrimitivesEmittedARB = 0x82F3,
        FragmentShaderInvocations = 0x82F4,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        FragmentShaderInvocationsARB = 0x82F4,
        ComputeShaderInvocations = 0x82F5,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        ComputeShaderInvocationsARB = 0x82F5,
        ClippingInputPrimitives = 0x82F6,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        ClippingInputPrimitivesARB = 0x82F6,
        ClippingOutputPrimitives = 0x82F7,

        [GLExtension("GL_ARB_pipeline_statistics_query")]
        ClippingOutputPrimitivesARB = 0x82F7,

        [GLExtension("GL_ARB_sparse_buffer")]
        SparseBufferPageSizeARB = 0x82F8,

        [GLExtension("GL_ARB_cull_distance")]
        MaxCullDistances = 0x82F9,

        [GLExtension("GL_EXT_clip_cull_distance")]
        MaxCullDistancesEXT = 0x82F9,

        [GLExtension("GL_ARB_cull_distance")]
        MaxCombinedClipAndCullDistances = 0x82FA,

        [GLExtension("GL_EXT_clip_cull_distance")]
        MaxCombinedClipAndCullDistancesEXT = 0x82FA,

        [GLExtension("GL_KHR_context_flush_control")]
        ContextReleaseBehavior = 0x82FB,

        [GLExtension("GL_KHR_context_flush_control")]
        ContextReleaseBehaviorKhr = 0x82FB,

        [GLExtension("GL_KHR_context_flush_control")]
        ContextReleaseBehaviorFlush = 0x82FC,

        [GLExtension("GL_KHR_context_flush_control")]
        ContextReleaseBehaviorFlushKhr = 0x82FC,
        RobustGpuTimeoutMsKhr = 0x82FD,
        DepthPassInstrumentSGIX = 0x8310,
        DepthPassInstrumentCountersSGIX = 0x8311,
        DepthPassInstrumentMaxSGIX = 0x8312,
        FragmentsInstrumentSGIX = 0x8313,
        FragmentsInstrumentCountersSGIX = 0x8314,
        FragmentsInstrumentMaxSGIX = 0x8315,

        [GLExtension("GL_SGIX_ycrcba")]
        YcrcbSGIX = 0x8318,

        [GLExtension("GL_SGIX_ycrcba")]
        YcrcbaSGIX = 0x8319,
        UnpackCompressedSizeSGIX = 0x831A,
        PackMaxCompressedSizeSGIX = 0x831B,
        PackCompressedSizeSGIX = 0x831C,
        Slim8uSGIX = 0x831D,
        Slim10uSGIX = 0x831E,
        Slim12sSGIX = 0x831F,

        [GLExtension("GL_EXT_pixel_transform")]
        CubicEXT = 0x8334,

        [GLExtension("GL_EXT_pixel_transform")]
        AverageEXT = 0x8335,

        [GLExtension("GL_EXT_pixel_transform")]
        PixelTransform2DStackDepthEXT = 0x8336,

        [GLExtension("GL_EXT_pixel_transform")]
        MaxPixelTransform2DStackDepthEXT = 0x8337,

        [GLExtension("GL_EXT_pixel_transform")]
        PixelTransform2DMatrixEXT = 0x8338,

        [GLExtension("GL_EXT_light_texture")]
        TextureApplicationModeEXT = 0x834F,

        [GLExtension("GL_EXT_light_texture")]
        TextureLightEXT = 0x8350,

        [GLExtension("GL_EXT_light_texture")]
        TextureMaterialFaceEXT = 0x8351,

        [GLExtension("GL_EXT_light_texture")]
        TextureMaterialParameterEXT = 0x8352,

        [GLExtension("GL_SGIS_pixel_texture")]
        PixelGroupColorSgis = 0x8356,

        [GLExtension("GL_ARB_texture_mirrored_repeat")]
        MirroredRepeatARB = 0x8370,

        [GLExtension("GL_IBM_texture_mirrored_repeat")]
        MirroredRepeatIbm = 0x8370,

        [GLExtension("GL_OES_texture_mirrored_repeat")]
        MirroredRepeatOES = 0x8370,

        [GLExtension("GL_S3_s3tc")]
        RgbS3tc = 0x83A0,

        [GLExtension("GL_S3_s3tc")]
        Rgb4S3tc = 0x83A1,

        [GLExtension("GL_S3_s3tc")]
        RgbaS3tc = 0x83A2,

        [GLExtension("GL_S3_s3tc")]
        Rgba4S3tc = 0x83A3,

        [GLExtension("GL_S3_s3tc")]
        RgbaDxt5S3tc = 0x83A4,

        [GLExtension("GL_S3_s3tc")]
        Rgba4Dxt5S3tc = 0x83A5,

        [GLExtension("GL_INTEL_parallel_arrays")]
        ParallelArraysINTEL = 0x83F4,

        [GLExtension("GL_INTEL_parallel_arrays")]
        VertexArrayParallelPointersINTEL = 0x83F5,

        [GLExtension("GL_INTEL_parallel_arrays")]
        NormalArrayParallelPointersINTEL = 0x83F6,

        [GLExtension("GL_INTEL_parallel_arrays")]
        ColorArrayParallelPointersINTEL = 0x83F7,

        [GLExtension("GL_INTEL_parallel_arrays")]
        TextureCoordArrayParallelPointersINTEL = 0x83F8,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryDonotFlushINTEL = 0x83F9,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryFlushINTEL = 0x83FA,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryWaitINTEL = 0x83FB,

        [GLExtension("GL_INTEL_blackhole_render")]
        BlackholeRenderINTEL = 0x83FC,

        [GLExtension("GL_INTEL_conservative_rasterization")]
        ConservativeRasterizationINTEL = 0x83FE,

        [GLExtension("GL_SGIX_fragment_lighting")]
        CurrentRasterNormalSGIX = 0x8406,

        [GLExtension("GL_EXT_coordinate_frame")]
        TangentArrayEXT = 0x8439,

        [GLExtension("GL_EXT_coordinate_frame")]
        BinormalArrayEXT = 0x843A,

        [GLExtension("GL_EXT_coordinate_frame")]
        CurrentTangentEXT = 0x843B,

        [GLExtension("GL_EXT_coordinate_frame")]
        CurrentBinormalEXT = 0x843C,

        [GLExtension("GL_EXT_coordinate_frame")]
        TangentArrayTypeEXT = 0x843E,

        [GLExtension("GL_EXT_coordinate_frame")]
        TangentArrayStrideEXT = 0x843F,

        [GLExtension("GL_EXT_coordinate_frame")]
        BinormalArrayTypeEXT = 0x8440,

        [GLExtension("GL_EXT_coordinate_frame")]
        BinormalArrayStrideEXT = 0x8441,

        [GLExtension("GL_EXT_coordinate_frame")]
        TangentArrayPointerEXT = 0x8442,

        [GLExtension("GL_EXT_coordinate_frame")]
        BinormalArrayPointerEXT = 0x8443,

        [GLExtension("GL_EXT_coordinate_frame")]
        Map1TangentEXT = 0x8444,

        [GLExtension("GL_EXT_coordinate_frame")]
        Map2TangentEXT = 0x8445,

        [GLExtension("GL_EXT_coordinate_frame")]
        Map1BinormalEXT = 0x8446,

        [GLExtension("GL_EXT_coordinate_frame")]
        Map2BinormalEXT = 0x8447,
        FogCoordinateSource = 0x8450,

        [GLExtension("GL_EXT_fog_coord")]
        FogCoordinateSourceEXT = 0x8450,
        CurrentFogCoordinate = 0x8453,
        CurrentFogCoord = 0x8453,

        [GLExtension("GL_EXT_fog_coord")]
        CurrentFogCoordinateEXT = 0x8453,
        FogCoordinateArrayType = 0x8454,

        [GLExtension("GL_EXT_fog_coord")]
        FogCoordinateArrayTypeEXT = 0x8454,
        FogCoordArrayType = 0x8454,
        FogCoordinateArrayStride = 0x8455,

        [GLExtension("GL_EXT_fog_coord")]
        FogCoordinateArrayStrideEXT = 0x8455,
        FogCoordArrayStride = 0x8455,
        FogCoordinateArrayPointer = 0x8456,

        [GLExtension("GL_EXT_fog_coord")]
        FogCoordinateArrayPointerEXT = 0x8456,
        FogCoordArrayPointer = 0x8456,
        FogCoordinateArray = 0x8457,

        [GLExtension("GL_EXT_fog_coord")]
        FogCoordinateArrayEXT = 0x8457,
        FogCoordArray = 0x8457,
        ColorSum = 0x8458,

        [GLExtension("GL_ARB_vertex_program")]
        ColorSumARB = 0x8458,

        [GLExtension("GL_EXT_secondary_color")]
        ColorSumEXT = 0x8458,
        CurrentSecondaryColor = 0x8459,

        [GLExtension("GL_EXT_secondary_color")]
        CurrentSecondaryColorEXT = 0x8459,
        SecondaryColorArraySize = 0x845A,

        [GLExtension("GL_EXT_secondary_color")]
        SecondaryColorArraySizeEXT = 0x845A,
        SecondaryColorArrayType = 0x845B,

        [GLExtension("GL_EXT_secondary_color")]
        SecondaryColorArrayTypeEXT = 0x845B,
        SecondaryColorArrayStride = 0x845C,

        [GLExtension("GL_EXT_secondary_color")]
        SecondaryColorArrayStrideEXT = 0x845C,
        SecondaryColorArrayPointer = 0x845D,

        [GLExtension("GL_EXT_secondary_color")]
        SecondaryColorArrayPointerEXT = 0x845D,
        SecondaryColorArray = 0x845E,

        [GLExtension("GL_EXT_secondary_color")]
        SecondaryColorArrayEXT = 0x845E,
        CurrentRasterSecondaryColor = 0x845F,

        [GLExtension("GL_REND_screen_coordinates")]
        ScreenCoordinatesRend = 0x8490,

        [GLExtension("GL_REND_screen_coordinates")]
        InvertedScreenWRend = 0x8491,

        [GLExtension("GL_ARB_multitexture")]
        Texture2ARB = 0x84C2,

        [GLExtension("GL_ARB_multitexture")]
        Texture3ARB = 0x84C3,

        [GLExtension("GL_ARB_multitexture")]
        Texture4ARB = 0x84C4,

        [GLExtension("GL_ARB_multitexture")]
        Texture5ARB = 0x84C5,

        [GLExtension("GL_ARB_multitexture")]
        Texture6ARB = 0x84C6,

        [GLExtension("GL_ARB_multitexture")]
        Texture7ARB = 0x84C7,

        [GLExtension("GL_ARB_multitexture")]
        Texture8ARB = 0x84C8,

        [GLExtension("GL_ARB_multitexture")]
        Texture9ARB = 0x84C9,

        [GLExtension("GL_ARB_multitexture")]
        Texture10ARB = 0x84CA,

        [GLExtension("GL_ARB_multitexture")]
        Texture11ARB = 0x84CB,

        [GLExtension("GL_ARB_multitexture")]
        Texture12ARB = 0x84CC,

        [GLExtension("GL_ARB_multitexture")]
        Texture13ARB = 0x84CD,

        [GLExtension("GL_ARB_multitexture")]
        Texture14ARB = 0x84CE,

        [GLExtension("GL_ARB_multitexture")]
        Texture15ARB = 0x84CF,

        [GLExtension("GL_ARB_multitexture")]
        Texture16ARB = 0x84D0,

        [GLExtension("GL_ARB_multitexture")]
        Texture17ARB = 0x84D1,

        [GLExtension("GL_ARB_multitexture")]
        Texture18ARB = 0x84D2,

        [GLExtension("GL_ARB_multitexture")]
        Texture19ARB = 0x84D3,

        [GLExtension("GL_ARB_multitexture")]
        Texture20ARB = 0x84D4,

        [GLExtension("GL_ARB_multitexture")]
        Texture21ARB = 0x84D5,

        [GLExtension("GL_ARB_multitexture")]
        Texture22ARB = 0x84D6,

        [GLExtension("GL_ARB_multitexture")]
        Texture23ARB = 0x84D7,

        [GLExtension("GL_ARB_multitexture")]
        Texture24ARB = 0x84D8,

        [GLExtension("GL_ARB_multitexture")]
        Texture25ARB = 0x84D9,

        [GLExtension("GL_ARB_multitexture")]
        Texture26ARB = 0x84DA,

        [GLExtension("GL_ARB_multitexture")]
        Texture27ARB = 0x84DB,

        [GLExtension("GL_ARB_multitexture")]
        Texture28ARB = 0x84DC,

        [GLExtension("GL_ARB_multitexture")]
        Texture29ARB = 0x84DD,

        [GLExtension("GL_ARB_multitexture")]
        Texture30ARB = 0x84DE,

        [GLExtension("GL_ARB_multitexture")]
        Texture31ARB = 0x84DF,

        [GLExtension("GL_ARB_multitexture")]
        ActiveTextureARB = 0x84E0,
        ClientActiveTexture = 0x84E1,

        [GLExtension("GL_ARB_multitexture")]
        ClientActiveTextureARB = 0x84E1,
        MaxTextureUnits = 0x84E2,

        [GLExtension("GL_ARB_multitexture")]
        MaxTextureUnitsARB = 0x84E2,
        TransposeModelviewMatrix = 0x84E3,

        [GLExtension("GL_ARB_transpose_matrix")]
        TransposeModelviewMatrixARB = 0x84E3,

        [GLExtension("GL_NV_path_rendering")]
        PathTransposeModelviewMatrixNV = 0x84E3,
        TransposeProjectionMatrix = 0x84E4,

        [GLExtension("GL_ARB_transpose_matrix")]
        TransposeProjectionMatrixARB = 0x84E4,

        [GLExtension("GL_NV_path_rendering")]
        PathTransposeProjectionMatrixNV = 0x84E4,
        TransposeTextureMatrix = 0x84E5,

        [GLExtension("GL_ARB_transpose_matrix")]
        TransposeTextureMatrixARB = 0x84E5,
        TransposeColorMatrix = 0x84E6,

        [GLExtension("GL_ARB_transpose_matrix")]
        TransposeColorMatrixARB = 0x84E6,
        Subtract = 0x84E7,

        [GLExtension("GL_ARB_texture_env_combine")]
        SubtractARB = 0x84E7,

        [GLExtension("GL_EXT_framebuffer_object")]
        MaxRenderbufferSizeEXT = 0x84E8,

        [GLExtension("GL_OES_framebuffer_object")]
        MaxRenderbufferSizeOES = 0x84E8,
        CompressedAlpha = 0x84E9,

        [GLExtension("GL_ARB_texture_compression")]
        CompressedAlphaARB = 0x84E9,
        CompressedLuminance = 0x84EA,

        [GLExtension("GL_ARB_texture_compression")]
        CompressedLuminanceARB = 0x84EA,
        CompressedLuminanceAlpha = 0x84EB,

        [GLExtension("GL_ARB_texture_compression")]
        CompressedLuminanceAlphaARB = 0x84EB,
        CompressedIntensity = 0x84EC,

        [GLExtension("GL_ARB_texture_compression")]
        CompressedIntensityARB = 0x84EC,

        [GLExtension("GL_ARB_texture_compression")]
        CompressedRgbARB = 0x84ED,

        [GLExtension("GL_ARB_texture_compression")]
        CompressedRgbaARB = 0x84EE,

        [GLExtension("GL_ARB_texture_rectangle")]
        MaxRectangleTextureSizeARB = 0x84F8,

        [GLExtension("GL_NV_texture_rectangle")]
        MaxRectangleTextureSizeNV = 0x84F8,

        [GLExtension("GL_EXT_texture_lod_bias")]
        MaxTextureLodBiasEXT = 0x84FD,

        [GLExtension("GL_EXT_texture_filter_anisotropic")]
        TextureMaxAnisotropyEXT = 0x84FE,

        [GLExtension("GL_ARB_texture_filter_anisotropic")]
        MaxTextureMaxAnisotropy = 0x84FF,

        [GLExtension("GL_EXT_texture_filter_anisotropic")]
        MaxTextureMaxAnisotropyEXT = 0x84FF,

        [GLExtension("GL_EXT_texture_lod_bias")]
        TextureFilterControlEXT = 0x8500,

        [GLExtension("GL_EXT_texture_lod_bias")]
        TextureLodBiasEXT = 0x8501,

        [GLExtension("GL_EXT_vertex_weighting")]
        Modelview1StackDepthEXT = 0x8502,

        [GLExtension("GL_NV_texture_env_combine4")]
        Combine4NV = 0x8503,

        [GLExtension("GL_NV_light_max_exponent")]
        MaxShininessNV = 0x8504,

        [GLExtension("GL_NV_light_max_exponent")]
        MaxSpotExponentNV = 0x8505,

        [GLExtension("GL_EXT_vertex_weighting")]
        Modelview1MatrixEXT = 0x8506,

        [GLExtension("GL_EXT_stencil_wrap")]
        IncrWrapEXT = 0x8507,

        [GLExtension("GL_OES_stencil_wrap")]
        IncrWrapOES = 0x8507,

        [GLExtension("GL_EXT_stencil_wrap")]
        DecrWrapEXT = 0x8508,

        [GLExtension("GL_OES_stencil_wrap")]
        DecrWrapOES = 0x8508,

        [GLExtension("GL_EXT_vertex_weighting")]
        VertexWeightingEXT = 0x8509,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview1ARB = 0x850A,

        [GLExtension("GL_EXT_vertex_weighting")]
        Modelview1EXT = 0x850A,

        [GLExtension("GL_EXT_vertex_weighting")]
        CurrentVertexWeightEXT = 0x850B,

        [GLExtension("GL_EXT_vertex_weighting")]
        VertexWeightArrayEXT = 0x850C,

        [GLExtension("GL_EXT_vertex_weighting")]
        VertexWeightArraySizeEXT = 0x850D,

        [GLExtension("GL_EXT_vertex_weighting")]
        VertexWeightArrayTypeEXT = 0x850E,

        [GLExtension("GL_EXT_vertex_weighting")]
        VertexWeightArrayStrideEXT = 0x850F,

        [GLExtension("GL_EXT_vertex_weighting")]
        VertexWeightArrayPointerEXT = 0x8510,

        [GLExtension("GL_APPLE_vertex_array_range")]
        VertexArrayRangeAPPLE = 0x851D,

        [GLExtension("GL_NV_vertex_array_range")]
        VertexArrayRangeNV = 0x851D,

        [GLExtension("GL_APPLE_vertex_array_range")]
        VertexArrayRangeLengthAPPLE = 0x851E,

        [GLExtension("GL_NV_vertex_array_range")]
        VertexArrayRangeLengthNV = 0x851E,

        [GLExtension("GL_NV_vertex_array_range")]
        VertexArrayRangeValidNV = 0x851F,

        [GLExtension("GL_NV_vertex_array_range")]
        MaxVertexArrayRangeElementNV = 0x8520,

        [GLExtension("GL_APPLE_vertex_array_range")]
        VertexArrayRangePointerAPPLE = 0x8521,

        [GLExtension("GL_NV_vertex_array_range")]
        VertexArrayRangePointerNV = 0x8521,

        [GLExtension("GL_NV_register_combiners")]
        RegisterCombinersNV = 0x8522,

        [GLExtension("GL_NV_register_combiners")]
        ConstantColor0NV = 0x852A,

        [GLExtension("GL_NV_register_combiners")]
        ConstantColor1NV = 0x852B,

        [GLExtension("GL_NV_register_combiners")]
        ETimesFNV = 0x8531,

        [GLExtension("GL_NV_register_combiners")]
        Spare0PlusSecondaryColorNV = 0x8532,

        [GLExtension("GL_NV_vertex_array_range2")]
        VertexArrayRangeWithoutFlushNV = 0x8533,

        [GLExtension("GL_NV_register_combiners2")]
        PerStageConstantsNV = 0x8535,

        [GLExtension("GL_NV_register_combiners")]
        CombinerAbDotProductNV = 0x8545,

        [GLExtension("GL_NV_register_combiners")]
        CombinerCdDotProductNV = 0x8546,

        [GLExtension("GL_NV_register_combiners")]
        CombinerMuxSumNV = 0x8547,

        [GLExtension("GL_NV_register_combiners")]
        CombinerScaleNV = 0x8548,

        [GLExtension("GL_NV_register_combiners")]
        CombinerBiasNV = 0x8549,

        [GLExtension("GL_NV_register_combiners")]
        CombinerAbOutputNV = 0x854A,

        [GLExtension("GL_NV_register_combiners")]
        CombinerCdOutputNV = 0x854B,

        [GLExtension("GL_NV_register_combiners")]
        CombinerSumOutputNV = 0x854C,

        [GLExtension("GL_NV_register_combiners")]
        MaxGeneralCombinersNV = 0x854D,

        [GLExtension("GL_NV_register_combiners")]
        NumGeneralCombinersNV = 0x854E,

        [GLExtension("GL_NV_register_combiners")]
        ColorSumClampNV = 0x854F,

        [GLExtension("GL_NV_primitive_restart")]
        PrimitiveRestartNV = 0x8558,

        [GLExtension("GL_NV_primitive_restart")]
        PrimitiveRestartIndexNV = 0x8559,

        [GLExtension("GL_NV_fog_distance")]
        FogDistanceModeNV = 0x855A,

        [GLExtension("GL_NV_fog_distance")]
        EyeRadialNV = 0x855B,

        [GLExtension("GL_NV_fog_distance")]
        EyePlaneAbsoluteNV = 0x855C,

        [GLExtension("GL_NV_texgen_emboss")]
        EmbossLightNV = 0x855D,

        [GLExtension("GL_NV_texgen_emboss")]
        EmbossConstantNV = 0x855E,

        [GLExtension("GL_NV_texgen_emboss")]
        EmbossMapNV = 0x855F,

        [GLExtension("GL_INGR_color_clamp")]
        RedMinClampIngr = 0x8560,

        [GLExtension("GL_INGR_color_clamp")]
        GreenMinClampIngr = 0x8561,

        [GLExtension("GL_INGR_color_clamp")]
        BlueMinClampIngr = 0x8562,

        [GLExtension("GL_INGR_color_clamp")]
        AlphaMinClampIngr = 0x8563,

        [GLExtension("GL_INGR_color_clamp")]
        RedMaxClampIngr = 0x8564,

        [GLExtension("GL_INGR_color_clamp")]
        GreenMaxClampIngr = 0x8565,

        [GLExtension("GL_INGR_color_clamp")]
        BlueMaxClampIngr = 0x8566,

        [GLExtension("GL_INGR_color_clamp")]
        AlphaMaxClampIngr = 0x8567,

        [GLExtension("GL_INGR_interlace_read")]
        InterlaceReadIngr = 0x8568,

        [GLExtension("GL_EXT_texture_perturb_normal")]
        TextureNormalEXT = 0x85AF,

        [GLExtension("GL_APPLE_specular_vector")]
        LightModelSpecularVectorAPPLE = 0x85B0,

        [GLExtension("GL_APPLE_client_storage")]
        UnpackClientStorageAPPLE = 0x85B2,

        [GLExtension("GL_APPLE_object_purgeable")]
        BufferObjectAPPLE = 0x85B3,

        [GLExtension("GL_APPLE_vertex_array_object")]
        VertexArrayBindingAPPLE = 0x85B5,

        [GLExtension("GL_OES_vertex_array_object")]
        VertexArrayBindingOES = 0x85B5,

        [GLExtension("GL_APPLE_texture_range")]
        TextureRangeLengthAPPLE = 0x85B7,

        [GLExtension("GL_APPLE_texture_range")]
        TextureRangePointerAPPLE = 0x85B8,

        [GLExtension("GL_APPLE_ycbcr_422")]
        Ycbcr422APPLE = 0x85B9,

        [GLExtension("GL_APPLE_rgb_422")]
        UnsignedShort88APPLE = 0x85BA,

        [GLExtension("GL_MESA_ycbcr_texture")]
        UnsignedShort88MESA = 0x85BA,

        [GLExtension("GL_APPLE_rgb_422")]
        UnsignedShort88RevAPPLE = 0x85BB,

        [GLExtension("GL_MESA_ycbcr_texture")]
        UnsignedShort88RevMESA = 0x85BB,

        [GLExtension("GL_APPLE_texture_range")]
        StoragePrivateAPPLE = 0x85BD,

        [GLExtension("GL_SUN_triangle_list")]
        ReplacementCodeArraySUN = 0x85C0,

        [GLExtension("GL_SUN_triangle_list")]
        ReplacementCodeArrayTypeSUN = 0x85C1,

        [GLExtension("GL_SUN_triangle_list")]
        ReplacementCodeArrayStrideSUN = 0x85C2,

        [GLExtension("GL_SUN_triangle_list")]
        ReplacementCodeArrayPointerSUN = 0x85C3,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiV3fSUN = 0x85C4,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiC4ubV3fSUN = 0x85C5,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiC3fV3fSUN = 0x85C6,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiN3fV3fSUN = 0x85C7,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiC4fN3fV3fSUN = 0x85C8,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiT2fV3fSUN = 0x85C9,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiT2fN3fV3fSUN = 0x85CA,

        [GLExtension("GL_SUN_triangle_list")]
        R1uiT2fC4fN3fV3fSUN = 0x85CB,

        [GLExtension("GL_SUN_slice_accum")]
        SliceAccumSUN = 0x85CC,

        [GLExtension("GL_SUN_mesh_array")]
        QuadMeshSUN = 0x8614,

        [GLExtension("GL_SUN_mesh_array")]
        TriangleMeshSUN = 0x8615,

        [GLExtension("GL_NV_vertex_program")]
        VertexProgramNV = 0x8620,

        [GLExtension("GL_NV_vertex_program")]
        VertexStateProgramNV = 0x8621,

        [GLExtension("GL_ARB_vertex_program")]
        VertexAttribArrayEnabledARB = 0x8622,

        [GLExtension("GL_NV_vertex_program")]
        AttribArraySizeNV = 0x8623,

        [GLExtension("GL_ARB_vertex_program")]
        VertexAttribArraySizeARB = 0x8623,

        [GLExtension("GL_NV_vertex_program")]
        AttribArrayStrideNV = 0x8624,

        [GLExtension("GL_ARB_vertex_program")]
        VertexAttribArrayStrideARB = 0x8624,

        [GLExtension("GL_NV_vertex_program")]
        AttribArrayTypeNV = 0x8625,

        [GLExtension("GL_ARB_vertex_program")]
        VertexAttribArrayTypeARB = 0x8625,

        [GLExtension("GL_NV_vertex_program")]
        CurrentAttribNV = 0x8626,

        [GLExtension("GL_ARB_vertex_program")]
        CurrentVertexAttribARB = 0x8626,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramLengthARB = 0x8627,

        [GLExtension("GL_NV_vertex_program")]
        ProgramLengthNV = 0x8627,

        [GLExtension("GL_NV_vertex_program")]
        ProgramStringNV = 0x8628,

        [GLExtension("GL_NV_vertex_program")]
        ModelviewProjectionNV = 0x8629,

        [GLExtension("GL_NV_vertex_program")]
        IdentityNV = 0x862A,

        [GLExtension("GL_NV_vertex_program")]
        InverseNV = 0x862B,

        [GLExtension("GL_NV_vertex_program")]
        TransposeNV = 0x862C,

        [GLExtension("GL_NV_vertex_program")]
        InverseTransposeNV = 0x862D,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramMatrixStackDepthARB = 0x862E,

        [GLExtension("GL_NV_vertex_program")]
        MaxTrackMatrixStackDepthNV = 0x862E,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramMatricesARB = 0x862F,

        [GLExtension("GL_NV_vertex_program")]
        MaxTrackMatricesNV = 0x862F,

        [GLExtension("GL_NV_vertex_program")]
        Matrix0NV = 0x8630,

        [GLExtension("GL_NV_vertex_program")]
        Matrix1NV = 0x8631,

        [GLExtension("GL_NV_vertex_program")]
        Matrix2NV = 0x8632,

        [GLExtension("GL_NV_vertex_program")]
        Matrix3NV = 0x8633,

        [GLExtension("GL_NV_vertex_program")]
        Matrix4NV = 0x8634,

        [GLExtension("GL_NV_vertex_program")]
        Matrix5NV = 0x8635,

        [GLExtension("GL_NV_vertex_program")]
        Matrix6NV = 0x8636,

        [GLExtension("GL_NV_vertex_program")]
        Matrix7NV = 0x8637,

        [GLExtension("GL_ARB_fragment_program")]
        CurrentMatrixStackDepthARB = 0x8640,

        [GLExtension("GL_NV_vertex_program")]
        CurrentMatrixStackDepthNV = 0x8640,

        [GLExtension("GL_ARB_fragment_program")]
        CurrentMatrixARB = 0x8641,

        [GLExtension("GL_NV_vertex_program")]
        CurrentMatrixNV = 0x8641,
        VertexProgramPointSize = 0x8642,

        [GLExtension("GL_ARB_vertex_program")]
        VertexProgramPointSizeARB = 0x8642,

        [GLExtension("GL_NV_vertex_program")]
        VertexProgramPointSizeNV = 0x8642,

        [GLExtension("GL_ARB_geometry_shader4")]
        ProgramPointSizeARB = 0x8642,

        [GLExtension("GL_EXT_geometry_shader4")]
        ProgramPointSizeEXT = 0x8642,
        VertexProgramTwoSide = 0x8643,

        [GLExtension("GL_ARB_vertex_program")]
        VertexProgramTwoSideARB = 0x8643,

        [GLExtension("GL_NV_vertex_program")]
        VertexProgramTwoSideNV = 0x8643,

        [GLExtension("GL_NV_vertex_program")]
        AttribArrayPointerNV = 0x8645,

        [GLExtension("GL_NV_vertex_program")]
        ProgramTargetNV = 0x8646,

        [GLExtension("GL_NV_vertex_program")]
        ProgramResidentNV = 0x8647,

        [GLExtension("GL_NV_vertex_program")]
        TrackMatrixNV = 0x8648,

        [GLExtension("GL_NV_vertex_program")]
        TrackMatrixTransformNV = 0x8649,

        [GLExtension("GL_NV_vertex_program")]
        VertexProgramBindingNV = 0x864A,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramErrorPositionARB = 0x864B,

        [GLExtension("GL_NV_vertex_program")]
        ProgramErrorPositionNV = 0x864B,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTextureRectangleNV = 0x864C,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTextureRectangleScaleNV = 0x864D,

        [GLExtension("GL_NV_texture_shader")]
        DotProductTextureRectangleNV = 0x864E,

        [GLExtension("GL_NV_depth_clamp")]
        DepthClampNV = 0x864F,

        [GLExtension("GL_EXT_depth_clamp")]
        DepthClampEXT = 0x864F,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray0NV = 0x8650,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray1NV = 0x8651,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray2NV = 0x8652,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray3NV = 0x8653,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray4NV = 0x8654,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray5NV = 0x8655,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray6NV = 0x8656,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray7NV = 0x8657,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray8NV = 0x8658,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray9NV = 0x8659,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray10NV = 0x865A,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray11NV = 0x865B,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray12NV = 0x865C,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray13NV = 0x865D,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray14NV = 0x865E,

        [GLExtension("GL_NV_vertex_program")]
        VertexAttribArray15NV = 0x865F,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib04NV = 0x8660,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib14NV = 0x8661,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib24NV = 0x8662,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib34NV = 0x8663,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib44NV = 0x8664,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib54NV = 0x8665,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib64NV = 0x8666,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib74NV = 0x8667,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib84NV = 0x8668,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib94NV = 0x8669,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib104NV = 0x866A,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib114NV = 0x866B,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib124NV = 0x866C,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib134NV = 0x866D,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib144NV = 0x866E,

        [GLExtension("GL_NV_vertex_program")]
        Map1VertexAttrib154NV = 0x866F,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib04NV = 0x8670,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib14NV = 0x8671,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib24NV = 0x8672,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib34NV = 0x8673,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib44NV = 0x8674,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib54NV = 0x8675,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib64NV = 0x8676,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib74NV = 0x8677,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramBindingARB = 0x8677,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib84NV = 0x8678,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib94NV = 0x8679,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib104NV = 0x867A,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib114NV = 0x867B,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib124NV = 0x867C,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib134NV = 0x867D,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib144NV = 0x867E,

        [GLExtension("GL_NV_vertex_program")]
        Map2VertexAttrib154NV = 0x867F,
        TextureCompressedImageSize = 0x86A0,

        [GLExtension("GL_ARB_texture_compression")]
        TextureCompressedImageSizeARB = 0x86A0,

        [GLExtension("GL_ARB_texture_compression")]
        TextureCompressedARB = 0x86A1,

        [GLExtension("GL_ARB_texture_compression")]
        NumCompressedTextureFormatsARB = 0x86A2,

        [GLExtension("GL_ARB_texture_compression")]
        CompressedTextureFormatsARB = 0x86A3,

        [GLExtension("GL_ARB_vertex_blend")]
        MaxVertexUnitsARB = 0x86A4,

        [GLExtension("GL_OES_matrix_palette")]
        MaxVertexUnitsOES = 0x86A4,

        [GLExtension("GL_ARB_vertex_blend")]
        ActiveVertexUnitsARB = 0x86A5,

        [GLExtension("GL_ARB_vertex_blend")]
        WeightSumUnityARB = 0x86A6,

        [GLExtension("GL_ARB_vertex_blend")]
        VertexBlendARB = 0x86A7,

        [GLExtension("GL_ARB_vertex_blend")]
        CurrentWeightARB = 0x86A8,

        [GLExtension("GL_ARB_vertex_blend")]
        WeightArrayTypeARB = 0x86A9,

        [GLExtension("GL_OES_matrix_palette")]
        WeightArrayTypeOES = 0x86A9,

        [GLExtension("GL_ARB_vertex_blend")]
        WeightArrayStrideARB = 0x86AA,

        [GLExtension("GL_OES_matrix_palette")]
        WeightArrayStrideOES = 0x86AA,

        [GLExtension("GL_ARB_vertex_blend")]
        WeightArraySizeARB = 0x86AB,

        [GLExtension("GL_OES_matrix_palette")]
        WeightArraySizeOES = 0x86AB,

        [GLExtension("GL_ARB_vertex_blend")]
        WeightArrayPointerARB = 0x86AC,

        [GLExtension("GL_OES_matrix_palette")]
        WeightArrayPointerOES = 0x86AC,

        [GLExtension("GL_ARB_vertex_blend")]
        WeightArrayARB = 0x86AD,

        [GLExtension("GL_OES_matrix_palette")]
        WeightArrayOES = 0x86AD,
        Dot3Rgb = 0x86AE,

        [GLExtension("GL_ARB_texture_env_dot3")]
        Dot3RgbARB = 0x86AE,
        Dot3Rgba = 0x86AF,

        [GLExtension("GL_ARB_texture_env_dot3")]
        Dot3RgbaARB = 0x86AF,

        [GLExtension("GL_IMG_texture_env_enhanced_fixed_function")]
        Dot3RgbaImg = 0x86AF,

        [GLExtension("GL_3DFX_texture_compression_FXT1")]
        CompressedRgbFxt13DFX = 0x86B0,

        [GLExtension("GL_3DFX_texture_compression_FXT1")]
        CompressedRgbaFxt13DFX = 0x86B1,

        [GLExtension("GL_3DFX_multisample")]
        Multisample3DFX = 0x86B2,

        [GLExtension("GL_3DFX_multisample")]
        SampleBuffers3DFX = 0x86B3,

        [GLExtension("GL_3DFX_multisample")]
        Samples3DFX = 0x86B4,

        [GLExtension("GL_NV_evaluators")]
        EvalFractionalTessellationNV = 0x86C5,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib0NV = 0x86C6,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib1NV = 0x86C7,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib2NV = 0x86C8,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib3NV = 0x86C9,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib4NV = 0x86CA,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib5NV = 0x86CB,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib6NV = 0x86CC,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib7NV = 0x86CD,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib8NV = 0x86CE,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib9NV = 0x86CF,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib10NV = 0x86D0,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib11NV = 0x86D1,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib12NV = 0x86D2,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib13NV = 0x86D3,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib14NV = 0x86D4,

        [GLExtension("GL_NV_evaluators")]
        EvalVertexAttrib15NV = 0x86D5,

        [GLExtension("GL_NV_evaluators")]
        MaxMapTessellationNV = 0x86D6,

        [GLExtension("GL_NV_evaluators")]
        MaxRationalEvalOrderNV = 0x86D7,

        [GLExtension("GL_NV_tessellation_program5")]
        MaxProgramPatchAttribsNV = 0x86D8,

        [GLExtension("GL_NV_texture_shader")]
        RgbaUnsignedDotProductMappingNV = 0x86D9,

        [GLExtension("GL_NV_texture_shader")]
        UnsignedIntS8S888NV = 0x86DA,

        [GLExtension("GL_NV_texture_shader")]
        UnsignedInt88S8S8RevNV = 0x86DB,

        [GLExtension("GL_NV_texture_shader")]
        DsdtMagIntensityNV = 0x86DC,

        [GLExtension("GL_NV_texture_shader")]
        ShaderConsistentNV = 0x86DD,

        [GLExtension("GL_NV_texture_shader")]
        TextureShaderNV = 0x86DE,

        [GLExtension("GL_NV_texture_shader")]
        ShaderOperationNV = 0x86DF,

        [GLExtension("GL_NV_texture_shader")]
        CullModesNV = 0x86E0,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTextureMatrixNV = 0x86E1,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTexture2DMatrixNV = 0x86E1,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTextureScaleNV = 0x86E2,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTexture2DScaleNV = 0x86E2,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTextureBiasNV = 0x86E3,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTexture2DBiasNV = 0x86E3,

        [GLExtension("GL_NV_texture_shader")]
        PreviousTextureInputNV = 0x86E4,

        [GLExtension("GL_NV_texture_shader")]
        ConstEyeNV = 0x86E5,

        [GLExtension("GL_NV_texture_shader")]
        PassThroughNV = 0x86E6,

        [GLExtension("GL_NV_texture_shader")]
        CullFragmentNV = 0x86E7,

        [GLExtension("GL_NV_texture_shader")]
        OffsetTexture2DNV = 0x86E8,

        [GLExtension("GL_NV_texture_shader")]
        DependentArTexture2DNV = 0x86E9,

        [GLExtension("GL_NV_texture_shader")]
        DependentGbTexture2DNV = 0x86EA,

        [GLExtension("GL_NV_vdpau_interop")]
        SurfaceStateNV = 0x86EB,

        [GLExtension("GL_NV_texture_shader")]
        DotProductNV = 0x86EC,

        [GLExtension("GL_NV_texture_shader")]
        DotProductDepthReplaceNV = 0x86ED,

        [GLExtension("GL_NV_texture_shader")]
        DotProductTexture2DNV = 0x86EE,

        [GLExtension("GL_NV_texture_shader2")]
        DotProductTexture3DNV = 0x86EF,

        [GLExtension("GL_NV_texture_shader")]
        DotProductTextureCubeMapNV = 0x86F0,

        [GLExtension("GL_NV_texture_shader")]
        DotProductDiffuseCubeMapNV = 0x86F1,

        [GLExtension("GL_NV_texture_shader")]
        DotProductReflectCubeMapNV = 0x86F2,

        [GLExtension("GL_NV_texture_shader")]
        DotProductConstEyeReflectCubeMapNV = 0x86F3,

        [GLExtension("GL_NV_texture_shader")]
        HiloNV = 0x86F4,

        [GLExtension("GL_NV_texture_shader")]
        DsdtNV = 0x86F5,

        [GLExtension("GL_NV_texture_shader")]
        DsdtMagNV = 0x86F6,

        [GLExtension("GL_NV_texture_shader")]
        DsdtMagVibNV = 0x86F7,

        [GLExtension("GL_NV_texture_shader")]
        Hilo16NV = 0x86F8,

        [GLExtension("GL_NV_texture_shader")]
        SignedHiloNV = 0x86F9,

        [GLExtension("GL_NV_texture_shader")]
        SignedHilo16NV = 0x86FA,

        [GLExtension("GL_NV_texture_shader")]
        SignedRgbaNV = 0x86FB,

        [GLExtension("GL_NV_texture_shader")]
        SignedRgba8NV = 0x86FC,

        [GLExtension("GL_NV_vdpau_interop")]
        SurfaceRegisteredNV = 0x86FD,

        [GLExtension("GL_NV_texture_shader")]
        SignedRgbNV = 0x86FE,

        [GLExtension("GL_NV_texture_shader")]
        SignedRgb8NV = 0x86FF,

        [GLExtension("GL_NV_vdpau_interop")]
        SurfaceMappedNV = 0x8700,

        [GLExtension("GL_NV_texture_shader")]
        SignedLuminanceNV = 0x8701,

        [GLExtension("GL_NV_texture_shader")]
        SignedLuminance8NV = 0x8702,

        [GLExtension("GL_NV_texture_shader")]
        SignedLuminanceAlphaNV = 0x8703,

        [GLExtension("GL_NV_texture_shader")]
        SignedLuminance8Alpha8NV = 0x8704,

        [GLExtension("GL_NV_texture_shader")]
        SignedAlphaNV = 0x8705,

        [GLExtension("GL_NV_texture_shader")]
        SignedAlpha8NV = 0x8706,

        [GLExtension("GL_NV_texture_shader")]
        SignedIntensityNV = 0x8707,

        [GLExtension("GL_NV_texture_shader")]
        SignedIntensity8NV = 0x8708,

        [GLExtension("GL_NV_texture_shader")]
        Dsdt8NV = 0x8709,

        [GLExtension("GL_NV_texture_shader")]
        Dsdt8Mag8NV = 0x870A,

        [GLExtension("GL_NV_texture_shader")]
        Dsdt8Mag8Intensity8NV = 0x870B,

        [GLExtension("GL_NV_texture_shader")]
        SignedRgbUnsignedAlphaNV = 0x870C,

        [GLExtension("GL_NV_texture_shader")]
        SignedRgb8UnsignedAlpha8NV = 0x870D,

        [GLExtension("GL_NV_texture_shader")]
        HiScaleNV = 0x870E,

        [GLExtension("GL_NV_texture_shader")]
        LoScaleNV = 0x870F,

        [GLExtension("GL_NV_texture_shader")]
        DsScaleNV = 0x8710,

        [GLExtension("GL_NV_texture_shader")]
        DtScaleNV = 0x8711,

        [GLExtension("GL_NV_texture_shader")]
        MagnitudeScaleNV = 0x8712,

        [GLExtension("GL_NV_texture_shader")]
        VibranceScaleNV = 0x8713,

        [GLExtension("GL_NV_texture_shader")]
        HiBiasNV = 0x8714,

        [GLExtension("GL_NV_texture_shader")]
        LoBiasNV = 0x8715,

        [GLExtension("GL_NV_texture_shader")]
        DsBiasNV = 0x8716,

        [GLExtension("GL_NV_texture_shader")]
        DtBiasNV = 0x8717,

        [GLExtension("GL_NV_texture_shader")]
        MagnitudeBiasNV = 0x8718,

        [GLExtension("GL_NV_texture_shader")]
        VibranceBiasNV = 0x8719,

        [GLExtension("GL_NV_texture_shader")]
        TextureBorderValuesNV = 0x871A,

        [GLExtension("GL_NV_texture_shader")]
        TextureHiSizeNV = 0x871B,

        [GLExtension("GL_NV_texture_shader")]
        TextureLoSizeNV = 0x871C,

        [GLExtension("GL_NV_texture_shader")]
        TextureDsSizeNV = 0x871D,

        [GLExtension("GL_NV_texture_shader")]
        TextureDtSizeNV = 0x871E,

        [GLExtension("GL_NV_texture_shader")]
        TextureMagSizeNV = 0x871F,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview2ARB = 0x8722,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview3ARB = 0x8723,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview4ARB = 0x8724,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview5ARB = 0x8725,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview6ARB = 0x8726,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview7ARB = 0x8727,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview8ARB = 0x8728,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview9ARB = 0x8729,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview10ARB = 0x872A,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview11ARB = 0x872B,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview12ARB = 0x872C,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview13ARB = 0x872D,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview14ARB = 0x872E,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview15ARB = 0x872F,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview16ARB = 0x8730,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview17ARB = 0x8731,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview18ARB = 0x8732,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview19ARB = 0x8733,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview20ARB = 0x8734,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview21ARB = 0x8735,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview22ARB = 0x8736,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview23ARB = 0x8737,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview24ARB = 0x8738,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview25ARB = 0x8739,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview26ARB = 0x873A,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview27ARB = 0x873B,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview28ARB = 0x873C,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview29ARB = 0x873D,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview30ARB = 0x873E,

        [GLExtension("GL_ARB_vertex_blend")]
        Modelview31ARB = 0x873F,

        [GLExtension("GL_EXT_texture_env_dot3")]
        Dot3RgbEXT = 0x8740,

        [GLExtension("GL_AMD_program_binary_Z400")]
        Z400BinaryAMD = 0x8740,

        [GLExtension("GL_EXT_texture_env_dot3")]
        Dot3RgbaEXT = 0x8741,

        [GLExtension("GL_OES_get_program_binary")]
        ProgramBinaryLengthOES = 0x8741,

        [GLExtension("GL_ATI_texture_mirror_once")]
        MirrorClampATI = 0x8742,

        [GLExtension("GL_EXT_texture_mirror_clamp")]
        MirrorClampEXT = 0x8742,

        [GLExtension("GL_ARB_texture_mirror_clamp_to_edge")]
        MirrorClampToEdge = 0x8743,

        [GLExtension("GL_ATI_texture_mirror_once")]
        MirrorClampToEdgeATI = 0x8743,

        [GLExtension("GL_EXT_texture_mirror_clamp")]
        MirrorClampToEdgeEXT = 0x8743,

        [GLExtension("GL_ATI_texture_env_combine3")]
        ModulateAddATI = 0x8744,

        [GLExtension("GL_ATI_texture_env_combine3")]
        ModulateSignedAddATI = 0x8745,

        [GLExtension("GL_ATI_texture_env_combine3")]
        ModulateSubtractATI = 0x8746,

        [GLExtension("GL_AMD_stencil_operation_extended")]
        SetAMD = 0x874A,

        [GLExtension("GL_AMD_stencil_operation_extended")]
        ReplaceValueAMD = 0x874B,

        [GLExtension("GL_AMD_stencil_operation_extended")]
        StencilOpValueAMD = 0x874C,

        [GLExtension("GL_AMD_stencil_operation_extended")]
        StencilBackOpValueAMD = 0x874D,

        [GLExtension("GL_AMD_occlusion_query_event")]
        OcclusionQueryEventMaskAMD = 0x874F,
        UnsignedInt248MESA = 0x8751,
        UnsignedInt824RevMESA = 0x8752,
        UnsignedShort151MESA = 0x8753,
        UnsignedShort115RevMESA = 0x8754,
        TraceMaskMESA = 0x8755,
        TraceNameMESA = 0x8756,

        [GLExtension("GL_MESA_ycbcr_texture")]
        YcbcrMESA = 0x8757,

        [GLExtension("GL_MESA_pack_invert")]
        PackInvertMESA = 0x8758,
        DebugObjectMESA = 0x8759,

        [GLExtension("GL_MESAX_texture_stack")]
        Texture1DStackMesax = 0x8759,
        DebugPrintMESA = 0x875A,

        [GLExtension("GL_MESAX_texture_stack")]
        Texture2DStackMesax = 0x875A,
        DebugAssertMESA = 0x875B,

        [GLExtension("GL_MESAX_texture_stack")]
        ProxyTexture1DStackMesax = 0x875B,

        [GLExtension("GL_MESAX_texture_stack")]
        ProxyTexture2DStackMesax = 0x875C,

        [GLExtension("GL_MESAX_texture_stack")]
        Texture1DStackBindingMesax = 0x875D,

        [GLExtension("GL_MESAX_texture_stack")]
        Texture2DStackBindingMesax = 0x875E,

        [GLExtension("GL_MESA_program_binary_formats")]
        ProgramBinaryFormatMESA = 0x875F,

        [GLExtension("GL_ATI_vertex_array_object")]
        ArrayObjectBufferATI = 0x8766,

        [GLExtension("GL_ATI_vertex_array_object")]
        ArrayObjectOffsetATI = 0x8767,

        [GLExtension("GL_ATI_element_array")]
        ElementArrayATI = 0x8768,

        [GLExtension("GL_ATI_element_array")]
        ElementArrayTypeATI = 0x8769,

        [GLExtension("GL_ATI_element_array")]
        ElementArrayPointerATI = 0x876A,

        [GLExtension("GL_ATI_vertex_streams")]
        MaxVertexStreamsATI = 0x876B,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexSourceATI = 0x8774,

        [GLExtension("GL_ATI_envmap_bumpmap")]
        DudvATI = 0x8779,

        [GLExtension("GL_ATI_envmap_bumpmap")]
        Du8dv8ATI = 0x877A,

        [GLExtension("GL_ATI_envmap_bumpmap")]
        BumpEnvmapATI = 0x877B,

        [GLExtension("GL_ATI_envmap_bumpmap")]
        BumpTargetATI = 0x877C,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderEXT = 0x8780,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderBindingEXT = 0x8781,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputVertexEXT = 0x879A,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputColor0EXT = 0x879B,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputColor1EXT = 0x879C,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord0EXT = 0x879D,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord1EXT = 0x879E,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord2EXT = 0x879F,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord3EXT = 0x87A0,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord4EXT = 0x87A1,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord5EXT = 0x87A2,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord6EXT = 0x87A3,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord7EXT = 0x87A4,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord8EXT = 0x87A5,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord9EXT = 0x87A6,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord10EXT = 0x87A7,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord11EXT = 0x87A8,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord12EXT = 0x87A9,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord13EXT = 0x87AA,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord14EXT = 0x87AB,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord15EXT = 0x87AC,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord16EXT = 0x87AD,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord17EXT = 0x87AE,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord18EXT = 0x87AF,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord19EXT = 0x87B0,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord20EXT = 0x87B1,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord21EXT = 0x87B2,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord22EXT = 0x87B3,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord23EXT = 0x87B4,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord24EXT = 0x87B5,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord25EXT = 0x87B6,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord26EXT = 0x87B7,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord27EXT = 0x87B8,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord28EXT = 0x87B9,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord29EXT = 0x87BA,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord30EXT = 0x87BB,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputTextureCoord31EXT = 0x87BC,

        [GLExtension("GL_EXT_vertex_shader")]
        OutputFogEXT = 0x87BD,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxVertexShaderInstructionsEXT = 0x87C5,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxVertexShaderVariantsEXT = 0x87C6,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxVertexShaderInvariantsEXT = 0x87C7,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxVertexShaderLocalConstantsEXT = 0x87C8,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxVertexShaderLocalsEXT = 0x87C9,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxOptimizedVertexShaderInstructionsEXT = 0x87CA,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxOptimizedVertexShaderVariantsEXT = 0x87CB,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxOptimizedVertexShaderLocalConstantsEXT = 0x87CC,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxOptimizedVertexShaderInvariantsEXT = 0x87CD,

        [GLExtension("GL_EXT_vertex_shader")]
        MaxOptimizedVertexShaderLocalsEXT = 0x87CE,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderInstructionsEXT = 0x87CF,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderVariantsEXT = 0x87D0,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderInvariantsEXT = 0x87D1,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderLocalConstantsEXT = 0x87D2,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderLocalsEXT = 0x87D3,

        [GLExtension("GL_EXT_vertex_shader")]
        VertexShaderOptimizedEXT = 0x87D4,

        [GLExtension("GL_EXT_vertex_shader")]
        VariantArrayPointerEXT = 0x87E9,

        [GLExtension("GL_EXT_vertex_shader")]
        InvariantValueEXT = 0x87EA,

        [GLExtension("GL_EXT_vertex_shader")]
        InvariantDatatypeEXT = 0x87EB,

        [GLExtension("GL_EXT_vertex_shader")]
        LocalConstantValueEXT = 0x87EC,

        [GLExtension("GL_EXT_vertex_shader")]
        LocalConstantDatatypeEXT = 0x87ED,

        [GLExtension("GL_AMD_compressed_ATC_texture")]
        AtcRgbaInterpolatedAlphaAMD = 0x87EE,

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesATI = 0x87F0,

        [GLExtension("GL_ATI_pn_triangles")]
        MaxPnTrianglesTesselationLevelATI = 0x87F1,

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesPointModeLinearATI = 0x87F5,

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesPointModeCubicATI = 0x87F6,

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesNormalModeLinearATI = 0x87F7,

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesNormalModeQuadraticATI = 0x87F8,

        [GLExtension("GL_AMD_compressed_3DC_texture")]
        3dcXAMD = 0x87F9,

        [GLExtension("GL_AMD_compressed_3DC_texture")]
        3dcXyAMD = 0x87FA,

        [GLExtension("GL_ATI_meminfo")]
        VboFreeMemoryATI = 0x87FB,

        [GLExtension("GL_ATI_meminfo")]
        TextureFreeMemoryATI = 0x87FC,

        [GLExtension("GL_ATI_meminfo")]
        RenderbufferFreeMemoryATI = 0x87FD,

        [GLExtension("GL_OES_get_program_binary")]
        NumProgramBinaryFormatsOES = 0x87FE,

        [GLExtension("GL_OES_get_program_binary")]
        ProgramBinaryFormatsOES = 0x87FF,

        [GLExtension("GL_ATI_separate_stencil")]
        StencilBackFuncATI = 0x8800,

        [GLExtension("GL_ATI_separate_stencil")]
        StencilBackFailATI = 0x8801,

        [GLExtension("GL_ATI_separate_stencil")]
        StencilBackPassDepthFailATI = 0x8802,

        [GLExtension("GL_ATI_separate_stencil")]
        StencilBackPassDepthPassATI = 0x8803,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramAluInstructionsARB = 0x8805,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramTexInstructionsARB = 0x8806,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramTexIndirectionsARB = 0x8807,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramNativeAluInstructionsARB = 0x8808,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramNativeTexInstructionsARB = 0x8809,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramNativeTexIndirectionsARB = 0x880A,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramAluInstructionsARB = 0x880B,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramTexInstructionsARB = 0x880C,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramTexIndirectionsARB = 0x880D,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramNativeAluInstructionsARB = 0x880E,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramNativeTexInstructionsARB = 0x880F,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramNativeTexIndirectionsARB = 0x8810,

        [GLExtension("GL_APPLE_float_pixels")]
        RgbaFloat32APPLE = 0x8814,

        [GLExtension("GL_ATI_texture_float")]
        RgbaFloat32ATI = 0x8814,

        [GLExtension("GL_APPLE_float_pixels")]
        RgbFloat32APPLE = 0x8815,

        [GLExtension("GL_ATI_texture_float")]
        RgbFloat32ATI = 0x8815,

        [GLExtension("GL_ARB_texture_float")]
        Alpha32fARB = 0x8816,

        [GLExtension("GL_EXT_texture_storage")]
        Alpha32fEXT = 0x8816,

        [GLExtension("GL_APPLE_float_pixels")]
        AlphaFloat32APPLE = 0x8816,

        [GLExtension("GL_ATI_texture_float")]
        AlphaFloat32ATI = 0x8816,

        [GLExtension("GL_ARB_texture_float")]
        Intensity32fARB = 0x8817,

        [GLExtension("GL_APPLE_float_pixels")]
        IntensityFloat32APPLE = 0x8817,

        [GLExtension("GL_ATI_texture_float")]
        IntensityFloat32ATI = 0x8817,

        [GLExtension("GL_ARB_texture_float")]
        Luminance32fARB = 0x8818,

        [GLExtension("GL_EXT_texture_storage")]
        Luminance32fEXT = 0x8818,

        [GLExtension("GL_APPLE_float_pixels")]
        LuminanceFloat32APPLE = 0x8818,

        [GLExtension("GL_ATI_texture_float")]
        LuminanceFloat32ATI = 0x8818,

        [GLExtension("GL_ARB_texture_float")]
        LuminanceAlpha32fARB = 0x8819,

        [GLExtension("GL_EXT_texture_storage")]
        LuminanceAlpha32fEXT = 0x8819,

        [GLExtension("GL_APPLE_float_pixels")]
        LuminanceAlphaFloat32APPLE = 0x8819,

        [GLExtension("GL_ATI_texture_float")]
        LuminanceAlphaFloat32ATI = 0x8819,

        [GLExtension("GL_APPLE_float_pixels")]
        RgbaFloat16APPLE = 0x881A,

        [GLExtension("GL_ATI_texture_float")]
        RgbaFloat16ATI = 0x881A,

        [GLExtension("GL_APPLE_float_pixels")]
        RgbFloat16APPLE = 0x881B,

        [GLExtension("GL_ATI_texture_float")]
        RgbFloat16ATI = 0x881B,

        [GLExtension("GL_ARB_texture_float")]
        Alpha16fARB = 0x881C,

        [GLExtension("GL_EXT_texture_storage")]
        Alpha16fEXT = 0x881C,

        [GLExtension("GL_APPLE_float_pixels")]
        AlphaFloat16APPLE = 0x881C,

        [GLExtension("GL_ATI_texture_float")]
        AlphaFloat16ATI = 0x881C,

        [GLExtension("GL_ARB_texture_float")]
        Intensity16fARB = 0x881D,

        [GLExtension("GL_APPLE_float_pixels")]
        IntensityFloat16APPLE = 0x881D,

        [GLExtension("GL_ATI_texture_float")]
        IntensityFloat16ATI = 0x881D,

        [GLExtension("GL_ARB_texture_float")]
        Luminance16fARB = 0x881E,

        [GLExtension("GL_EXT_texture_storage")]
        Luminance16fEXT = 0x881E,

        [GLExtension("GL_APPLE_float_pixels")]
        LuminanceFloat16APPLE = 0x881E,

        [GLExtension("GL_ATI_texture_float")]
        LuminanceFloat16ATI = 0x881E,

        [GLExtension("GL_ARB_texture_float")]
        LuminanceAlpha16fARB = 0x881F,

        [GLExtension("GL_EXT_texture_storage")]
        LuminanceAlpha16fEXT = 0x881F,

        [GLExtension("GL_APPLE_float_pixels")]
        LuminanceAlphaFloat16APPLE = 0x881F,

        [GLExtension("GL_ATI_texture_float")]
        LuminanceAlphaFloat16ATI = 0x881F,

        [GLExtension("GL_ARB_color_buffer_float")]
        RgbaFloatModeARB = 0x8820,

        [GLExtension("GL_ATI_pixel_format_float")]
        RgbaFloatModeATI = 0x8820,

        [GLExtension("GL_QCOM_writeonly_rendering")]
        WriteonlyRenderingQCOM = 0x8823,

        [GLExtension("GL_ARB_draw_buffers")]
        MaxDrawBuffersARB = 0x8824,

        [GLExtension("GL_ATI_draw_buffers")]
        MaxDrawBuffersATI = 0x8824,

        [GLExtension("GL_EXT_draw_buffers")]
        MaxDrawBuffersEXT = 0x8824,

        [GLExtension("GL_NV_draw_buffers")]
        MaxDrawBuffersNV = 0x8824,
        DrawBuffer0 = 0x8825,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer0ARB = 0x8825,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer0ATI = 0x8825,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer0EXT = 0x8825,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer0NV = 0x8825,
        DrawBuffer1 = 0x8826,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer1ARB = 0x8826,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer1ATI = 0x8826,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer1EXT = 0x8826,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer1NV = 0x8826,
        DrawBuffer2 = 0x8827,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer2ARB = 0x8827,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer2ATI = 0x8827,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer2EXT = 0x8827,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer2NV = 0x8827,
        DrawBuffer3 = 0x8828,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer3ARB = 0x8828,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer3ATI = 0x8828,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer3EXT = 0x8828,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer3NV = 0x8828,
        DrawBuffer4 = 0x8829,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer4ARB = 0x8829,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer4ATI = 0x8829,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer4EXT = 0x8829,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer4NV = 0x8829,
        DrawBuffer5 = 0x882A,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer5ARB = 0x882A,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer5ATI = 0x882A,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer5EXT = 0x882A,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer5NV = 0x882A,
        DrawBuffer6 = 0x882B,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer6ARB = 0x882B,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer6ATI = 0x882B,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer6EXT = 0x882B,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer6NV = 0x882B,
        DrawBuffer7 = 0x882C,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer7ARB = 0x882C,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer7ATI = 0x882C,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer7EXT = 0x882C,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer7NV = 0x882C,
        DrawBuffer8 = 0x882D,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer8ARB = 0x882D,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer8ATI = 0x882D,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer8EXT = 0x882D,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer8NV = 0x882D,
        DrawBuffer9 = 0x882E,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer9ARB = 0x882E,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer9ATI = 0x882E,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer9EXT = 0x882E,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer9NV = 0x882E,
        DrawBuffer10 = 0x882F,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer10ARB = 0x882F,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer10ATI = 0x882F,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer10EXT = 0x882F,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer10NV = 0x882F,
        DrawBuffer11 = 0x8830,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer11ARB = 0x8830,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer11ATI = 0x8830,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer11EXT = 0x8830,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer11NV = 0x8830,
        DrawBuffer12 = 0x8831,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer12ARB = 0x8831,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer12ATI = 0x8831,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer12EXT = 0x8831,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer12NV = 0x8831,
        DrawBuffer13 = 0x8832,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer13ARB = 0x8832,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer13ATI = 0x8832,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer13EXT = 0x8832,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer13NV = 0x8832,
        DrawBuffer14 = 0x8833,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer14ARB = 0x8833,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer14ATI = 0x8833,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer14EXT = 0x8833,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer14NV = 0x8833,
        DrawBuffer15 = 0x8834,

        [GLExtension("GL_ARB_draw_buffers")]
        DrawBuffer15ARB = 0x8834,

        [GLExtension("GL_ATI_draw_buffers")]
        DrawBuffer15ATI = 0x8834,

        [GLExtension("GL_EXT_draw_buffers")]
        DrawBuffer15EXT = 0x8834,

        [GLExtension("GL_NV_draw_buffers")]
        DrawBuffer15NV = 0x8834,

        [GLExtension("GL_ATI_pixel_format_float")]
        ColorClearUnclampedValueATI = 0x8835,
        CompressedLuminanceAlpha3dcATI = 0x8837,

        [GLExtension("GL_EXT_blend_equation_separate")]
        BlendEquationAlphaEXT = 0x883D,

        [GLExtension("GL_OES_blend_equation_separate")]
        BlendEquationAlphaOES = 0x883D,

        [GLExtension("GL_AMD_framebuffer_sample_positions")]
        SubsampleDistanceAMD = 0x883F,

        [GLExtension("GL_ARB_matrix_palette")]
        MatrixPaletteARB = 0x8840,

        [GLExtension("GL_OES_matrix_palette")]
        MatrixPaletteOES = 0x8840,

        [GLExtension("GL_ARB_matrix_palette")]
        MaxMatrixPaletteStackDepthARB = 0x8841,

        [GLExtension("GL_ARB_matrix_palette")]
        MaxPaletteMatricesARB = 0x8842,

        [GLExtension("GL_OES_matrix_palette")]
        MaxPaletteMatricesOES = 0x8842,

        [GLExtension("GL_ARB_matrix_palette")]
        CurrentPaletteMatrixARB = 0x8843,

        [GLExtension("GL_OES_matrix_palette")]
        CurrentPaletteMatrixOES = 0x8843,

        [GLExtension("GL_ARB_matrix_palette")]
        MatrixIndexArrayARB = 0x8844,

        [GLExtension("GL_OES_matrix_palette")]
        MatrixIndexArrayOES = 0x8844,

        [GLExtension("GL_ARB_matrix_palette")]
        CurrentMatrixIndexARB = 0x8845,

        [GLExtension("GL_ARB_matrix_palette")]
        MatrixIndexArraySizeARB = 0x8846,

        [GLExtension("GL_OES_matrix_palette")]
        MatrixIndexArraySizeOES = 0x8846,

        [GLExtension("GL_ARB_matrix_palette")]
        MatrixIndexArrayTypeARB = 0x8847,

        [GLExtension("GL_OES_matrix_palette")]
        MatrixIndexArrayTypeOES = 0x8847,

        [GLExtension("GL_ARB_matrix_palette")]
        MatrixIndexArrayStrideARB = 0x8848,

        [GLExtension("GL_OES_matrix_palette")]
        MatrixIndexArrayStrideOES = 0x8848,

        [GLExtension("GL_ARB_matrix_palette")]
        MatrixIndexArrayPointerARB = 0x8849,

        [GLExtension("GL_OES_matrix_palette")]
        MatrixIndexArrayPointerOES = 0x8849,
        TextureDepthSize = 0x884A,

        [GLExtension("GL_ARB_depth_texture")]
        TextureDepthSizeARB = 0x884A,
        DepthTextureMode = 0x884B,

        [GLExtension("GL_ARB_depth_texture")]
        DepthTextureModeARB = 0x884B,

        [GLExtension("GL_ARB_shadow")]
        TextureCompareModeARB = 0x884C,

        [GLExtension("GL_EXT_shadow_samplers")]
        TextureCompareModeEXT = 0x884C,

        [GLExtension("GL_ARB_shadow")]
        TextureCompareFuncARB = 0x884D,

        [GLExtension("GL_EXT_shadow_samplers")]
        TextureCompareFuncEXT = 0x884D,

        [GLExtension("GL_ARB_shadow")]
        CompareRToTextureARB = 0x884E,

        [GLExtension("GL_EXT_texture_array")]
        CompareRefDepthToTextureEXT = 0x884E,

        [GLExtension("GL_EXT_shadow_samplers")]
        CompareRefToTextureEXT = 0x884E,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetProjectiveTexture2DNV = 0x8850,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetProjectiveTexture2DScaleNV = 0x8851,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetProjectiveTextureRectangleNV = 0x8852,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetProjectiveTextureRectangleScaleNV = 0x8853,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetHiloTexture2DNV = 0x8854,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetHiloTextureRectangleNV = 0x8855,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetHiloProjectiveTexture2DNV = 0x8856,

        [GLExtension("GL_NV_texture_shader3")]
        OffsetHiloProjectiveTextureRectangleNV = 0x8857,

        [GLExtension("GL_NV_texture_shader3")]
        DependentHiloTexture2DNV = 0x8858,

        [GLExtension("GL_NV_texture_shader3")]
        DependentRgbTexture3DNV = 0x8859,

        [GLExtension("GL_NV_texture_shader3")]
        DependentRgbTextureCubeMapNV = 0x885A,

        [GLExtension("GL_NV_texture_shader3")]
        DotProductPassThroughNV = 0x885B,

        [GLExtension("GL_NV_texture_shader3")]
        DotProductTexture1DNV = 0x885C,

        [GLExtension("GL_NV_texture_shader3")]
        DotProductAffineDepthReplaceNV = 0x885D,

        [GLExtension("GL_NV_texture_shader3")]
        Hilo8NV = 0x885E,

        [GLExtension("GL_NV_texture_shader3")]
        SignedHilo8NV = 0x885F,

        [GLExtension("GL_NV_texture_shader3")]
        ForceBlueToOneNV = 0x8860,

        [GLExtension("GL_ARB_point_sprite")]
        PointSpriteARB = 0x8861,

        [GLExtension("GL_NV_point_sprite")]
        PointSpriteNV = 0x8861,

        [GLExtension("GL_OES_point_sprite")]
        PointSpriteOES = 0x8861,

        [GLExtension("GL_ARB_point_sprite")]
        CoordReplaceARB = 0x8862,

        [GLExtension("GL_NV_point_sprite")]
        CoordReplaceNV = 0x8862,

        [GLExtension("GL_OES_point_sprite")]
        CoordReplaceOES = 0x8862,

        [GLExtension("GL_NV_point_sprite")]
        PointSpriteRModeNV = 0x8863,

        [GLExtension("GL_NV_occlusion_query")]
        PixelCounterBitsNV = 0x8864,

        [GLExtension("GL_ARB_occlusion_query")]
        QueryCounterBitsARB = 0x8864,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        QueryCounterBitsEXT = 0x8864,

        [GLExtension("GL_NV_occlusion_query")]
        CurrentOcclusionQueryIdNV = 0x8865,

        [GLExtension("GL_ARB_occlusion_query")]
        CurrentQueryARB = 0x8865,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        CurrentQueryEXT = 0x8865,

        [GLExtension("GL_ARB_occlusion_query")]
        QueryResultARB = 0x8866,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        QueryResultEXT = 0x8866,

        [GLExtension("GL_ARB_occlusion_query")]
        QueryResultAvailableARB = 0x8867,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        QueryResultAvailableEXT = 0x8867,

        [GLExtension("GL_NV_fragment_program")]
        MaxFragmentProgramLocalParametersNV = 0x8868,

        [GLExtension("GL_ARB_vertex_program")]
        MaxVertexAttribsARB = 0x8869,

        [GLExtension("GL_ARB_vertex_program")]
        VertexAttribArrayNormalizedARB = 0x886A,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessControlInputComponents = 0x886C,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlInputComponentsEXT = 0x886C,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlInputComponentsOES = 0x886C,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessEvaluationInputComponents = 0x886D,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationInputComponentsEXT = 0x886D,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationInputComponentsOES = 0x886D,

        [GLExtension("GL_NV_copy_depth_to_color")]
        DepthStencilToRgbaNV = 0x886E,

        [GLExtension("GL_NV_copy_depth_to_color")]
        DepthStencilToBgraNV = 0x886F,

        [GLExtension("GL_NV_fragment_program")]
        FragmentProgramNV = 0x8870,
        MaxTextureCoords = 0x8871,

        [GLExtension("GL_ARB_fragment_program")]
        MaxTextureCoordsARB = 0x8871,

        [GLExtension("GL_NV_fragment_program")]
        MaxTextureCoordsNV = 0x8871,

        [GLExtension("GL_ARB_fragment_program")]
        MaxTextureImageUnitsARB = 0x8872,

        [GLExtension("GL_NV_fragment_program")]
        MaxTextureImageUnitsNV = 0x8872,

        [GLExtension("GL_NV_fragment_program")]
        FragmentProgramBindingNV = 0x8873,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramErrorStringARB = 0x8874,

        [GLExtension("GL_NV_fragment_program")]
        ProgramErrorStringNV = 0x8874,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramFormatARB = 0x8876,

        [GLExtension("GL_NV_pixel_data_range")]
        WritePixelDataRangeLengthNV = 0x887A,

        [GLExtension("GL_NV_pixel_data_range")]
        ReadPixelDataRangeLengthNV = 0x887B,

        [GLExtension("GL_NV_pixel_data_range")]
        WritePixelDataRangePointerNV = 0x887C,

        [GLExtension("GL_NV_pixel_data_range")]
        ReadPixelDataRangePointerNV = 0x887D,

        [GLExtension("GL_ARB_gpu_shader5")]
        GeometryShaderInvocations = 0x887F,

        [GLExtension("GL_EXT_geometry_shader")]
        GeometryShaderInvocationsEXT = 0x887F,

        [GLExtension("GL_OES_geometry_shader")]
        GeometryShaderInvocationsOES = 0x887F,

        [GLExtension("GL_NV_float_buffer")]
        FloatRNV = 0x8880,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgNV = 0x8881,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgbNV = 0x8882,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgbaNV = 0x8883,

        [GLExtension("GL_NV_float_buffer")]
        FloatR16NV = 0x8884,

        [GLExtension("GL_NV_float_buffer")]
        FloatR32NV = 0x8885,

        [GLExtension("GL_NV_float_buffer")]
        FloatRg16NV = 0x8886,

        [GLExtension("GL_NV_float_buffer")]
        FloatRg32NV = 0x8887,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgb16NV = 0x8888,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgb32NV = 0x8889,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgba16NV = 0x888A,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgba32NV = 0x888B,

        [GLExtension("GL_NV_float_buffer")]
        TextureFloatComponentsNV = 0x888C,

        [GLExtension("GL_NV_float_buffer")]
        FloatClearColorValueNV = 0x888D,

        [GLExtension("GL_NV_float_buffer")]
        FloatRgbaModeNV = 0x888E,

        [GLExtension("GL_NV_texture_expand_normal")]
        TextureUnsignedRemapModeNV = 0x888F,

        [GLExtension("GL_EXT_depth_bounds_test")]
        DepthBoundsTestEXT = 0x8890,

        [GLExtension("GL_EXT_depth_bounds_test")]
        DepthBoundsEXT = 0x8891,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        ArrayBufferARB = 0x8892,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        ElementArrayBufferARB = 0x8893,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        ArrayBufferBindingARB = 0x8894,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        ElementArrayBufferBindingARB = 0x8895,
        VertexArrayBufferBinding = 0x8896,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        VertexArrayBufferBindingARB = 0x8896,
        NormalArrayBufferBinding = 0x8897,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        NormalArrayBufferBindingARB = 0x8897,
        ColorArrayBufferBinding = 0x8898,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        ColorArrayBufferBindingARB = 0x8898,
        IndexArrayBufferBinding = 0x8899,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        IndexArrayBufferBindingARB = 0x8899,
        TextureCoordArrayBufferBinding = 0x889A,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        TextureCoordArrayBufferBindingARB = 0x889A,
        EdgeFlagArrayBufferBinding = 0x889B,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        EdgeFlagArrayBufferBindingARB = 0x889B,
        SecondaryColorArrayBufferBinding = 0x889C,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        SecondaryColorArrayBufferBindingARB = 0x889C,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        FogCoordinateArrayBufferBindingARB = 0x889D,
        FogCoordinateArrayBufferBinding = 0x889D,
        FogCoordArrayBufferBinding = 0x889D,
        WeightArrayBufferBinding = 0x889E,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        WeightArrayBufferBindingARB = 0x889E,

        [GLExtension("GL_OES_matrix_palette")]
        WeightArrayBufferBindingOES = 0x889E,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        VertexAttribArrayBufferBindingARB = 0x889F,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramInstructionsARB = 0x88A0,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramInstructionsARB = 0x88A1,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramNativeInstructionsARB = 0x88A2,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramNativeInstructionsARB = 0x88A3,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramTemporariesARB = 0x88A4,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramTemporariesARB = 0x88A5,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramNativeTemporariesARB = 0x88A6,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramNativeTemporariesARB = 0x88A7,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramParametersARB = 0x88A8,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramParametersARB = 0x88A9,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramNativeParametersARB = 0x88AA,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramNativeParametersARB = 0x88AB,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramAttribsARB = 0x88AC,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramAttribsARB = 0x88AD,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramNativeAttribsARB = 0x88AE,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramNativeAttribsARB = 0x88AF,

        [GLExtension("GL_ARB_vertex_program")]
        ProgramAddressRegistersARB = 0x88B0,

        [GLExtension("GL_ARB_vertex_program")]
        MaxProgramAddressRegistersARB = 0x88B1,

        [GLExtension("GL_ARB_vertex_program")]
        ProgramNativeAddressRegistersARB = 0x88B2,

        [GLExtension("GL_ARB_vertex_program")]
        MaxProgramNativeAddressRegistersARB = 0x88B3,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramLocalParametersARB = 0x88B4,

        [GLExtension("GL_ARB_fragment_program")]
        MaxProgramEnvParametersARB = 0x88B5,

        [GLExtension("GL_ARB_fragment_program")]
        ProgramUnderNativeLimitsARB = 0x88B6,

        [GLExtension("GL_ARB_fragment_program")]
        TransposeCurrentMatrixARB = 0x88B7,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        ReadOnlyARB = 0x88B8,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        WriteOnlyARB = 0x88B9,

        [GLExtension("GL_OES_mapbuffer")]
        WriteOnlyOES = 0x88B9,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        ReadWriteARB = 0x88BA,

        [GLExtension("GL_OES_mapbuffer")]
        BufferAccessOES = 0x88BB,

        [GLExtension("GL_OES_mapbuffer")]
        BufferMappedOES = 0x88BC,

        [GLExtension("GL_OES_mapbuffer")]
        BufferMapPointerOES = 0x88BD,

        [GLExtension("GL_NV_vdpau_interop")]
        WriteDiscardNV = 0x88BE,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        TimeElapsedEXT = 0x88BF,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix0ARB = 0x88C0,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix1ARB = 0x88C1,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix2ARB = 0x88C2,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix3ARB = 0x88C3,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix4ARB = 0x88C4,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix5ARB = 0x88C5,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix6ARB = 0x88C6,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix7ARB = 0x88C7,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix8ARB = 0x88C8,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix9ARB = 0x88C9,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix10ARB = 0x88CA,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix11ARB = 0x88CB,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix12ARB = 0x88CC,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix13ARB = 0x88CD,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix14ARB = 0x88CE,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix15ARB = 0x88CF,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix16ARB = 0x88D0,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix17ARB = 0x88D1,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix18ARB = 0x88D2,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix19ARB = 0x88D3,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix20ARB = 0x88D4,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix21ARB = 0x88D5,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix22ARB = 0x88D6,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix23ARB = 0x88D7,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix24ARB = 0x88D8,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix25ARB = 0x88D9,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix26ARB = 0x88DA,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix27ARB = 0x88DB,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix28ARB = 0x88DC,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix29ARB = 0x88DD,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix30ARB = 0x88DE,

        [GLExtension("GL_ARB_fragment_program")]
        Matrix31ARB = 0x88DF,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        StreamDrawARB = 0x88E0,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        StreamReadARB = 0x88E1,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        StreamCopyARB = 0x88E2,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        StaticDrawARB = 0x88E4,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        StaticReadARB = 0x88E5,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        StaticCopyARB = 0x88E6,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        DynamicDrawARB = 0x88E8,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        DynamicReadARB = 0x88E9,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        DynamicCopyARB = 0x88EA,

        [GLExtension("GL_ARB_pixel_buffer_object")]
        PixelPackBufferARB = 0x88EB,

        [GLExtension("GL_EXT_pixel_buffer_object")]
        PixelPackBufferEXT = 0x88EB,

        [GLExtension("GL_NV_pixel_buffer_object")]
        PixelPackBufferNV = 0x88EB,

        [GLExtension("GL_ARB_pixel_buffer_object")]
        PixelUnpackBufferARB = 0x88EC,

        [GLExtension("GL_EXT_pixel_buffer_object")]
        PixelUnpackBufferEXT = 0x88EC,

        [GLExtension("GL_NV_pixel_buffer_object")]
        PixelUnpackBufferNV = 0x88EC,

        [GLExtension("GL_ARB_pixel_buffer_object")]
        PixelPackBufferBindingARB = 0x88ED,

        [GLExtension("GL_EXT_pixel_buffer_object")]
        PixelPackBufferBindingEXT = 0x88ED,

        [GLExtension("GL_NV_pixel_buffer_object")]
        PixelPackBufferBindingNV = 0x88ED,

        [GLExtension("GL_NV_sRGB_formats")]
        Etc1Srgb8NV = 0x88EE,

        [GLExtension("GL_ARB_pixel_buffer_object")]
        PixelUnpackBufferBindingARB = 0x88EF,

        [GLExtension("GL_EXT_pixel_buffer_object")]
        PixelUnpackBufferBindingEXT = 0x88EF,

        [GLExtension("GL_NV_pixel_buffer_object")]
        PixelUnpackBufferBindingNV = 0x88EF,

        [GLExtension("GL_ARB_framebuffer_object")]
        TextureStencilSize = 0x88F1,

        [GLExtension("GL_EXT_packed_depth_stencil")]
        TextureStencilSizeEXT = 0x88F1,

        [GLExtension("GL_EXT_stencil_clear_tag")]
        StencilTagBitsEXT = 0x88F2,

        [GLExtension("GL_EXT_stencil_clear_tag")]
        StencilClearTagValueEXT = 0x88F3,

        [GLExtension("GL_NV_fragment_program2")]
        MaxProgramExecInstructionsNV = 0x88F4,

        [GLExtension("GL_NV_fragment_program2")]
        MaxProgramCallDepthNV = 0x88F5,

        [GLExtension("GL_NV_fragment_program2")]
        MaxProgramIfDepthNV = 0x88F6,

        [GLExtension("GL_NV_fragment_program2")]
        MaxProgramLoopDepthNV = 0x88F7,

        [GLExtension("GL_NV_fragment_program2")]
        MaxProgramLoopCountNV = 0x88F8,

        [GLExtension("GL_EXT_blend_func_extended")]
        Src1ColorEXT = 0x88F9,

        [GLExtension("GL_EXT_blend_func_extended")]
        OneMinusSrc1ColorEXT = 0x88FA,

        [GLExtension("GL_EXT_blend_func_extended")]
        OneMinusSrc1AlphaEXT = 0x88FB,

        [GLExtension("GL_EXT_blend_func_extended")]
        MaxDualSourceDrawBuffersEXT = 0x88FC,

        [GLExtension("GL_NV_vertex_program4")]
        VertexAttribArrayIntegerNV = 0x88FD,

        [GLExtension("GL_ANGLE_instanced_arrays")]
        VertexAttribArrayDivisorAngle = 0x88FE,

        [GLExtension("GL_ARB_instanced_arrays")]
        VertexAttribArrayDivisorARB = 0x88FE,

        [GLExtension("GL_EXT_instanced_arrays")]
        VertexAttribArrayDivisorEXT = 0x88FE,

        [GLExtension("GL_NV_instanced_arrays")]
        VertexAttribArrayDivisorNV = 0x88FE,

        [GLExtension("GL_EXT_texture_array")]
        MaxArrayTextureLayersEXT = 0x88FF,

        [GLExtension("GL_EXT_gpu_shader4")]
        MinProgramTexelOffsetEXT = 0x8904,

        [GLExtension("GL_NV_gpu_program4")]
        MinProgramTexelOffsetNV = 0x8904,

        [GLExtension("GL_EXT_gpu_shader4")]
        MaxProgramTexelOffsetEXT = 0x8905,

        [GLExtension("GL_NV_gpu_program4")]
        MaxProgramTexelOffsetNV = 0x8905,

        [GLExtension("GL_NV_gpu_program4")]
        ProgramAttribComponentsNV = 0x8906,

        [GLExtension("GL_NV_gpu_program4")]
        ProgramResultComponentsNV = 0x8907,

        [GLExtension("GL_NV_gpu_program4")]
        MaxProgramAttribComponentsNV = 0x8908,

        [GLExtension("GL_NV_gpu_program4")]
        MaxProgramResultComponentsNV = 0x8909,

        [GLExtension("GL_EXT_stencil_two_side")]
        StencilTestTwoSideEXT = 0x8910,

        [GLExtension("GL_EXT_stencil_two_side")]
        ActiveStencilFaceEXT = 0x8911,

        [GLExtension("GL_EXT_texture_mirror_clamp")]
        MirrorClampToBorderEXT = 0x8912,

        [GLExtension("GL_ARB_occlusion_query")]
        SamplesPassedARB = 0x8914,

        [GLExtension("GL_EXT_geometry_shader")]
        GeometryLinkedVerticesOutEXT = 0x8916,

        [GLExtension("GL_OES_geometry_shader")]
        GeometryLinkedVerticesOutOES = 0x8916,

        [GLExtension("GL_EXT_geometry_shader")]
        GeometryLinkedInputTypeEXT = 0x8917,

        [GLExtension("GL_OES_geometry_shader")]
        GeometryLinkedInputTypeOES = 0x8917,

        [GLExtension("GL_EXT_geometry_shader")]
        GeometryLinkedOutputTypeEXT = 0x8918,

        [GLExtension("GL_OES_geometry_shader")]
        GeometryLinkedOutputTypeOES = 0x8918,
        ClampVertexColor = 0x891A,
        ClampFragmentColor = 0x891B,

        [GLExtension("GL_ATI_fragment_shader")]
        NumFragmentRegistersATI = 0x896E,

        [GLExtension("GL_ATI_fragment_shader")]
        NumFragmentConstantsATI = 0x896F,

        [GLExtension("GL_ATI_fragment_shader")]
        NumPassesATI = 0x8970,

        [GLExtension("GL_ATI_fragment_shader")]
        NumInstructionsPerPassATI = 0x8971,

        [GLExtension("GL_ATI_fragment_shader")]
        NumInstructionsTotalATI = 0x8972,

        [GLExtension("GL_ATI_fragment_shader")]
        NumInputInterpolatorComponentsATI = 0x8973,

        [GLExtension("GL_ATI_fragment_shader")]
        NumLoopbackComponentsATI = 0x8974,

        [GLExtension("GL_ATI_fragment_shader")]
        ColorAlphaPairingATI = 0x8975,

        [GLExtension("GL_ATI_fragment_shader")]
        SwizzleStrqATI = 0x897A,

        [GLExtension("GL_ATI_fragment_shader")]
        SwizzleStrqDqATI = 0x897B,

        [GLExtension("GL_OML_interlace")]
        InterlaceOml = 0x8980,

        [GLExtension("GL_OML_interlace")]
        InterlaceReadOml = 0x8981,

        [GLExtension("GL_OML_subsample")]
        FormatSubsample2424Oml = 0x8982,

        [GLExtension("GL_OML_subsample")]
        FormatSubsample244244Oml = 0x8983,

        [GLExtension("GL_OML_resample")]
        ResampleReplicateOml = 0x8986,

        [GLExtension("GL_OML_resample")]
        ResampleZeroFillOml = 0x8987,

        [GLExtension("GL_OML_resample")]
        ResampleAverageOml = 0x8988,

        [GLExtension("GL_OML_resample")]
        ResampleDecimateOml = 0x8989,

        [GLExtension("GL_OES_point_size_array")]
        PointSizeArrayTypeOES = 0x898A,

        [GLExtension("GL_OES_point_size_array")]
        PointSizeArrayStrideOES = 0x898B,

        [GLExtension("GL_OES_point_size_array")]
        PointSizeArrayPointerOES = 0x898C,

        [GLExtension("GL_OES_matrix_get")]
        ModelviewMatrixFloatAsIntBitsOES = 0x898D,

        [GLExtension("GL_OES_matrix_get")]
        ProjectionMatrixFloatAsIntBitsOES = 0x898E,

        [GLExtension("GL_OES_matrix_get")]
        TextureMatrixFloatAsIntBitsOES = 0x898F,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap1APPLE = 0x8A00,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap2APPLE = 0x8A01,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap1SizeAPPLE = 0x8A02,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap1CoeffAPPLE = 0x8A03,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap1OrderAPPLE = 0x8A04,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap1DomainAPPLE = 0x8A05,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap2SizeAPPLE = 0x8A06,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap2CoeffAPPLE = 0x8A07,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap2OrderAPPLE = 0x8A08,

        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        VertexAttribMap2DomainAPPLE = 0x8A09,

        [GLExtension("GL_APPLE_element_array")]
        ElementArrayAPPLE = 0x8A0C,

        [GLExtension("GL_APPLE_element_array")]
        ElementArrayTypeAPPLE = 0x8A0D,

        [GLExtension("GL_APPLE_element_array")]
        ElementArrayPointerAPPLE = 0x8A0E,

        [GLExtension("GL_APPLE_float_pixels")]
        ColorFloatAPPLE = 0x8A0F,

        [GLExtension("GL_APPLE_flush_buffer_range")]
        BufferSerializedModifyAPPLE = 0x8A12,

        [GLExtension("GL_APPLE_flush_buffer_range")]
        BufferFlushingUnmapAPPLE = 0x8A13,

        [GLExtension("GL_APPLE_aux_depth_stencil")]
        AuxDepthStencilAPPLE = 0x8A14,

        [GLExtension("GL_APPLE_row_bytes")]
        PackRowBytesAPPLE = 0x8A15,

        [GLExtension("GL_APPLE_row_bytes")]
        UnpackRowBytesAPPLE = 0x8A16,

        [GLExtension("GL_APPLE_object_purgeable")]
        ReleasedAPPLE = 0x8A19,

        [GLExtension("GL_APPLE_object_purgeable")]
        VolatileAPPLE = 0x8A1A,

        [GLExtension("GL_APPLE_object_purgeable")]
        RetainedAPPLE = 0x8A1B,

        [GLExtension("GL_APPLE_object_purgeable")]
        UndefinedAPPLE = 0x8A1C,

        [GLExtension("GL_APPLE_object_purgeable")]
        PurgeableAPPLE = 0x8A1D,

        [GLExtension("GL_APPLE_rgb_422")]
        Rgb422APPLE = 0x8A1F,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryUniformBlocksEXT = 0x8A2C,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryUniformBlocksOES = 0x8A2C,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxCombinedGeometryUniformComponentsEXT = 0x8A32,

        [GLExtension("GL_OES_geometry_shader")]
        MaxCombinedGeometryUniformComponentsOES = 0x8A32,

        [GLExtension("GL_EXT_texture_sRGB_decode")]
        TextureSrgbDecodeEXT = 0x8A48,

        [GLExtension("GL_EXT_texture_sRGB_decode")]
        DecodeEXT = 0x8A49,

        [GLExtension("GL_EXT_texture_sRGB_decode")]
        SkipDecodeEXT = 0x8A4A,

        [GLExtension("GL_EXT_debug_label")]
        ProgramPipelineObjectEXT = 0x8A4F,

        [GLExtension("GL_APPLE_rgb_422")]
        RgbRaw422APPLE = 0x8A51,

        [GLExtension("GL_EXT_shader_framebuffer_fetch")]
        FragmentShaderDiscardsSamplesEXT = 0x8A52,

        [GLExtension("GL_APPLE_sync")]
        SyncObjectAPPLE = 0x8A53,

        [GLExtension("GL_EXT_pvrtc_sRGB")]
        CompressedSrgbPvrtc2bppv1EXT = 0x8A54,

        [GLExtension("GL_EXT_pvrtc_sRGB")]
        CompressedSrgbPvrtc4bppv1EXT = 0x8A55,

        [GLExtension("GL_EXT_pvrtc_sRGB")]
        CompressedSrgbAlphaPvrtc2bppv1EXT = 0x8A56,

        [GLExtension("GL_EXT_pvrtc_sRGB")]
        CompressedSrgbAlphaPvrtc4bppv1EXT = 0x8A57,

        [GLExtension("GL_ARB_shader_objects")]
        ShaderObjectARB = 0x8B48,

        [GLExtension("GL_EXT_debug_label")]
        ShaderObjectEXT = 0x8B48,

        [GLExtension("GL_ARB_fragment_shader")]
        MaxFragmentUniformComponentsARB = 0x8B49,

        [GLExtension("GL_ARB_vertex_shader")]
        MaxVertexUniformComponentsARB = 0x8B4A,

        [GLExtension("GL_EXT_geometry_shader4")]
        MaxVaryingComponentsEXT = 0x8B4B,

        [GLExtension("GL_ARB_vertex_shader")]
        MaxVaryingFloatsARB = 0x8B4B,

        [GLExtension("GL_ARB_vertex_shader")]
        MaxVertexTextureImageUnitsARB = 0x8B4C,

        [GLExtension("GL_ARB_vertex_shader")]
        MaxCombinedTextureImageUnitsARB = 0x8B4D,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectTypeARB = 0x8B4E,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectSubtypeARB = 0x8B4F,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectDeleteStatusARB = 0x8B80,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectCompileStatusARB = 0x8B81,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectLinkStatusARB = 0x8B82,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectValidateStatusARB = 0x8B83,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectInfoLogLengthARB = 0x8B84,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectAttachedObjectsARB = 0x8B85,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectActiveUniformsARB = 0x8B86,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectActiveUniformMaxLengthARB = 0x8B87,

        [GLExtension("GL_ARB_shader_objects")]
        ObjectShaderSourceLengthARB = 0x8B88,

        [GLExtension("GL_ARB_vertex_shader")]
        ObjectActiveAttributesARB = 0x8B89,

        [GLExtension("GL_ARB_vertex_shader")]
        ObjectActiveAttributeMaxLengthARB = 0x8B8A,

        [GLExtension("GL_ARB_shading_language_100")]
        ShadingLanguageVersionARB = 0x8B8C,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette4Rgb8OES = 0x8B90,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette4Rgba8OES = 0x8B91,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette4R5G6B5OES = 0x8B92,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette4Rgba4OES = 0x8B93,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette4Rgb5A1OES = 0x8B94,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette8Rgb8OES = 0x8B95,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette8Rgba8OES = 0x8B96,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette8R5G6B5OES = 0x8B97,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette8Rgba4OES = 0x8B98,

        [GLExtension("GL_OES_compressed_paletted_texture")]
        Palette8Rgb5A1OES = 0x8B99,

        [GLExtension("GL_OES_read_format")]
        ImplementationColorReadTypeOES = 0x8B9A,

        [GLExtension("GL_OES_read_format")]
        ImplementationColorReadFormatOES = 0x8B9B,

        [GLExtension("GL_OES_point_size_array")]
        PointSizeArrayOES = 0x8B9C,

        [GLExtension("GL_OES_draw_texture")]
        TextureCropRectOES = 0x8B9D,

        [GLExtension("GL_OES_matrix_palette")]
        MatrixIndexArrayBufferBindingOES = 0x8B9E,

        [GLExtension("GL_OES_point_size_array")]
        PointSizeArrayBufferBindingOES = 0x8B9F,
        FragmentProgramPositionMESA = 0x8BB0,
        FragmentProgramCallbackMESA = 0x8BB1,
        FragmentProgramCallbackFuncMESA = 0x8BB2,
        FragmentProgramCallbackDataMESA = 0x8BB3,
        VertexProgramPositionMESA = 0x8BB4,
        VertexProgramCallbackMESA = 0x8BB5,
        VertexProgramCallbackFuncMESA = 0x8BB6,
        VertexProgramCallbackDataMESA = 0x8BB7,

        [GLExtension("GL_MESA_tile_raster_order")]
        TileRasterOrderFixedMESA = 0x8BB8,

        [GLExtension("GL_MESA_tile_raster_order")]
        TileRasterOrderIncreasingXMESA = 0x8BB9,

        [GLExtension("GL_MESA_tile_raster_order")]
        TileRasterOrderIncreasingYMESA = 0x8BBA,

        [GLExtension("GL_MESA_framebuffer_flip_y")]
        FramebufferFlipYMESA = 0x8BBB,

        [GLExtension("GL_MESA_framebuffer_flip_x")]
        FramebufferFlipXMESA = 0x8BBC,

        [GLExtension("GL_MESA_framebuffer_swap_xy")]
        FramebufferSwapXyMESA = 0x8BBD,

        [GLExtension("GL_AMD_performance_monitor")]
        CounterTypeAMD = 0x8BC0,

        [GLExtension("GL_AMD_performance_monitor")]
        CounterRangeAMD = 0x8BC1,

        [GLExtension("GL_AMD_performance_monitor")]
        UnsignedInt64AMD = 0x8BC2,

        [GLExtension("GL_AMD_performance_monitor")]
        PercentageAMD = 0x8BC3,

        [GLExtension("GL_AMD_performance_monitor")]
        PerfmonResultAvailableAMD = 0x8BC4,

        [GLExtension("GL_AMD_performance_monitor")]
        PerfmonResultSizeAMD = 0x8BC5,

        [GLExtension("GL_AMD_performance_monitor")]
        PerfmonResultAMD = 0x8BC6,

        [GLExtension("GL_QCOM_extended_get")]
        TextureWidthQCOM = 0x8BD2,

        [GLExtension("GL_QCOM_extended_get")]
        TextureHeightQCOM = 0x8BD3,

        [GLExtension("GL_QCOM_extended_get")]
        TextureDepthQCOM = 0x8BD4,

        [GLExtension("GL_QCOM_extended_get")]
        TextureInternalFormatQCOM = 0x8BD5,

        [GLExtension("GL_QCOM_extended_get")]
        TextureFormatQCOM = 0x8BD6,

        [GLExtension("GL_QCOM_extended_get")]
        TextureTypeQCOM = 0x8BD7,

        [GLExtension("GL_QCOM_extended_get")]
        TextureImageValidQCOM = 0x8BD8,

        [GLExtension("GL_QCOM_extended_get")]
        TextureNumLevelsQCOM = 0x8BD9,

        [GLExtension("GL_QCOM_extended_get")]
        TextureTargetQCOM = 0x8BDA,

        [GLExtension("GL_QCOM_extended_get")]
        TextureObjectValidQCOM = 0x8BDB,

        [GLExtension("GL_QCOM_extended_get")]
        StateRestore = 0x8BDC,

        [GLExtension("GL_EXT_YUV_target")]
        SamplerExternal2DY2yEXT = 0x8BE7,

        [GLExtension("GL_EXT_protected_textures")]
        TextureProtectedEXT = 0x8BFA,

        [GLExtension("GL_QCOM_texture_foveated")]
        TextureFoveatedFeatureBitsQCOM = 0x8BFB,

        [GLExtension("GL_QCOM_texture_foveated")]
        TextureFoveatedMinPixelDensityQCOM = 0x8BFC,

        [GLExtension("GL_QCOM_texture_foveated")]
        TextureFoveatedFeatureQueryQCOM = 0x8BFD,

        [GLExtension("GL_QCOM_texture_foveated")]
        TextureFoveatedNumFocalPointsQueryQCOM = 0x8BFE,

        [GLExtension("GL_QCOM_texture_foveated")]
        FramebufferIncompleteFoveationQCOM = 0x8BFF,

        [GLExtension("GL_IMG_texture_compression_pvrtc")]
        CompressedRgbPvrtc4bppv1Img = 0x8C00,

        [GLExtension("GL_IMG_texture_compression_pvrtc")]
        CompressedRgbPvrtc2bppv1Img = 0x8C01,

        [GLExtension("GL_IMG_texture_compression_pvrtc")]
        CompressedRgbaPvrtc4bppv1Img = 0x8C02,

        [GLExtension("GL_IMG_texture_compression_pvrtc")]
        CompressedRgbaPvrtc2bppv1Img = 0x8C03,

        [GLExtension("GL_IMG_texture_env_enhanced_fixed_function")]
        ModulateColorImg = 0x8C04,

        [GLExtension("GL_IMG_texture_env_enhanced_fixed_function")]
        RecipAddSignedAlphaImg = 0x8C05,

        [GLExtension("GL_IMG_texture_env_enhanced_fixed_function")]
        TextureAlphaModulateImg = 0x8C06,

        [GLExtension("GL_IMG_texture_env_enhanced_fixed_function")]
        FactorAlphaModulateImg = 0x8C07,

        [GLExtension("GL_IMG_texture_env_enhanced_fixed_function")]
        FragmentAlphaModulateImg = 0x8C08,

        [GLExtension("GL_IMG_texture_env_enhanced_fixed_function")]
        AddBlendImg = 0x8C09,
        TextureRedType = 0x8C10,

        [GLExtension("GL_ARB_texture_float")]
        TextureRedTypeARB = 0x8C10,
        TextureGreenType = 0x8C11,

        [GLExtension("GL_ARB_texture_float")]
        TextureGreenTypeARB = 0x8C11,
        TextureBlueType = 0x8C12,

        [GLExtension("GL_ARB_texture_float")]
        TextureBlueTypeARB = 0x8C12,
        TextureAlphaType = 0x8C13,

        [GLExtension("GL_ARB_texture_float")]
        TextureAlphaTypeARB = 0x8C13,
        TextureLuminanceType = 0x8C14,

        [GLExtension("GL_ARB_texture_float")]
        TextureLuminanceTypeARB = 0x8C14,
        TextureIntensityType = 0x8C15,

        [GLExtension("GL_ARB_texture_float")]
        TextureIntensityTypeARB = 0x8C15,
        TextureDepthType = 0x8C16,

        [GLExtension("GL_ARB_texture_float")]
        TextureDepthTypeARB = 0x8C16,

        [GLExtension("GL_ARB_framebuffer_object")]
        UnsignedNormalized = 0x8C17,

        [GLExtension("GL_ARB_texture_float")]
        UnsignedNormalizedARB = 0x8C17,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        UnsignedNormalizedEXT = 0x8C17,

        [GLExtension("GL_EXT_texture_array")]
        Texture1DArrayEXT = 0x8C18,

        [GLExtension("GL_EXT_texture_array")]
        Texture2DArrayEXT = 0x8C1A,

        [GLExtension("GL_EXT_texture_array")]
        TextureBinding1DArrayEXT = 0x8C1C,

        [GLExtension("GL_EXT_texture_array")]
        TextureBinding2DArrayEXT = 0x8C1D,

        [GLExtension("GL_NV_geometry_program4")]
        MaxProgramOutputVerticesNV = 0x8C27,

        [GLExtension("GL_NV_geometry_program4")]
        MaxProgramTotalOutputComponentsNV = 0x8C28,

        [GLExtension("GL_ARB_geometry_shader4")]
        MaxGeometryTextureImageUnitsARB = 0x8C29,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryTextureImageUnitsEXT = 0x8C29,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryTextureImageUnitsOES = 0x8C29,

        [GLExtension("GL_ARB_texture_buffer_object")]
        TextureBufferARB = 0x8C2A,

        [GLExtension("GL_EXT_texture_buffer")]
        TextureBufferEXT = 0x8C2A,

        [GLExtension("GL_OES_texture_buffer")]
        TextureBufferOES = 0x8C2A,
        TextureBufferBinding = 0x8C2A,

        [GLExtension("GL_EXT_texture_buffer")]
        TextureBufferBindingEXT = 0x8C2A,

        [GLExtension("GL_OES_texture_buffer")]
        TextureBufferBindingOES = 0x8C2A,

        [GLExtension("GL_ARB_texture_buffer_object")]
        MaxTextureBufferSizeARB = 0x8C2B,

        [GLExtension("GL_EXT_texture_buffer")]
        MaxTextureBufferSizeEXT = 0x8C2B,

        [GLExtension("GL_OES_texture_buffer")]
        MaxTextureBufferSizeOES = 0x8C2B,

        [GLExtension("GL_ARB_texture_buffer_object")]
        TextureBindingBufferARB = 0x8C2C,

        [GLExtension("GL_EXT_texture_buffer")]
        TextureBindingBufferEXT = 0x8C2C,

        [GLExtension("GL_OES_texture_buffer")]
        TextureBindingBufferOES = 0x8C2C,
        TextureBufferDataStoreBinding = 0x8C2D,

        [GLExtension("GL_ARB_texture_buffer_object")]
        TextureBufferDataStoreBindingARB = 0x8C2D,

        [GLExtension("GL_EXT_texture_buffer")]
        TextureBufferDataStoreBindingEXT = 0x8C2D,

        [GLExtension("GL_OES_texture_buffer")]
        TextureBufferDataStoreBindingOES = 0x8C2D,

        [GLExtension("GL_ARB_texture_buffer_object")]
        TextureBufferFormatARB = 0x8C2E,

        [GLExtension("GL_EXT_texture_buffer_object")]
        TextureBufferFormatEXT = 0x8C2E,

        [GLExtension("GL_EXT_occlusion_query_boolean")]
        AnySamplesPassedEXT = 0x8C2F,

        [GLExtension("GL_ARB_sample_shading")]
        SampleShadingARB = 0x8C36,

        [GLExtension("GL_OES_sample_shading")]
        SampleShadingOES = 0x8C36,
        MinSampleShadingValue = 0x8C37,

        [GLExtension("GL_ARB_sample_shading")]
        MinSampleShadingValueARB = 0x8C37,

        [GLExtension("GL_OES_sample_shading")]
        MinSampleShadingValueOES = 0x8C37,

        [GLExtension("GL_EXT_packed_float")]
        RgbaSignedComponentsEXT = 0x8C3C,
        TextureSharedSize = 0x8C3F,

        [GLExtension("GL_EXT_texture_shared_exponent")]
        TextureSharedSizeEXT = 0x8C3F,
        SluminanceAlpha = 0x8C44,

        [GLExtension("GL_EXT_texture_sRGB")]
        SluminanceAlphaEXT = 0x8C44,

        [GLExtension("GL_NV_sRGB_formats")]
        SluminanceAlphaNV = 0x8C44,
        Sluminance8Alpha8 = 0x8C45,

        [GLExtension("GL_EXT_texture_sRGB")]
        Sluminance8Alpha8EXT = 0x8C45,

        [GLExtension("GL_NV_sRGB_formats")]
        Sluminance8Alpha8NV = 0x8C45,
        Sluminance = 0x8C46,

        [GLExtension("GL_EXT_texture_sRGB")]
        SluminanceEXT = 0x8C46,

        [GLExtension("GL_NV_sRGB_formats")]
        SluminanceNV = 0x8C46,
        Sluminance8 = 0x8C47,

        [GLExtension("GL_EXT_texture_sRGB")]
        Sluminance8EXT = 0x8C47,

        [GLExtension("GL_NV_sRGB_formats")]
        Sluminance8NV = 0x8C47,

        [GLExtension("GL_EXT_texture_sRGB")]
        CompressedSrgbEXT = 0x8C48,

        [GLExtension("GL_EXT_texture_sRGB")]
        CompressedSrgbAlphaEXT = 0x8C49,
        CompressedSluminance = 0x8C4A,

        [GLExtension("GL_EXT_texture_sRGB")]
        CompressedSluminanceEXT = 0x8C4A,
        CompressedSluminanceAlpha = 0x8C4B,

        [GLExtension("GL_EXT_texture_sRGB")]
        CompressedSluminanceAlphaEXT = 0x8C4B,

        [GLExtension("GL_EXT_texture_compression_latc")]
        CompressedLuminanceLatc1EXT = 0x8C70,

        [GLExtension("GL_EXT_texture_compression_latc")]
        CompressedSignedLuminanceLatc1EXT = 0x8C71,

        [GLExtension("GL_EXT_texture_compression_latc")]
        CompressedLuminanceAlphaLatc2EXT = 0x8C72,

        [GLExtension("GL_EXT_texture_compression_latc")]
        CompressedSignedLuminanceAlphaLatc2EXT = 0x8C73,

        [GLExtension("GL_NV_tessellation_program5")]
        TessControlProgramParameterBufferNV = 0x8C74,

        [GLExtension("GL_NV_tessellation_program5")]
        TessEvaluationProgramParameterBufferNV = 0x8C75,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackVaryingMaxLengthEXT = 0x8C76,

        [GLExtension("GL_NV_transform_feedback")]
        BackPrimaryColorNV = 0x8C77,

        [GLExtension("GL_NV_transform_feedback")]
        BackSecondaryColorNV = 0x8C78,

        [GLExtension("GL_NV_transform_feedback")]
        TextureCoordNV = 0x8C79,

        [GLExtension("GL_NV_transform_feedback")]
        ClipDistanceNV = 0x8C7A,

        [GLExtension("GL_NV_transform_feedback")]
        VertexIdNV = 0x8C7B,

        [GLExtension("GL_NV_transform_feedback")]
        PrimitiveIdNV = 0x8C7C,

        [GLExtension("GL_NV_transform_feedback")]
        GenericAttribNV = 0x8C7D,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackAttribsNV = 0x8C7E,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackBufferModeEXT = 0x8C7F,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackBufferModeNV = 0x8C7F,
        MaxTransformFeedbackSeparateComponents = 0x8C80,

        [GLExtension("GL_EXT_transform_feedback")]
        MaxTransformFeedbackSeparateComponentsEXT = 0x8C80,

        [GLExtension("GL_NV_transform_feedback")]
        MaxTransformFeedbackSeparateComponentsNV = 0x8C80,

        [GLExtension("GL_NV_transform_feedback")]
        ActiveVaryingsNV = 0x8C81,

        [GLExtension("GL_NV_transform_feedback")]
        ActiveVaryingMaxLengthNV = 0x8C82,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackVaryingsEXT = 0x8C83,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackVaryingsNV = 0x8C83,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackBufferStartEXT = 0x8C84,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackBufferStartNV = 0x8C84,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackBufferSizeEXT = 0x8C85,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackBufferSizeNV = 0x8C85,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackRecordNV = 0x8C86,

        [GLExtension("GL_EXT_geometry_shader")]
        PrimitivesGeneratedEXT = 0x8C87,

        [GLExtension("GL_NV_transform_feedback")]
        PrimitivesGeneratedNV = 0x8C87,

        [GLExtension("GL_OES_geometry_shader")]
        PrimitivesGeneratedOES = 0x8C87,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackPrimitivesWrittenEXT = 0x8C88,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackPrimitivesWrittenNV = 0x8C88,

        [GLExtension("GL_EXT_transform_feedback")]
        RasterizerDiscardEXT = 0x8C89,

        [GLExtension("GL_NV_transform_feedback")]
        RasterizerDiscardNV = 0x8C89,
        MaxTransformFeedbackInterleavedComponents = 0x8C8A,

        [GLExtension("GL_EXT_transform_feedback")]
        MaxTransformFeedbackInterleavedComponentsEXT = 0x8C8A,

        [GLExtension("GL_NV_transform_feedback")]
        MaxTransformFeedbackInterleavedComponentsNV = 0x8C8A,
        MaxTransformFeedbackSeparateAttribs = 0x8C8B,

        [GLExtension("GL_EXT_transform_feedback")]
        MaxTransformFeedbackSeparateAttribsEXT = 0x8C8B,

        [GLExtension("GL_NV_transform_feedback")]
        MaxTransformFeedbackSeparateAttribsNV = 0x8C8B,

        [GLExtension("GL_EXT_transform_feedback")]
        InterleavedAttribsEXT = 0x8C8C,

        [GLExtension("GL_NV_transform_feedback")]
        InterleavedAttribsNV = 0x8C8C,

        [GLExtension("GL_EXT_transform_feedback")]
        SeparateAttribsEXT = 0x8C8D,

        [GLExtension("GL_NV_transform_feedback")]
        SeparateAttribsNV = 0x8C8D,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackBufferEXT = 0x8C8E,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackBufferNV = 0x8C8E,

        [GLExtension("GL_EXT_transform_feedback")]
        TransformFeedbackBufferBindingEXT = 0x8C8F,

        [GLExtension("GL_NV_transform_feedback")]
        TransformFeedbackBufferBindingNV = 0x8C8F,

        [GLExtension("GL_AMD_compressed_ATC_texture")]
        AtcRgbAMD = 0x8C92,

        [GLExtension("GL_AMD_compressed_ATC_texture")]
        AtcRgbaExplicitAlphaAMD = 0x8C93,
        PointSpriteCoordOrigin = 0x8CA0,

        [GLExtension("GL_EXT_clip_control")]
        LowerLeftEXT = 0x8CA1,

        [GLExtension("GL_EXT_clip_control")]
        UpperLeftEXT = 0x8CA2,

        [GLExtension("GL_ANGLE_framebuffer_blit")]
        DrawFramebufferBindingAngle = 0x8CA6,

        [GLExtension("GL_APPLE_framebuffer_multisample")]
        DrawFramebufferBindingAPPLE = 0x8CA6,

        [GLExtension("GL_EXT_framebuffer_blit")]
        DrawFramebufferBindingEXT = 0x8CA6,

        [GLExtension("GL_NV_framebuffer_blit")]
        DrawFramebufferBindingNV = 0x8CA6,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferBinding = 0x8CA6,
        FramebufferBindingAngle = 0x8CA6,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferBindingEXT = 0x8CA6,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferBindingOES = 0x8CA6,
        RenderbufferBindingAngle = 0x8CA7,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferBindingEXT = 0x8CA7,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferBindingOES = 0x8CA7,

        [GLExtension("GL_ANGLE_framebuffer_blit")]
        ReadFramebufferAngle = 0x8CA8,

        [GLExtension("GL_APPLE_framebuffer_multisample")]
        ReadFramebufferAPPLE = 0x8CA8,

        [GLExtension("GL_EXT_framebuffer_blit")]
        ReadFramebufferEXT = 0x8CA8,

        [GLExtension("GL_NV_framebuffer_blit")]
        ReadFramebufferNV = 0x8CA8,

        [GLExtension("GL_ANGLE_framebuffer_blit")]
        DrawFramebufferAngle = 0x8CA9,

        [GLExtension("GL_APPLE_framebuffer_multisample")]
        DrawFramebufferAPPLE = 0x8CA9,

        [GLExtension("GL_EXT_framebuffer_blit")]
        DrawFramebufferEXT = 0x8CA9,

        [GLExtension("GL_NV_framebuffer_blit")]
        DrawFramebufferNV = 0x8CA9,

        [GLExtension("GL_ANGLE_framebuffer_blit")]
        ReadFramebufferBindingAngle = 0x8CAA,

        [GLExtension("GL_APPLE_framebuffer_multisample")]
        ReadFramebufferBindingAPPLE = 0x8CAA,

        [GLExtension("GL_EXT_framebuffer_blit")]
        ReadFramebufferBindingEXT = 0x8CAA,

        [GLExtension("GL_NV_framebuffer_blit")]
        ReadFramebufferBindingNV = 0x8CAA,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferCompleteEXT = 0x8CD5,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferCompleteOES = 0x8CD5,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferIncompleteAttachmentEXT = 0x8CD6,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferIncompleteAttachmentOES = 0x8CD6,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferIncompleteMissingAttachmentEXT = 0x8CD7,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferIncompleteMissingAttachmentOES = 0x8CD7,
        FramebufferIncompleteDimensions = 0x8CD9,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferIncompleteDimensionsEXT = 0x8CD9,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferIncompleteDimensionsOES = 0x8CD9,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferIncompleteFormatsEXT = 0x8CDA,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferIncompleteFormatsOES = 0x8CDA,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferIncompleteDrawBufferEXT = 0x8CDB,
        FramebufferIncompleteDrawBufferOES = 0x8CDB,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferIncompleteReadBufferEXT = 0x8CDC,
        FramebufferIncompleteReadBufferOES = 0x8CDC,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferUnsupportedEXT = 0x8CDD,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferUnsupportedOES = 0x8CDD,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferEXT = 0x8D40,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferEXT = 0x8D41,

        [GLExtension("GL_ANGLE_framebuffer_multisample")]
        FramebufferIncompleteMultisampleAngle = 0x8D56,

        [GLExtension("GL_APPLE_framebuffer_multisample")]
        FramebufferIncompleteMultisampleAPPLE = 0x8D56,

        [GLExtension("GL_EXT_framebuffer_multisample")]
        FramebufferIncompleteMultisampleEXT = 0x8D56,

        [GLExtension("GL_NV_framebuffer_multisample")]
        FramebufferIncompleteMultisampleNV = 0x8D56,

        [GLExtension("GL_ARB_framebuffer_object")]
        MaxSamples = 0x8D57,

        [GLExtension("GL_ANGLE_framebuffer_multisample")]
        MaxSamplesAngle = 0x8D57,

        [GLExtension("GL_APPLE_framebuffer_multisample")]
        MaxSamplesAPPLE = 0x8D57,

        [GLExtension("GL_EXT_framebuffer_multisample")]
        MaxSamplesEXT = 0x8D57,

        [GLExtension("GL_NV_framebuffer_multisample")]
        MaxSamplesNV = 0x8D57,

        [GLExtension("GL_OES_texture_half_float")]
        HalfFloatOES = 0x8D61,

        [GLExtension("GL_EXT_YUV_target")]
        TextureExternalOES = 0x8D65,

        [GLExtension("GL_OES_EGL_image_external")]
        SamplerExternalOES = 0x8D66,

        [GLExtension("GL_EXT_YUV_target")]
        TextureBindingExternalOES = 0x8D67,

        [GLExtension("GL_EXT_YUV_target")]
        RequiredTextureImageUnitsOES = 0x8D68,

        [GLExtension("GL_EXT_occlusion_query_boolean")]
        AnySamplesPassedConservativeEXT = 0x8D6A,

        [GLExtension("GL_EXT_texture_integer")]
        RedIntegerEXT = 0x8D94,

        [GLExtension("GL_EXT_texture_integer")]
        GreenIntegerEXT = 0x8D95,

        [GLExtension("GL_EXT_texture_integer")]
        BlueIntegerEXT = 0x8D96,
        AlphaInteger = 0x8D97,

        [GLExtension("GL_EXT_texture_integer")]
        AlphaIntegerEXT = 0x8D97,

        [GLExtension("GL_EXT_texture_integer")]
        RgbIntegerEXT = 0x8D98,

        [GLExtension("GL_EXT_texture_integer")]
        RgbaIntegerEXT = 0x8D99,

        [GLExtension("GL_EXT_texture_integer")]
        BgrIntegerEXT = 0x8D9A,

        [GLExtension("GL_EXT_texture_integer")]
        BgraIntegerEXT = 0x8D9B,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceIntegerEXT = 0x8D9C,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlphaIntegerEXT = 0x8D9D,

        [GLExtension("GL_EXT_texture_integer")]
        RgbaIntegerModeEXT = 0x8D9E,

        [GLExtension("GL_NV_parameter_buffer_object")]
        MaxProgramParameterBufferBindingsNV = 0x8DA0,

        [GLExtension("GL_NV_parameter_buffer_object")]
        MaxProgramParameterBufferSizeNV = 0x8DA1,

        [GLExtension("GL_NV_parameter_buffer_object")]
        VertexProgramParameterBufferNV = 0x8DA2,

        [GLExtension("GL_NV_parameter_buffer_object")]
        GeometryProgramParameterBufferNV = 0x8DA3,

        [GLExtension("GL_NV_parameter_buffer_object")]
        FragmentProgramParameterBufferNV = 0x8DA4,

        [GLExtension("GL_NV_gpu_program4")]
        MaxProgramGenericAttribsNV = 0x8DA5,

        [GLExtension("GL_NV_gpu_program4")]
        MaxProgramGenericResultsNV = 0x8DA6,

        [GLExtension("GL_ARB_geometry_shader4")]
        FramebufferIncompleteLayerTargetsARB = 0x8DA8,

        [GLExtension("GL_EXT_geometry_shader")]
        FramebufferIncompleteLayerTargetsEXT = 0x8DA8,

        [GLExtension("GL_OES_geometry_shader")]
        FramebufferIncompleteLayerTargetsOES = 0x8DA8,

        [GLExtension("GL_ARB_geometry_shader4")]
        FramebufferIncompleteLayerCountARB = 0x8DA9,

        [GLExtension("GL_EXT_geometry_shader4")]
        FramebufferIncompleteLayerCountEXT = 0x8DA9,

        [GLExtension("GL_NV_transform_feedback")]
        LayerNV = 0x8DAA,

        [GLExtension("GL_ARB_shading_language_include")]
        ShaderIncludeARB = 0x8DAE,

        [GLExtension("GL_NV_depth_buffer_float")]
        DepthBufferFloatModeNV = 0x8DAF,

        [GLExtension("GL_EXT_framebuffer_sRGB")]
        FramebufferSrgbEXT = 0x8DB9,

        [GLExtension("GL_EXT_framebuffer_sRGB")]
        FramebufferSrgbCapableEXT = 0x8DBA,

        [GLExtension("GL_EXT_gpu_shader4")]
        Sampler1DArrayEXT = 0x8DC0,

        [GLExtension("GL_EXT_gpu_shader4")]
        Sampler2DArrayEXT = 0x8DC1,

        [GLExtension("GL_EXT_gpu_shader4")]
        SamplerBufferEXT = 0x8DC2,

        [GLExtension("GL_OES_texture_buffer")]
        SamplerBufferOES = 0x8DC2,

        [GLExtension("GL_EXT_gpu_shader4")]
        Sampler1DArrayShadowEXT = 0x8DC3,

        [GLExtension("GL_EXT_gpu_shader4")]
        Sampler2DArrayShadowEXT = 0x8DC4,

        [GLExtension("GL_NV_shadow_samplers_array")]
        Sampler2DArrayShadowNV = 0x8DC4,

        [GLExtension("GL_EXT_gpu_shader4")]
        SamplerCubeShadowEXT = 0x8DC5,

        [GLExtension("GL_NV_shadow_samplers_cube")]
        SamplerCubeShadowNV = 0x8DC5,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntVec2EXT = 0x8DC6,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntVec3EXT = 0x8DC7,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntVec4EXT = 0x8DC8,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSampler1DEXT = 0x8DC9,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSampler2DEXT = 0x8DCA,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSampler3DEXT = 0x8DCB,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSamplerCubeEXT = 0x8DCC,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSampler2DRectEXT = 0x8DCD,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSampler1DArrayEXT = 0x8DCE,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSampler2DArrayEXT = 0x8DCF,

        [GLExtension("GL_EXT_gpu_shader4")]
        IntSamplerBufferEXT = 0x8DD0,

        [GLExtension("GL_OES_texture_buffer")]
        IntSamplerBufferOES = 0x8DD0,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSampler1DEXT = 0x8DD1,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSampler2DEXT = 0x8DD2,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSampler3DEXT = 0x8DD3,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSamplerCubeEXT = 0x8DD4,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSampler2DRectEXT = 0x8DD5,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSampler1DArrayEXT = 0x8DD6,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSampler2DArrayEXT = 0x8DD7,

        [GLExtension("GL_EXT_gpu_shader4")]
        UnsignedIntSamplerBufferEXT = 0x8DD8,

        [GLExtension("GL_OES_texture_buffer")]
        UnsignedIntSamplerBufferOES = 0x8DD8,

        [GLExtension("GL_ARB_geometry_shader4")]
        GeometryShaderARB = 0x8DD9,

        [GLExtension("GL_EXT_geometry_shader")]
        GeometryShaderEXT = 0x8DD9,

        [GLExtension("GL_OES_geometry_shader")]
        GeometryShaderOES = 0x8DD9,

        [GLExtension("GL_ARB_geometry_shader4")]
        GeometryVerticesOutARB = 0x8DDA,

        [GLExtension("GL_EXT_geometry_shader4")]
        GeometryVerticesOutEXT = 0x8DDA,

        [GLExtension("GL_ARB_geometry_shader4")]
        GeometryInputTypeARB = 0x8DDB,

        [GLExtension("GL_EXT_geometry_shader4")]
        GeometryInputTypeEXT = 0x8DDB,

        [GLExtension("GL_ARB_geometry_shader4")]
        GeometryOutputTypeARB = 0x8DDC,

        [GLExtension("GL_EXT_geometry_shader4")]
        GeometryOutputTypeEXT = 0x8DDC,

        [GLExtension("GL_ARB_geometry_shader4")]
        MaxGeometryVaryingComponentsARB = 0x8DDD,

        [GLExtension("GL_EXT_geometry_shader4")]
        MaxGeometryVaryingComponentsEXT = 0x8DDD,

        [GLExtension("GL_ARB_geometry_shader4")]
        MaxVertexVaryingComponentsARB = 0x8DDE,

        [GLExtension("GL_EXT_geometry_shader4")]
        MaxVertexVaryingComponentsEXT = 0x8DDE,

        [GLExtension("GL_ARB_geometry_shader4")]
        MaxGeometryUniformComponentsARB = 0x8DDF,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryUniformComponentsEXT = 0x8DDF,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryUniformComponentsOES = 0x8DDF,
        MaxGeometryOutputVertices = 0x8DE0,

        [GLExtension("GL_ARB_geometry_shader4")]
        MaxGeometryOutputVerticesARB = 0x8DE0,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryOutputVerticesEXT = 0x8DE0,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryOutputVerticesOES = 0x8DE0,
        MaxGeometryTotalOutputComponents = 0x8DE1,

        [GLExtension("GL_ARB_geometry_shader4")]
        MaxGeometryTotalOutputComponentsARB = 0x8DE1,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryTotalOutputComponentsEXT = 0x8DE1,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryTotalOutputComponentsOES = 0x8DE1,

        [GLExtension("GL_EXT_bindable_uniform")]
        MaxVertexBindableUniformsEXT = 0x8DE2,

        [GLExtension("GL_EXT_bindable_uniform")]
        MaxFragmentBindableUniformsEXT = 0x8DE3,

        [GLExtension("GL_EXT_bindable_uniform")]
        MaxGeometryBindableUniformsEXT = 0x8DE4,

        [GLExtension("GL_ARB_shader_subroutine")]
        MaxSubroutines = 0x8DE7,

        [GLExtension("GL_ARB_shader_subroutine")]
        MaxSubroutineUniformLocations = 0x8DE8,

        [GLExtension("GL_ARB_shading_language_include")]
        NamedStringLengthARB = 0x8DE9,

        [GLExtension("GL_ARB_shading_language_include")]
        NamedStringTypeARB = 0x8DEA,

        [GLExtension("GL_EXT_bindable_uniform")]
        MaxBindableUniformSizeEXT = 0x8DED,

        [GLExtension("GL_EXT_bindable_uniform")]
        UniformBufferEXT = 0x8DEE,

        [GLExtension("GL_EXT_bindable_uniform")]
        UniformBufferBindingEXT = 0x8DEF,

        [GLExtension("GL_OES_vertex_type_10_10_10_2")]
        UnsignedInt1010102OES = 0x8DF6,

        [GLExtension("GL_OES_vertex_type_10_10_10_2")]
        Int1010102OES = 0x8DF7,

        [GLExtension("GL_NV_framebuffer_multisample_coverage")]
        MaxMultisampleCoverageModesNV = 0x8E11,

        [GLExtension("GL_NV_framebuffer_multisample_coverage")]
        MultisampleCoverageModesNV = 0x8E12,

        [GLExtension("GL_NV_conditional_render")]
        QueryWaitNV = 0x8E13,

        [GLExtension("GL_NV_conditional_render")]
        QueryNoWaitNV = 0x8E14,

        [GLExtension("GL_NV_conditional_render")]
        QueryByRegionWaitNV = 0x8E15,

        [GLExtension("GL_NV_conditional_render")]
        QueryByRegionNoWaitNV = 0x8E16,

        [GLExtension("GL_ARB_polygon_offset_clamp")]
        PolygonOffsetClamp = 0x8E1B,

        [GLExtension("GL_EXT_polygon_offset_clamp")]
        PolygonOffsetClampEXT = 0x8E1B,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxCombinedTessControlUniformComponents = 0x8E1E,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxCombinedTessControlUniformComponentsEXT = 0x8E1E,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxCombinedTessControlUniformComponentsOES = 0x8E1E,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxCombinedTessEvaluationUniformComponents = 0x8E1F,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxCombinedTessEvaluationUniformComponentsEXT = 0x8E1F,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxCombinedTessEvaluationUniformComponentsOES = 0x8E1F,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        ColorSamplesNV = 0x8E20,

        [GLExtension("GL_NV_transform_feedback2")]
        TransformFeedbackNV = 0x8E22,

        [GLExtension("GL_ARB_transform_feedback2")]
        TransformFeedbackBufferPaused = 0x8E23,

        [GLExtension("GL_NV_transform_feedback2")]
        TransformFeedbackBufferPausedNV = 0x8E23,

        [GLExtension("GL_ARB_transform_feedback2")]
        TransformFeedbackBufferActive = 0x8E24,

        [GLExtension("GL_NV_transform_feedback2")]
        TransformFeedbackBufferActiveNV = 0x8E24,

        [GLExtension("GL_ARB_transform_feedback2")]
        TransformFeedbackBinding = 0x8E25,

        [GLExtension("GL_NV_transform_feedback2")]
        TransformFeedbackBindingNV = 0x8E25,

        [GLExtension("GL_NV_present_video")]
        FrameNV = 0x8E26,

        [GLExtension("GL_NV_present_video")]
        FieldsNV = 0x8E27,

        [GLExtension("GL_NV_present_video")]
        CurrentTimeNV = 0x8E28,

        [GLExtension("GL_NV_present_video")]
        NumFillStreamsNV = 0x8E29,

        [GLExtension("GL_NV_present_video")]
        PresentTimeNV = 0x8E2A,

        [GLExtension("GL_NV_present_video")]
        PresentDurationNV = 0x8E2B,

        [GLExtension("GL_NV_depth_nonlinear")]
        DepthComponent16NonlinearNV = 0x8E2C,

        [GLExtension("GL_EXT_direct_state_access")]
        ProgramMatrixEXT = 0x8E2D,

        [GLExtension("GL_EXT_direct_state_access")]
        TransposeProgramMatrixEXT = 0x8E2E,

        [GLExtension("GL_EXT_direct_state_access")]
        ProgramMatrixStackDepthEXT = 0x8E2F,

        [GLExtension("GL_EXT_texture_swizzle")]
        TextureSwizzleREXT = 0x8E42,

        [GLExtension("GL_EXT_texture_swizzle")]
        TextureSwizzleGEXT = 0x8E43,

        [GLExtension("GL_EXT_texture_swizzle")]
        TextureSwizzleBEXT = 0x8E44,

        [GLExtension("GL_EXT_texture_swizzle")]
        TextureSwizzleAEXT = 0x8E45,

        [GLExtension("GL_EXT_texture_swizzle")]
        TextureSwizzleRgbaEXT = 0x8E46,

        [GLExtension("GL_ARB_provoking_vertex")]
        QuadsFollowProvokingVertexConvention = 0x8E4C,

        [GLExtension("GL_EXT_provoking_vertex")]
        QuadsFollowProvokingVertexConventionEXT = 0x8E4C,

        [GLExtension("GL_EXT_geometry_shader")]
        FirstVertexConventionEXT = 0x8E4D,

        [GLExtension("GL_OES_geometry_shader")]
        FirstVertexConventionOES = 0x8E4D,

        [GLExtension("GL_EXT_geometry_shader")]
        LastVertexConventionEXT = 0x8E4E,

        [GLExtension("GL_OES_geometry_shader")]
        LastVertexConventionOES = 0x8E4E,

        [GLExtension("GL_EXT_provoking_vertex")]
        ProvokingVertexEXT = 0x8E4F,

        [GLExtension("GL_NV_explicit_multisample")]
        SamplePositionNV = 0x8E50,

        [GLExtension("GL_NV_sample_locations")]
        SampleLocationNV = 0x8E50,

        [GLExtension("GL_NV_explicit_multisample")]
        SampleMaskNV = 0x8E51,

        [GLExtension("GL_ARB_texture_multisample")]
        SampleMaskValue = 0x8E52,

        [GLExtension("GL_NV_explicit_multisample")]
        SampleMaskValueNV = 0x8E52,

        [GLExtension("GL_NV_explicit_multisample")]
        TextureBindingRenderbufferNV = 0x8E53,

        [GLExtension("GL_NV_explicit_multisample")]
        TextureRenderbufferDataStoreBindingNV = 0x8E54,

        [GLExtension("GL_NV_explicit_multisample")]
        TextureRenderbufferNV = 0x8E55,

        [GLExtension("GL_NV_explicit_multisample")]
        SamplerRenderbufferNV = 0x8E56,

        [GLExtension("GL_NV_explicit_multisample")]
        IntSamplerRenderbufferNV = 0x8E57,

        [GLExtension("GL_NV_explicit_multisample")]
        UnsignedIntSamplerRenderbufferNV = 0x8E58,

        [GLExtension("GL_NV_explicit_multisample")]
        MaxSampleMaskWordsNV = 0x8E59,

        [GLExtension("GL_NV_gpu_program5")]
        MaxGeometryProgramInvocationsNV = 0x8E5A,

        [GLExtension("GL_ARB_gpu_shader5")]
        MaxGeometryShaderInvocations = 0x8E5A,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryShaderInvocationsEXT = 0x8E5A,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryShaderInvocationsOES = 0x8E5A,

        [GLExtension("GL_ARB_gpu_shader5")]
        MinFragmentInterpolationOffset = 0x8E5B,

        [GLExtension("GL_OES_shader_multisample_interpolation")]
        MinFragmentInterpolationOffsetOES = 0x8E5B,

        [GLExtension("GL_NV_gpu_program5")]
        MinFragmentInterpolationOffsetNV = 0x8E5B,

        [GLExtension("GL_ARB_gpu_shader5")]
        MaxFragmentInterpolationOffset = 0x8E5C,

        [GLExtension("GL_OES_shader_multisample_interpolation")]
        MaxFragmentInterpolationOffsetOES = 0x8E5C,

        [GLExtension("GL_NV_gpu_program5")]
        MaxFragmentInterpolationOffsetNV = 0x8E5C,

        [GLExtension("GL_ARB_gpu_shader5")]
        FragmentInterpolationOffsetBits = 0x8E5D,

        [GLExtension("GL_OES_shader_multisample_interpolation")]
        FragmentInterpolationOffsetBitsOES = 0x8E5D,

        [GLExtension("GL_NV_gpu_program5")]
        FragmentProgramInterpolationOffsetBitsNV = 0x8E5D,
        MinProgramTextureGatherOffset = 0x8E5E,

        [GLExtension("GL_ARB_texture_gather")]
        MinProgramTextureGatherOffsetARB = 0x8E5E,

        [GLExtension("GL_NV_gpu_program5")]
        MinProgramTextureGatherOffsetNV = 0x8E5E,
        MaxProgramTextureGatherOffset = 0x8E5F,

        [GLExtension("GL_ARB_texture_gather")]
        MaxProgramTextureGatherOffsetARB = 0x8E5F,

        [GLExtension("GL_NV_gpu_program5")]
        MaxProgramTextureGatherOffsetNV = 0x8E5F,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshUniformBlocksNV = 0x8E60,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshTextureImageUnitsNV = 0x8E61,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshImageUniformsNV = 0x8E62,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshUniformComponentsNV = 0x8E63,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshAtomicCounterBuffersNV = 0x8E64,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshAtomicCountersNV = 0x8E65,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshShaderStorageBlocksNV = 0x8E66,

        [GLExtension("GL_NV_mesh_shader")]
        MaxCombinedMeshUniformComponentsNV = 0x8E67,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskUniformBlocksNV = 0x8E68,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskTextureImageUnitsNV = 0x8E69,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskImageUniformsNV = 0x8E6A,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskUniformComponentsNV = 0x8E6B,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskAtomicCounterBuffersNV = 0x8E6C,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskAtomicCountersNV = 0x8E6D,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskShaderStorageBlocksNV = 0x8E6E,

        [GLExtension("GL_NV_mesh_shader")]
        MaxCombinedTaskUniformComponentsNV = 0x8E6F,

        [GLExtension("GL_ARB_transform_feedback3")]
        MaxTransformFeedbackBuffers = 0x8E70,

        [GLExtension("GL_ARB_gpu_shader5")]
        MaxVertexStreams = 0x8E71,

        [GLExtension("GL_EXT_tessellation_shader")]
        PatchVerticesEXT = 0x8E72,

        [GLExtension("GL_OES_tessellation_shader")]
        PatchVerticesOES = 0x8E72,
        PatchDefaultInnerLevelEXT = 0x8E73,
        PatchDefaultOuterLevelEXT = 0x8E74,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessControlOutputVertices = 0x8E75,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessControlOutputVerticesEXT = 0x8E75,

        [GLExtension("GL_OES_tessellation_shader")]
        TessControlOutputVerticesOES = 0x8E75,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessGenMode = 0x8E76,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessGenModeEXT = 0x8E76,

        [GLExtension("GL_OES_tessellation_shader")]
        TessGenModeOES = 0x8E76,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessGenSpacing = 0x8E77,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessGenSpacingEXT = 0x8E77,

        [GLExtension("GL_OES_tessellation_shader")]
        TessGenSpacingOES = 0x8E77,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessGenVertexOrder = 0x8E78,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessGenVertexOrderEXT = 0x8E78,

        [GLExtension("GL_OES_tessellation_shader")]
        TessGenVertexOrderOES = 0x8E78,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessGenPointMode = 0x8E79,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessGenPointModeEXT = 0x8E79,

        [GLExtension("GL_OES_tessellation_shader")]
        TessGenPointModeOES = 0x8E79,

        [GLExtension("GL_ARB_tessellation_shader")]
        Isolines = 0x8E7A,

        [GLExtension("GL_EXT_tessellation_shader")]
        IsolinesEXT = 0x8E7A,

        [GLExtension("GL_OES_tessellation_shader")]
        IsolinesOES = 0x8E7A,

        [GLExtension("GL_ARB_tessellation_shader")]
        FractionalOdd = 0x8E7B,

        [GLExtension("GL_EXT_tessellation_shader")]
        FractionalOddEXT = 0x8E7B,

        [GLExtension("GL_OES_tessellation_shader")]
        FractionalOddOES = 0x8E7B,

        [GLExtension("GL_ARB_tessellation_shader")]
        FractionalEven = 0x8E7C,

        [GLExtension("GL_EXT_tessellation_shader")]
        FractionalEvenEXT = 0x8E7C,

        [GLExtension("GL_OES_tessellation_shader")]
        FractionalEvenOES = 0x8E7C,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxPatchVertices = 0x8E7D,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxPatchVerticesEXT = 0x8E7D,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxPatchVerticesOES = 0x8E7D,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessGenLevel = 0x8E7E,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessGenLevelEXT = 0x8E7E,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessGenLevelOES = 0x8E7E,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessControlUniformComponents = 0x8E7F,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlUniformComponentsEXT = 0x8E7F,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlUniformComponentsOES = 0x8E7F,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessEvaluationUniformComponents = 0x8E80,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationUniformComponentsEXT = 0x8E80,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationUniformComponentsOES = 0x8E80,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessControlTextureImageUnits = 0x8E81,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlTextureImageUnitsEXT = 0x8E81,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlTextureImageUnitsOES = 0x8E81,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessEvaluationTextureImageUnits = 0x8E82,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationTextureImageUnitsEXT = 0x8E82,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationTextureImageUnitsOES = 0x8E82,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessControlOutputComponents = 0x8E83,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlOutputComponentsEXT = 0x8E83,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlOutputComponentsOES = 0x8E83,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessPatchComponents = 0x8E84,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessPatchComponentsEXT = 0x8E84,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessPatchComponentsOES = 0x8E84,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessControlTotalOutputComponents = 0x8E85,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlTotalOutputComponentsEXT = 0x8E85,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlTotalOutputComponentsOES = 0x8E85,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessEvaluationOutputComponents = 0x8E86,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationOutputComponentsEXT = 0x8E86,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationOutputComponentsOES = 0x8E86,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessEvaluationShaderEXT = 0x8E87,

        [GLExtension("GL_OES_tessellation_shader")]
        TessEvaluationShaderOES = 0x8E87,

        [GLExtension("GL_EXT_tessellation_shader")]
        TessControlShaderEXT = 0x8E88,

        [GLExtension("GL_OES_tessellation_shader")]
        TessControlShaderOES = 0x8E88,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlUniformBlocksEXT = 0x8E89,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlUniformBlocksOES = 0x8E89,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationUniformBlocksEXT = 0x8E8A,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationUniformBlocksOES = 0x8E8A,

        [GLExtension("GL_IMG_tile_region_protection")]
        TrpImg = 0x8EA0,

        [GLExtension("GL_IMG_tile_region_protection")]
        TrpErrorContextResetImg = 0x8EA1,

        [GLExtension("GL_IMG_tile_region_protection")]
        TrpUnsupportedContextImg = 0x8EA2,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageComponentNV = 0x8ED0,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageComponent4NV = 0x8ED1,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageAttachmentNV = 0x8ED2,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageBuffersNV = 0x8ED3,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageSamplesNV = 0x8ED4,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageAllFragmentsNV = 0x8ED5,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageEdgeFragmentsNV = 0x8ED6,

        [GLExtension("GL_NV_coverage_sample")]
        CoverageAutomaticNV = 0x8ED7,

        [GLExtension("GL_EXT_window_rectangles")]
        InclusiveEXT = 0x8F10,

        [GLExtension("GL_EXT_window_rectangles")]
        ExclusiveEXT = 0x8F11,

        [GLExtension("GL_EXT_window_rectangles")]
        WindowRectangleEXT = 0x8F12,

        [GLExtension("GL_EXT_window_rectangles")]
        WindowRectangleModeEXT = 0x8F13,

        [GLExtension("GL_EXT_window_rectangles")]
        MaxWindowRectanglesEXT = 0x8F14,

        [GLExtension("GL_EXT_window_rectangles")]
        NumWindowRectanglesEXT = 0x8F15,

        [GLExtension("GL_NV_shader_buffer_load")]
        BufferGpuAddressNV = 0x8F1D,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        VertexAttribArrayUnifiedNV = 0x8F1E,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        ElementArrayUnifiedNV = 0x8F1F,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        VertexAttribArrayAddressNV = 0x8F20,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        VertexArrayAddressNV = 0x8F21,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        NormalArrayAddressNV = 0x8F22,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        ColorArrayAddressNV = 0x8F23,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        IndexArrayAddressNV = 0x8F24,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        TextureCoordArrayAddressNV = 0x8F25,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        EdgeFlagArrayAddressNV = 0x8F26,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        SecondaryColorArrayAddressNV = 0x8F27,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        FogCoordArrayAddressNV = 0x8F28,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        ElementArrayAddressNV = 0x8F29,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        VertexAttribArrayLengthNV = 0x8F2A,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        VertexArrayLengthNV = 0x8F2B,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        NormalArrayLengthNV = 0x8F2C,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        ColorArrayLengthNV = 0x8F2D,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        IndexArrayLengthNV = 0x8F2E,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        TextureCoordArrayLengthNV = 0x8F2F,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        EdgeFlagArrayLengthNV = 0x8F30,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        SecondaryColorArrayLengthNV = 0x8F31,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        FogCoordArrayLengthNV = 0x8F32,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        ElementArrayLengthNV = 0x8F33,

        [GLExtension("GL_NV_shader_buffer_load")]
        GpuAddressNV = 0x8F34,

        [GLExtension("GL_NV_shader_buffer_load")]
        MaxShaderBufferAddressNV = 0x8F35,

        [GLExtension("GL_NV_copy_buffer")]
        CopyReadBufferNV = 0x8F36,
        CopyReadBufferBinding = 0x8F36,

        [GLExtension("GL_NV_copy_buffer")]
        CopyWriteBufferNV = 0x8F37,
        CopyWriteBufferBinding = 0x8F37,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxImageUnits = 0x8F38,

        [GLExtension("GL_EXT_shader_image_load_store")]
        MaxImageUnitsEXT = 0x8F38,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxCombinedImageUnitsAndFragmentOutputs = 0x8F39,

        [GLExtension("GL_EXT_shader_image_load_store")]
        MaxCombinedImageUnitsAndFragmentOutputsEXT = 0x8F39,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxCombinedShaderOutputResources = 0x8F39,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageBindingName = 0x8F3A,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageBindingNameEXT = 0x8F3A,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageBindingLevel = 0x8F3B,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageBindingLevelEXT = 0x8F3B,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageBindingLayered = 0x8F3C,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageBindingLayeredEXT = 0x8F3C,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageBindingLayer = 0x8F3D,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageBindingLayerEXT = 0x8F3D,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageBindingAccess = 0x8F3E,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageBindingAccessEXT = 0x8F3E,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        DrawIndirectUnifiedNV = 0x8F40,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        DrawIndirectAddressNV = 0x8F41,

        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        DrawIndirectLengthNV = 0x8F42,

        [GLExtension("GL_ARB_draw_indirect")]
        DrawIndirectBufferBinding = 0x8F43,

        [GLExtension("GL_NV_gpu_program5")]
        MaxProgramSubroutineParametersNV = 0x8F44,

        [GLExtension("GL_NV_gpu_program5")]
        MaxProgramSubroutineNumNV = 0x8F45,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat2EXT = 0x8F46,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat3EXT = 0x8F47,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat4EXT = 0x8F48,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat2x3EXT = 0x8F49,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat2x4EXT = 0x8F4A,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat3x2EXT = 0x8F4B,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat3x4EXT = 0x8F4C,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat4x2EXT = 0x8F4D,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleMat4x3EXT = 0x8F4E,
        VertexBindingBuffer = 0x8F4F,

        [GLExtension("GL_ARM_mali_program_binary")]
        MaliProgramBinaryArm = 0x8F61,

        [GLExtension("GL_EXT_shader_pixel_local_storage")]
        MaxShaderPixelLocalStorageFastSizeEXT = 0x8F63,

        [GLExtension("GL_EXT_shader_pixel_local_storage")]
        ShaderPixelLocalStorageEXT = 0x8F64,

        [GLExtension("GL_EXT_shader_pixel_local_storage")]
        MaxShaderPixelLocalStorageSizeEXT = 0x8F67,

        [GLExtension("GL_EXT_texture_compression_astc_decode_mode")]
        TextureAstcDecodePrecisionEXT = 0x8F69,

        [GLExtension("GL_EXT_texture_snorm")]
        RedSnorm = 0x8F90,

        [GLExtension("GL_EXT_texture_snorm")]
        RgSnorm = 0x8F91,

        [GLExtension("GL_EXT_texture_snorm")]
        RgbSnorm = 0x8F92,

        [GLExtension("GL_EXT_texture_snorm")]
        RgbaSnorm = 0x8F93,

        [GLExtension("GL_EXT_texture_snorm")]
        SignedNormalized = 0x8F9C,

        [GLExtension("GL_ARB_texture_gather")]
        MaxProgramTextureGatherComponentsARB = 0x8F9F,

        [GLExtension("GL_QCOM_perfmon_global_mode")]
        PerfmonGlobalModeQCOM = 0x8FA0,

        [GLExtension("GL_QCOM_texture_foveated_subsampled_layout")]
        MaxShaderSubsampledImageUnitsQCOM = 0x8FA1,

        [GLExtension("GL_QCOM_binning_control")]
        CpuOptimizedQCOM = 0x8FB1,

        [GLExtension("GL_QCOM_binning_control")]
        GpuOptimizedQCOM = 0x8FB2,

        [GLExtension("GL_QCOM_binning_control")]
        RenderDirectToFramebufferQCOM = 0x8FB3,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        GpuDisjointEXT = 0x8FBB,

        [GLExtension("GL_EXT_texture_format_sRGB_override")]
        TextureFormatSrgbOverrideEXT = 0x8FBF,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int8NV = 0x8FE0,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int8Vec2NV = 0x8FE1,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int8Vec3NV = 0x8FE2,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int8Vec4NV = 0x8FE3,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int16NV = 0x8FE4,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int16Vec2NV = 0x8FE5,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int16Vec3NV = 0x8FE6,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int16Vec4NV = 0x8FE7,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int64Vec2NV = 0x8FE9,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int64Vec3NV = 0x8FEA,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int64Vec4NV = 0x8FEB,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt8NV = 0x8FEC,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt8Vec2NV = 0x8FED,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt8Vec3NV = 0x8FEE,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt8Vec4NV = 0x8FEF,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt16NV = 0x8FF0,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt16Vec2NV = 0x8FF1,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt16Vec3NV = 0x8FF2,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt16Vec4NV = 0x8FF3,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt64Vec2NV = 0x8FF5,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt64Vec3NV = 0x8FF6,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt64Vec4NV = 0x8FF7,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16NV = 0x8FF8,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Vec2NV = 0x8FF9,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Vec3NV = 0x8FFA,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Vec4NV = 0x8FFB,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleVec2EXT = 0x8FFC,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleVec3EXT = 0x8FFD,

        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        DoubleVec4EXT = 0x8FFE,

        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        SamplerBufferAMD = 0x9001,

        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        IntSamplerBufferAMD = 0x9002,

        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        UnsignedIntSamplerBufferAMD = 0x9003,

        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        TessellationModeAMD = 0x9004,

        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        TessellationFactorAMD = 0x9005,

        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        DiscreteAMD = 0x9006,

        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        ContinuousAMD = 0x9007,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBindingCubeMapArray = 0x900A,

        [GLExtension("GL_ARB_texture_cube_map_array")]
        TextureBindingCubeMapArrayARB = 0x900A,

        [GLExtension("GL_EXT_texture_cube_map_array")]
        TextureBindingCubeMapArrayEXT = 0x900A,

        [GLExtension("GL_OES_texture_cube_map_array")]
        TextureBindingCubeMapArrayOES = 0x900A,

        [GLExtension("GL_ARB_texture_cube_map_array")]
        SamplerCubeMapArrayARB = 0x900C,

        [GLExtension("GL_EXT_texture_cube_map_array")]
        SamplerCubeMapArrayEXT = 0x900C,

        [GLExtension("GL_OES_texture_cube_map_array")]
        SamplerCubeMapArrayOES = 0x900C,

        [GLExtension("GL_ARB_texture_cube_map_array")]
        SamplerCubeMapArrayShadowARB = 0x900D,

        [GLExtension("GL_EXT_texture_cube_map_array")]
        SamplerCubeMapArrayShadowEXT = 0x900D,

        [GLExtension("GL_OES_texture_cube_map_array")]
        SamplerCubeMapArrayShadowOES = 0x900D,

        [GLExtension("GL_ARB_texture_cube_map_array")]
        IntSamplerCubeMapArrayARB = 0x900E,

        [GLExtension("GL_EXT_texture_cube_map_array")]
        IntSamplerCubeMapArrayEXT = 0x900E,

        [GLExtension("GL_OES_texture_cube_map_array")]
        IntSamplerCubeMapArrayOES = 0x900E,

        [GLExtension("GL_ARB_texture_cube_map_array")]
        UnsignedIntSamplerCubeMapArrayARB = 0x900F,

        [GLExtension("GL_EXT_texture_cube_map_array")]
        UnsignedIntSamplerCubeMapArrayEXT = 0x900F,

        [GLExtension("GL_OES_texture_cube_map_array")]
        UnsignedIntSamplerCubeMapArrayOES = 0x900F,

        [GLExtension("GL_EXT_texture_snorm")]
        AlphaSnorm = 0x9010,

        [GLExtension("GL_EXT_texture_snorm")]
        LuminanceSnorm = 0x9011,

        [GLExtension("GL_EXT_texture_snorm")]
        LuminanceAlphaSnorm = 0x9012,

        [GLExtension("GL_EXT_texture_snorm")]
        IntensitySnorm = 0x9013,

        [GLExtension("GL_EXT_texture_snorm")]
        Alpha8Snorm = 0x9014,

        [GLExtension("GL_EXT_texture_snorm")]
        Luminance8Snorm = 0x9015,

        [GLExtension("GL_EXT_texture_snorm")]
        Luminance8Alpha8Snorm = 0x9016,

        [GLExtension("GL_EXT_texture_snorm")]
        Intensity8Snorm = 0x9017,

        [GLExtension("GL_EXT_texture_snorm")]
        Alpha16Snorm = 0x9018,

        [GLExtension("GL_EXT_texture_snorm")]
        Luminance16Snorm = 0x9019,

        [GLExtension("GL_EXT_texture_snorm")]
        Luminance16Alpha16Snorm = 0x901A,

        [GLExtension("GL_EXT_texture_snorm")]
        Intensity16Snorm = 0x901B,

        [GLExtension("GL_AMD_blend_minmax_factor")]
        FactorMinAMD = 0x901C,

        [GLExtension("GL_AMD_blend_minmax_factor")]
        FactorMaxAMD = 0x901D,

        [GLExtension("GL_AMD_depth_clamp_separate")]
        DepthClampNearAMD = 0x901E,

        [GLExtension("GL_AMD_depth_clamp_separate")]
        DepthClampFarAMD = 0x901F,

        [GLExtension("GL_NV_video_capture")]
        VideoBufferNV = 0x9020,

        [GLExtension("GL_NV_video_capture")]
        VideoBufferBindingNV = 0x9021,

        [GLExtension("GL_NV_video_capture")]
        FieldUpperNV = 0x9022,

        [GLExtension("GL_NV_video_capture")]
        FieldLowerNV = 0x9023,

        [GLExtension("GL_NV_video_capture")]
        NumVideoCaptureStreamsNV = 0x9024,

        [GLExtension("GL_NV_video_capture")]
        NextVideoCaptureBufferStatusNV = 0x9025,

        [GLExtension("GL_NV_video_capture")]
        VideoCaptureTo422SupportedNV = 0x9026,

        [GLExtension("GL_NV_video_capture")]
        LastVideoCaptureStatusNV = 0x9027,

        [GLExtension("GL_NV_video_capture")]
        VideoBufferPitchNV = 0x9028,

        [GLExtension("GL_NV_video_capture")]
        VideoColorConversionMatrixNV = 0x9029,

        [GLExtension("GL_NV_video_capture")]
        VideoColorConversionMaxNV = 0x902A,

        [GLExtension("GL_NV_video_capture")]
        VideoColorConversionMinNV = 0x902B,

        [GLExtension("GL_NV_video_capture")]
        VideoColorConversionOffsetNV = 0x902C,

        [GLExtension("GL_NV_video_capture")]
        VideoBufferInternalFormatNV = 0x902D,

        [GLExtension("GL_NV_video_capture")]
        PartialSuccessNV = 0x902E,

        [GLExtension("GL_NV_video_capture")]
        SuccessNV = 0x902F,

        [GLExtension("GL_NV_video_capture")]
        FailureNV = 0x9030,

        [GLExtension("GL_NV_video_capture")]
        Ycbycr8422NV = 0x9031,

        [GLExtension("GL_NV_video_capture")]
        Ycbaycr8a4224NV = 0x9032,

        [GLExtension("GL_NV_video_capture")]
        Z6y10z6cb10z6y10z6cr10422NV = 0x9033,

        [GLExtension("GL_NV_video_capture")]
        Z6y10z6cb10z6a10z6y10z6cr10z6a104224NV = 0x9034,

        [GLExtension("GL_NV_video_capture")]
        Z4y12z4cb12z4y12z4cr12422NV = 0x9035,

        [GLExtension("GL_NV_video_capture")]
        Z4y12z4cb12z4a12z4y12z4cr12z4a124224NV = 0x9036,

        [GLExtension("GL_NV_video_capture")]
        Z4y12z4cb12z4cr12444NV = 0x9037,

        [GLExtension("GL_NV_video_capture")]
        VideoCaptureFrameWidthNV = 0x9038,

        [GLExtension("GL_NV_video_capture")]
        VideoCaptureFrameHeightNV = 0x9039,

        [GLExtension("GL_NV_video_capture")]
        VideoCaptureFieldUpperHeightNV = 0x903A,

        [GLExtension("GL_NV_video_capture")]
        VideoCaptureFieldLowerHeightNV = 0x903B,

        [GLExtension("GL_NV_video_capture")]
        VideoCaptureSurfaceOriginNV = 0x903C,

        [GLExtension("GL_NV_texture_multisample")]
        TextureCoverageSamplesNV = 0x9045,

        [GLExtension("GL_NV_texture_multisample")]
        TextureColorSamplesNV = 0x9046,

        [GLExtension("GL_NVX_gpu_memory_info")]
        GpuMemoryInfoDedicatedVidmemNvx = 0x9047,

        [GLExtension("GL_NVX_gpu_memory_info")]
        GpuMemoryInfoTotalAvailableMemoryNvx = 0x9048,

        [GLExtension("GL_NVX_gpu_memory_info")]
        GpuMemoryInfoCurrentAvailableVidmemNvx = 0x9049,

        [GLExtension("GL_NVX_gpu_memory_info")]
        GpuMemoryInfoEvictionCountNvx = 0x904A,

        [GLExtension("GL_NVX_gpu_memory_info")]
        GpuMemoryInfoEvictedMemoryNvx = 0x904B,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image1DEXT = 0x904C,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image2DEXT = 0x904D,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image3DEXT = 0x904E,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image2DRectEXT = 0x904F,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageCubeEXT = 0x9050,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageBufferEXT = 0x9051,

        [GLExtension("GL_OES_texture_buffer")]
        ImageBufferOES = 0x9051,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image1DArrayEXT = 0x9052,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image2DArrayEXT = 0x9053,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageCubeMapArrayEXT = 0x9054,

        [GLExtension("GL_OES_texture_cube_map_array")]
        ImageCubeMapArrayOES = 0x9054,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image2DMultisampleEXT = 0x9055,

        [GLExtension("GL_EXT_shader_image_load_store")]
        Image2DMultisampleArrayEXT = 0x9056,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage1DEXT = 0x9057,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage2DEXT = 0x9058,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage3DEXT = 0x9059,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage2DRectEXT = 0x905A,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImageCubeEXT = 0x905B,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImageBufferEXT = 0x905C,

        [GLExtension("GL_OES_texture_buffer")]
        IntImageBufferOES = 0x905C,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage1DArrayEXT = 0x905D,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage2DArrayEXT = 0x905E,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImageCubeMapArrayEXT = 0x905F,

        [GLExtension("GL_OES_texture_cube_map_array")]
        IntImageCubeMapArrayOES = 0x905F,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage2DMultisampleEXT = 0x9060,

        [GLExtension("GL_EXT_shader_image_load_store")]
        IntImage2DMultisampleArrayEXT = 0x9061,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage1DEXT = 0x9062,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage2DEXT = 0x9063,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage3DEXT = 0x9064,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage2DRectEXT = 0x9065,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImageCubeEXT = 0x9066,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImageBufferEXT = 0x9067,

        [GLExtension("GL_OES_texture_buffer")]
        UnsignedIntImageBufferOES = 0x9067,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage1DArrayEXT = 0x9068,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage2DArrayEXT = 0x9069,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImageCubeMapArrayEXT = 0x906A,

        [GLExtension("GL_OES_texture_cube_map_array")]
        UnsignedIntImageCubeMapArrayOES = 0x906A,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage2DMultisampleEXT = 0x906B,

        [GLExtension("GL_EXT_shader_image_load_store")]
        UnsignedIntImage2DMultisampleArrayEXT = 0x906C,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxImageSamples = 0x906D,

        [GLExtension("GL_EXT_shader_image_load_store")]
        MaxImageSamplesEXT = 0x906D,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageBindingFormat = 0x906E,

        [GLExtension("GL_EXT_shader_image_load_store")]
        ImageBindingFormatEXT = 0x906E,

        [GLExtension("GL_NV_path_rendering")]
        SquareNV = 0x90A3,

        [GLExtension("GL_NV_path_rendering")]
        RoundNV = 0x90A4,

        [GLExtension("GL_NV_path_rendering")]
        TriangularNV = 0x90A5,

        [GLExtension("GL_NV_path_rendering")]
        BevelNV = 0x90A6,

        [GLExtension("GL_NV_path_rendering")]
        MiterRevertNV = 0x90A7,

        [GLExtension("GL_NV_path_rendering")]
        MiterTruncateNV = 0x90A8,

        [GLExtension("GL_NV_path_rendering")]
        PathErrorPositionNV = 0x90AB,

        [GLExtension("GL_NV_path_rendering")]
        PathFogGenModeNV = 0x90AC,

        [GLExtension("GL_NV_path_rendering")]
        PathGenModeNV = 0x90B0,

        [GLExtension("GL_NV_path_rendering")]
        PathGenCoeffNV = 0x90B1,

        [GLExtension("GL_NV_path_rendering")]
        PathGenColorFormatNV = 0x90B2,

        [GLExtension("GL_NV_path_rendering")]
        PathGenComponentsNV = 0x90B3,

        [GLExtension("GL_NV_path_rendering")]
        MoveToResetsNV = 0x90B5,

        [GLExtension("GL_NV_path_rendering")]
        MoveToContinuesNV = 0x90B6,

        [GLExtension("GL_NV_path_rendering")]
        PathStencilFuncNV = 0x90B7,

        [GLExtension("GL_NV_path_rendering")]
        PathStencilRefNV = 0x90B8,

        [GLExtension("GL_NV_path_rendering")]
        PathStencilValueMaskNV = 0x90B9,

        [GLExtension("GL_EXT_framebuffer_multisample_blit_scaled")]
        ScaledResolveFastestEXT = 0x90BA,

        [GLExtension("GL_EXT_framebuffer_multisample_blit_scaled")]
        ScaledResolveNicestEXT = 0x90BB,

        [GLExtension("GL_NV_path_rendering")]
        PathStencilDepthOffsetFactorNV = 0x90BD,

        [GLExtension("GL_NV_path_rendering")]
        PathStencilDepthOffsetUnitsNV = 0x90BE,

        [GLExtension("GL_NV_path_rendering")]
        PathCoverDepthFuncNV = 0x90BF,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageFormatCompatibilityBySize = 0x90C8,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageFormatCompatibilityByClass = 0x90C9,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxVertexImageUniforms = 0x90CA,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxTessControlImageUniforms = 0x90CB,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlImageUniformsEXT = 0x90CB,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlImageUniformsOES = 0x90CB,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxTessEvaluationImageUniforms = 0x90CC,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationImageUniformsEXT = 0x90CC,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationImageUniformsOES = 0x90CC,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxGeometryImageUniforms = 0x90CD,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryImageUniformsEXT = 0x90CD,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryImageUniformsOES = 0x90CD,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxFragmentImageUniforms = 0x90CE,

        [GLExtension("GL_ARB_shader_image_load_store")]
        MaxCombinedImageUniforms = 0x90CF,

        [GLExtension("GL_NV_deep_texture3D")]
        MaxDeep3DTextureWidthHeightNV = 0x90D0,

        [GLExtension("GL_NV_deep_texture3D")]
        MaxDeep3DTextureDepthNV = 0x90D1,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryShaderStorageBlocksEXT = 0x90D7,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryShaderStorageBlocksOES = 0x90D7,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlShaderStorageBlocksEXT = 0x90D8,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlShaderStorageBlocksOES = 0x90D8,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationShaderStorageBlocksEXT = 0x90D9,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationShaderStorageBlocksOES = 0x90D9,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxShaderStorageBlockSize = 0x90DE,

        [GLExtension("GL_EXT_x11_sync_object")]
        SyncX11FenceEXT = 0x90E1,

        [GLExtension("GL_ARB_compute_variable_group_size")]
        MaxComputeFixedGroupInvocationsARB = 0x90EB,

        [GLExtension("GL_EXT_multiview_draw_buffers")]
        ColorAttachmentEXT = 0x90F0,

        [GLExtension("GL_EXT_multiview_draw_buffers")]
        MultiviewEXT = 0x90F1,

        [GLExtension("GL_EXT_multiview_draw_buffers")]
        MaxMultiviewBuffersEXT = 0x90F2,

        [GLExtension("GL_KHR_robustness")]
        ContextRobustAccess = 0x90F3,

        [GLExtension("GL_EXT_robustness")]
        ContextRobustAccessEXT = 0x90F3,

        [GLExtension("GL_KHR_robustness")]
        ContextRobustAccessKhr = 0x90F3,

        [GLExtension("GL_NV_compute_program5")]
        ComputeProgramParameterBufferNV = 0x90FC,

        [GLExtension("GL_OES_texture_storage_multisample_2d_array")]
        Texture2DMultisampleArrayOES = 0x9102,

        [GLExtension("GL_OES_texture_storage_multisample_2d_array")]
        TextureBinding2DMultisampleArrayOES = 0x9105,

        [GLExtension("GL_ARB_texture_multisample")]
        TextureSamples = 0x9106,

        [GLExtension("GL_ARB_texture_multisample")]
        TextureFixedSampleLocations = 0x9107,

        [GLExtension("GL_OES_texture_storage_multisample_2d_array")]
        Sampler2DMultisampleArrayOES = 0x910B,

        [GLExtension("GL_OES_texture_storage_multisample_2d_array")]
        IntSampler2DMultisampleArrayOES = 0x910C,

        [GLExtension("GL_OES_texture_storage_multisample_2d_array")]
        UnsignedIntSampler2DMultisampleArrayOES = 0x910D,

        [GLExtension("GL_APPLE_sync")]
        MaxServerWaitTimeoutAPPLE = 0x9111,

        [GLExtension("GL_APPLE_sync")]
        ObjectTypeAPPLE = 0x9112,

        [GLExtension("GL_APPLE_sync")]
        SyncConditionAPPLE = 0x9113,

        [GLExtension("GL_APPLE_sync")]
        SyncStatusAPPLE = 0x9114,

        [GLExtension("GL_APPLE_sync")]
        SyncFlagsAPPLE = 0x9115,

        [GLExtension("GL_ARB_sync")]
        SyncFence = 0x9116,

        [GLExtension("GL_APPLE_sync")]
        SyncFenceAPPLE = 0x9116,

        [GLExtension("GL_APPLE_sync")]
        SyncGpuCommandsCompleteAPPLE = 0x9117,

        [GLExtension("GL_ARB_sync")]
        Unsignaled = 0x9118,

        [GLExtension("GL_APPLE_sync")]
        UnsignaledAPPLE = 0x9118,

        [GLExtension("GL_ARB_sync")]
        Signaled = 0x9119,

        [GLExtension("GL_APPLE_sync")]
        SignaledAPPLE = 0x9119,

        [GLExtension("GL_APPLE_sync")]
        AlreadySignaledAPPLE = 0x911A,

        [GLExtension("GL_APPLE_sync")]
        TimeoutExpiredAPPLE = 0x911B,

        [GLExtension("GL_APPLE_sync")]
        ConditionSatisfiedAPPLE = 0x911C,

        [GLExtension("GL_APPLE_sync")]
        WaitFailedAPPLE = 0x911D,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryInputComponentsEXT = 0x9123,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryInputComponentsOES = 0x9123,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryOutputComponentsEXT = 0x9124,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryOutputComponentsOES = 0x9124,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        UnpackCompressedBlockWidth = 0x9127,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        UnpackCompressedBlockHeight = 0x9128,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        UnpackCompressedBlockDepth = 0x9129,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        UnpackCompressedBlockSize = 0x912A,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        PackCompressedBlockWidth = 0x912B,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        PackCompressedBlockHeight = 0x912C,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        PackCompressedBlockDepth = 0x912D,

        [GLExtension("GL_ARB_compressed_texture_pixel_storage")]
        PackCompressedBlockSize = 0x912E,

        [GLExtension("GL_ARB_texture_storage")]
        TextureImmutableFormat = 0x912F,

        [GLExtension("GL_EXT_texture_storage")]
        TextureImmutableFormatEXT = 0x912F,

        [GLExtension("GL_IMG_program_binary")]
        SgxProgramBinaryImg = 0x9130,

        [GLExtension("GL_IMG_multisampled_render_to_texture")]
        FramebufferIncompleteMultisampleImg = 0x9134,

        [GLExtension("GL_IMG_multisampled_render_to_texture")]
        MaxSamplesImg = 0x9135,

        [GLExtension("GL_IMG_multisampled_render_to_texture")]
        TextureSamplesImg = 0x9136,

        [GLExtension("GL_IMG_texture_compression_pvrtc2")]
        CompressedRgbaPvrtc2bppv2Img = 0x9137,

        [GLExtension("GL_IMG_texture_compression_pvrtc2")]
        CompressedRgbaPvrtc4bppv2Img = 0x9138,

        [GLExtension("GL_IMG_texture_filter_cubic")]
        CubicImg = 0x9139,

        [GLExtension("GL_IMG_texture_filter_cubic")]
        CubicMipmapNearestImg = 0x913A,

        [GLExtension("GL_IMG_texture_filter_cubic")]
        CubicMipmapLinearImg = 0x913B,

        [GLExtension("GL_IMG_framebuffer_downsample")]
        FramebufferIncompleteMultisampleAndDownsampleImg = 0x913C,

        [GLExtension("GL_IMG_framebuffer_downsample")]
        NumDownsampleScalesImg = 0x913D,

        [GLExtension("GL_IMG_framebuffer_downsample")]
        DownsampleScalesImg = 0x913E,

        [GLExtension("GL_KHR_debug")]
        MaxDebugMessageLength = 0x9143,

        [GLExtension("GL_AMD_debug_output")]
        MaxDebugMessageLengthAMD = 0x9143,

        [GLExtension("GL_ARB_debug_output")]
        MaxDebugMessageLengthARB = 0x9143,

        [GLExtension("GL_KHR_debug")]
        MaxDebugMessageLengthKhr = 0x9143,

        [GLExtension("GL_KHR_debug")]
        MaxDebugLoggedMessages = 0x9144,

        [GLExtension("GL_AMD_debug_output")]
        MaxDebugLoggedMessagesAMD = 0x9144,

        [GLExtension("GL_ARB_debug_output")]
        MaxDebugLoggedMessagesARB = 0x9144,

        [GLExtension("GL_KHR_debug")]
        MaxDebugLoggedMessagesKhr = 0x9144,

        [GLExtension("GL_KHR_debug")]
        DebugLoggedMessages = 0x9145,

        [GLExtension("GL_AMD_debug_output")]
        DebugLoggedMessagesAMD = 0x9145,

        [GLExtension("GL_ARB_debug_output")]
        DebugLoggedMessagesARB = 0x9145,

        [GLExtension("GL_KHR_debug")]
        DebugLoggedMessagesKhr = 0x9145,

        [GLExtension("GL_AMD_debug_output")]
        DebugSeverityHighAMD = 0x9146,

        [GLExtension("GL_ARB_debug_output")]
        DebugSeverityHighARB = 0x9146,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityHighKhr = 0x9146,

        [GLExtension("GL_AMD_debug_output")]
        DebugSeverityMediumAMD = 0x9147,

        [GLExtension("GL_ARB_debug_output")]
        DebugSeverityMediumARB = 0x9147,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityMediumKhr = 0x9147,

        [GLExtension("GL_AMD_debug_output")]
        DebugSeverityLowAMD = 0x9148,

        [GLExtension("GL_ARB_debug_output")]
        DebugSeverityLowARB = 0x9148,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityLowKhr = 0x9148,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryApiErrorAMD = 0x9149,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryWindowSystemAMD = 0x914A,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryDeprecationAMD = 0x914B,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryUndefinedBehaviorAMD = 0x914C,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryPerformanceAMD = 0x914D,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryShaderCompilerAMD = 0x914E,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryApplicationAMD = 0x914F,

        [GLExtension("GL_AMD_debug_output")]
        DebugCategoryOtherAMD = 0x9150,

        [GLExtension("GL_EXT_debug_label")]
        BufferObjectEXT = 0x9151,

        [GLExtension("GL_AMD_name_gen_delete")]
        DataBufferAMD = 0x9151,

        [GLExtension("GL_AMD_name_gen_delete")]
        PerformanceMonitorAMD = 0x9152,

        [GLExtension("GL_AMD_name_gen_delete")]
        QueryObjectAMD = 0x9153,

        [GLExtension("GL_EXT_debug_label")]
        QueryObjectEXT = 0x9153,

        [GLExtension("GL_AMD_name_gen_delete")]
        VertexArrayObjectAMD = 0x9154,

        [GLExtension("GL_EXT_debug_label")]
        VertexArrayObjectEXT = 0x9154,

        [GLExtension("GL_AMD_name_gen_delete")]
        SamplerObjectAMD = 0x9155,

        [GLExtension("GL_AMD_pinned_memory")]
        ExternalVirtualMemoryBufferAMD = 0x9160,

        [GLExtension("GL_AMD_query_buffer_object")]
        QueryBufferAMD = 0x9192,

        [GLExtension("GL_ARB_query_buffer_object")]
        QueryBufferBinding = 0x9193,

        [GLExtension("GL_AMD_query_buffer_object")]
        QueryBufferBindingAMD = 0x9193,

        [GLExtension("GL_AMD_query_buffer_object")]
        QueryResultNoWaitAMD = 0x9194,

        [GLExtension("GL_ARB_sparse_texture")]
        VirtualPageSizeXARB = 0x9195,

        [GLExtension("GL_EXT_sparse_texture")]
        VirtualPageSizeXEXT = 0x9195,

        [GLExtension("GL_AMD_sparse_texture")]
        VirtualPageSizeXAMD = 0x9195,

        [GLExtension("GL_ARB_sparse_texture")]
        VirtualPageSizeYARB = 0x9196,

        [GLExtension("GL_EXT_sparse_texture")]
        VirtualPageSizeYEXT = 0x9196,

        [GLExtension("GL_AMD_sparse_texture")]
        VirtualPageSizeYAMD = 0x9196,

        [GLExtension("GL_ARB_sparse_texture")]
        VirtualPageSizeZARB = 0x9197,

        [GLExtension("GL_EXT_sparse_texture")]
        VirtualPageSizeZEXT = 0x9197,

        [GLExtension("GL_AMD_sparse_texture")]
        VirtualPageSizeZAMD = 0x9197,

        [GLExtension("GL_ARB_sparse_texture")]
        MaxSparseTextureSizeARB = 0x9198,

        [GLExtension("GL_EXT_sparse_texture")]
        MaxSparseTextureSizeEXT = 0x9198,

        [GLExtension("GL_AMD_sparse_texture")]
        MaxSparseTextureSizeAMD = 0x9198,

        [GLExtension("GL_ARB_sparse_texture")]
        MaxSparse3DTextureSizeARB = 0x9199,

        [GLExtension("GL_EXT_sparse_texture")]
        MaxSparse3DTextureSizeEXT = 0x9199,

        [GLExtension("GL_AMD_sparse_texture")]
        MaxSparse3DTextureSizeAMD = 0x9199,

        [GLExtension("GL_AMD_sparse_texture")]
        MaxSparseArrayTextureLayers = 0x919A,

        [GLExtension("GL_ARB_sparse_texture")]
        MaxSparseArrayTextureLayersARB = 0x919A,

        [GLExtension("GL_EXT_sparse_texture")]
        MaxSparseArrayTextureLayersEXT = 0x919A,

        [GLExtension("GL_AMD_sparse_texture")]
        MinSparseLevelAMD = 0x919B,

        [GLExtension("GL_AMD_sparse_texture")]
        MinLodWarningAMD = 0x919C,

        [GLExtension("GL_ARB_texture_buffer_range")]
        TextureBufferOffset = 0x919D,

        [GLExtension("GL_EXT_texture_buffer")]
        TextureBufferOffsetEXT = 0x919D,

        [GLExtension("GL_OES_texture_buffer")]
        TextureBufferOffsetOES = 0x919D,

        [GLExtension("GL_ARB_texture_buffer_range")]
        TextureBufferSize = 0x919E,

        [GLExtension("GL_EXT_texture_buffer")]
        TextureBufferSizeEXT = 0x919E,

        [GLExtension("GL_OES_texture_buffer")]
        TextureBufferSizeOES = 0x919E,

        [GLExtension("GL_EXT_texture_buffer")]
        TextureBufferOffsetAlignmentEXT = 0x919F,

        [GLExtension("GL_OES_texture_buffer")]
        TextureBufferOffsetAlignmentOES = 0x919F,

        [GLExtension("GL_AMD_transform_feedback4")]
        StreamRasterizationAMD = 0x91A0,

        [GLExtension("GL_AMD_interleaved_elements")]
        VertexElementSwizzleAMD = 0x91A4,

        [GLExtension("GL_AMD_interleaved_elements")]
        VertexIdSwizzleAMD = 0x91A5,

        [GLExtension("GL_ARB_sparse_texture")]
        TextureSparseARB = 0x91A6,

        [GLExtension("GL_EXT_sparse_texture")]
        TextureSparseEXT = 0x91A6,

        [GLExtension("GL_ARB_sparse_texture")]
        VirtualPageSizeIndexARB = 0x91A7,

        [GLExtension("GL_EXT_sparse_texture")]
        VirtualPageSizeIndexEXT = 0x91A7,

        [GLExtension("GL_ARB_sparse_texture")]
        NumVirtualPageSizesARB = 0x91A8,

        [GLExtension("GL_EXT_sparse_texture")]
        NumVirtualPageSizesEXT = 0x91A8,

        [GLExtension("GL_ARB_sparse_texture")]
        SparseTextureFullArrayCubeMipmapsARB = 0x91A9,

        [GLExtension("GL_EXT_sparse_texture")]
        SparseTextureFullArrayCubeMipmapsEXT = 0x91A9,

        [GLExtension("GL_ARB_sparse_texture")]
        NumSparseLevelsARB = 0x91AA,

        [GLExtension("GL_EXT_sparse_texture")]
        NumSparseLevelsEXT = 0x91AA,

        [GLExtension("GL_AMD_framebuffer_sample_positions")]
        PixelsPerSamplePatternXAMD = 0x91AE,

        [GLExtension("GL_AMD_framebuffer_sample_positions")]
        PixelsPerSamplePatternYAMD = 0x91AF,

        [GLExtension("GL_KHR_parallel_shader_compile")]
        MaxShaderCompilerThreadsKhr = 0x91B0,

        [GLExtension("GL_ARB_parallel_shader_compile")]
        MaxShaderCompilerThreadsARB = 0x91B0,

        [GLExtension("GL_KHR_parallel_shader_compile")]
        CompletionStatusKhr = 0x91B1,

        [GLExtension("GL_ARB_parallel_shader_compile")]
        CompletionStatusARB = 0x91B1,

        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        MaxColorFramebufferSamplesAMD = 0x91B3,

        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        MaxColorFramebufferStorageSamplesAMD = 0x91B4,

        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        MaxDepthStencilFramebufferSamplesAMD = 0x91B5,

        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        NumSupportedMultisampleModesAMD = 0x91B6,

        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        SupportedMultisampleModesAMD = 0x91B7,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeImageUniforms = 0x91BD,

        [GLExtension("GL_ARB_compute_variable_group_size")]
        MaxComputeFixedGroupSizeARB = 0x91BF,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat2AMD = 0x91C5,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat3AMD = 0x91C6,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat4AMD = 0x91C7,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat2x3AMD = 0x91C8,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat2x4AMD = 0x91C9,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat3x2AMD = 0x91CA,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat3x4AMD = 0x91CB,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat4x2AMD = 0x91CC,

        [GLExtension("GL_AMD_gpu_shader_half_float")]
        Float16Mat4x3AMD = 0x91CD,
        UnpackFlipYWebgl = 0x9240,
        UnpackPremultiplyAlphaWebgl = 0x9241,
        ContextLostWebgl = 0x9242,
        UnpackColorspaceConversionWebgl = 0x9243,
        BrowserDefaultWebgl = 0x9244,

        [GLExtension("GL_DMP_program_binary")]
        Smaphs30ProgramBinaryDmp = 0x9251,

        [GLExtension("GL_DMP_program_binary")]
        SmaphsProgramBinaryDmp = 0x9252,

        [GLExtension("GL_DMP_program_binary")]
        DmpProgramBinaryDmp = 0x9253,

        [GLExtension("GL_NV_blend_equation_advanced")]
        BlendPremultipliedSrcNV = 0x9280,

        [GLExtension("GL_NV_blend_equation_advanced")]
        BlendOverlapNV = 0x9281,

        [GLExtension("GL_NV_blend_equation_advanced")]
        UncorrelatedNV = 0x9282,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DisjointNV = 0x9283,

        [GLExtension("GL_NV_blend_equation_advanced")]
        ConjointNV = 0x9284,

        [GLExtension("GL_KHR_blend_equation_advanced_coherent")]
        BlendAdvancedCoherentKhr = 0x9285,

        [GLExtension("GL_NV_blend_equation_advanced_coherent")]
        BlendAdvancedCoherentNV = 0x9285,

        [GLExtension("GL_NV_blend_equation_advanced")]
        SrcNV = 0x9286,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DstNV = 0x9287,

        [GLExtension("GL_NV_blend_equation_advanced")]
        SrcOverNV = 0x9288,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DstOverNV = 0x9289,

        [GLExtension("GL_NV_blend_equation_advanced")]
        SrcInNV = 0x928A,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DstInNV = 0x928B,

        [GLExtension("GL_NV_blend_equation_advanced")]
        SrcOutNV = 0x928C,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DstOutNV = 0x928D,

        [GLExtension("GL_NV_blend_equation_advanced")]
        SrcAtopNV = 0x928E,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DstAtopNV = 0x928F,

        [GLExtension("GL_NV_blend_equation_advanced")]
        PlusNV = 0x9291,

        [GLExtension("GL_NV_blend_equation_advanced")]
        PlusDarkerNV = 0x9292,
        Multiply = 0x9294,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        MultiplyKhr = 0x9294,

        [GLExtension("GL_NV_blend_equation_advanced")]
        MultiplyNV = 0x9294,
        Screen = 0x9295,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        ScreenKhr = 0x9295,

        [GLExtension("GL_NV_blend_equation_advanced")]
        ScreenNV = 0x9295,
        Overlay = 0x9296,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        OverlayKhr = 0x9296,

        [GLExtension("GL_NV_blend_equation_advanced")]
        OverlayNV = 0x9296,
        Darken = 0x9297,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        DarkenKhr = 0x9297,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DarkenNV = 0x9297,
        Lighten = 0x9298,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        LightenKhr = 0x9298,

        [GLExtension("GL_NV_blend_equation_advanced")]
        LightenNV = 0x9298,
        Colordodge = 0x9299,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        ColordodgeKhr = 0x9299,

        [GLExtension("GL_NV_blend_equation_advanced")]
        ColordodgeNV = 0x9299,
        Colorburn = 0x929A,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        ColorburnKhr = 0x929A,

        [GLExtension("GL_NV_blend_equation_advanced")]
        ColorburnNV = 0x929A,
        Hardlight = 0x929B,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        HardlightKhr = 0x929B,

        [GLExtension("GL_NV_blend_equation_advanced")]
        HardlightNV = 0x929B,
        Softlight = 0x929C,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        SoftlightKhr = 0x929C,

        [GLExtension("GL_NV_blend_equation_advanced")]
        SoftlightNV = 0x929C,
        Difference = 0x929E,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        DifferenceKhr = 0x929E,

        [GLExtension("GL_NV_blend_equation_advanced")]
        DifferenceNV = 0x929E,

        [GLExtension("GL_NV_blend_equation_advanced")]
        MinusNV = 0x929F,
        Exclusion = 0x92A0,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        ExclusionKhr = 0x92A0,

        [GLExtension("GL_NV_blend_equation_advanced")]
        ExclusionNV = 0x92A0,

        [GLExtension("GL_NV_blend_equation_advanced")]
        ContrastNV = 0x92A1,

        [GLExtension("GL_NV_blend_equation_advanced")]
        InvertRgbNV = 0x92A3,

        [GLExtension("GL_NV_blend_equation_advanced")]
        LineardodgeNV = 0x92A4,

        [GLExtension("GL_NV_blend_equation_advanced")]
        LinearburnNV = 0x92A5,

        [GLExtension("GL_NV_blend_equation_advanced")]
        VividlightNV = 0x92A6,

        [GLExtension("GL_NV_blend_equation_advanced")]
        LinearlightNV = 0x92A7,

        [GLExtension("GL_NV_blend_equation_advanced")]
        PinlightNV = 0x92A8,

        [GLExtension("GL_NV_blend_equation_advanced")]
        HardmixNV = 0x92A9,
        HslHue = 0x92AD,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        HslHueKhr = 0x92AD,

        [GLExtension("GL_NV_blend_equation_advanced")]
        HslHueNV = 0x92AD,
        HslSaturation = 0x92AE,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        HslSaturationKhr = 0x92AE,

        [GLExtension("GL_NV_blend_equation_advanced")]
        HslSaturationNV = 0x92AE,
        HslColor = 0x92AF,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        HslColorKhr = 0x92AF,

        [GLExtension("GL_NV_blend_equation_advanced")]
        HslColorNV = 0x92AF,
        HslLuminosity = 0x92B0,

        [GLExtension("GL_KHR_blend_equation_advanced")]
        HslLuminosityKhr = 0x92B0,

        [GLExtension("GL_NV_blend_equation_advanced")]
        HslLuminosityNV = 0x92B0,

        [GLExtension("GL_NV_blend_equation_advanced")]
        PlusClampedNV = 0x92B1,

        [GLExtension("GL_NV_blend_equation_advanced")]
        PlusClampedAlphaNV = 0x92B2,

        [GLExtension("GL_NV_blend_equation_advanced")]
        MinusClampedNV = 0x92B3,

        [GLExtension("GL_NV_blend_equation_advanced")]
        InvertOvgNV = 0x92B4,

        [GLExtension("GL_NVX_linked_gpu_multicast")]
        MaxLgpuGpusNvx = 0x92BA,

        [GLExtension("GL_NV_gpu_multicast")]
        MulticastGpusNV = 0x92BA,

        [GLExtension("GL_NV_robustness_video_memory_purge")]
        PurgedContextResetNV = 0x92BB,

        [GLExtension("GL_ARB_ES3_2_compatibility")]
        PrimitiveBoundingBoxARB = 0x92BE,
        PrimitiveBoundingBox = 0x92BE,

        [GLExtension("GL_EXT_primitive_bounding_box")]
        PrimitiveBoundingBoxEXT = 0x92BE,

        [GLExtension("GL_OES_primitive_bounding_box")]
        PrimitiveBoundingBoxOES = 0x92BE,

        [GLExtension("GL_NV_alpha_to_coverage_dither_control")]
        AlphaToCoverageDitherModeNV = 0x92BF,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferStart = 0x92C2,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferSize = 0x92C3,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxVertexAtomicCounterBuffers = 0x92CC,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxTessControlAtomicCounterBuffers = 0x92CD,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlAtomicCounterBuffersEXT = 0x92CD,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlAtomicCounterBuffersOES = 0x92CD,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxTessEvaluationAtomicCounterBuffers = 0x92CE,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationAtomicCounterBuffersEXT = 0x92CE,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationAtomicCounterBuffersOES = 0x92CE,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxGeometryAtomicCounterBuffers = 0x92CF,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryAtomicCounterBuffersEXT = 0x92CF,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryAtomicCounterBuffersOES = 0x92CF,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxFragmentAtomicCounterBuffers = 0x92D0,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxCombinedAtomicCounterBuffers = 0x92D1,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessControlAtomicCountersEXT = 0x92D3,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessControlAtomicCountersOES = 0x92D3,

        [GLExtension("GL_EXT_tessellation_shader")]
        MaxTessEvaluationAtomicCountersEXT = 0x92D4,

        [GLExtension("GL_OES_tessellation_shader")]
        MaxTessEvaluationAtomicCountersOES = 0x92D4,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxGeometryAtomicCountersEXT = 0x92D5,

        [GLExtension("GL_OES_geometry_shader")]
        MaxGeometryAtomicCountersOES = 0x92D5,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxAtomicCounterBufferSize = 0x92D8,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        UnsignedIntAtomicCounter = 0x92DB,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxAtomicCounterBufferBindings = 0x92DC,

        [GLExtension("GL_NV_fragment_coverage_to_color")]
        FragmentCoverageToColorNV = 0x92DD,

        [GLExtension("GL_NV_fragment_coverage_to_color")]
        FragmentCoverageColorNV = 0x92DE,

        [GLExtension("GL_NV_mesh_shader")]
        MeshOutputPerVertexGranularityNV = 0x92DF,

        [GLExtension("GL_KHR_debug")]
        DebugOutputKhr = 0x92E0,

        [GLExtension("GL_EXT_tessellation_shader")]
        IsPerPatchEXT = 0x92E7,

        [GLExtension("GL_OES_tessellation_shader")]
        IsPerPatchOES = 0x92E7,

        [GLExtension("GL_EXT_tessellation_shader")]
        ReferencedByTessControlShaderEXT = 0x9307,

        [GLExtension("GL_OES_tessellation_shader")]
        ReferencedByTessControlShaderOES = 0x9307,

        [GLExtension("GL_EXT_tessellation_shader")]
        ReferencedByTessEvaluationShaderEXT = 0x9308,

        [GLExtension("GL_OES_tessellation_shader")]
        ReferencedByTessEvaluationShaderOES = 0x9308,

        [GLExtension("GL_EXT_geometry_shader")]
        ReferencedByGeometryShaderEXT = 0x9309,

        [GLExtension("GL_OES_geometry_shader")]
        ReferencedByGeometryShaderOES = 0x9309,

        [GLExtension("GL_EXT_blend_func_extended")]
        LocationIndexEXT = 0x930F,

        [GLExtension("GL_EXT_geometry_shader")]
        FramebufferDefaultLayersEXT = 0x9312,

        [GLExtension("GL_OES_geometry_shader")]
        FramebufferDefaultLayersOES = 0x9312,

        [GLExtension("GL_EXT_geometry_shader")]
        MaxFramebufferLayersEXT = 0x9317,

        [GLExtension("GL_OES_geometry_shader")]
        MaxFramebufferLayersOES = 0x9317,

        [GLExtension("GL_EXT_raster_multisample")]
        RasterMultisampleEXT = 0x9327,

        [GLExtension("GL_EXT_raster_multisample")]
        RasterSamplesEXT = 0x9328,

        [GLExtension("GL_EXT_raster_multisample")]
        MaxRasterSamplesEXT = 0x9329,

        [GLExtension("GL_EXT_raster_multisample")]
        RasterFixedSampleLocationsEXT = 0x932A,

        [GLExtension("GL_EXT_raster_multisample")]
        MultisampleRasterizationAllowedEXT = 0x932B,

        [GLExtension("GL_EXT_raster_multisample")]
        EffectiveRasterSamplesEXT = 0x932C,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        DepthSamplesNV = 0x932D,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        StencilSamplesNV = 0x932E,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        MixedDepthSamplesSupportedNV = 0x932F,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        MixedStencilSamplesSupportedNV = 0x9330,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        CoverageModulationTableNV = 0x9331,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        CoverageModulationNV = 0x9332,

        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        CoverageModulationTableSizeNV = 0x9333,

        [GLExtension("GL_NV_shader_thread_group")]
        WarpSizeNV = 0x9339,

        [GLExtension("GL_NV_shader_thread_group")]
        WarpsPerSmNV = 0x933A,

        [GLExtension("GL_NV_shader_thread_group")]
        SmCountNV = 0x933B,

        [GLExtension("GL_NV_fill_rectangle")]
        FillRectangleNV = 0x933C,

        [GLExtension("GL_ARB_sample_locations")]
        SampleLocationSubpixelBitsARB = 0x933D,

        [GLExtension("GL_NV_sample_locations")]
        SampleLocationSubpixelBitsNV = 0x933D,

        [GLExtension("GL_ARB_sample_locations")]
        SampleLocationPixelGridWidthARB = 0x933E,

        [GLExtension("GL_NV_sample_locations")]
        SampleLocationPixelGridWidthNV = 0x933E,

        [GLExtension("GL_ARB_sample_locations")]
        SampleLocationPixelGridHeightARB = 0x933F,

        [GLExtension("GL_NV_sample_locations")]
        SampleLocationPixelGridHeightNV = 0x933F,

        [GLExtension("GL_ARB_sample_locations")]
        ProgrammableSampleLocationTableSizeARB = 0x9340,

        [GLExtension("GL_NV_sample_locations")]
        ProgrammableSampleLocationTableSizeNV = 0x9340,

        [GLExtension("GL_NV_sample_locations")]
        ProgrammableSampleLocationNV = 0x9341,

        [GLExtension("GL_ARB_sample_locations")]
        FramebufferProgrammableSampleLocationsARB = 0x9342,

        [GLExtension("GL_NV_sample_locations")]
        FramebufferProgrammableSampleLocationsNV = 0x9342,

        [GLExtension("GL_ARB_sample_locations")]
        FramebufferSampleLocationPixelGridARB = 0x9343,

        [GLExtension("GL_NV_sample_locations")]
        FramebufferSampleLocationPixelGridNV = 0x9343,

        [GLExtension("GL_ARB_compute_variable_group_size")]
        MaxComputeVariableGroupInvocationsARB = 0x9344,

        [GLExtension("GL_ARB_compute_variable_group_size")]
        MaxComputeVariableGroupSizeARB = 0x9345,

        [GLExtension("GL_NV_conservative_raster")]
        ConservativeRasterizationNV = 0x9346,

        [GLExtension("GL_NV_conservative_raster")]
        SubpixelPrecisionBiasXBitsNV = 0x9347,

        [GLExtension("GL_NV_conservative_raster")]
        SubpixelPrecisionBiasYBitsNV = 0x9348,

        [GLExtension("GL_NV_conservative_raster")]
        MaxSubpixelPrecisionBiasBitsNV = 0x9349,

        [GLExtension("GL_NV_alpha_to_coverage_dither_control")]
        AlphaToCoverageDitherDefaultNV = 0x934D,

        [GLExtension("GL_NV_alpha_to_coverage_dither_control")]
        AlphaToCoverageDitherEnableNV = 0x934E,

        [GLExtension("GL_NV_alpha_to_coverage_dither_control")]
        AlphaToCoverageDitherDisableNV = 0x934F,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzlePositiveXNV = 0x9350,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleNegativeXNV = 0x9351,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzlePositiveYNV = 0x9352,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleNegativeYNV = 0x9353,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzlePositiveZNV = 0x9354,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleNegativeZNV = 0x9355,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzlePositiveWNV = 0x9356,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleNegativeWNV = 0x9357,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleXNV = 0x9358,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleYNV = 0x9359,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleZNV = 0x935A,

        [GLExtension("GL_NV_viewport_swizzle")]
        ViewportSwizzleWNV = 0x935B,

        [GLExtension("GL_ARB_clip_control")]
        ClipOrigin = 0x935C,

        [GLExtension("GL_EXT_clip_control")]
        ClipOriginEXT = 0x935C,

        [GLExtension("GL_ARB_clip_control")]
        ClipDepthMode = 0x935D,

        [GLExtension("GL_EXT_clip_control")]
        ClipDepthModeEXT = 0x935D,

        [GLExtension("GL_EXT_clip_control")]
        NegativeOneToOneEXT = 0x935E,

        [GLExtension("GL_EXT_clip_control")]
        ZeroToOneEXT = 0x935F,

        [GLExtension("GL_ARB_texture_filter_minmax")]
        TextureReductionModeARB = 0x9366,

        [GLExtension("GL_EXT_texture_filter_minmax")]
        TextureReductionModeEXT = 0x9366,

        [GLExtension("GL_ARB_texture_filter_minmax")]
        WeightedAverageARB = 0x9367,

        [GLExtension("GL_EXT_texture_filter_minmax")]
        WeightedAverageEXT = 0x9367,

        [GLExtension("GL_NV_path_rendering")]
        FontGlyphsAvailableNV = 0x9368,

        [GLExtension("GL_NV_path_rendering")]
        FontTargetUnavailableNV = 0x9369,

        [GLExtension("GL_NV_path_rendering")]
        FontUnavailableNV = 0x936A,

        [GLExtension("GL_NV_path_rendering")]
        FontUnintelligibleNV = 0x936B,

        [GLExtension("GL_NV_path_rendering")]
        StandardFontFormatNV = 0x936C,

        [GLExtension("GL_NV_path_rendering")]
        FragmentInputNV = 0x936D,

        [GLExtension("GL_NV_uniform_buffer_unified_memory")]
        UniformBufferUnifiedNV = 0x936E,

        [GLExtension("GL_NV_uniform_buffer_unified_memory")]
        UniformBufferAddressNV = 0x936F,

        [GLExtension("GL_NV_uniform_buffer_unified_memory")]
        UniformBufferLengthNV = 0x9370,

        [GLExtension("GL_NV_internalformat_sample_query")]
        MultisamplesNV = 0x9371,

        [GLExtension("GL_NV_internalformat_sample_query")]
        SupersampleScaleXNV = 0x9372,

        [GLExtension("GL_NV_internalformat_sample_query")]
        SupersampleScaleYNV = 0x9373,

        [GLExtension("GL_NV_internalformat_sample_query")]
        ConformantNV = 0x9374,

        [GLExtension("GL_NV_conservative_raster_dilate")]
        ConservativeRasterDilateNV = 0x9379,

        [GLExtension("GL_NV_conservative_raster_dilate")]
        ConservativeRasterDilateRangeNV = 0x937A,

        [GLExtension("GL_NV_conservative_raster_dilate")]
        ConservativeRasterDilateGranularityNV = 0x937B,

        [GLExtension("GL_NV_clip_space_w_scaling")]
        ViewportPositionWScaleNV = 0x937C,

        [GLExtension("GL_NV_clip_space_w_scaling")]
        ViewportPositionWScaleXCoeffNV = 0x937D,

        [GLExtension("GL_NV_clip_space_w_scaling")]
        ViewportPositionWScaleYCoeffNV = 0x937E,

        [GLExtension("GL_NV_representative_fragment_test")]
        RepresentativeFragmentTestNV = 0x937F,

        [GLExtension("GL_ARB_ES3_2_compatibility")]
        MultisampleLineWidthRangeARB = 0x9381,
        MultisampleLineWidthRange = 0x9381,

        [GLExtension("GL_ARB_ES3_2_compatibility")]
        MultisampleLineWidthGranularityARB = 0x9382,
        MultisampleLineWidthGranularity = 0x9382,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassEacR11 = 0x9383,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassEacRg11 = 0x9384,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassEtc2Rgb = 0x9385,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassEtc2Rgba = 0x9386,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassEtc2EacRgba = 0x9387,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc4x4Rgba = 0x9388,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc5x4Rgba = 0x9389,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc5x5Rgba = 0x938A,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc6x5Rgba = 0x938B,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc6x6Rgba = 0x938C,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc8x5Rgba = 0x938D,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc8x6Rgba = 0x938E,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc8x8Rgba = 0x938F,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc10x5Rgba = 0x9390,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc10x6Rgba = 0x9391,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc10x8Rgba = 0x9392,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc10x10Rgba = 0x9393,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc12x10Rgba = 0x9394,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewClassAstc12x12Rgba = 0x9395,

        [GLExtension("GL_ANGLE_translated_shader_source")]
        TranslatedShaderSourceLengthAngle = 0x93A0,

        [GLExtension("GL_APPLE_texture_format_BGRA8888")]
        Bgra8EXT = 0x93A1,

        [GLExtension("GL_ANGLE_texture_usage")]
        TextureUsageAngle = 0x93A2,

        [GLExtension("GL_ANGLE_texture_usage")]
        FramebufferAttachmentAngle = 0x93A3,

        [GLExtension("GL_ANGLE_pack_reverse_row_order")]
        PackReverseRowOrderAngle = 0x93A4,

        [GLExtension("GL_ANGLE_program_binary")]
        ProgramBinaryAngle = 0x93A6,

        [GLExtension("GL_EXT_pvrtc_sRGB")]
        CompressedSrgbAlphaPvrtc2bppv2Img = 0x93F0,

        [GLExtension("GL_EXT_pvrtc_sRGB")]
        CompressedSrgbAlphaPvrtc4bppv2Img = 0x93F1,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterEventINTEL = 0x94F0,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDurationNormINTEL = 0x94F1,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDurationRawINTEL = 0x94F2,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterThroughputINTEL = 0x94F3,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterRawINTEL = 0x94F4,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterTimestampINTEL = 0x94F5,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDataUint32INTEL = 0x94F8,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDataUint64INTEL = 0x94F9,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDataFloatINTEL = 0x94FA,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDataDoubleINTEL = 0x94FB,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDataBool32INTEL = 0x94FC,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryQueryNameLengthMaxINTEL = 0x94FD,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterNameLengthMaxINTEL = 0x94FE,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryCounterDescLengthMaxINTEL = 0x94FF,

        [GLExtension("GL_INTEL_performance_query")]
        PerfqueryGpaExtendedCountersINTEL = 0x9500,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupSizeKhr = 0x9532,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupSupportedStagesKhr = 0x9533,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupSupportedFeaturesKhr = 0x9534,

        [GLExtension("GL_KHR_shader_subgroup")]
        SubgroupQuadAllStagesKhr = 0x9535,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshTotalMemorySizeNV = 0x9536,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskTotalMemorySizeNV = 0x9537,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshOutputVerticesNV = 0x9538,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshOutputPrimitivesNV = 0x9539,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskOutputCountNV = 0x953A,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshWorkGroupSizeNV = 0x953B,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskWorkGroupSizeNV = 0x953C,

        [GLExtension("GL_NV_mesh_shader")]
        MaxDrawMeshTasksCountNV = 0x953D,

        [GLExtension("GL_NV_mesh_shader")]
        MeshWorkGroupSizeNV = 0x953E,

        [GLExtension("GL_NV_mesh_shader")]
        TaskWorkGroupSizeNV = 0x953F,

        [GLExtension("GL_NV_query_resource")]
        QueryResourceTypeVidmemAllocNV = 0x9540,

        [GLExtension("GL_NV_query_resource")]
        QueryResourceMemtypeVidmemNV = 0x9542,

        [GLExtension("GL_NV_mesh_shader")]
        MeshOutputPerPrimitiveGranularityNV = 0x9543,

        [GLExtension("GL_NV_query_resource")]
        QueryResourceSysReservedNV = 0x9544,

        [GLExtension("GL_NV_query_resource")]
        QueryResourceTextureNV = 0x9545,

        [GLExtension("GL_NV_query_resource")]
        QueryResourceRenderbufferNV = 0x9546,

        [GLExtension("GL_NV_query_resource")]
        QueryResourceBufferobjectNV = 0x9547,

        [GLExtension("GL_NV_gpu_multicast")]
        PerGpuStorageNV = 0x9548,

        [GLExtension("GL_NV_gpu_multicast")]
        MulticastProgrammableSampleLocationNV = 0x9549,

        [GLExtension("GL_NVX_gpu_multicast2")]
        UploadGpuMaskNvx = 0x954A,

        [GLExtension("GL_NV_conservative_raster_pre_snap_triangles")]
        ConservativeRasterModeNV = 0x954D,

        [GLExtension("GL_NV_conservative_raster_pre_snap_triangles")]
        ConservativeRasterModePostSnapNV = 0x954E,

        [GLExtension("GL_NV_conservative_raster_pre_snap_triangles")]
        ConservativeRasterModePreSnapTrianglesNV = 0x954F,

        [GLExtension("GL_NV_conservative_raster_pre_snap")]
        ConservativeRasterModePreSnapNV = 0x9550,

        [GLExtension("GL_ARB_gl_spirv")]
        ShaderBinaryFormatSpirVARB = 0x9551,
        SpirVBinary = 0x9552,

        [GLExtension("GL_ARB_gl_spirv")]
        SpirVBinaryARB = 0x9552,

        [GLExtension("GL_ARB_spirv_extensions")]
        SpirVExtensions = 0x9553,

        [GLExtension("GL_ARB_spirv_extensions")]
        NumSpirVExtensions = 0x9554,

        [GLExtension("GL_NV_scissor_exclusive")]
        ScissorTestExclusiveNV = 0x9555,

        [GLExtension("GL_NV_scissor_exclusive")]
        ScissorBoxExclusiveNV = 0x9556,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshViewsNV = 0x9557,

        [GLExtension("GL_NV_gpu_multicast")]
        RenderGpuMaskNV = 0x9558,

        [GLExtension("GL_NV_mesh_shader")]
        MeshShaderNV = 0x9559,

        [GLExtension("GL_NV_mesh_shader")]
        TaskShaderNV = 0x955A,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateImageBindingNV = 0x955B,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateImageTexelWidthNV = 0x955C,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateImageTexelHeightNV = 0x955D,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateImagePaletteSizeNV = 0x955E,

        [GLExtension("GL_NV_shading_rate_image")]
        MaxCoarseFragmentSamplesNV = 0x955F,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateImageNV = 0x9563,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateNoInvocationsNV = 0x9564,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate1InvocationPerPixelNV = 0x9565,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate1InvocationPer1x2PixelsNV = 0x9566,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate1InvocationPer2x1PixelsNV = 0x9567,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate1InvocationPer2x2PixelsNV = 0x9568,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate1InvocationPer2x4PixelsNV = 0x9569,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate1InvocationPer4x2PixelsNV = 0x956A,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate1InvocationPer4x4PixelsNV = 0x956B,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate2InvocationsPerPixelNV = 0x956C,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate4InvocationsPerPixelNV = 0x956D,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate8InvocationsPerPixelNV = 0x956E,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRate16InvocationsPerPixelNV = 0x956F,

        [GLExtension("GL_NV_mesh_shader")]
        MeshVerticesOutNV = 0x9579,

        [GLExtension("GL_NV_mesh_shader")]
        MeshPrimitivesOutNV = 0x957A,

        [GLExtension("GL_NV_mesh_shader")]
        MeshOutputTypeNV = 0x957B,

        [GLExtension("GL_NV_mesh_shader")]
        MeshSubroutineNV = 0x957C,

        [GLExtension("GL_NV_mesh_shader")]
        TaskSubroutineNV = 0x957D,

        [GLExtension("GL_NV_mesh_shader")]
        MeshSubroutineUniformNV = 0x957E,

        [GLExtension("GL_NV_mesh_shader")]
        TaskSubroutineUniformNV = 0x957F,

        [GLExtension("GL_EXT_memory_object")]
        NumTilingTypesEXT = 0x9582,

        [GLExtension("GL_EXT_memory_object")]
        TilingTypesEXT = 0x9583,

        [GLExtension("GL_EXT_memory_object")]
        OptimalTilingEXT = 0x9584,

        [GLExtension("GL_EXT_memory_object")]
        LinearTilingEXT = 0x9585,

        [GLExtension("GL_NV_mesh_shader")]
        UniformBlockReferencedByMeshShaderNV = 0x959C,

        [GLExtension("GL_NV_mesh_shader")]
        UniformBlockReferencedByTaskShaderNV = 0x959D,

        [GLExtension("GL_NV_mesh_shader")]
        AtomicCounterBufferReferencedByMeshShaderNV = 0x959E,

        [GLExtension("GL_NV_mesh_shader")]
        AtomicCounterBufferReferencedByTaskShaderNV = 0x959F,

        [GLExtension("GL_NV_mesh_shader")]
        ReferencedByMeshShaderNV = 0x95A0,

        [GLExtension("GL_NV_mesh_shader")]
        ReferencedByTaskShaderNV = 0x95A1,

        [GLExtension("GL_NV_mesh_shader")]
        MaxMeshWorkGroupInvocationsNV = 0x95A2,

        [GLExtension("GL_NV_mesh_shader")]
        MaxTaskWorkGroupInvocationsNV = 0x95A3,

        [GLExtension("GL_NV_memory_attachment")]
        AttachedMemoryObjectNV = 0x95A4,

        [GLExtension("GL_NV_memory_attachment")]
        AttachedMemoryOffsetNV = 0x95A5,

        [GLExtension("GL_NV_memory_attachment")]
        MemoryAttachableAlignmentNV = 0x95A6,

        [GLExtension("GL_NV_memory_attachment")]
        MemoryAttachableSizeNV = 0x95A7,

        [GLExtension("GL_NV_memory_attachment")]
        MemoryAttachableNV = 0x95A8,

        [GLExtension("GL_NV_memory_attachment")]
        DetachedMemoryIncarnationNV = 0x95A9,

        [GLExtension("GL_NV_memory_attachment")]
        DetachedTexturesNV = 0x95AA,

        [GLExtension("GL_NV_memory_attachment")]
        DetachedBuffersNV = 0x95AB,

        [GLExtension("GL_NV_memory_attachment")]
        MaxDetachedTexturesNV = 0x95AC,

        [GLExtension("GL_NV_memory_attachment")]
        MaxDetachedBuffersNV = 0x95AD,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateSampleOrderDefaultNV = 0x95AE,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateSampleOrderPixelMajorNV = 0x95AF,

        [GLExtension("GL_NV_shading_rate_image")]
        ShadingRateSampleOrderSampleMajorNV = 0x95B0,

        [GLExtension("GL_OVR_multiview")]
        MaxViewsOvr = 0x9631,

        [GLExtension("GL_OVR_multiview")]
        FramebufferIncompleteViewTargetsOvr = 0x9633,
        GsShaderBinaryMtk = 0x9640,
        GsProgramBinaryMtk = 0x9641,

        [GLExtension("GL_EXT_shader_pixel_local_storage2")]
        MaxShaderCombinedLocalStorageFastSizeEXT = 0x9650,

        [GLExtension("GL_EXT_shader_pixel_local_storage2")]
        MaxShaderCombinedLocalStorageSizeEXT = 0x9651,

        [GLExtension("GL_EXT_shader_pixel_local_storage2")]
        FramebufferIncompleteInsufficientShaderCombinedLocalStorageEXT = 0x9652,
        ValidateShaderBinaryQCOM = 0x96A3,

        [GLExtension("GL_IBM_rasterpos_clip")]
        RasterPositionUnclippedIbm = 0x19262,

        [GLExtension("GL_IBM_cull_vertex")]
        CullVertexIbm = 103050,

        [GLExtension("GL_IBM_static_data")]
        AllStaticDataIbm = 103060,

        [GLExtension("GL_IBM_static_data")]
        StaticVertexArrayIbm = 103061,

        [GLExtension("GL_IBM_vertex_array_lists")]
        VertexArrayListIbm = 103070,

        [GLExtension("GL_IBM_vertex_array_lists")]
        NormalArrayListIbm = 103071,

        [GLExtension("GL_IBM_vertex_array_lists")]
        ColorArrayListIbm = 103072,

        [GLExtension("GL_IBM_vertex_array_lists")]
        IndexArrayListIbm = 103073,

        [GLExtension("GL_IBM_vertex_array_lists")]
        TextureCoordArrayListIbm = 103074,

        [GLExtension("GL_IBM_vertex_array_lists")]
        EdgeFlagArrayListIbm = 103075,

        [GLExtension("GL_IBM_vertex_array_lists")]
        FogCoordinateArrayListIbm = 103076,

        [GLExtension("GL_IBM_vertex_array_lists")]
        SecondaryColorArrayListIbm = 103077,

        [GLExtension("GL_IBM_vertex_array_lists")]
        VertexArrayListStrideIbm = 103080,

        [GLExtension("GL_IBM_vertex_array_lists")]
        NormalArrayListStrideIbm = 103081,

        [GLExtension("GL_IBM_vertex_array_lists")]
        ColorArrayListStrideIbm = 103082,

        [GLExtension("GL_IBM_vertex_array_lists")]
        IndexArrayListStrideIbm = 103083,

        [GLExtension("GL_IBM_vertex_array_lists")]
        TextureCoordArrayListStrideIbm = 103084,

        [GLExtension("GL_IBM_vertex_array_lists")]
        EdgeFlagArrayListStrideIbm = 103085,

        [GLExtension("GL_IBM_vertex_array_lists")]
        FogCoordinateArrayListStrideIbm = 103086,

        [GLExtension("GL_IBM_vertex_array_lists")]
        SecondaryColorArrayListStrideIbm = 103087,

        [GLExtension("GL_PGI_misc_hints")]
        NativeGraphicsHandlePGI = 0x1A202,
    }

    public enum AccumOp
    {
        Accum = 0x0100,
        Load = 0x0101,
        Return = 0x0102,
        Mult = 0x0103,
        Add = 0x0104,
    }

    public enum TextureEnvMode
    {
        Add = 0x0104,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        Blend = 0x0BE2,
        Replace = 0x1E01,
        Modulate = 0x2100,
        Decal = 0x2101,

        [GLExtension("GL_EXT_texture")]
        ReplaceEXT = 0x8062,

        [GLExtension("GL_SGIX_texture_add_env")]
        TextureEnvBiasSGIX = 0x80BE,
        Combine = 0x8570,
    }

    public enum LightEnvModeSGIX
    {
        Add = 0x0104,
        Replace = 0x1E01,
        Modulate = 0x2100,
    }

    public enum StencilFunction
    {
        Never = 0x0200,
        Less = 0x0201,

        [GLExtension("GL_ARB_tessellation_shader")]
        Equal = 0x0202,
        Lequal = 0x0203,
        Greater = 0x0204,
        Notequal = 0x0205,
        Gequal = 0x0206,
        Always = 0x0207,
    }

    public enum IndexFunctionEXT
    {
        Never = 0x0200,
        Less = 0x0201,

        [GLExtension("GL_ARB_tessellation_shader")]
        Equal = 0x0202,
        Lequal = 0x0203,
        Greater = 0x0204,
        Notequal = 0x0205,
        Gequal = 0x0206,
        Always = 0x0207,
    }

    public enum AlphaFunction
    {
        Never = 0x0200,
        Less = 0x0201,

        [GLExtension("GL_ARB_tessellation_shader")]
        Equal = 0x0202,
        Lequal = 0x0203,
        Greater = 0x0204,
        Notequal = 0x0205,
        Gequal = 0x0206,
        Always = 0x0207,
    }

    public enum DepthFunction
    {
        Never = 0x0200,
        Less = 0x0201,

        [GLExtension("GL_ARB_tessellation_shader")]
        Equal = 0x0202,
        Lequal = 0x0203,
        Greater = 0x0204,
        Notequal = 0x0205,
        Gequal = 0x0206,
        Always = 0x0207,
    }

    public enum TriangleFace
    {
        Front = 0x0404,

        [GLExtension("GL_ARB_ES3_1_compatibility")]
        Back = 0x0405,
        FrontAndBack = 0x0408,
    }

    public enum FeedbackType
    {
        2D = 0x0600,
        3D = 0x0601,
        3DColor = 0x0602,
        3DColorTexture = 0x0603,
        4dColorTexture = 0x0604,
    }

    public enum FeedBackToken
    {
        PassThroughToken = 0x0700,
        PointToken = 0x0701,
        LineToken = 0x0702,
        PolygonToken = 0x0703,
        BitmapToken = 0x0704,
        DrawPixelToken = 0x0705,
        CopyPixelToken = 0x0706,
        LineResetToken = 0x0707,
    }

    public enum FogMode
    {
        Exp = 0x0800,
        Exp2 = 0x0801,
        Linear = 0x2601,

        [GLExtension("GL_SGIS_fog_function")]
        FogFuncSgis = 0x812A,
    }

    public enum FrontFaceDirection
    {

        [GLExtension("GL_ARB_tessellation_shader")]
        Cw = 0x0900,

        [GLExtension("GL_ARB_tessellation_shader")]
        Ccw = 0x0901,
    }

    public enum MapQuery
    {
        Coeff = 0x0A00,
        Order = 0x0A01,
        Domain = 0x0A02,
    }

    public enum GetMapQuery
    {
        Coeff = 0x0A00,
        Order = 0x0A01,
        Domain = 0x0A02,
    }

    public enum GetPName
    {
        CurrentColor = 0x0B00,
        CurrentIndex = 0x0B01,
        CurrentNormal = 0x0B02,
        CurrentTextureCoords = 0x0B03,
        CurrentRasterColor = 0x0B04,
        CurrentRasterIndex = 0x0B05,
        CurrentRasterTextureCoords = 0x0B06,
        CurrentRasterPosition = 0x0B07,
        CurrentRasterPositionValid = 0x0B08,
        CurrentRasterDistance = 0x0B09,
        PointSmooth = 0x0B10,
        PointSize = 0x0B11,
        PointSizeRange = 0x0B12,
        SmoothPointSizeRange = 0x0B12,
        PointSizeGranularity = 0x0B13,
        SmoothPointSizeGranularity = 0x0B13,
        LineSmooth = 0x0B20,
        LineWidth = 0x0B21,
        LineWidthRange = 0x0B22,
        SmoothLineWidthRange = 0x0B22,
        LineWidthGranularity = 0x0B23,
        SmoothLineWidthGranularity = 0x0B23,
        LineStipple = 0x0B24,
        LineStipplePattern = 0x0B25,
        LineStippleRepeat = 0x0B26,
        ListMode = 0x0B30,
        MaxListNesting = 0x0B31,
        ListBase = 0x0B32,
        ListIndex = 0x0B33,
        PolygonMode = 0x0B40,
        PolygonSmooth = 0x0B41,
        PolygonStipple = 0x0B42,
        EdgeFlag = 0x0B43,
        CullFace = 0x0B44,
        CullFaceMode = 0x0B45,
        FrontFace = 0x0B46,
        Lighting = 0x0B50,
        LightModelLocalViewer = 0x0B51,
        LightModelTwoSide = 0x0B52,
        LightModelAmbient = 0x0B53,
        ShadeModel = 0x0B54,
        ColorMaterialFace = 0x0B55,
        ColorMaterialParameter = 0x0B56,
        ColorMaterial = 0x0B57,

        [GLExtension("GL_NV_register_combiners")]
        Fog = 0x0B60,
        FogIndex = 0x0B61,
        FogDensity = 0x0B62,
        FogStart = 0x0B63,
        FogEnd = 0x0B64,
        FogMode = 0x0B65,
        FogColor = 0x0B66,

        [GLExtension("GL_ARB_viewport_array")]
        DepthRange = 0x0B70,
        DepthTest = 0x0B71,
        DepthWritemask = 0x0B72,
        DepthClearValue = 0x0B73,
        DepthFunc = 0x0B74,
        AccumClearValue = 0x0B80,
        StencilTest = 0x0B90,
        StencilClearValue = 0x0B91,
        StencilFunc = 0x0B92,
        StencilValueMask = 0x0B93,
        StencilFail = 0x0B94,
        StencilPassDepthFail = 0x0B95,
        StencilPassDepthPass = 0x0B96,
        StencilRef = 0x0B97,
        StencilWritemask = 0x0B98,
        MatrixMode = 0x0BA0,
        Normalize = 0x0BA1,

        [GLExtension("GL_ARB_viewport_array")]
        Viewport = 0x0BA2,
        ModelviewStackDepth = 0x0BA3,

        [GLExtension("GL_EXT_vertex_weighting")]
        Modelview0StackDepthEXT = 0x0BA3,
        ProjectionStackDepth = 0x0BA4,
        TextureStackDepth = 0x0BA5,
        ModelviewMatrix = 0x0BA6,

        [GLExtension("GL_EXT_vertex_weighting")]
        Modelview0MatrixEXT = 0x0BA6,
        ProjectionMatrix = 0x0BA7,
        TextureMatrix = 0x0BA8,
        AttribStackDepth = 0x0BB0,
        ClientAttribStackDepth = 0x0BB1,
        AlphaTest = 0x0BC0,

        [GLExtension("GL_QCOM_alpha_test")]
        AlphaTestQCOM = 0x0BC0,
        AlphaTestFunc = 0x0BC1,

        [GLExtension("GL_QCOM_alpha_test")]
        AlphaTestFuncQCOM = 0x0BC1,
        AlphaTestRef = 0x0BC2,

        [GLExtension("GL_QCOM_alpha_test")]
        AlphaTestRefQCOM = 0x0BC2,
        Dither = 0x0BD0,
        BlendDst = 0x0BE0,
        BlendSrc = 0x0BE1,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        Blend = 0x0BE2,
        LogicOpMode = 0x0BF0,
        IndexLogicOp = 0x0BF1,
        LogicOp = 0x0BF1,
        ColorLogicOp = 0x0BF2,
        AuxBuffers = 0x0C00,
        DrawBuffer = 0x0C01,

        [GLExtension("GL_EXT_multiview_draw_buffers")]
        DrawBufferEXT = 0x0C01,
        ReadBuffer = 0x0C02,

        [GLExtension("GL_EXT_multiview_draw_buffers")]
        ReadBufferEXT = 0x0C02,

        [GLExtension("GL_NV_read_buffer")]
        ReadBufferNV = 0x0C02,

        [GLExtension("GL_ARB_viewport_array")]
        ScissorBox = 0x0C10,

        [GLExtension("GL_ARB_viewport_array")]
        ScissorTest = 0x0C11,
        IndexClearValue = 0x0C20,
        IndexWritemask = 0x0C21,
        ColorClearValue = 0x0C22,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        ColorWritemask = 0x0C23,
        IndexMode = 0x0C30,
        RgbaMode = 0x0C31,
        Doublebuffer = 0x0C32,
        Stereo = 0x0C33,
        RenderMode = 0x0C40,
        PerspectiveCorrectionHint = 0x0C50,
        PointSmoothHint = 0x0C51,
        LineSmoothHint = 0x0C52,
        PolygonSmoothHint = 0x0C53,
        FogHint = 0x0C54,
        TextureGenS = 0x0C60,
        TextureGenT = 0x0C61,
        TextureGenR = 0x0C62,
        TextureGenQ = 0x0C63,
        PixelMapIToISize = 0x0CB0,
        PixelMapSToSSize = 0x0CB1,
        PixelMapIToRSize = 0x0CB2,
        PixelMapIToGSize = 0x0CB3,
        PixelMapIToBSize = 0x0CB4,
        PixelMapIToASize = 0x0CB5,
        PixelMapRToRSize = 0x0CB6,
        PixelMapGToGSize = 0x0CB7,
        PixelMapBToBSize = 0x0CB8,
        PixelMapAToASize = 0x0CB9,
        UnpackSwapBytes = 0x0CF0,
        UnpackLsbFirst = 0x0CF1,
        UnpackRowLength = 0x0CF2,
        UnpackSkipRows = 0x0CF3,
        UnpackSkipPixels = 0x0CF4,
        UnpackAlignment = 0x0CF5,
        PackSwapBytes = 0x0D00,
        PackLsbFirst = 0x0D01,
        PackRowLength = 0x0D02,
        PackSkipRows = 0x0D03,
        PackSkipPixels = 0x0D04,
        PackAlignment = 0x0D05,
        MapColor = 0x0D10,
        MapStencil = 0x0D11,
        IndexShift = 0x0D12,
        IndexOffset = 0x0D13,
        RedScale = 0x0D14,
        RedBias = 0x0D15,
        ZoomX = 0x0D16,
        ZoomY = 0x0D17,
        GreenScale = 0x0D18,
        GreenBias = 0x0D19,
        BlueScale = 0x0D1A,
        BlueBias = 0x0D1B,
        AlphaScale = 0x0D1C,
        AlphaBias = 0x0D1D,
        DepthScale = 0x0D1E,
        DepthBias = 0x0D1F,
        MaxEvalOrder = 0x0D30,
        MaxLights = 0x0D31,
        MaxClipPlanes = 0x0D32,
        MaxClipDistances = 0x0D32,
        MaxTextureSize = 0x0D33,
        MaxPixelMapTable = 0x0D34,
        MaxAttribStackDepth = 0x0D35,
        MaxModelviewStackDepth = 0x0D36,
        MaxNameStackDepth = 0x0D37,
        MaxProjectionStackDepth = 0x0D38,
        MaxTextureStackDepth = 0x0D39,
        MaxViewportDims = 0x0D3A,
        MaxClientAttribStackDepth = 0x0D3B,
        SubpixelBits = 0x0D50,
        IndexBits = 0x0D51,
        RedBits = 0x0D52,
        GreenBits = 0x0D53,
        BlueBits = 0x0D54,
        AlphaBits = 0x0D55,
        DepthBits = 0x0D56,
        StencilBits = 0x0D57,
        AccumRedBits = 0x0D58,
        AccumGreenBits = 0x0D59,
        AccumBlueBits = 0x0D5A,
        AccumAlphaBits = 0x0D5B,
        NameStackDepth = 0x0D70,
        AutoNormal = 0x0D80,
        Map1Color4 = 0x0D90,
        Map1Index = 0x0D91,
        Map1Normal = 0x0D92,
        Map1TextureCoord1 = 0x0D93,
        Map1TextureCoord2 = 0x0D94,
        Map1TextureCoord3 = 0x0D95,
        Map1TextureCoord4 = 0x0D96,
        Map1Vertex3 = 0x0D97,
        Map1Vertex4 = 0x0D98,
        Map2Color4 = 0x0DB0,
        Map2Index = 0x0DB1,
        Map2Normal = 0x0DB2,
        Map2TextureCoord1 = 0x0DB3,
        Map2TextureCoord2 = 0x0DB4,
        Map2TextureCoord3 = 0x0DB5,
        Map2TextureCoord4 = 0x0DB6,
        Map2Vertex3 = 0x0DB7,
        Map2Vertex4 = 0x0DB8,
        Map1GridDomain = 0x0DD0,
        Map1GridSegments = 0x0DD1,
        Map2GridDomain = 0x0DD2,
        Map2GridSegments = 0x0DD3,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture1D = 0x0DE0,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2D = 0x0DE1,
        FeedbackBufferSize = 0x0DF1,
        FeedbackBufferType = 0x0DF2,
        SelectionBufferSize = 0x0DF4,
        PolygonOffsetUnits = 0x2A00,
        PolygonOffsetPoint = 0x2A01,
        PolygonOffsetLine = 0x2A02,
        ClipPlane0 = 0x3000,
        ClipPlane1 = 0x3001,
        ClipPlane2 = 0x3002,
        ClipPlane3 = 0x3003,
        ClipPlane4 = 0x3004,
        ClipPlane5 = 0x3005,
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,

        [GLExtension("GL_ARB_imaging")]
        BlendColor = 0x8005,

        [GLExtension("GL_EXT_blend_color")]
        BlendColorEXT = 0x8005,

        [GLExtension("GL_ARB_imaging")]
        BlendEquation = 0x8009,

        [GLExtension("GL_EXT_blend_minmax")]
        BlendEquationEXT = 0x8009,

        [GLExtension("GL_OES_blend_subtract")]
        BlendEquationOES = 0x8009,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        BlendEquationRgb = 0x8009,

        [GLExtension("GL_EXT_cmyka")]
        PackCmykHintEXT = 0x800E,

        [GLExtension("GL_EXT_cmyka")]
        UnpackCmykHintEXT = 0x800F,

        [GLExtension("GL_EXT_convolution")]
        Convolution1DEXT = 0x8010,

        [GLExtension("GL_EXT_convolution")]
        Convolution2DEXT = 0x8011,

        [GLExtension("GL_EXT_convolution")]
        Separable2DEXT = 0x8012,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionRedScaleEXT = 0x801C,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionGreenScaleEXT = 0x801D,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionBlueScaleEXT = 0x801E,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionAlphaScaleEXT = 0x801F,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionRedBiasEXT = 0x8020,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionGreenBiasEXT = 0x8021,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionBlueBiasEXT = 0x8022,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionAlphaBiasEXT = 0x8023,

        [GLExtension("GL_EXT_histogram")]
        HistogramEXT = 0x8024,

        [GLExtension("GL_EXT_histogram")]
        MinmaxEXT = 0x802E,
        PolygonOffsetFill = 0x8037,
        PolygonOffsetFactor = 0x8038,

        [GLExtension("GL_EXT_polygon_offset")]
        PolygonOffsetBiasEXT = 0x8039,

        [GLExtension("GL_EXT_rescale_normal")]
        RescaleNormalEXT = 0x803A,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBinding1D = 0x8068,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBinding2D = 0x8069,

        [GLExtension("GL_EXT_texture_object")]
        Texture3DBindingEXT = 0x806A,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBinding3D = 0x806A,
        PackSkipImages = 0x806B,

        [GLExtension("GL_EXT_texture3D")]
        PackSkipImagesEXT = 0x806B,
        PackImageHeight = 0x806C,

        [GLExtension("GL_EXT_texture3D")]
        PackImageHeightEXT = 0x806C,
        UnpackSkipImages = 0x806D,

        [GLExtension("GL_EXT_texture3D")]
        UnpackSkipImagesEXT = 0x806D,
        UnpackImageHeight = 0x806E,

        [GLExtension("GL_EXT_texture3D")]
        UnpackImageHeightEXT = 0x806E,

        [GLExtension("GL_EXT_texture3D")]
        Texture3DEXT = 0x806F,
        Max3DTextureSize = 0x8073,

        [GLExtension("GL_EXT_texture3D")]
        Max3DTextureSizeEXT = 0x8073,

        [GLExtension("GL_KHR_debug")]
        VertexArray = 0x8074,
        NormalArray = 0x8075,
        ColorArray = 0x8076,
        IndexArray = 0x8077,
        TextureCoordArray = 0x8078,
        EdgeFlagArray = 0x8079,
        VertexArraySize = 0x807A,
        VertexArrayType = 0x807B,
        VertexArrayStride = 0x807C,

        [GLExtension("GL_EXT_vertex_array")]
        VertexArrayCountEXT = 0x807D,
        NormalArrayType = 0x807E,
        NormalArrayStride = 0x807F,

        [GLExtension("GL_EXT_vertex_array")]
        NormalArrayCountEXT = 0x8080,
        ColorArraySize = 0x8081,
        ColorArrayType = 0x8082,
        ColorArrayStride = 0x8083,

        [GLExtension("GL_EXT_vertex_array")]
        ColorArrayCountEXT = 0x8084,
        IndexArrayType = 0x8085,
        IndexArrayStride = 0x8086,

        [GLExtension("GL_EXT_vertex_array")]
        IndexArrayCountEXT = 0x8087,
        TextureCoordArraySize = 0x8088,
        TextureCoordArrayType = 0x8089,
        TextureCoordArrayStride = 0x808A,

        [GLExtension("GL_EXT_vertex_array")]
        TextureCoordArrayCountEXT = 0x808B,
        EdgeFlagArrayStride = 0x808C,

        [GLExtension("GL_EXT_vertex_array")]
        EdgeFlagArrayCountEXT = 0x808D,

        [GLExtension("GL_SGIX_interlace")]
        InterlaceSGIX = 0x8094,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTexture2DBindingSgis = 0x8096,

        [GLExtension("GL_SGIS_multisample")]
        MultisampleSgis = 0x809D,

        [GLExtension("GL_SGIS_multisample")]
        SampleAlphaToMaskSgis = 0x809E,

        [GLExtension("GL_SGIS_multisample")]
        SampleAlphaToOneSgis = 0x809F,

        [GLExtension("GL_SGIS_multisample")]
        SampleMaskSgis = 0x80A0,
        SampleBuffers = 0x80A8,

        [GLExtension("GL_SGIS_multisample")]
        SampleBuffersSgis = 0x80A8,

        [GLExtension("GL_ARB_internalformat_query2")]
        Samples = 0x80A9,

        [GLExtension("GL_SGIS_multisample")]
        SamplesSgis = 0x80A9,
        SampleCoverageValue = 0x80AA,

        [GLExtension("GL_SGIS_multisample")]
        SampleMaskValueSgis = 0x80AA,
        SampleCoverageInvert = 0x80AB,

        [GLExtension("GL_SGIS_multisample")]
        SampleMaskInvertSgis = 0x80AB,

        [GLExtension("GL_SGIS_multisample")]
        SamplePatternSgis = 0x80AC,

        [GLExtension("GL_SGI_color_matrix")]
        ColorMatrixSgi = 0x80B1,

        [GLExtension("GL_SGI_color_matrix")]
        ColorMatrixStackDepthSgi = 0x80B2,

        [GLExtension("GL_SGI_color_matrix")]
        MaxColorMatrixStackDepthSgi = 0x80B3,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixRedScaleSgi = 0x80B4,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixGreenScaleSgi = 0x80B5,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixBlueScaleSgi = 0x80B6,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixAlphaScaleSgi = 0x80B7,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixRedBiasSgi = 0x80B8,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixGreenBiasSgi = 0x80B9,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixBlueBiasSgi = 0x80BA,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixAlphaBiasSgi = 0x80BB,

        [GLExtension("GL_SGI_texture_color_table")]
        TextureColorTableSgi = 0x80BC,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        BlendDstRgb = 0x80C8,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        BlendSrcRgb = 0x80C9,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        BlendDstAlpha = 0x80CA,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        BlendSrcAlpha = 0x80CB,

        [GLExtension("GL_SGI_color_table")]
        ColorTableSgi = 0x80D0,

        [GLExtension("GL_SGI_color_table")]
        PostConvolutionColorTableSgi = 0x80D1,

        [GLExtension("GL_SGI_color_table")]
        PostColorMatrixColorTableSgi = 0x80D2,
        MaxElementsVertices = 0x80E8,
        MaxElementsIndices = 0x80E9,
        PointSizeMin = 0x8126,

        [GLExtension("GL_ARB_point_parameters")]
        PointSizeMinARB = 0x8126,

        [GLExtension("GL_EXT_point_parameters")]
        PointSizeMinEXT = 0x8126,

        [GLExtension("GL_SGIS_point_parameters")]
        PointSizeMinSgis = 0x8126,
        PointSizeMax = 0x8127,

        [GLExtension("GL_ARB_point_parameters")]
        PointSizeMaxARB = 0x8127,

        [GLExtension("GL_EXT_point_parameters")]
        PointSizeMaxEXT = 0x8127,

        [GLExtension("GL_SGIS_point_parameters")]
        PointSizeMaxSgis = 0x8127,
        PointFadeThresholdSize = 0x8128,

        [GLExtension("GL_ARB_point_parameters")]
        PointFadeThresholdSizeARB = 0x8128,

        [GLExtension("GL_EXT_point_parameters")]
        PointFadeThresholdSizeEXT = 0x8128,

        [GLExtension("GL_SGIS_point_parameters")]
        PointFadeThresholdSizeSgis = 0x8128,

        [GLExtension("GL_EXT_point_parameters")]
        DistanceAttenuationEXT = 0x8129,

        [GLExtension("GL_SGIS_point_parameters")]
        DistanceAttenuationSgis = 0x8129,
        PointDistanceAttenuation = 0x8129,

        [GLExtension("GL_ARB_point_parameters")]
        PointDistanceAttenuationARB = 0x8129,

        [GLExtension("GL_SGIS_fog_function")]
        FogFuncPointsSgis = 0x812B,

        [GLExtension("GL_SGIS_fog_function")]
        MaxFogFuncPointsSgis = 0x812C,

        [GLExtension("GL_SGIS_texture4D")]
        PackSkipVolumesSgis = 0x8130,

        [GLExtension("GL_SGIS_texture4D")]
        PackImageDepthSgis = 0x8131,

        [GLExtension("GL_SGIS_texture4D")]
        UnpackSkipVolumesSgis = 0x8132,

        [GLExtension("GL_SGIS_texture4D")]
        UnpackImageDepthSgis = 0x8133,

        [GLExtension("GL_SGIS_texture4D")]
        Texture4dSgis = 0x8134,

        [GLExtension("GL_SGIS_texture4D")]
        Max4dTextureSizeSgis = 0x8138,

        [GLExtension("GL_SGIX_pixel_texture")]
        PixelTexGenSGIX = 0x8139,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileBestAlignmentSGIX = 0x813E,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileCacheIncrementSGIX = 0x813F,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileWidthSGIX = 0x8140,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileHeightSGIX = 0x8141,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileGridWidthSGIX = 0x8142,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileGridHeightSGIX = 0x8143,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileGridDepthSGIX = 0x8144,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileCacheSizeSGIX = 0x8145,

        [GLExtension("GL_SGIX_sprite")]
        SpriteSGIX = 0x8148,

        [GLExtension("GL_SGIX_sprite")]
        SpriteModeSGIX = 0x8149,

        [GLExtension("GL_SGIX_sprite")]
        SpriteAxisSGIX = 0x814A,

        [GLExtension("GL_SGIX_sprite")]
        SpriteTranslationSGIX = 0x814B,

        [GLExtension("GL_SGIS_texture4D")]
        Texture4dBindingSgis = 0x814F,

        [GLExtension("GL_SGIX_clipmap")]
        MaxClipmapDepthSGIX = 0x8177,

        [GLExtension("GL_SGIX_clipmap")]
        MaxClipmapVirtualDepthSGIX = 0x8178,

        [GLExtension("GL_SGIX_texture_scale_bias")]
        PostTextureFilterBiasRangeSGIX = 0x817B,

        [GLExtension("GL_SGIX_texture_scale_bias")]
        PostTextureFilterScaleRangeSGIX = 0x817C,

        [GLExtension("GL_SGIX_reference_plane")]
        ReferencePlaneSGIX = 0x817D,

        [GLExtension("GL_SGIX_reference_plane")]
        ReferencePlaneEquationSGIX = 0x817E,

        [GLExtension("GL_SGIX_ir_instrument1")]
        IrInstrument1SGIX = 0x817F,

        [GLExtension("GL_SGIX_instruments")]
        InstrumentMeasurementsSGIX = 0x8181,

        [GLExtension("GL_SGIX_calligraphic_fragment")]
        CalligraphicFragmentSGIX = 0x8183,

        [GLExtension("GL_SGIX_framezoom")]
        FramezoomSGIX = 0x818B,

        [GLExtension("GL_SGIX_framezoom")]
        FramezoomFactorSGIX = 0x818C,

        [GLExtension("GL_SGIX_framezoom")]
        MaxFramezoomFactorSGIX = 0x818D,

        [GLExtension("GL_SGIS_generate_mipmap")]
        GenerateMipmapHintSgis = 0x8192,

        [GLExtension("GL_SGIX_polynomial_ffd")]
        DeformationsMaskSGIX = 0x8196,

        [GLExtension("GL_SGIX_fog_offset")]
        FogOffsetSGIX = 0x8198,

        [GLExtension("GL_SGIX_fog_offset")]
        FogOffsetValueSGIX = 0x8199,
        LightModelColorControl = 0x81F8,

        [GLExtension("GL_EXT_shared_texture_palette")]
        SharedTexturePaletteEXT = 0x81FB,
        MajorVersion = 0x821B,
        MinorVersion = 0x821C,
        NumExtensions = 0x821D,
        ContextFlags = 0x821E,

        [GLExtension("GL_ARB_separate_shader_objects")]
        ProgramPipelineBinding = 0x825A,

        [GLExtension("GL_ARB_viewport_array")]
        MaxViewports = 0x825B,

        [GLExtension("GL_ARB_viewport_array")]
        ViewportSubpixelBits = 0x825C,

        [GLExtension("GL_ARB_viewport_array")]
        ViewportBoundsRange = 0x825D,

        [GLExtension("GL_ARB_viewport_array")]
        LayerProvokingVertex = 0x825E,

        [GLExtension("GL_ARB_viewport_array")]
        ViewportIndexProvokingVertex = 0x825F,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeUniformComponents = 0x8263,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeAtomicCounterBuffers = 0x8264,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeAtomicCounters = 0x8265,

        [GLExtension("GL_ARB_compute_shader")]
        MaxCombinedComputeUniformComponents = 0x8266,

        [GLExtension("GL_KHR_debug")]
        MaxDebugGroupStackDepth = 0x826C,

        [GLExtension("GL_KHR_debug")]
        DebugGroupStackDepth = 0x826D,

        [GLExtension("GL_ARB_explicit_uniform_location")]
        MaxUniformLocations = 0x826E,

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        VertexBindingDivisor = 0x82D6,

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        VertexBindingOffset = 0x82D7,

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        VertexBindingStride = 0x82D8,

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        MaxVertexAttribRelativeOffset = 0x82D9,

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        MaxVertexAttribBindings = 0x82DA,

        [GLExtension("GL_KHR_debug")]
        MaxLabelLength = 0x82E8,

        [GLExtension("GL_SGIX_convolution_accuracy")]
        ConvolutionHintSGIX = 0x8316,

        [GLExtension("GL_SGIX_async")]
        AsyncMarkerSGIX = 0x8329,

        [GLExtension("GL_SGIX_pixel_texture")]
        PixelTexGenModeSGIX = 0x832B,

        [GLExtension("GL_SGIX_async_histogram")]
        AsyncHistogramSGIX = 0x832C,

        [GLExtension("GL_SGIX_async_histogram")]
        MaxAsyncHistogramSGIX = 0x832D,

        [GLExtension("GL_SGIS_pixel_texture")]
        PixelTextureSgis = 0x8353,

        [GLExtension("GL_SGIX_async_pixel")]
        AsyncTexImageSGIX = 0x835C,

        [GLExtension("GL_SGIX_async_pixel")]
        AsyncDrawPixelsSGIX = 0x835D,

        [GLExtension("GL_SGIX_async_pixel")]
        AsyncReadPixelsSGIX = 0x835E,

        [GLExtension("GL_SGIX_async_pixel")]
        MaxAsyncTexImageSGIX = 0x835F,

        [GLExtension("GL_SGIX_async_pixel")]
        MaxAsyncDrawPixelsSGIX = 0x8360,

        [GLExtension("GL_SGIX_async_pixel")]
        MaxAsyncReadPixelsSGIX = 0x8361,

        [GLExtension("GL_SGIX_vertex_preclip")]
        VertexPreclipSGIX = 0x83EE,

        [GLExtension("GL_SGIX_vertex_preclip")]
        VertexPreclipHintSGIX = 0x83EF,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightingSGIX = 0x8400,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentColorMaterialSGIX = 0x8401,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentColorMaterialFaceSGIX = 0x8402,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentColorMaterialParameterSGIX = 0x8403,

        [GLExtension("GL_SGIX_fragment_lighting")]
        MaxFragmentLightsSGIX = 0x8404,

        [GLExtension("GL_SGIX_fragment_lighting")]
        MaxActiveLightsSGIX = 0x8405,

        [GLExtension("GL_SGIX_fragment_lighting")]
        LightEnvModeSGIX = 0x8407,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelLocalViewerSGIX = 0x8408,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelTwoSideSGIX = 0x8409,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelAmbientSGIX = 0x840A,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelNormalInterpolationSGIX = 0x840B,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight0SGIX = 0x840C,

        [GLExtension("GL_SGIX_resample")]
        PackResampleSGIX = 0x842E,

        [GLExtension("GL_SGIX_resample")]
        UnpackResampleSGIX = 0x842F,
        AliasedPointSizeRange = 0x846D,
        AliasedLineWidthRange = 0x846E,
        ActiveTexture = 0x84E0,

        [GLExtension("GL_ARB_framebuffer_object")]
        MaxRenderbufferSize = 0x84E8,
        TextureCompressionHint = 0x84EF,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBindingRectangle = 0x84F6,

        [GLExtension("GL_ARB_texture_rectangle")]
        TextureBindingRectangleARB = 0x84F6,

        [GLExtension("GL_NV_texture_rectangle")]
        TextureBindingRectangleNV = 0x84F6,
        MaxRectangleTextureSize = 0x84F8,
        MaxTextureLodBias = 0x84FD,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBindingCubeMap = 0x8514,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureBindingCubeMapARB = 0x8514,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureBindingCubeMapEXT = 0x8514,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureBindingCubeMapOES = 0x8514,
        MaxCubeMapTextureSize = 0x851C,

        [GLExtension("GL_ARB_texture_cube_map")]
        MaxCubeMapTextureSizeARB = 0x851C,

        [GLExtension("GL_EXT_texture_cube_map")]
        MaxCubeMapTextureSizeEXT = 0x851C,

        [GLExtension("GL_OES_texture_cube_map")]
        MaxCubeMapTextureSizeOES = 0x851C,

        [GLExtension("GL_SGIX_subsample")]
        PackSubsampleRateSGIX = 0x85A0,

        [GLExtension("GL_SGIX_subsample")]
        UnpackSubsampleRateSGIX = 0x85A1,

        [GLExtension("GL_ARB_vertex_array_object")]
        VertexArrayBinding = 0x85B5,
        ProgramPointSize = 0x8642,
        NumCompressedTextureFormats = 0x86A2,
        CompressedTextureFormats = 0x86A3,

        [GLExtension("GL_ARB_get_program_binary")]
        NumProgramBinaryFormats = 0x87FE,

        [GLExtension("GL_ARB_get_program_binary")]
        ProgramBinaryFormats = 0x87FF,
        StencilBackFunc = 0x8800,
        StencilBackFail = 0x8801,
        StencilBackPassDepthFail = 0x8802,
        StencilBackPassDepthPass = 0x8803,
        MaxDrawBuffers = 0x8824,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        BlendEquationAlpha = 0x883D,
        MaxVertexAttribs = 0x8869,
        MaxTextureImageUnits = 0x8872,
        ArrayBufferBinding = 0x8894,
        ElementArrayBufferBinding = 0x8895,
        PixelPackBufferBinding = 0x88ED,
        PixelUnpackBufferBinding = 0x88EF,

        [GLExtension("GL_ARB_blend_func_extended")]
        MaxDualSourceDrawBuffers = 0x88FC,
        MaxArrayTextureLayers = 0x88FF,
        MinProgramTexelOffset = 0x8904,
        MaxProgramTexelOffset = 0x8905,

        [GLExtension("GL_ARB_sampler_objects")]
        SamplerBinding = 0x8919,

        [GLExtension("GL_ATI_fragment_shader")]
        FragmentShaderATI = 0x8920,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBufferBinding = 0x8A28,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBufferStart = 0x8A29,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBufferSize = 0x8A2A,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxVertexUniformBlocks = 0x8A2B,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxGeometryUniformBlocks = 0x8A2C,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxFragmentUniformBlocks = 0x8A2D,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxCombinedUniformBlocks = 0x8A2E,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxUniformBufferBindings = 0x8A2F,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxUniformBlockSize = 0x8A30,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxCombinedVertexUniformComponents = 0x8A31,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxCombinedGeometryUniformComponents = 0x8A32,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        MaxCombinedFragmentUniformComponents = 0x8A33,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBufferOffsetAlignment = 0x8A34,
        MaxFragmentUniformComponents = 0x8B49,
        MaxVertexUniformComponents = 0x8B4A,
        MaxVaryingFloats = 0x8B4B,

        [GLExtension("GL_ARB_geometry_shader4")]
        MaxVaryingComponents = 0x8B4B,
        MaxVertexTextureImageUnits = 0x8B4C,
        MaxCombinedTextureImageUnits = 0x8B4D,
        FragmentShaderDerivativeHint = 0x8B8B,
        CurrentProgram = 0x8B8D,

        [GLExtension("GL_ARB_ES2_compatibility")]
        ImplementationColorReadType = 0x8B9A,

        [GLExtension("GL_ARB_ES2_compatibility")]
        ImplementationColorReadFormat = 0x8B9B,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBinding1DArray = 0x8C1C,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBinding2DArray = 0x8C1D,
        MaxGeometryTextureImageUnits = 0x8C29,
        MaxTextureBufferSize = 0x8C2B,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBindingBuffer = 0x8C2C,
        TransformFeedbackBufferStart = 0x8C84,
        TransformFeedbackBufferSize = 0x8C85,
        TransformFeedbackBufferBinding = 0x8C8F,

        [GLExtension("GL_QCOM_motion_estimation")]
        MotionEstimationSearchBlockXQCOM = 0x8C90,

        [GLExtension("GL_QCOM_motion_estimation")]
        MotionEstimationSearchBlockYQCOM = 0x8C91,
        StencilBackRef = 0x8CA3,
        StencilBackValueMask = 0x8CA4,
        StencilBackWritemask = 0x8CA5,

        [GLExtension("GL_ARB_framebuffer_object")]
        DrawFramebufferBinding = 0x8CA6,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferBinding = 0x8CA7,

        [GLExtension("GL_ARB_framebuffer_object")]
        ReadFramebufferBinding = 0x8CAA,

        [GLExtension("GL_ARB_framebuffer_object")]
        MaxColorAttachments = 0x8CDF,

        [GLExtension("GL_EXT_draw_buffers")]
        MaxColorAttachmentsEXT = 0x8CDF,

        [GLExtension("GL_NV_fbo_color_attachments")]
        MaxColorAttachmentsNV = 0x8CDF,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureGenStrOES = 0x8D60,

        [GLExtension("GL_ARB_ES3_compatibility")]
        MaxElementIndex = 0x8D6B,
        MaxGeometryUniformComponents = 0x8DDF,

        [GLExtension("GL_ARB_ES2_compatibility")]
        ShaderBinaryFormats = 0x8DF8,

        [GLExtension("GL_ARB_ES2_compatibility")]
        NumShaderBinaryFormats = 0x8DF9,

        [GLExtension("GL_ARB_ES2_compatibility")]
        ShaderCompiler = 0x8DFA,

        [GLExtension("GL_ARB_ES2_compatibility")]
        MaxVertexUniformVectors = 0x8DFB,

        [GLExtension("GL_ARB_ES2_compatibility")]
        MaxVaryingVectors = 0x8DFC,

        [GLExtension("GL_ARB_ES2_compatibility")]
        MaxFragmentUniformVectors = 0x8DFD,

        [GLExtension("GL_ARB_timer_query")]
        Timestamp = 0x8E28,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        TimestampEXT = 0x8E28,

        [GLExtension("GL_ARB_provoking_vertex")]
        ProvokingVertex = 0x8E4F,

        [GLExtension("GL_ARB_texture_multisample")]
        MaxSampleMaskWords = 0x8E59,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessControlUniformBlocks = 0x8E89,

        [GLExtension("GL_ARB_tessellation_shader")]
        MaxTessEvaluationUniformBlocks = 0x8E8A,

        [GLExtension("GL_ARM_shader_framebuffer_fetch")]
        FetchPerSampleArm = 0x8F65,

        [GLExtension("GL_ARM_shader_framebuffer_fetch")]
        FragmentShaderFramebufferFetchMrtArm = 0x8F66,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateNonTrivialCombinersSupportedEXT = 0x8F6F,
        PrimitiveRestartIndex = 0x8F9E,

        [GLExtension("GL_ARB_map_buffer_alignment")]
        MinMapBufferAlignment = 0x90BC,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBufferBinding = 0x90D3,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBufferStart = 0x90D4,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBufferSize = 0x90D5,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxVertexShaderStorageBlocks = 0x90D6,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxGeometryShaderStorageBlocks = 0x90D7,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxTessControlShaderStorageBlocks = 0x90D8,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxTessEvaluationShaderStorageBlocks = 0x90D9,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxFragmentShaderStorageBlocks = 0x90DA,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxComputeShaderStorageBlocks = 0x90DB,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxCombinedShaderStorageBlocks = 0x90DC,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        MaxShaderStorageBufferBindings = 0x90DD,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBufferOffsetAlignment = 0x90DF,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeWorkGroupInvocations = 0x90EB,

        [GLExtension("GL_ARB_compute_shader")]
        DispatchIndirectBufferBinding = 0x90EF,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBinding2DMultisample = 0x9104,

        [GLExtension("GL_ARB_direct_state_access")]
        TextureBinding2DMultisampleArray = 0x9105,

        [GLExtension("GL_ARB_texture_multisample")]
        MaxColorTextureSamples = 0x910E,

        [GLExtension("GL_ARB_texture_multisample")]
        MaxDepthTextureSamples = 0x910F,

        [GLExtension("GL_ARB_texture_multisample")]
        MaxIntegerSamples = 0x9110,

        [GLExtension("GL_ARB_sync")]
        MaxServerWaitTimeout = 0x9111,
        MaxVertexOutputComponents = 0x9122,
        MaxGeometryInputComponents = 0x9123,
        MaxGeometryOutputComponents = 0x9124,
        MaxFragmentInputComponents = 0x9125,
        ContextProfileMask = 0x9126,

        [GLExtension("GL_ARB_texture_buffer_range")]
        TextureBufferOffsetAlignment = 0x919F,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeUniformBlocks = 0x91BB,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeTextureImageUnits = 0x91BC,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeWorkGroupCount = 0x91BE,

        [GLExtension("GL_ARB_compute_shader")]
        MaxComputeWorkGroupSize = 0x91BF,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxVertexAtomicCounters = 0x92D2,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxTessControlAtomicCounters = 0x92D3,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxTessEvaluationAtomicCounters = 0x92D4,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxGeometryAtomicCounters = 0x92D5,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxFragmentAtomicCounters = 0x92D6,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        MaxCombinedAtomicCounters = 0x92D7,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        MaxFramebufferWidth = 0x9315,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        MaxFramebufferHeight = 0x9316,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        MaxFramebufferLayers = 0x9317,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        MaxFramebufferSamples = 0x9318,

        [GLExtension("GL_EXT_memory_object")]
        NumDeviceUuidsEXT = 0x9596,

        [GLExtension("GL_EXT_memory_object")]
        DeviceUuidEXT = 0x9597,

        [GLExtension("GL_EXT_memory_object")]
        DriverUuidEXT = 0x9598,

        [GLExtension("GL_EXT_memory_object_win32")]
        DeviceLuidEXT = 0x9599,

        [GLExtension("GL_EXT_memory_object_win32")]
        DeviceNodeMaskEXT = 0x959A,

        [GLExtension("GL_NV_primitive_shading_rate")]
        ShadingRateImagePerPrimitiveNV = 0x95B1,

        [GLExtension("GL_NV_primitive_shading_rate")]
        ShadingRateImagePaletteCountNV = 0x95B2,

        [GLExtension("GL_NV_timeline_semaphore")]
        MaxTimelineSemaphoreValueDifferenceNV = 0x95B6,

        [GLExtension("GL_QCOM_shader_framebuffer_fetch_noncoherent")]
        FramebufferFetchNoncoherentQCOM = 0x96A2,

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRateQCOM = 0x96A4,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRateEXT = 0x96D0,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        MinFragmentShadingRateAttachmentTexelWidthEXT = 0x96D7,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        MaxFragmentShadingRateAttachmentTexelWidthEXT = 0x96D8,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        MinFragmentShadingRateAttachmentTexelHeightEXT = 0x96D9,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        MaxFragmentShadingRateAttachmentTexelHeightEXT = 0x96DA,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        MaxFragmentShadingRateAttachmentTexelAspectRatioEXT = 0x96DB,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        MaxFragmentShadingRateAttachmentLayersEXT = 0x96DC,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateWithShaderDepthStencilWritesSupportedEXT = 0x96DD,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateWithSampleMaskSupportedEXT = 0x96DE,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateAttachmentWithDefaultFramebufferSupportedEXT = 0x96DF,
    }

    public enum VertexShaderTextureUnitParameter
    {
        CurrentTextureCoords = 0x0B03,
        TextureMatrix = 0x0BA8,
    }

    public enum EnableCap
    {
        PointSmooth = 0x0B10,
        LineSmooth = 0x0B20,
        LineStipple = 0x0B24,
        PolygonSmooth = 0x0B41,
        PolygonStipple = 0x0B42,
        CullFace = 0x0B44,
        Lighting = 0x0B50,
        ColorMaterial = 0x0B57,

        [GLExtension("GL_NV_register_combiners")]
        Fog = 0x0B60,
        DepthTest = 0x0B71,
        StencilTest = 0x0B90,
        Normalize = 0x0BA1,
        AlphaTest = 0x0BC0,
        Dither = 0x0BD0,

        [GLExtension("GL_EXT_draw_buffers_indexed")]
        Blend = 0x0BE2,
        IndexLogicOp = 0x0BF1,
        ColorLogicOp = 0x0BF2,

        [GLExtension("GL_ARB_viewport_array")]
        ScissorTest = 0x0C11,
        TextureGenS = 0x0C60,
        TextureGenT = 0x0C61,
        TextureGenR = 0x0C62,
        TextureGenQ = 0x0C63,
        AutoNormal = 0x0D80,
        Map1Color4 = 0x0D90,
        Map1Index = 0x0D91,
        Map1Normal = 0x0D92,
        Map1TextureCoord1 = 0x0D93,
        Map1TextureCoord2 = 0x0D94,
        Map1TextureCoord3 = 0x0D95,
        Map1TextureCoord4 = 0x0D96,
        Map1Vertex3 = 0x0D97,
        Map1Vertex4 = 0x0D98,
        Map2Color4 = 0x0DB0,
        Map2Index = 0x0DB1,
        Map2Normal = 0x0DB2,
        Map2TextureCoord1 = 0x0DB3,
        Map2TextureCoord2 = 0x0DB4,
        Map2TextureCoord3 = 0x0DB5,
        Map2TextureCoord4 = 0x0DB6,
        Map2Vertex3 = 0x0DB7,
        Map2Vertex4 = 0x0DB8,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture1D = 0x0DE0,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2D = 0x0DE1,
        PolygonOffsetPoint = 0x2A01,
        PolygonOffsetLine = 0x2A02,
        ClipPlane0 = 0x3000,
        ClipDistance0 = 0x3000,
        ClipPlane1 = 0x3001,
        ClipDistance1 = 0x3001,
        ClipPlane2 = 0x3002,
        ClipDistance2 = 0x3002,
        ClipPlane3 = 0x3003,
        ClipDistance3 = 0x3003,
        ClipPlane4 = 0x3004,
        ClipDistance4 = 0x3004,
        ClipPlane5 = 0x3005,
        ClipDistance5 = 0x3005,
        ClipDistance6 = 0x3006,
        ClipDistance7 = 0x3007,
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,

        [GLExtension("GL_EXT_convolution")]
        Convolution1DEXT = 0x8010,

        [GLExtension("GL_EXT_convolution")]
        Convolution2DEXT = 0x8011,

        [GLExtension("GL_EXT_convolution")]
        Separable2DEXT = 0x8012,

        [GLExtension("GL_EXT_histogram")]
        HistogramEXT = 0x8024,

        [GLExtension("GL_EXT_histogram")]
        MinmaxEXT = 0x802E,
        PolygonOffsetFill = 0x8037,

        [GLExtension("GL_EXT_rescale_normal")]
        RescaleNormalEXT = 0x803A,

        [GLExtension("GL_EXT_texture3D")]
        Texture3DEXT = 0x806F,

        [GLExtension("GL_KHR_debug")]
        VertexArray = 0x8074,
        NormalArray = 0x8075,
        ColorArray = 0x8076,
        IndexArray = 0x8077,
        TextureCoordArray = 0x8078,
        EdgeFlagArray = 0x8079,

        [GLExtension("GL_SGIX_interlace")]
        InterlaceSGIX = 0x8094,
        Multisample = 0x809D,

        [GLExtension("GL_SGIS_multisample")]
        MultisampleSgis = 0x809D,
        SampleAlphaToCoverage = 0x809E,

        [GLExtension("GL_SGIS_multisample")]
        SampleAlphaToMaskSgis = 0x809E,
        SampleAlphaToOne = 0x809F,

        [GLExtension("GL_SGIS_multisample")]
        SampleAlphaToOneSgis = 0x809F,
        SampleCoverage = 0x80A0,

        [GLExtension("GL_SGIS_multisample")]
        SampleMaskSgis = 0x80A0,

        [GLExtension("GL_SGI_texture_color_table")]
        TextureColorTableSgi = 0x80BC,

        [GLExtension("GL_ARB_imaging")]
        ColorTable = 0x80D0,

        [GLExtension("GL_SGI_color_table")]
        ColorTableSgi = 0x80D0,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionColorTable = 0x80D1,

        [GLExtension("GL_SGI_color_table")]
        PostConvolutionColorTableSgi = 0x80D1,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixColorTable = 0x80D2,

        [GLExtension("GL_SGI_color_table")]
        PostColorMatrixColorTableSgi = 0x80D2,

        [GLExtension("GL_SGIS_texture4D")]
        Texture4dSgis = 0x8134,

        [GLExtension("GL_SGIX_pixel_texture")]
        PixelTexGenSGIX = 0x8139,

        [GLExtension("GL_SGIX_sprite")]
        SpriteSGIX = 0x8148,

        [GLExtension("GL_SGIX_reference_plane")]
        ReferencePlaneSGIX = 0x817D,

        [GLExtension("GL_SGIX_ir_instrument1")]
        IrInstrument1SGIX = 0x817F,

        [GLExtension("GL_SGIX_calligraphic_fragment")]
        CalligraphicFragmentSGIX = 0x8183,

        [GLExtension("GL_SGIX_framezoom")]
        FramezoomSGIX = 0x818B,

        [GLExtension("GL_SGIX_fog_offset")]
        FogOffsetSGIX = 0x8198,

        [GLExtension("GL_EXT_shared_texture_palette")]
        SharedTexturePaletteEXT = 0x81FB,

        [GLExtension("GL_KHR_debug")]
        DebugOutputSynchronous = 0x8242,

        [GLExtension("GL_SGIX_async_histogram")]
        AsyncHistogramSGIX = 0x832C,

        [GLExtension("GL_SGIS_pixel_texture")]
        PixelTextureSgis = 0x8353,

        [GLExtension("GL_SGIX_async_pixel")]
        AsyncTexImageSGIX = 0x835C,

        [GLExtension("GL_SGIX_async_pixel")]
        AsyncDrawPixelsSGIX = 0x835D,

        [GLExtension("GL_SGIX_async_pixel")]
        AsyncReadPixelsSGIX = 0x835E,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightingSGIX = 0x8400,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentColorMaterialSGIX = 0x8401,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight0SGIX = 0x840C,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight1SGIX = 0x840D,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight2SGIX = 0x840E,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight3SGIX = 0x840F,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight4SGIX = 0x8410,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight5SGIX = 0x8411,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight6SGIX = 0x8412,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight7SGIX = 0x8413,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureRectangle = 0x84F5,

        [GLExtension("GL_ARB_texture_rectangle")]
        TextureRectangleARB = 0x84F5,

        [GLExtension("GL_NV_texture_rectangle")]
        TextureRectangleNV = 0x84F5,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCubeMap = 0x8513,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapARB = 0x8513,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapEXT = 0x8513,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapOES = 0x8513,
        ProgramPointSize = 0x8642,

        [GLExtension("GL_ARB_depth_clamp")]
        DepthClamp = 0x864F,

        [GLExtension("GL_AMD_seamless_cubemap_per_texture")]
        TextureCubeMapSeamless = 0x884F,
        SampleShading = 0x8C36,
        RasterizerDiscard = 0x8C89,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureGenStrOES = 0x8D60,

        [GLExtension("GL_ARB_ES3_compatibility")]
        PrimitiveRestartFixedIndex = 0x8D69,

        [GLExtension("GL_ARB_framebuffer_sRGB")]
        FramebufferSrgb = 0x8DB9,

        [GLExtension("GL_ARB_texture_multisample")]
        SampleMask = 0x8E51,

        [GLExtension("GL_ARM_shader_framebuffer_fetch")]
        FetchPerSampleArm = 0x8F65,
        PrimitiveRestart = 0x8F9D,

        [GLExtension("GL_KHR_debug")]
        DebugOutput = 0x92E0,

        [GLExtension("GL_NV_primitive_shading_rate")]
        ShadingRateImagePerPrimitiveNV = 0x95B1,

        [GLExtension("GL_QCOM_shader_framebuffer_fetch_noncoherent")]
        FramebufferFetchNoncoherentQCOM = 0x96A2,

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRatePreserveAspectRatioQCOM = 0x96A5,
    }

    public enum LightModelParameter
    {
        LightModelLocalViewer = 0x0B51,
        LightModelTwoSide = 0x0B52,
        LightModelAmbient = 0x0B53,
        LightModelColorControl = 0x81F8,

        [GLExtension("GL_EXT_separate_specular_color")]
        LightModelColorControlEXT = 0x81F8,
    }

    public enum FogPName
    {
        FogIndex = 0x0B61,
        FogDensity = 0x0B62,
        FogStart = 0x0B63,
        FogEnd = 0x0B64,
        FogMode = 0x0B65,
        FogCoordSrc = 0x8450,
    }

    public enum FogParameter
    {
        FogIndex = 0x0B61,
        FogDensity = 0x0B62,
        FogStart = 0x0B63,
        FogEnd = 0x0B64,
        FogMode = 0x0B65,
        FogColor = 0x0B66,

        [GLExtension("GL_SGIX_fog_offset")]
        FogOffsetValueSGIX = 0x8199,
    }

    public enum GetFramebufferParameter
    {
        Doublebuffer = 0x0C32,
        Stereo = 0x0C33,
        SampleBuffers = 0x80A8,

        [GLExtension("GL_ARB_internalformat_query2")]
        Samples = 0x80A9,

        [GLExtension("GL_ARB_ES2_compatibility")]
        ImplementationColorReadType = 0x8B9A,

        [GLExtension("GL_ARB_ES2_compatibility")]
        ImplementationColorReadFormat = 0x8B9B,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultWidth = 0x9310,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultHeight = 0x9311,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultLayers = 0x9312,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultSamples = 0x9313,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultFixedSampleLocations = 0x9314,
    }

    public enum HintTarget
    {
        PerspectiveCorrectionHint = 0x0C50,
        PointSmoothHint = 0x0C51,
        LineSmoothHint = 0x0C52,
        PolygonSmoothHint = 0x0C53,
        FogHint = 0x0C54,

        [GLExtension("GL_EXT_cmyka")]
        PackCmykHintEXT = 0x800E,

        [GLExtension("GL_EXT_cmyka")]
        UnpackCmykHintEXT = 0x800F,

        [GLExtension("GL_WIN_phong_shading")]
        PhongHintWin = 0x80EB,

        [GLExtension("GL_EXT_clip_volume_hint")]
        ClipVolumeClippingHintEXT = 0x80F0,

        [GLExtension("GL_SGIX_texture_multi_buffer")]
        TextureMultiBufferHintSGIX = 0x812E,
        GenerateMipmapHint = 0x8192,

        [GLExtension("GL_SGIS_generate_mipmap")]
        GenerateMipmapHintSgis = 0x8192,

        [GLExtension("GL_ARB_get_program_binary")]
        ProgramBinaryRetrievableHint = 0x8257,

        [GLExtension("GL_SGIX_convolution_accuracy")]
        ConvolutionHintSGIX = 0x8316,

        [GLExtension("GL_SGIX_scalebias_hint")]
        ScalebiasHintSGIX = 0x8322,
        LineQualityHintSGIX = 0x835B,

        [GLExtension("GL_SGIX_vertex_preclip")]
        VertexPreclipSGIX = 0x83EE,

        [GLExtension("GL_SGIX_vertex_preclip")]
        VertexPreclipHintSGIX = 0x83EF,
        TextureCompressionHint = 0x84EF,

        [GLExtension("GL_ARB_texture_compression")]
        TextureCompressionHintARB = 0x84EF,

        [GLExtension("GL_APPLE_vertex_array_range")]
        VertexArrayStorageHintAPPLE = 0x851F,

        [GLExtension("GL_NV_multisample_filter_hint")]
        MultisampleFilterHintNV = 0x8534,

        [GLExtension("GL_APPLE_transform_hint")]
        TransformHintAPPLE = 0x85B1,

        [GLExtension("GL_APPLE_texture_range")]
        TextureStorageHintAPPLE = 0x85BC,
        FragmentShaderDerivativeHint = 0x8B8B,

        [GLExtension("GL_ARB_fragment_shader")]
        FragmentShaderDerivativeHintARB = 0x8B8B,

        [GLExtension("GL_OES_standard_derivatives")]
        FragmentShaderDerivativeHintOES = 0x8B8B,

        [GLExtension("GL_QCOM_binning_control")]
        BinningControlHintQCOM = 0x8FB0,

        [GLExtension("GL_PGI_misc_hints")]
        PreferDoublebufferHintPGI = 0x1A1F8,

        [GLExtension("GL_PGI_misc_hints")]
        ConserveMemoryHintPGI = 0x1A1FD,

        [GLExtension("GL_PGI_misc_hints")]
        ReclaimMemoryHintPGI = 0x1A1FE,

        [GLExtension("GL_PGI_misc_hints")]
        NativeGraphicsBeginHintPGI = 0x1A203,

        [GLExtension("GL_PGI_misc_hints")]
        NativeGraphicsEndHintPGI = 0x1A204,

        [GLExtension("GL_PGI_misc_hints")]
        AlwaysFastHintPGI = 0x1A20C,

        [GLExtension("GL_PGI_misc_hints")]
        AlwaysSoftHintPGI = 0x1A20D,

        [GLExtension("GL_PGI_misc_hints")]
        AllowDrawObjHintPGI = 0x1A20E,

        [GLExtension("GL_PGI_misc_hints")]
        AllowDrawWinHintPGI = 0x1A20F,

        [GLExtension("GL_PGI_misc_hints")]
        AllowDrawFrgHintPGI = 0x1A210,

        [GLExtension("GL_PGI_misc_hints")]
        AllowDrawMemHintPGI = 0x1A211,

        [GLExtension("GL_PGI_misc_hints")]
        StrictDepthfuncHintPGI = 0x1A216,

        [GLExtension("GL_PGI_misc_hints")]
        StrictLightingHintPGI = 0x1A217,

        [GLExtension("GL_PGI_misc_hints")]
        StrictScissorHintPGI = 0x1A218,

        [GLExtension("GL_PGI_misc_hints")]
        FullStippleHintPGI = 0x1A219,

        [GLExtension("GL_PGI_misc_hints")]
        ClipNearHintPGI = 0x1A220,

        [GLExtension("GL_PGI_misc_hints")]
        ClipFarHintPGI = 0x1A221,

        [GLExtension("GL_PGI_misc_hints")]
        WideLineHintPGI = 0x1A222,

        [GLExtension("GL_PGI_misc_hints")]
        BackNormalsHintPGI = 0x1A223,

        [GLExtension("GL_PGI_vertex_hints")]
        VertexDataHintPGI = 0x1A22A,

        [GLExtension("GL_PGI_vertex_hints")]
        VertexConsistentHintPGI = 0x1A22B,

        [GLExtension("GL_PGI_vertex_hints")]
        MaterialSideHintPGI = 0x1A22C,

        [GLExtension("GL_PGI_vertex_hints")]
        MaxVertexHintPGI = 0x1A22D,
    }

    public enum PixelMap
    {
        PixelMapIToI = 0x0C70,
        PixelMapSToS = 0x0C71,
        PixelMapIToR = 0x0C72,
        PixelMapIToG = 0x0C73,
        PixelMapIToB = 0x0C74,
        PixelMapIToA = 0x0C75,
        PixelMapRToR = 0x0C76,
        PixelMapGToG = 0x0C77,
        PixelMapBToB = 0x0C78,
        PixelMapAToA = 0x0C79,
    }

    public enum PixelStoreParameter
    {
        UnpackSwapBytes = 0x0CF0,
        UnpackLsbFirst = 0x0CF1,
        UnpackRowLength = 0x0CF2,

        [GLExtension("GL_EXT_unpack_subimage")]
        UnpackRowLengthEXT = 0x0CF2,
        UnpackSkipRows = 0x0CF3,

        [GLExtension("GL_EXT_unpack_subimage")]
        UnpackSkipRowsEXT = 0x0CF3,
        UnpackSkipPixels = 0x0CF4,

        [GLExtension("GL_EXT_unpack_subimage")]
        UnpackSkipPixelsEXT = 0x0CF4,
        UnpackAlignment = 0x0CF5,
        PackSwapBytes = 0x0D00,
        PackLsbFirst = 0x0D01,
        PackRowLength = 0x0D02,
        PackSkipRows = 0x0D03,
        PackSkipPixels = 0x0D04,
        PackAlignment = 0x0D05,
        PackSkipImages = 0x806B,

        [GLExtension("GL_EXT_texture3D")]
        PackSkipImagesEXT = 0x806B,
        PackImageHeight = 0x806C,

        [GLExtension("GL_EXT_texture3D")]
        PackImageHeightEXT = 0x806C,
        UnpackSkipImages = 0x806D,

        [GLExtension("GL_EXT_texture3D")]
        UnpackSkipImagesEXT = 0x806D,
        UnpackImageHeight = 0x806E,

        [GLExtension("GL_EXT_texture3D")]
        UnpackImageHeightEXT = 0x806E,

        [GLExtension("GL_SGIS_texture4D")]
        PackSkipVolumesSgis = 0x8130,

        [GLExtension("GL_SGIS_texture4D")]
        PackImageDepthSgis = 0x8131,

        [GLExtension("GL_SGIS_texture4D")]
        UnpackSkipVolumesSgis = 0x8132,

        [GLExtension("GL_SGIS_texture4D")]
        UnpackImageDepthSgis = 0x8133,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileWidthSGIX = 0x8140,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileHeightSGIX = 0x8141,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileGridWidthSGIX = 0x8142,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileGridHeightSGIX = 0x8143,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileGridDepthSGIX = 0x8144,

        [GLExtension("GL_SGIX_pixel_tiles")]
        PixelTileCacheSizeSGIX = 0x8145,

        [GLExtension("GL_SGIX_resample")]
        PackResampleSGIX = 0x842E,

        [GLExtension("GL_SGIX_resample")]
        UnpackResampleSGIX = 0x842F,

        [GLExtension("GL_SGIX_subsample")]
        PackSubsampleRateSGIX = 0x85A0,

        [GLExtension("GL_SGIX_subsample")]
        UnpackSubsampleRateSGIX = 0x85A1,

        [GLExtension("GL_OML_resample")]
        PackResampleOml = 0x8984,

        [GLExtension("GL_OML_resample")]
        UnpackResampleOml = 0x8985,
    }

    public enum PixelTransferParameter
    {
        MapColor = 0x0D10,
        MapStencil = 0x0D11,
        IndexShift = 0x0D12,
        IndexOffset = 0x0D13,
        RedScale = 0x0D14,
        RedBias = 0x0D15,
        GreenScale = 0x0D18,
        GreenBias = 0x0D19,
        BlueScale = 0x0D1A,
        BlueBias = 0x0D1B,
        AlphaScale = 0x0D1C,
        AlphaBias = 0x0D1D,
        DepthScale = 0x0D1E,
        DepthBias = 0x0D1F,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionRedScale = 0x801C,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionRedScaleEXT = 0x801C,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionGreenScale = 0x801D,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionGreenScaleEXT = 0x801D,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionBlueScale = 0x801E,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionBlueScaleEXT = 0x801E,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionAlphaScale = 0x801F,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionAlphaScaleEXT = 0x801F,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionRedBias = 0x8020,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionRedBiasEXT = 0x8020,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionGreenBias = 0x8021,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionGreenBiasEXT = 0x8021,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionBlueBias = 0x8022,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionBlueBiasEXT = 0x8022,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionAlphaBias = 0x8023,

        [GLExtension("GL_EXT_convolution")]
        PostConvolutionAlphaBiasEXT = 0x8023,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixRedScale = 0x80B4,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixRedScaleSgi = 0x80B4,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixGreenScale = 0x80B5,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixGreenScaleSgi = 0x80B5,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixBlueScale = 0x80B6,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixBlueScaleSgi = 0x80B6,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixAlphaScale = 0x80B7,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixAlphaScaleSgi = 0x80B7,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixRedBias = 0x80B8,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixRedBiasSgi = 0x80B8,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixGreenBias = 0x80B9,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixGreenBiasSgi = 0x80B9,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixBlueBias = 0x80BA,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixBlueBiasSgi = 0x80BA,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixAlphaBias = 0x80BB,

        [GLExtension("GL_SGI_color_matrix")]
        PostColorMatrixAlphaBiasSgi = 0x80BB,
    }

    public enum IndexMaterialParameterEXT
    {
        IndexOffset = 0x0D13,
    }

    public enum TextureEnvParameter
    {
        AlphaScale = 0x0D1C,
        TextureEnvMode = 0x2200,
        TextureEnvColor = 0x2201,
        TextureLodBias = 0x8501,
        Combine = 0x8570,

        [GLExtension("GL_ARB_texture_env_combine")]
        CombineARB = 0x8570,

        [GLExtension("GL_EXT_texture_env_combine")]
        CombineEXT = 0x8570,
        CombineRgb = 0x8571,

        [GLExtension("GL_ARB_texture_env_combine")]
        CombineRgbARB = 0x8571,

        [GLExtension("GL_EXT_texture_env_combine")]
        CombineRgbEXT = 0x8571,
        CombineAlpha = 0x8572,

        [GLExtension("GL_ARB_texture_env_combine")]
        CombineAlphaARB = 0x8572,

        [GLExtension("GL_EXT_texture_env_combine")]
        CombineAlphaEXT = 0x8572,
        RgbScale = 0x8573,

        [GLExtension("GL_ARB_texture_env_combine")]
        RgbScaleARB = 0x8573,

        [GLExtension("GL_EXT_texture_env_combine")]
        RgbScaleEXT = 0x8573,
        AddSigned = 0x8574,

        [GLExtension("GL_ARB_texture_env_combine")]
        AddSignedARB = 0x8574,

        [GLExtension("GL_EXT_texture_env_combine")]
        AddSignedEXT = 0x8574,
        Interpolate = 0x8575,

        [GLExtension("GL_ARB_texture_env_combine")]
        InterpolateARB = 0x8575,

        [GLExtension("GL_EXT_texture_env_combine")]
        InterpolateEXT = 0x8575,
        Constant = 0x8576,

        [GLExtension("GL_ARB_texture_env_combine")]
        ConstantARB = 0x8576,

        [GLExtension("GL_EXT_texture_env_combine")]
        ConstantEXT = 0x8576,

        [GLExtension("GL_NV_path_rendering")]
        ConstantNV = 0x8576,

        [GLExtension("GL_NV_path_rendering")]
        PrimaryColor = 0x8577,

        [GLExtension("GL_ARB_texture_env_combine")]
        PrimaryColorARB = 0x8577,

        [GLExtension("GL_EXT_texture_env_combine")]
        PrimaryColorEXT = 0x8577,
        Previous = 0x8578,

        [GLExtension("GL_ARB_texture_env_combine")]
        PreviousARB = 0x8578,

        [GLExtension("GL_EXT_texture_env_combine")]
        PreviousEXT = 0x8578,
        Source0Rgb = 0x8580,

        [GLExtension("GL_ARB_texture_env_combine")]
        Source0RgbARB = 0x8580,

        [GLExtension("GL_EXT_texture_env_combine")]
        Source0RgbEXT = 0x8580,
        Src0Rgb = 0x8580,
        Source1Rgb = 0x8581,

        [GLExtension("GL_ARB_texture_env_combine")]
        Source1RgbARB = 0x8581,

        [GLExtension("GL_EXT_texture_env_combine")]
        Source1RgbEXT = 0x8581,
        Src1Rgb = 0x8581,
        Source2Rgb = 0x8582,

        [GLExtension("GL_ARB_texture_env_combine")]
        Source2RgbARB = 0x8582,

        [GLExtension("GL_EXT_texture_env_combine")]
        Source2RgbEXT = 0x8582,
        Src2Rgb = 0x8582,

        [GLExtension("GL_NV_texture_env_combine4")]
        Source3RgbNV = 0x8583,
        Source0Alpha = 0x8588,

        [GLExtension("GL_ARB_texture_env_combine")]
        Source0AlphaARB = 0x8588,

        [GLExtension("GL_EXT_texture_env_combine")]
        Source0AlphaEXT = 0x8588,
        Src0Alpha = 0x8588,
        Source1Alpha = 0x8589,

        [GLExtension("GL_ARB_texture_env_combine")]
        Source1AlphaARB = 0x8589,

        [GLExtension("GL_EXT_texture_env_combine")]
        Source1AlphaEXT = 0x8589,

        [GLExtension("GL_ARB_blend_func_extended")]
        Src1Alpha = 0x8589,

        [GLExtension("GL_EXT_blend_func_extended")]
        Src1AlphaEXT = 0x8589,
        Source2Alpha = 0x858A,

        [GLExtension("GL_ARB_texture_env_combine")]
        Source2AlphaARB = 0x858A,

        [GLExtension("GL_EXT_texture_env_combine")]
        Source2AlphaEXT = 0x858A,
        Src2Alpha = 0x858A,

        [GLExtension("GL_NV_texture_env_combine4")]
        Source3AlphaNV = 0x858B,
        Operand0Rgb = 0x8590,

        [GLExtension("GL_ARB_texture_env_combine")]
        Operand0RgbARB = 0x8590,

        [GLExtension("GL_EXT_texture_env_combine")]
        Operand0RgbEXT = 0x8590,
        Operand1Rgb = 0x8591,

        [GLExtension("GL_ARB_texture_env_combine")]
        Operand1RgbARB = 0x8591,

        [GLExtension("GL_EXT_texture_env_combine")]
        Operand1RgbEXT = 0x8591,
        Operand2Rgb = 0x8592,

        [GLExtension("GL_ARB_texture_env_combine")]
        Operand2RgbARB = 0x8592,

        [GLExtension("GL_EXT_texture_env_combine")]
        Operand2RgbEXT = 0x8592,

        [GLExtension("GL_NV_texture_env_combine4")]
        Operand3RgbNV = 0x8593,
        Operand0Alpha = 0x8598,

        [GLExtension("GL_ARB_texture_env_combine")]
        Operand0AlphaARB = 0x8598,

        [GLExtension("GL_EXT_texture_env_combine")]
        Operand0AlphaEXT = 0x8598,
        Operand1Alpha = 0x8599,

        [GLExtension("GL_ARB_texture_env_combine")]
        Operand1AlphaARB = 0x8599,

        [GLExtension("GL_EXT_texture_env_combine")]
        Operand1AlphaEXT = 0x8599,
        Operand2Alpha = 0x859A,

        [GLExtension("GL_ARB_texture_env_combine")]
        Operand2AlphaARB = 0x859A,

        [GLExtension("GL_EXT_texture_env_combine")]
        Operand2AlphaEXT = 0x859A,

        [GLExtension("GL_NV_texture_env_combine4")]
        Operand3AlphaNV = 0x859B,
        CoordReplace = 0x8862,
    }

    public enum MapTarget
    {
        Map1Color4 = 0x0D90,
        Map1Index = 0x0D91,
        Map1Normal = 0x0D92,
        Map1TextureCoord1 = 0x0D93,
        Map1TextureCoord2 = 0x0D94,
        Map1TextureCoord3 = 0x0D95,
        Map1TextureCoord4 = 0x0D96,
        Map1Vertex3 = 0x0D97,
        Map1Vertex4 = 0x0D98,
        Map2Color4 = 0x0DB0,
        Map2Index = 0x0DB1,
        Map2Normal = 0x0DB2,
        Map2TextureCoord1 = 0x0DB3,
        Map2TextureCoord2 = 0x0DB4,
        Map2TextureCoord3 = 0x0DB5,
        Map2TextureCoord4 = 0x0DB6,
        Map2Vertex3 = 0x0DB7,
        Map2Vertex4 = 0x0DB8,

        [GLExtension("GL_SGIX_polynomial_ffd")]
        GeometryDeformationSGIX = 0x8194,

        [GLExtension("GL_SGIX_polynomial_ffd")]
        TextureDeformationSGIX = 0x8195,
    }

    public enum CopyImageSubDataTarget
    {

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture1D = 0x0DE0,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2D = 0x0DE1,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture3D = 0x806F,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureRectangle = 0x84F5,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCubeMap = 0x8513,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture1DArray = 0x8C18,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2DArray = 0x8C1A,

        [GLExtension("GL_ARB_framebuffer_object")]
        Renderbuffer = 0x8D41,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCubeMapArray = 0x9009,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2DMultisample = 0x9100,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2DMultisampleArray = 0x9102,
    }

    public enum TextureTarget
    {

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture1D = 0x0DE0,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2D = 0x0DE1,
        ProxyTexture1D = 0x8063,

        [GLExtension("GL_EXT_texture")]
        ProxyTexture1DEXT = 0x8063,
        ProxyTexture2D = 0x8064,

        [GLExtension("GL_EXT_texture")]
        ProxyTexture2DEXT = 0x8064,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture3D = 0x806F,

        [GLExtension("GL_EXT_texture3D")]
        Texture3DEXT = 0x806F,

        [GLExtension("GL_OES_texture_3D")]
        Texture3DOES = 0x806F,
        ProxyTexture3D = 0x8070,

        [GLExtension("GL_EXT_texture3D")]
        ProxyTexture3DEXT = 0x8070,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTexture2DSgis = 0x8095,

        [GLExtension("GL_SGIS_texture4D")]
        Texture4dSgis = 0x8134,

        [GLExtension("GL_SGIS_texture4D")]
        ProxyTexture4dSgis = 0x8135,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureRectangle = 0x84F5,

        [GLExtension("GL_ARB_texture_rectangle")]
        TextureRectangleARB = 0x84F5,

        [GLExtension("GL_NV_texture_rectangle")]
        TextureRectangleNV = 0x84F5,
        ProxyTextureRectangle = 0x84F7,

        [GLExtension("GL_ARB_texture_rectangle")]
        ProxyTextureRectangleARB = 0x84F7,

        [GLExtension("GL_NV_texture_rectangle")]
        ProxyTextureRectangleNV = 0x84F7,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCubeMap = 0x8513,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapARB = 0x8513,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapEXT = 0x8513,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapOES = 0x8513,
        TextureCubeMapPositiveX = 0x8515,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapPositiveXARB = 0x8515,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapPositiveXEXT = 0x8515,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapPositiveXOES = 0x8515,
        TextureCubeMapNegativeX = 0x8516,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapNegativeXARB = 0x8516,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapNegativeXEXT = 0x8516,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapNegativeXOES = 0x8516,
        TextureCubeMapPositiveY = 0x8517,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapPositiveYARB = 0x8517,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapPositiveYEXT = 0x8517,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapPositiveYOES = 0x8517,
        TextureCubeMapNegativeY = 0x8518,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapNegativeYARB = 0x8518,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapNegativeYEXT = 0x8518,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapNegativeYOES = 0x8518,
        TextureCubeMapPositiveZ = 0x8519,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapPositiveZARB = 0x8519,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapPositiveZEXT = 0x8519,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapPositiveZOES = 0x8519,
        TextureCubeMapNegativeZ = 0x851A,

        [GLExtension("GL_ARB_texture_cube_map")]
        TextureCubeMapNegativeZARB = 0x851A,

        [GLExtension("GL_EXT_texture_cube_map")]
        TextureCubeMapNegativeZEXT = 0x851A,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureCubeMapNegativeZOES = 0x851A,
        ProxyTextureCubeMap = 0x851B,

        [GLExtension("GL_ARB_texture_cube_map")]
        ProxyTextureCubeMapARB = 0x851B,

        [GLExtension("GL_EXT_texture_cube_map")]
        ProxyTextureCubeMapEXT = 0x851B,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture1DArray = 0x8C18,
        ProxyTexture1DArray = 0x8C19,

        [GLExtension("GL_EXT_texture_array")]
        ProxyTexture1DArrayEXT = 0x8C19,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2DArray = 0x8C1A,
        ProxyTexture2DArray = 0x8C1B,

        [GLExtension("GL_EXT_texture_array")]
        ProxyTexture2DArrayEXT = 0x8C1B,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureBuffer = 0x8C2A,

        [GLExtension("GL_ARB_framebuffer_object")]
        Renderbuffer = 0x8D41,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCubeMapArray = 0x9009,

        [GLExtension("GL_ARB_texture_cube_map_array")]
        TextureCubeMapArrayARB = 0x9009,

        [GLExtension("GL_EXT_texture_cube_map_array")]
        TextureCubeMapArrayEXT = 0x9009,

        [GLExtension("GL_EXT_sparse_texture")]
        TextureCubeMapArrayOES = 0x9009,
        ProxyTextureCubeMapArray = 0x900B,

        [GLExtension("GL_ARB_texture_cube_map_array")]
        ProxyTextureCubeMapArrayARB = 0x900B,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2DMultisample = 0x9100,

        [GLExtension("GL_ARB_texture_multisample")]
        ProxyTexture2DMultisample = 0x9101,

        [GLExtension("GL_ARB_internalformat_query2")]
        Texture2DMultisampleArray = 0x9102,

        [GLExtension("GL_ARB_texture_multisample")]
        ProxyTexture2DMultisampleArray = 0x9103,
    }

    public enum GetPointervPName
    {
        FeedbackBufferPointer = 0x0DF0,
        SelectionBufferPointer = 0x0DF3,
        VertexArrayPointer = 0x808E,

        [GLExtension("GL_EXT_vertex_array")]
        VertexArrayPointerEXT = 0x808E,
        NormalArrayPointer = 0x808F,

        [GLExtension("GL_EXT_vertex_array")]
        NormalArrayPointerEXT = 0x808F,
        ColorArrayPointer = 0x8090,

        [GLExtension("GL_EXT_vertex_array")]
        ColorArrayPointerEXT = 0x8090,
        IndexArrayPointer = 0x8091,

        [GLExtension("GL_EXT_vertex_array")]
        IndexArrayPointerEXT = 0x8091,
        TextureCoordArrayPointer = 0x8092,

        [GLExtension("GL_EXT_vertex_array")]
        TextureCoordArrayPointerEXT = 0x8092,
        EdgeFlagArrayPointer = 0x8093,

        [GLExtension("GL_EXT_vertex_array")]
        EdgeFlagArrayPointerEXT = 0x8093,

        [GLExtension("GL_SGIX_instruments")]
        InstrumentBufferPointerSGIX = 0x8180,

        [GLExtension("GL_KHR_debug")]
        DebugCallbackFunction = 0x8244,

        [GLExtension("GL_KHR_debug")]
        DebugCallbackUserParam = 0x8245,
    }

    public enum TextureParameterName
    {
        TextureWidth = 0x1000,
        TextureHeight = 0x1001,
        TextureInternalFormat = 0x1003,
        TextureComponents = 0x1003,
        TextureBorderColor = 0x1004,

        [GLExtension("GL_NV_texture_border_clamp")]
        TextureBorderColorNV = 0x1004,
        TextureBorder = 0x1005,
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
        TextureRedSize = 0x805C,
        TextureGreenSize = 0x805D,
        TextureBlueSize = 0x805E,
        TextureAlphaSize = 0x805F,
        TextureLuminanceSize = 0x8060,
        TextureIntensitySize = 0x8061,
        TexturePriority = 0x8066,

        [GLExtension("GL_EXT_texture_object")]
        TexturePriorityEXT = 0x8066,
        TextureResident = 0x8067,

        [GLExtension("GL_EXT_texture3D")]
        TextureDepthEXT = 0x8071,
        TextureWrapR = 0x8072,

        [GLExtension("GL_EXT_texture3D")]
        TextureWrapREXT = 0x8072,

        [GLExtension("GL_OES_texture_3D")]
        TextureWrapROES = 0x8072,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTextureLevelSgis = 0x809A,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTextureModeSgis = 0x809B,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTextureFuncPointsSgis = 0x809C,

        [GLExtension("GL_SGIS_sharpen_texture")]
        SharpenTextureFuncPointsSgis = 0x80B0,

        [GLExtension("GL_SGIX_shadow_ambient")]
        ShadowAmbientSGIX = 0x80BF,

        [GLExtension("GL_SGIS_texture_select")]
        DualTextureSelectSgis = 0x8124,

        [GLExtension("GL_SGIS_texture_select")]
        QuadTextureSelectSgis = 0x8125,

        [GLExtension("GL_SGIS_texture4D")]
        Texture4dsizeSgis = 0x8136,

        [GLExtension("GL_SGIS_texture4D")]
        TextureWrapQSgis = 0x8137,
        TextureMinLod = 0x813A,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureMinLodSgis = 0x813A,
        TextureMaxLod = 0x813B,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureMaxLodSgis = 0x813B,
        TextureBaseLevel = 0x813C,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureBaseLevelSgis = 0x813C,
        TextureMaxLevel = 0x813D,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureMaxLevelSgis = 0x813D,

        [GLExtension("GL_SGIS_texture_filter4")]
        TextureFilter4SizeSgis = 0x8147,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapCenterSGIX = 0x8171,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapFrameSGIX = 0x8172,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapOffsetSGIX = 0x8173,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapVirtualDepthSGIX = 0x8174,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapLodOffsetSGIX = 0x8175,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapDepthSGIX = 0x8176,

        [GLExtension("GL_SGIX_texture_scale_bias")]
        PostTextureFilterBiasSGIX = 0x8179,

        [GLExtension("GL_SGIX_texture_scale_bias")]
        PostTextureFilterScaleSGIX = 0x817A,

        [GLExtension("GL_SGIX_texture_lod_bias")]
        TextureLodBiasSSGIX = 0x818E,

        [GLExtension("GL_SGIX_texture_lod_bias")]
        TextureLodBiasTSGIX = 0x818F,

        [GLExtension("GL_SGIX_texture_lod_bias")]
        TextureLodBiasRSGIX = 0x8190,
        GenerateMipmap = 0x8191,

        [GLExtension("GL_SGIS_generate_mipmap")]
        GenerateMipmapSgis = 0x8191,

        [GLExtension("GL_SGIX_shadow")]
        TextureCompareSGIX = 0x819A,

        [GLExtension("GL_SGIX_shadow")]
        TextureCompareOperatorSGIX = 0x819B,

        [GLExtension("GL_SGIX_shadow")]
        TextureLequalRSGIX = 0x819C,

        [GLExtension("GL_SGIX_shadow")]
        TextureGequalRSGIX = 0x819D,

        [GLExtension("GL_SGIX_texture_coordinate_clamp")]
        TextureMaxClampSSGIX = 0x8369,

        [GLExtension("GL_SGIX_texture_coordinate_clamp")]
        TextureMaxClampTSGIX = 0x836A,

        [GLExtension("GL_SGIX_texture_coordinate_clamp")]
        TextureMaxClampRSGIX = 0x836B,

        [GLExtension("GL_INTEL_map_texture")]
        TextureMemoryLayoutINTEL = 0x83FF,

        [GLExtension("GL_ARB_texture_filter_anisotropic")]
        TextureMaxAnisotropy = 0x84FE,
        TextureLodBias = 0x8501,
        TextureCompareMode = 0x884C,
        TextureCompareFunc = 0x884D,

        [GLExtension("GL_ARB_texture_swizzle")]
        TextureSwizzleR = 0x8E42,

        [GLExtension("GL_ARB_texture_swizzle")]
        TextureSwizzleG = 0x8E43,

        [GLExtension("GL_ARB_texture_swizzle")]
        TextureSwizzleB = 0x8E44,

        [GLExtension("GL_ARB_texture_swizzle")]
        TextureSwizzleA = 0x8E45,

        [GLExtension("GL_ARB_texture_swizzle")]
        TextureSwizzleRgba = 0x8E46,

        [GLExtension("GL_ARM_texture_unnormalized_coordinates")]
        TextureUnnormalizedCoordinatesArm = 0x8F6A,

        [GLExtension("GL_ARB_stencil_texturing")]
        DepthStencilTextureMode = 0x90EA,

        [GLExtension("GL_EXT_memory_object")]
        TextureTilingEXT = 0x9580,

        [GLExtension("GL_QCOM_texture_foveated2")]
        TextureFoveatedCutoffDensityQCOM = 0x96A0,
    }

    public enum GetTextureParameter
    {
        TextureWidth = 0x1000,
        TextureHeight = 0x1001,
        TextureInternalFormat = 0x1003,
        TextureComponents = 0x1003,
        TextureBorderColor = 0x1004,

        [GLExtension("GL_NV_texture_border_clamp")]
        TextureBorderColorNV = 0x1004,
        TextureBorder = 0x1005,
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
        TextureRedSize = 0x805C,
        TextureGreenSize = 0x805D,
        TextureBlueSize = 0x805E,
        TextureAlphaSize = 0x805F,
        TextureLuminanceSize = 0x8060,
        TextureIntensitySize = 0x8061,
        TexturePriority = 0x8066,
        TextureResident = 0x8067,

        [GLExtension("GL_EXT_texture3D")]
        TextureDepthEXT = 0x8071,

        [GLExtension("GL_EXT_texture3D")]
        TextureWrapREXT = 0x8072,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTextureLevelSgis = 0x809A,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTextureModeSgis = 0x809B,

        [GLExtension("GL_SGIS_detail_texture")]
        DetailTextureFuncPointsSgis = 0x809C,

        [GLExtension("GL_SGIS_sharpen_texture")]
        SharpenTextureFuncPointsSgis = 0x80B0,

        [GLExtension("GL_SGIX_shadow_ambient")]
        ShadowAmbientSGIX = 0x80BF,

        [GLExtension("GL_SGIS_texture_select")]
        DualTextureSelectSgis = 0x8124,

        [GLExtension("GL_SGIS_texture_select")]
        QuadTextureSelectSgis = 0x8125,

        [GLExtension("GL_SGIS_texture4D")]
        Texture4dsizeSgis = 0x8136,

        [GLExtension("GL_SGIS_texture4D")]
        TextureWrapQSgis = 0x8137,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureMinLodSgis = 0x813A,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureMaxLodSgis = 0x813B,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureBaseLevelSgis = 0x813C,

        [GLExtension("GL_SGIS_texture_lod")]
        TextureMaxLevelSgis = 0x813D,

        [GLExtension("GL_SGIS_texture_filter4")]
        TextureFilter4SizeSgis = 0x8147,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapCenterSGIX = 0x8171,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapFrameSGIX = 0x8172,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapOffsetSGIX = 0x8173,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapVirtualDepthSGIX = 0x8174,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapLodOffsetSGIX = 0x8175,

        [GLExtension("GL_SGIX_clipmap")]
        TextureClipmapDepthSGIX = 0x8176,

        [GLExtension("GL_SGIX_texture_scale_bias")]
        PostTextureFilterBiasSGIX = 0x8179,

        [GLExtension("GL_SGIX_texture_scale_bias")]
        PostTextureFilterScaleSGIX = 0x817A,

        [GLExtension("GL_SGIX_texture_lod_bias")]
        TextureLodBiasSSGIX = 0x818E,

        [GLExtension("GL_SGIX_texture_lod_bias")]
        TextureLodBiasTSGIX = 0x818F,

        [GLExtension("GL_SGIX_texture_lod_bias")]
        TextureLodBiasRSGIX = 0x8190,

        [GLExtension("GL_SGIS_generate_mipmap")]
        GenerateMipmapSgis = 0x8191,

        [GLExtension("GL_SGIX_shadow")]
        TextureCompareSGIX = 0x819A,

        [GLExtension("GL_SGIX_shadow")]
        TextureCompareOperatorSGIX = 0x819B,

        [GLExtension("GL_SGIX_shadow")]
        TextureLequalRSGIX = 0x819C,

        [GLExtension("GL_SGIX_shadow")]
        TextureGequalRSGIX = 0x819D,

        [GLExtension("GL_SGIX_texture_coordinate_clamp")]
        TextureMaxClampSSGIX = 0x8369,

        [GLExtension("GL_SGIX_texture_coordinate_clamp")]
        TextureMaxClampTSGIX = 0x836A,

        [GLExtension("GL_SGIX_texture_coordinate_clamp")]
        TextureMaxClampRSGIX = 0x836B,
        NormalMap = 0x8511,

        [GLExtension("GL_ARB_texture_cube_map")]
        NormalMapARB = 0x8511,

        [GLExtension("GL_EXT_texture_cube_map")]
        NormalMapEXT = 0x8511,

        [GLExtension("GL_NV_texgen_reflection")]
        NormalMapNV = 0x8511,

        [GLExtension("GL_OES_texture_cube_map")]
        NormalMapOES = 0x8511,
        ReflectionMap = 0x8512,

        [GLExtension("GL_ARB_texture_cube_map")]
        ReflectionMapARB = 0x8512,

        [GLExtension("GL_EXT_texture_cube_map")]
        ReflectionMapEXT = 0x8512,

        [GLExtension("GL_NV_texgen_reflection")]
        ReflectionMapNV = 0x8512,

        [GLExtension("GL_OES_texture_cube_map")]
        ReflectionMapOES = 0x8512,

        [GLExtension("GL_ARM_texture_unnormalized_coordinates")]
        TextureUnnormalizedCoordinatesArm = 0x8F6A,

        [GLExtension("GL_EXT_EGL_image_storage_compression")]
        SurfaceCompressionEXT = 0x96C0,
    }

    public enum SamplerParameterF
    {
        TextureBorderColor = 0x1004,
        TextureMinLod = 0x813A,
        TextureMaxLod = 0x813B,

        [GLExtension("GL_ARB_texture_filter_anisotropic")]
        TextureMaxAnisotropy = 0x84FE,
        TextureLodBias = 0x8501,

        [GLExtension("GL_ARM_texture_unnormalized_coordinates")]
        TextureUnnormalizedCoordinatesArm = 0x8F6A,
    }

    public enum DebugSeverity
    {
        DontCare = 0x1100,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityNotification = 0x826B,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityHigh = 0x9146,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityMedium = 0x9147,

        [GLExtension("GL_KHR_debug")]
        DebugSeverityLow = 0x9148,
    }

    public enum HintMode
    {
        DontCare = 0x1100,
        Fastest = 0x1101,
        Nicest = 0x1102,
    }

    public enum DebugSource
    {
        DontCare = 0x1100,

        [GLExtension("GL_KHR_debug")]
        DebugSourceApi = 0x8246,

        [GLExtension("GL_KHR_debug")]
        DebugSourceWindowSystem = 0x8247,

        [GLExtension("GL_KHR_debug")]
        DebugSourceShaderCompiler = 0x8248,

        [GLExtension("GL_KHR_debug")]
        DebugSourceThirdParty = 0x8249,

        [GLExtension("GL_KHR_debug")]
        DebugSourceApplication = 0x824A,

        [GLExtension("GL_KHR_debug")]
        DebugSourceOther = 0x824B,
    }

    public enum DebugType
    {
        DontCare = 0x1100,

        [GLExtension("GL_KHR_debug")]
        DebugTypeError = 0x824C,

        [GLExtension("GL_KHR_debug")]
        DebugTypeDeprecatedBehavior = 0x824D,

        [GLExtension("GL_KHR_debug")]
        DebugTypeUndefinedBehavior = 0x824E,

        [GLExtension("GL_KHR_debug")]
        DebugTypePortability = 0x824F,

        [GLExtension("GL_KHR_debug")]
        DebugTypePerformance = 0x8250,

        [GLExtension("GL_KHR_debug")]
        DebugTypeOther = 0x8251,

        [GLExtension("GL_KHR_debug")]
        DebugTypeMarker = 0x8268,

        [GLExtension("GL_KHR_debug")]
        DebugTypePushGroup = 0x8269,

        [GLExtension("GL_KHR_debug")]
        DebugTypePopGroup = 0x826A,
    }

    public enum MaterialParameter
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Emission = 0x1600,
        Shininess = 0x1601,
        AmbientAndDiffuse = 0x1602,
        ColorIndexes = 0x1603,
    }

    public enum FragmentLightParameterSGIX
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Position = 0x1203,
        SpotDirection = 0x1204,
        SpotExponent = 0x1205,
        SpotCutoff = 0x1206,
        ConstantAttenuation = 0x1207,
        LinearAttenuation = 0x1208,
        QuadraticAttenuation = 0x1209,
    }

    public enum ColorMaterialParameter
    {
        Ambient = 0x1200,
        Diffuse = 0x1201,
        Specular = 0x1202,
        Emission = 0x1600,
        AmbientAndDiffuse = 0x1602,
    }

    public enum LightParameter
    {
        Position = 0x1203,
        SpotDirection = 0x1204,
        SpotExponent = 0x1205,
        SpotCutoff = 0x1206,
        ConstantAttenuation = 0x1207,
        LinearAttenuation = 0x1208,
        QuadraticAttenuation = 0x1209,
    }

    public enum ListMode
    {
        Compile = 0x1300,
        CompileAndExecute = 0x1301,
    }

    public enum VertexAttribIType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,
        UnsignedByte = 0x1401,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
    }

    public enum WeightPointerTypeARB
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,
        UnsignedByte = 0x1401,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum TangentPointerTypeEXT
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,
        Int = 0x1404,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
        DoubleEXT = 0x140A,
    }

    public enum BinormalPointerTypeEXT
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,
        Int = 0x1404,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
        DoubleEXT = 0x140A,
    }

    public enum ColorPointerType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,
        UnsignedByte = 0x1401,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
    }

    public enum ListNameType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,
        UnsignedByte = 0x1401,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,
        2Bytes = 0x1407,
        3Bytes = 0x1408,
        4Bytes = 0x1409,
    }

    public enum NormalPointerType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,
        Int = 0x1404,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum PixelType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,
        UnsignedByte = 0x1401,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_half_float_vertex")]
        HalfFloat = 0x140B,

        [GLExtension("GL_ARB_half_float_pixel")]
        HalfFloatARB = 0x140B,

        [GLExtension("GL_NV_half_float")]
        HalfFloatNV = 0x140B,

        [GLExtension("GL_APPLE_float_pixels")]
        HalfAPPLE = 0x140B,
        Bitmap = 0x1A00,
        UnsignedByte332 = 0x8032,

        [GLExtension("GL_EXT_packed_pixels")]
        UnsignedByte332EXT = 0x8032,
        UnsignedShort4444 = 0x8033,

        [GLExtension("GL_EXT_packed_pixels")]
        UnsignedShort4444EXT = 0x8033,
        UnsignedShort5551 = 0x8034,

        [GLExtension("GL_EXT_packed_pixels")]
        UnsignedShort5551EXT = 0x8034,
        UnsignedInt8888 = 0x8035,

        [GLExtension("GL_EXT_packed_pixels")]
        UnsignedInt8888EXT = 0x8035,
        UnsignedInt1010102 = 0x8036,

        [GLExtension("GL_EXT_packed_pixels")]
        UnsignedInt1010102EXT = 0x8036,
        UnsignedByte233Rev = 0x8362,
        UnsignedByte233RevEXT = 0x8362,
        UnsignedShort565 = 0x8363,
        UnsignedShort565EXT = 0x8363,
        UnsignedShort565Rev = 0x8364,
        UnsignedShort565RevEXT = 0x8364,
        UnsignedShort4444Rev = 0x8365,

        [GLExtension("GL_EXT_read_format_bgra")]
        UnsignedShort4444RevEXT = 0x8365,

        [GLExtension("GL_IMG_read_format")]
        UnsignedShort4444RevImg = 0x8365,
        UnsignedShort1555Rev = 0x8366,

        [GLExtension("GL_EXT_read_format_bgra")]
        UnsignedShort1555RevEXT = 0x8366,
        UnsignedInt8888Rev = 0x8367,
        UnsignedInt8888RevEXT = 0x8367,

        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        UnsignedInt2101010Rev = 0x8368,

        [GLExtension("GL_EXT_texture_type_2_10_10_10_REV")]
        UnsignedInt2101010RevEXT = 0x8368,

        [GLExtension("GL_ARB_framebuffer_object")]
        UnsignedInt248 = 0x84FA,

        [GLExtension("GL_EXT_packed_depth_stencil")]
        UnsignedInt248EXT = 0x84FA,

        [GLExtension("GL_NV_packed_depth_stencil")]
        UnsignedInt248NV = 0x84FA,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt248OES = 0x84FA,

        [GLExtension("GL_ARB_vertex_type_10f_11f_11f_rev")]
        UnsignedInt10f11f11fRev = 0x8C3B,

        [GLExtension("GL_APPLE_texture_packed_float")]
        UnsignedInt10f11f11fRevAPPLE = 0x8C3B,

        [GLExtension("GL_EXT_packed_float")]
        UnsignedInt10f11f11fRevEXT = 0x8C3B,
        UnsignedInt5999Rev = 0x8C3E,

        [GLExtension("GL_APPLE_texture_packed_float")]
        UnsignedInt5999RevAPPLE = 0x8C3E,

        [GLExtension("GL_EXT_texture_shared_exponent")]
        UnsignedInt5999RevEXT = 0x8C3E,

        [GLExtension("GL_ARB_depth_buffer_float")]
        Float32UnsignedInt248Rev = 0x8DAD,

        [GLExtension("GL_NV_depth_buffer_float")]
        Float32UnsignedInt248RevNV = 0x8DAD,
    }

    public enum VertexAttribType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,
        UnsignedByte = 0x1401,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,

        [GLExtension("GL_ARB_half_float_vertex")]
        HalfFloat = 0x140B,

        [GLExtension("GL_ARB_ES2_compatibility")]
        Fixed = 0x140C,

        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        UnsignedInt2101010Rev = 0x8368,

        [GLExtension("GL_EXT_texture_type_2_10_10_10_REV")]
        UnsignedInt2101010RevEXT = 0x8368,

        [GLExtension("GL_ARB_vertex_type_10f_11f_11f_rev")]
        UnsignedInt10f11f11fRev = 0x8C3B,

        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        Int2101010Rev = 0x8D9F,
    }

    public enum VertexAttribPointerType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Byte = 0x1400,
        UnsignedByte = 0x1401,

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,

        [GLExtension("GL_ARB_half_float_vertex")]
        HalfFloat = 0x140B,

        [GLExtension("GL_ARB_ES2_compatibility")]
        Fixed = 0x140C,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        Int64ARB = 0x140E,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int64NV = 0x140E,

        [GLExtension("GL_ARB_bindless_texture")]
        UnsignedInt64ARB = 0x140F,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt64NV = 0x140F,

        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        UnsignedInt2101010Rev = 0x8368,

        [GLExtension("GL_EXT_texture_type_2_10_10_10_REV")]
        UnsignedInt2101010RevEXT = 0x8368,

        [GLExtension("GL_ARB_vertex_type_10f_11f_11f_rev")]
        UnsignedInt10f11f11fRev = 0x8C3B,

        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        Int2101010Rev = 0x8D9F,
    }

    public enum ScalarType
    {
        UnsignedByte = 0x1401,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
    }

    public enum ReplacementCodeTypeSUN
    {
        UnsignedByte = 0x1401,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
    }

    public enum ElementPointerTypeATI
    {
        UnsignedByte = 0x1401,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
    }

    public enum MatrixIndexPointerTypeARB
    {
        UnsignedByte = 0x1401,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
    }

    public enum DrawElementsType
    {
        UnsignedByte = 0x1401,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
    }

    public enum SecondaryColorPointerTypeIBM
    {

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,
        Int = 0x1404,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum IndexPointerType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,
        Int = 0x1404,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum TexCoordPointerType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,
        Int = 0x1404,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum VertexPointerType
    {

        [GLExtension("GL_EXT_render_snorm")]
        Short = 0x1402,
        Int = 0x1404,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum PixelFormat
    {

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedShort = 0x1403,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,
        ColorIndex = 0x1900,

        [GLExtension("GL_ARB_texture_stencil8")]
        StencilIndex = 0x1901,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthComponent = 0x1902,

        [GLExtension("GL_AMD_interleaved_elements")]
        Red = 0x1903,

        [GLExtension("GL_EXT_texture_rg")]
        RedEXT = 0x1903,

        [GLExtension("GL_AMD_interleaved_elements")]
        Green = 0x1904,

        [GLExtension("GL_AMD_interleaved_elements")]
        Blue = 0x1905,

        [GLExtension("GL_AMD_interleaved_elements")]
        Alpha = 0x1906,
        Rgb = 0x1907,
        Rgba = 0x1908,
        Luminance = 0x1909,
        LuminanceAlpha = 0x190A,

        [GLExtension("GL_EXT_abgr")]
        AbgrEXT = 0x8000,

        [GLExtension("GL_EXT_cmyka")]
        CmykEXT = 0x800C,

        [GLExtension("GL_EXT_cmyka")]
        CmykaEXT = 0x800D,
        Bgr = 0x80E0,

        [GLExtension("GL_EXT_bgra")]
        BgrEXT = 0x80E0,

        [GLExtension("GL_ARB_vertex_array_bgra")]
        Bgra = 0x80E1,

        [GLExtension("GL_APPLE_texture_format_BGRA8888")]
        BgraEXT = 0x80E1,

        [GLExtension("GL_IMG_read_format")]
        BgraImg = 0x80E1,

        [GLExtension("GL_SGIX_ycrcb")]
        Ycrcb422SGIX = 0x81BB,

        [GLExtension("GL_SGIX_ycrcb")]
        Ycrcb444SGIX = 0x81BC,

        [GLExtension("GL_ARB_texture_rg")]
        Rg = 0x8227,

        [GLExtension("GL_ARB_texture_rg")]
        RgInteger = 0x8228,

        [GLExtension("GL_ARB_framebuffer_object")]
        DepthStencil = 0x84F9,
        RedInteger = 0x8D94,
        GreenInteger = 0x8D95,
        BlueInteger = 0x8D96,
        RgbInteger = 0x8D98,
        RgbaInteger = 0x8D99,
        BgrInteger = 0x8D9A,
        BgraInteger = 0x8D9B,
    }

    public enum AttributeType
    {
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        Int64ARB = 0x140E,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        Int64NV = 0x140E,

        [GLExtension("GL_ARB_bindless_texture")]
        UnsignedInt64ARB = 0x140F,

        [GLExtension("GL_AMD_gpu_shader_int64")]
        UnsignedInt64NV = 0x140F,
        FloatVec2 = 0x8B50,

        [GLExtension("GL_ARB_shader_objects")]
        FloatVec2ARB = 0x8B50,
        FloatVec3 = 0x8B51,

        [GLExtension("GL_ARB_shader_objects")]
        FloatVec3ARB = 0x8B51,
        FloatVec4 = 0x8B52,

        [GLExtension("GL_ARB_shader_objects")]
        FloatVec4ARB = 0x8B52,
        IntVec2 = 0x8B53,

        [GLExtension("GL_ARB_shader_objects")]
        IntVec2ARB = 0x8B53,
        IntVec3 = 0x8B54,

        [GLExtension("GL_ARB_shader_objects")]
        IntVec3ARB = 0x8B54,
        IntVec4 = 0x8B55,

        [GLExtension("GL_ARB_shader_objects")]
        IntVec4ARB = 0x8B55,
        Bool = 0x8B56,

        [GLExtension("GL_ARB_shader_objects")]
        BoolARB = 0x8B56,
        BoolVec2 = 0x8B57,

        [GLExtension("GL_ARB_shader_objects")]
        BoolVec2ARB = 0x8B57,
        BoolVec3 = 0x8B58,

        [GLExtension("GL_ARB_shader_objects")]
        BoolVec3ARB = 0x8B58,
        BoolVec4 = 0x8B59,

        [GLExtension("GL_ARB_shader_objects")]
        BoolVec4ARB = 0x8B59,
        FloatMat2 = 0x8B5A,

        [GLExtension("GL_ARB_shader_objects")]
        FloatMat2ARB = 0x8B5A,
        FloatMat3 = 0x8B5B,

        [GLExtension("GL_ARB_shader_objects")]
        FloatMat3ARB = 0x8B5B,
        FloatMat4 = 0x8B5C,

        [GLExtension("GL_ARB_shader_objects")]
        FloatMat4ARB = 0x8B5C,
        Sampler1D = 0x8B5D,

        [GLExtension("GL_ARB_shader_objects")]
        Sampler1DARB = 0x8B5D,
        Sampler2D = 0x8B5E,

        [GLExtension("GL_ARB_shader_objects")]
        Sampler2DARB = 0x8B5E,
        Sampler3D = 0x8B5F,

        [GLExtension("GL_ARB_shader_objects")]
        Sampler3DARB = 0x8B5F,

        [GLExtension("GL_OES_texture_3D")]
        Sampler3DOES = 0x8B5F,
        SamplerCube = 0x8B60,

        [GLExtension("GL_ARB_shader_objects")]
        SamplerCubeARB = 0x8B60,
        Sampler1DShadow = 0x8B61,

        [GLExtension("GL_ARB_shader_objects")]
        Sampler1DShadowARB = 0x8B61,
        Sampler2DShadow = 0x8B62,

        [GLExtension("GL_ARB_shader_objects")]
        Sampler2DShadowARB = 0x8B62,

        [GLExtension("GL_EXT_shadow_samplers")]
        Sampler2DShadowEXT = 0x8B62,
        Sampler2DRect = 0x8B63,

        [GLExtension("GL_ARB_shader_objects")]
        Sampler2DRectARB = 0x8B63,
        Sampler2DRectShadow = 0x8B64,

        [GLExtension("GL_ARB_shader_objects")]
        Sampler2DRectShadowARB = 0x8B64,
        FloatMat2x3 = 0x8B65,

        [GLExtension("GL_NV_non_square_matrices")]
        FloatMat2x3NV = 0x8B65,
        FloatMat2x4 = 0x8B66,

        [GLExtension("GL_NV_non_square_matrices")]
        FloatMat2x4NV = 0x8B66,
        FloatMat3x2 = 0x8B67,

        [GLExtension("GL_NV_non_square_matrices")]
        FloatMat3x2NV = 0x8B67,
        FloatMat3x4 = 0x8B68,

        [GLExtension("GL_NV_non_square_matrices")]
        FloatMat3x4NV = 0x8B68,
        FloatMat4x2 = 0x8B69,

        [GLExtension("GL_NV_non_square_matrices")]
        FloatMat4x2NV = 0x8B69,
        FloatMat4x3 = 0x8B6A,

        [GLExtension("GL_NV_non_square_matrices")]
        FloatMat4x3NV = 0x8B6A,
        SamplerBuffer = 0x8DC2,
        Sampler1DArrayShadow = 0x8DC3,
        Sampler2DArrayShadow = 0x8DC4,
        SamplerCubeShadow = 0x8DC5,
        UnsignedIntVec2 = 0x8DC6,
        UnsignedIntVec3 = 0x8DC7,
        UnsignedIntVec4 = 0x8DC8,
        IntSampler1D = 0x8DC9,
        IntSampler2D = 0x8DCA,
        IntSampler3D = 0x8DCB,
        IntSamplerCube = 0x8DCC,
        IntSampler2DRect = 0x8DCD,
        IntSampler1DArray = 0x8DCE,
        IntSampler2DArray = 0x8DCF,
        IntSamplerBuffer = 0x8DD0,
        UnsignedIntSampler1D = 0x8DD1,
        UnsignedIntSampler2D = 0x8DD2,
        UnsignedIntSampler3D = 0x8DD3,
        UnsignedIntSamplerCube = 0x8DD4,
        UnsignedIntSampler2DRect = 0x8DD5,
        UnsignedIntSampler1DArray = 0x8DD6,
        UnsignedIntSampler2DArray = 0x8DD7,
        UnsignedIntSamplerBuffer = 0x8DD8,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat2 = 0x8F46,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat3 = 0x8F47,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat4 = 0x8F48,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat2x3 = 0x8F49,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat2x4 = 0x8F4A,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat3x2 = 0x8F4B,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat3x4 = 0x8F4C,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat4x2 = 0x8F4D,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat4x3 = 0x8F4E,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        Int64Vec2ARB = 0x8FE9,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        Int64Vec3ARB = 0x8FEA,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        Int64Vec4ARB = 0x8FEB,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        UnsignedInt64Vec2ARB = 0x8FF5,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        UnsignedInt64Vec3ARB = 0x8FF6,

        [GLExtension("GL_ARB_gpu_shader_int64")]
        UnsignedInt64Vec4ARB = 0x8FF7,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleVec2 = 0x8FFC,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleVec3 = 0x8FFD,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleVec4 = 0x8FFE,
        SamplerCubeMapArray = 0x900C,
        SamplerCubeMapArrayShadow = 0x900D,
        IntSamplerCubeMapArray = 0x900E,
        UnsignedIntSamplerCubeMapArray = 0x900F,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image1D = 0x904C,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image2D = 0x904D,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image3D = 0x904E,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image2DRect = 0x904F,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageCube = 0x9050,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageBuffer = 0x9051,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image1DArray = 0x9052,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image2DArray = 0x9053,

        [GLExtension("GL_ARB_shader_image_load_store")]
        ImageCubeMapArray = 0x9054,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image2DMultisample = 0x9055,

        [GLExtension("GL_ARB_shader_image_load_store")]
        Image2DMultisampleArray = 0x9056,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage1D = 0x9057,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage2D = 0x9058,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage3D = 0x9059,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage2DRect = 0x905A,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImageCube = 0x905B,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImageBuffer = 0x905C,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage1DArray = 0x905D,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage2DArray = 0x905E,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImageCubeMapArray = 0x905F,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage2DMultisample = 0x9060,

        [GLExtension("GL_ARB_shader_image_load_store")]
        IntImage2DMultisampleArray = 0x9061,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage1D = 0x9062,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage2D = 0x9063,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage3D = 0x9064,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage2DRect = 0x9065,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImageCube = 0x9066,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImageBuffer = 0x9067,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage1DArray = 0x9068,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage2DArray = 0x9069,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImageCubeMapArray = 0x906A,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage2DMultisample = 0x906B,

        [GLExtension("GL_ARB_shader_image_load_store")]
        UnsignedIntImage2DMultisampleArray = 0x906C,

        [GLExtension("GL_ARB_texture_multisample")]
        Sampler2DMultisample = 0x9108,

        [GLExtension("GL_ARB_texture_multisample")]
        IntSampler2DMultisample = 0x9109,

        [GLExtension("GL_ARB_texture_multisample")]
        UnsignedIntSampler2DMultisample = 0x910A,

        [GLExtension("GL_ARB_texture_multisample")]
        Sampler2DMultisampleArray = 0x910B,

        [GLExtension("GL_ARB_texture_multisample")]
        IntSampler2DMultisampleArray = 0x910C,

        [GLExtension("GL_ARB_texture_multisample")]
        UnsignedIntSampler2DMultisampleArray = 0x910D,
    }

    public enum UniformType
    {
        Int = 0x1404,

        [GLExtension("GL_ANGLE_depth_texture")]
        UnsignedInt = 0x1405,

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
        FloatVec2 = 0x8B50,
        FloatVec3 = 0x8B51,
        FloatVec4 = 0x8B52,
        IntVec2 = 0x8B53,
        IntVec3 = 0x8B54,
        IntVec4 = 0x8B55,
        Bool = 0x8B56,
        BoolVec2 = 0x8B57,
        BoolVec3 = 0x8B58,
        BoolVec4 = 0x8B59,
        FloatMat2 = 0x8B5A,
        FloatMat3 = 0x8B5B,
        FloatMat4 = 0x8B5C,
        Sampler1D = 0x8B5D,
        Sampler2D = 0x8B5E,
        Sampler3D = 0x8B5F,
        SamplerCube = 0x8B60,
        Sampler1DShadow = 0x8B61,
        Sampler2DShadow = 0x8B62,
        Sampler2DRect = 0x8B63,
        Sampler2DRectShadow = 0x8B64,
        FloatMat2x3 = 0x8B65,
        FloatMat2x4 = 0x8B66,
        FloatMat3x2 = 0x8B67,
        FloatMat3x4 = 0x8B68,
        FloatMat4x2 = 0x8B69,
        FloatMat4x3 = 0x8B6A,
        Sampler1DArray = 0x8DC0,
        Sampler2DArray = 0x8DC1,
        SamplerBuffer = 0x8DC2,
        Sampler1DArrayShadow = 0x8DC3,
        Sampler2DArrayShadow = 0x8DC4,
        SamplerCubeShadow = 0x8DC5,
        UnsignedIntVec2 = 0x8DC6,
        UnsignedIntVec3 = 0x8DC7,
        UnsignedIntVec4 = 0x8DC8,
        IntSampler1D = 0x8DC9,
        IntSampler2D = 0x8DCA,
        IntSampler3D = 0x8DCB,
        IntSamplerCube = 0x8DCC,
        IntSampler2DRect = 0x8DCD,
        IntSampler1DArray = 0x8DCE,
        IntSampler2DArray = 0x8DCF,
        IntSamplerBuffer = 0x8DD0,
        UnsignedIntSampler1D = 0x8DD1,
        UnsignedIntSampler2D = 0x8DD2,
        UnsignedIntSampler3D = 0x8DD3,
        UnsignedIntSamplerCube = 0x8DD4,
        UnsignedIntSampler2DRect = 0x8DD5,
        UnsignedIntSampler1DArray = 0x8DD6,
        UnsignedIntSampler2DArray = 0x8DD7,
        UnsignedIntSamplerBuffer = 0x8DD8,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat2 = 0x8F46,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat3 = 0x8F47,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat4 = 0x8F48,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat2x3 = 0x8F49,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat2x4 = 0x8F4A,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat3x2 = 0x8F4B,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat3x4 = 0x8F4C,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat4x2 = 0x8F4D,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleMat4x3 = 0x8F4E,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleVec2 = 0x8FFC,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleVec3 = 0x8FFD,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        DoubleVec4 = 0x8FFE,
        SamplerCubeMapArray = 0x900C,
        SamplerCubeMapArrayShadow = 0x900D,
        IntSamplerCubeMapArray = 0x900E,
        UnsignedIntSamplerCubeMapArray = 0x900F,

        [GLExtension("GL_ARB_texture_multisample")]
        Sampler2DMultisample = 0x9108,

        [GLExtension("GL_ARB_texture_multisample")]
        IntSampler2DMultisample = 0x9109,

        [GLExtension("GL_ARB_texture_multisample")]
        UnsignedIntSampler2DMultisample = 0x910A,

        [GLExtension("GL_ARB_texture_multisample")]
        Sampler2DMultisampleArray = 0x910B,

        [GLExtension("GL_ARB_texture_multisample")]
        IntSampler2DMultisampleArray = 0x910C,

        [GLExtension("GL_ARB_texture_multisample")]
        UnsignedIntSampler2DMultisampleArray = 0x910D,
    }

    public enum MapTypeNV
    {

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum VertexWeightPointerTypeEXT
    {

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,
    }

    public enum FogCoordinatePointerType
    {

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum FogPointerTypeEXT
    {

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum FogPointerTypeIBM
    {

        [GLExtension("GL_ARB_vertex_shader")]
        Float = 0x1406,

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum VertexAttribLType
    {

        [GLExtension("GL_ARB_gpu_shader_fp64")]
        Double = 0x140A,
    }

    public enum LogicOp
    {
        Clear = 0x1500,
        And = 0x1501,
        AndReverse = 0x1502,
        Copy = 0x1503,
        AndInverted = 0x1504,
        Noop = 0x1505,
        Xor = 0x1506,
        Or = 0x1507,
        Nor = 0x1508,
        Equiv = 0x1509,

        [GLExtension("GL_NV_blend_equation_advanced")]
        Invert = 0x150A,
        OrReverse = 0x150B,
        CopyInverted = 0x150C,
        OrInverted = 0x150D,
        Nand = 0x150E,
        Set = 0x150F,
    }

    public enum PathFillMode
    {

        [GLExtension("GL_NV_blend_equation_advanced")]
        Invert = 0x150A,

        [GLExtension("GL_NV_path_rendering")]
        PathFillModeNV = 0x9080,

        [GLExtension("GL_NV_path_rendering")]
        CountUpNV = 0x9088,

        [GLExtension("GL_NV_path_rendering")]
        CountDownNV = 0x9089,
    }

    public enum MatrixMode
    {
        Modelview = 0x1700,

        [GLExtension("GL_EXT_vertex_weighting")]
        Modelview0EXT = 0x1700,
        Projection = 0x1701,
        Texture = 0x1702,
    }

    public enum ObjectIdentifier
    {
        Texture = 0x1702,

        [GLExtension("GL_KHR_debug")]
        VertexArray = 0x8074,

        [GLExtension("GL_KHR_debug")]
        Buffer = 0x82E0,

        [GLExtension("GL_KHR_debug")]
        Shader = 0x82E1,

        [GLExtension("GL_KHR_debug")]
        Program = 0x82E2,

        [GLExtension("GL_KHR_debug")]
        Query = 0x82E3,

        [GLExtension("GL_KHR_debug")]
        ProgramPipeline = 0x82E4,

        [GLExtension("GL_EXT_debug_label")]
        Sampler = 0x82E6,

        [GLExtension("GL_ARB_framebuffer_object")]
        Framebuffer = 0x8D40,

        [GLExtension("GL_ARB_framebuffer_object")]
        Renderbuffer = 0x8D41,

        [GLExtension("GL_ARB_transform_feedback2")]
        TransformFeedback = 0x8E22,
    }

    public enum Buffer
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,
    }

    public enum PixelCopyType
    {
        Color = 0x1800,

        [GLExtension("GL_EXT_discard_framebuffer")]
        ColorEXT = 0x1800,
        Depth = 0x1801,

        [GLExtension("GL_EXT_discard_framebuffer")]
        DepthEXT = 0x1801,
        Stencil = 0x1802,

        [GLExtension("GL_EXT_discard_framebuffer")]
        StencilEXT = 0x1802,
    }

    public enum InvalidateFramebufferAttachment
    {
        Color = 0x1800,
        Depth = 0x1801,
        Stencil = 0x1802,

        [GLExtension("GL_ARB_framebuffer_object")]
        DepthStencilAttachment = 0x821A,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment0 = 0x8CE0,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment0EXT = 0x8CE0,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment0NV = 0x8CE0,

        [GLExtension("GL_OES_framebuffer_object")]
        ColorAttachment0OES = 0x8CE0,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment1 = 0x8CE1,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment1EXT = 0x8CE1,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment1NV = 0x8CE1,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment2 = 0x8CE2,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment2EXT = 0x8CE2,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment2NV = 0x8CE2,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment3 = 0x8CE3,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment3EXT = 0x8CE3,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment3NV = 0x8CE3,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment4 = 0x8CE4,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment4EXT = 0x8CE4,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment4NV = 0x8CE4,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment5 = 0x8CE5,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment5EXT = 0x8CE5,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment5NV = 0x8CE5,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment6 = 0x8CE6,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment6EXT = 0x8CE6,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment6NV = 0x8CE6,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment7 = 0x8CE7,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment7EXT = 0x8CE7,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment7NV = 0x8CE7,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment8 = 0x8CE8,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment8EXT = 0x8CE8,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment8NV = 0x8CE8,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment9 = 0x8CE9,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment9EXT = 0x8CE9,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment9NV = 0x8CE9,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment10 = 0x8CEA,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment10EXT = 0x8CEA,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment10NV = 0x8CEA,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment11 = 0x8CEB,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment11EXT = 0x8CEB,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment11NV = 0x8CEB,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment12 = 0x8CEC,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment12EXT = 0x8CEC,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment12NV = 0x8CEC,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment13 = 0x8CED,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment13EXT = 0x8CED,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment13NV = 0x8CED,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment14 = 0x8CEE,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment14EXT = 0x8CEE,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment14NV = 0x8CEE,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment15 = 0x8CEF,

        [GLExtension("GL_EXT_draw_buffers")]
        ColorAttachment15EXT = 0x8CEF,

        [GLExtension("GL_NV_draw_buffers")]
        ColorAttachment15NV = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,

        [GLExtension("GL_ARB_framebuffer_object")]
        DepthAttachment = 0x8D00,

        [GLExtension("GL_EXT_framebuffer_object")]
        DepthAttachmentEXT = 0x8D00,

        [GLExtension("GL_OES_framebuffer_object")]
        DepthAttachmentOES = 0x8D00,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilAttachmentEXT = 0x8D20,

        [GLExtension("GL_OES_framebuffer_object")]
        StencilAttachmentOES = 0x8D20,
    }

    public enum InternalFormat
    {

        [GLExtension("GL_ARB_texture_stencil8")]
        StencilIndex = 0x1901,

        [GLExtension("GL_OES_texture_stencil8")]
        StencilIndexOES = 0x1901,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthComponent = 0x1902,

        [GLExtension("GL_AMD_interleaved_elements")]
        Red = 0x1903,

        [GLExtension("GL_EXT_texture_rg")]
        RedEXT = 0x1903,
        Rgb = 0x1907,
        Rgba = 0x1908,
        R3G3B2 = 0x2A10,
        Alpha4 = 0x803B,

        [GLExtension("GL_EXT_texture")]
        Alpha4EXT = 0x803B,
        Alpha8 = 0x803C,

        [GLExtension("GL_EXT_texture")]
        Alpha8EXT = 0x803C,

        [GLExtension("GL_OES_required_internalformat")]
        Alpha8OES = 0x803C,
        Alpha12 = 0x803D,

        [GLExtension("GL_EXT_texture")]
        Alpha12EXT = 0x803D,
        Alpha16 = 0x803E,

        [GLExtension("GL_EXT_texture")]
        Alpha16EXT = 0x803E,
        Luminance4 = 0x803F,

        [GLExtension("GL_EXT_texture")]
        Luminance4EXT = 0x803F,
        Luminance8 = 0x8040,

        [GLExtension("GL_EXT_texture")]
        Luminance8EXT = 0x8040,

        [GLExtension("GL_OES_required_internalformat")]
        Luminance8OES = 0x8040,
        Luminance12 = 0x8041,

        [GLExtension("GL_EXT_texture")]
        Luminance12EXT = 0x8041,
        Luminance16 = 0x8042,

        [GLExtension("GL_EXT_texture")]
        Luminance16EXT = 0x8042,
        Luminance4Alpha4 = 0x8043,

        [GLExtension("GL_EXT_texture")]
        Luminance4Alpha4EXT = 0x8043,

        [GLExtension("GL_OES_required_internalformat")]
        Luminance4Alpha4OES = 0x8043,
        Luminance6Alpha2 = 0x8044,

        [GLExtension("GL_EXT_texture")]
        Luminance6Alpha2EXT = 0x8044,
        Luminance8Alpha8 = 0x8045,

        [GLExtension("GL_EXT_texture")]
        Luminance8Alpha8EXT = 0x8045,

        [GLExtension("GL_OES_required_internalformat")]
        Luminance8Alpha8OES = 0x8045,
        Luminance12Alpha4 = 0x8046,

        [GLExtension("GL_EXT_texture")]
        Luminance12Alpha4EXT = 0x8046,
        Luminance12Alpha12 = 0x8047,

        [GLExtension("GL_EXT_texture")]
        Luminance12Alpha12EXT = 0x8047,
        Luminance16Alpha16 = 0x8048,

        [GLExtension("GL_EXT_texture")]
        Luminance16Alpha16EXT = 0x8048,
        Intensity = 0x8049,
        Intensity4 = 0x804A,

        [GLExtension("GL_EXT_texture")]
        Intensity4EXT = 0x804A,
        Intensity8 = 0x804B,

        [GLExtension("GL_EXT_texture")]
        Intensity8EXT = 0x804B,
        Intensity12 = 0x804C,

        [GLExtension("GL_EXT_texture")]
        Intensity12EXT = 0x804C,
        Intensity16 = 0x804D,

        [GLExtension("GL_EXT_texture")]
        Intensity16EXT = 0x804D,

        [GLExtension("GL_EXT_texture")]
        Rgb2EXT = 0x804E,
        Rgb4 = 0x804F,

        [GLExtension("GL_EXT_texture")]
        Rgb4EXT = 0x804F,
        Rgb5 = 0x8050,

        [GLExtension("GL_EXT_texture")]
        Rgb5EXT = 0x8050,
        Rgb8 = 0x8051,

        [GLExtension("GL_EXT_texture")]
        Rgb8EXT = 0x8051,

        [GLExtension("GL_OES_required_internalformat")]
        Rgb8OES = 0x8051,
        Rgb10 = 0x8052,

        [GLExtension("GL_EXT_texture")]
        Rgb10EXT = 0x8052,
        Rgb12 = 0x8053,

        [GLExtension("GL_EXT_texture")]
        Rgb12EXT = 0x8053,
        Rgb16 = 0x8054,

        [GLExtension("GL_EXT_texture")]
        Rgb16EXT = 0x8054,
        Rgba2 = 0x8055,

        [GLExtension("GL_EXT_texture")]
        Rgba2EXT = 0x8055,
        Rgba4 = 0x8056,

        [GLExtension("GL_EXT_texture")]
        Rgba4EXT = 0x8056,

        [GLExtension("GL_OES_framebuffer_object")]
        Rgba4OES = 0x8056,
        Rgb5A1 = 0x8057,

        [GLExtension("GL_EXT_texture")]
        Rgb5A1EXT = 0x8057,

        [GLExtension("GL_OES_framebuffer_object")]
        Rgb5A1OES = 0x8057,
        Rgba8 = 0x8058,

        [GLExtension("GL_EXT_texture")]
        Rgba8EXT = 0x8058,

        [GLExtension("GL_OES_required_internalformat")]
        Rgba8OES = 0x8058,
        Rgb10A2 = 0x8059,

        [GLExtension("GL_EXT_texture")]
        Rgb10A2EXT = 0x8059,
        Rgba12 = 0x805A,

        [GLExtension("GL_EXT_texture")]
        Rgba12EXT = 0x805A,
        Rgba16 = 0x805B,

        [GLExtension("GL_EXT_texture")]
        Rgba16EXT = 0x805B,

        [GLExtension("GL_SGIS_texture_select")]
        DualAlpha4Sgis = 0x8110,

        [GLExtension("GL_SGIS_texture_select")]
        DualAlpha8Sgis = 0x8111,

        [GLExtension("GL_SGIS_texture_select")]
        DualAlpha12Sgis = 0x8112,

        [GLExtension("GL_SGIS_texture_select")]
        DualAlpha16Sgis = 0x8113,

        [GLExtension("GL_SGIS_texture_select")]
        DualLuminance4Sgis = 0x8114,

        [GLExtension("GL_SGIS_texture_select")]
        DualLuminance8Sgis = 0x8115,

        [GLExtension("GL_SGIS_texture_select")]
        DualLuminance12Sgis = 0x8116,

        [GLExtension("GL_SGIS_texture_select")]
        DualLuminance16Sgis = 0x8117,

        [GLExtension("GL_SGIS_texture_select")]
        DualIntensity4Sgis = 0x8118,

        [GLExtension("GL_SGIS_texture_select")]
        DualIntensity8Sgis = 0x8119,

        [GLExtension("GL_SGIS_texture_select")]
        DualIntensity12Sgis = 0x811A,

        [GLExtension("GL_SGIS_texture_select")]
        DualIntensity16Sgis = 0x811B,

        [GLExtension("GL_SGIS_texture_select")]
        DualLuminanceAlpha4Sgis = 0x811C,

        [GLExtension("GL_SGIS_texture_select")]
        DualLuminanceAlpha8Sgis = 0x811D,

        [GLExtension("GL_SGIS_texture_select")]
        QuadAlpha4Sgis = 0x811E,

        [GLExtension("GL_SGIS_texture_select")]
        QuadAlpha8Sgis = 0x811F,

        [GLExtension("GL_SGIS_texture_select")]
        QuadLuminance4Sgis = 0x8120,

        [GLExtension("GL_SGIS_texture_select")]
        QuadLuminance8Sgis = 0x8121,

        [GLExtension("GL_SGIS_texture_select")]
        QuadIntensity4Sgis = 0x8122,

        [GLExtension("GL_SGIS_texture_select")]
        QuadIntensity8Sgis = 0x8123,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthComponent16 = 0x81A5,

        [GLExtension("GL_ARB_depth_texture")]
        DepthComponent16ARB = 0x81A5,

        [GLExtension("GL_OES_framebuffer_object")]
        DepthComponent16OES = 0x81A5,

        [GLExtension("GL_SGIX_depth_texture")]
        DepthComponent16SGIX = 0x81A5,
        DepthComponent24 = 0x81A6,

        [GLExtension("GL_ARB_depth_texture")]
        DepthComponent24ARB = 0x81A6,

        [GLExtension("GL_OES_depth24")]
        DepthComponent24OES = 0x81A6,

        [GLExtension("GL_SGIX_depth_texture")]
        DepthComponent24SGIX = 0x81A6,
        DepthComponent32 = 0x81A7,

        [GLExtension("GL_ARB_depth_texture")]
        DepthComponent32ARB = 0x81A7,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthComponent32OES = 0x81A7,

        [GLExtension("GL_SGIX_depth_texture")]
        DepthComponent32SGIX = 0x81A7,
        CompressedRed = 0x8225,
        CompressedRg = 0x8226,

        [GLExtension("GL_ARB_texture_rg")]
        Rg = 0x8227,

        [GLExtension("GL_ARB_texture_rg")]
        R8 = 0x8229,

        [GLExtension("GL_EXT_texture_rg")]
        R8EXT = 0x8229,

        [GLExtension("GL_ARB_texture_rg")]
        R16 = 0x822A,

        [GLExtension("GL_EXT_texture_norm16")]
        R16EXT = 0x822A,

        [GLExtension("GL_ARB_texture_rg")]
        Rg8 = 0x822B,

        [GLExtension("GL_EXT_texture_rg")]
        Rg8EXT = 0x822B,

        [GLExtension("GL_ARB_texture_rg")]
        Rg16 = 0x822C,

        [GLExtension("GL_EXT_texture_norm16")]
        Rg16EXT = 0x822C,

        [GLExtension("GL_ARB_texture_rg")]
        R16f = 0x822D,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        R16fEXT = 0x822D,

        [GLExtension("GL_ARB_texture_rg")]
        R32f = 0x822E,

        [GLExtension("GL_EXT_texture_storage")]
        R32fEXT = 0x822E,

        [GLExtension("GL_ARB_texture_rg")]
        Rg16f = 0x822F,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        Rg16fEXT = 0x822F,

        [GLExtension("GL_ARB_texture_rg")]
        Rg32f = 0x8230,

        [GLExtension("GL_EXT_texture_storage")]
        Rg32fEXT = 0x8230,

        [GLExtension("GL_ARB_texture_rg")]
        R8i = 0x8231,

        [GLExtension("GL_ARB_texture_rg")]
        R8ui = 0x8232,

        [GLExtension("GL_ARB_texture_rg")]
        R16i = 0x8233,

        [GLExtension("GL_ARB_texture_rg")]
        R16ui = 0x8234,

        [GLExtension("GL_ARB_texture_rg")]
        R32i = 0x8235,

        [GLExtension("GL_ARB_texture_rg")]
        R32ui = 0x8236,

        [GLExtension("GL_ARB_texture_rg")]
        Rg8i = 0x8237,

        [GLExtension("GL_AMD_interleaved_elements")]
        Rg8ui = 0x8238,

        [GLExtension("GL_ARB_texture_rg")]
        Rg16i = 0x8239,

        [GLExtension("GL_AMD_interleaved_elements")]
        Rg16ui = 0x823A,

        [GLExtension("GL_ARB_texture_rg")]
        Rg32i = 0x823B,

        [GLExtension("GL_ARB_texture_rg")]
        Rg32ui = 0x823C,

        [GLExtension("GL_EXT_texture_compression_dxt1")]
        CompressedRgbS3tcDxt1EXT = 0x83F0,

        [GLExtension("GL_EXT_texture_compression_dxt1")]
        CompressedRgbaS3tcDxt1EXT = 0x83F1,

        [GLExtension("GL_ANGLE_texture_compression_dxt3")]
        CompressedRgbaS3tcDxt3Angle = 0x83F2,

        [GLExtension("GL_EXT_texture_compression_s3tc")]
        CompressedRgbaS3tcDxt3EXT = 0x83F2,

        [GLExtension("GL_ANGLE_texture_compression_dxt5")]
        CompressedRgbaS3tcDxt5Angle = 0x83F3,

        [GLExtension("GL_EXT_texture_compression_s3tc")]
        CompressedRgbaS3tcDxt5EXT = 0x83F3,
        CompressedRgb = 0x84ED,
        CompressedRgba = 0x84EE,

        [GLExtension("GL_ARB_framebuffer_object")]
        DepthStencil = 0x84F9,

        [GLExtension("GL_EXT_packed_depth_stencil")]
        DepthStencilEXT = 0x84F9,

        [GLExtension("GL_NV_packed_depth_stencil")]
        DepthStencilNV = 0x84F9,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthStencilOES = 0x84F9,
        DepthStencilMESA = 0x8750,
        Rgba32f = 0x8814,

        [GLExtension("GL_ARB_texture_float")]
        Rgba32fARB = 0x8814,

        [GLExtension("GL_EXT_texture_storage")]
        Rgba32fEXT = 0x8814,

        [GLExtension("GL_ARB_texture_buffer_object_rgb32")]
        Rgb32f = 0x8815,

        [GLExtension("GL_ARB_texture_float")]
        Rgb32fARB = 0x8815,

        [GLExtension("GL_EXT_texture_storage")]
        Rgb32fEXT = 0x8815,
        Rgba16f = 0x881A,

        [GLExtension("GL_ARB_texture_float")]
        Rgba16fARB = 0x881A,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        Rgba16fEXT = 0x881A,
        Rgb16f = 0x881B,

        [GLExtension("GL_ARB_texture_float")]
        Rgb16fARB = 0x881B,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        Rgb16fEXT = 0x881B,

        [GLExtension("GL_ARB_framebuffer_object")]
        Depth24Stencil8 = 0x88F0,

        [GLExtension("GL_EXT_packed_depth_stencil")]
        Depth24Stencil8EXT = 0x88F0,

        [GLExtension("GL_ANGLE_depth_texture")]
        Depth24Stencil8OES = 0x88F0,
        R11fG11fB10f = 0x8C3A,

        [GLExtension("GL_APPLE_texture_packed_float")]
        R11fG11fB10fAPPLE = 0x8C3A,

        [GLExtension("GL_EXT_packed_float")]
        R11fG11fB10fEXT = 0x8C3A,
        Rgb9E5 = 0x8C3D,

        [GLExtension("GL_APPLE_texture_packed_float")]
        Rgb9E5APPLE = 0x8C3D,

        [GLExtension("GL_EXT_texture_shared_exponent")]
        Rgb9E5EXT = 0x8C3D,
        Srgb = 0x8C40,

        [GLExtension("GL_EXT_sRGB")]
        SrgbEXT = 0x8C40,
        Srgb8 = 0x8C41,

        [GLExtension("GL_EXT_texture_sRGB")]
        Srgb8EXT = 0x8C41,

        [GLExtension("GL_NV_sRGB_formats")]
        Srgb8NV = 0x8C41,
        SrgbAlpha = 0x8C42,

        [GLExtension("GL_EXT_sRGB")]
        SrgbAlphaEXT = 0x8C42,
        Srgb8Alpha8 = 0x8C43,

        [GLExtension("GL_EXT_sRGB")]
        Srgb8Alpha8EXT = 0x8C43,
        CompressedSrgb = 0x8C48,
        CompressedSrgbAlpha = 0x8C49,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbS3tcDxt1EXT = 0x8C4C,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbS3tcDxt1NV = 0x8C4C,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbAlphaS3tcDxt1EXT = 0x8C4D,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbAlphaS3tcDxt1NV = 0x8C4D,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbAlphaS3tcDxt3EXT = 0x8C4E,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbAlphaS3tcDxt3NV = 0x8C4E,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbAlphaS3tcDxt5EXT = 0x8C4F,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbAlphaS3tcDxt5NV = 0x8C4F,

        [GLExtension("GL_ARB_depth_buffer_float")]
        DepthComponent32f = 0x8CAC,

        [GLExtension("GL_ARB_depth_buffer_float")]
        Depth32fStencil8 = 0x8CAD,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex1 = 0x8D46,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex1EXT = 0x8D46,

        [GLExtension("GL_OES_stencil1")]
        StencilIndex1OES = 0x8D46,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex4 = 0x8D47,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex4EXT = 0x8D47,

        [GLExtension("GL_OES_stencil4")]
        StencilIndex4OES = 0x8D47,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex8 = 0x8D48,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex8EXT = 0x8D48,

        [GLExtension("GL_OES_stencil8")]
        StencilIndex8OES = 0x8D48,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex16 = 0x8D49,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex16EXT = 0x8D49,

        [GLExtension("GL_OES_framebuffer_object")]
        Rgb565OES = 0x8D62,

        [GLExtension("GL_ARB_ES2_compatibility")]
        Rgb565 = 0x8D62,

        [GLExtension("GL_OES_compressed_ETC1_RGB8_texture")]
        Etc1Rgb8OES = 0x8D64,
        Rgba32ui = 0x8D70,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba32uiEXT = 0x8D70,

        [GLExtension("GL_ARB_texture_buffer_object_rgb32")]
        Rgb32ui = 0x8D71,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb32uiEXT = 0x8D71,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha32uiEXT = 0x8D72,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity32uiEXT = 0x8D73,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance32uiEXT = 0x8D74,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha32uiEXT = 0x8D75,
        Rgba16ui = 0x8D76,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba16uiEXT = 0x8D76,
        Rgb16ui = 0x8D77,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb16uiEXT = 0x8D77,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha16uiEXT = 0x8D78,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity16uiEXT = 0x8D79,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance16uiEXT = 0x8D7A,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha16uiEXT = 0x8D7B,

        [GLExtension("GL_AMD_interleaved_elements")]
        Rgba8ui = 0x8D7C,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba8uiEXT = 0x8D7C,
        Rgb8ui = 0x8D7D,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb8uiEXT = 0x8D7D,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha8uiEXT = 0x8D7E,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity8uiEXT = 0x8D7F,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance8uiEXT = 0x8D80,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha8uiEXT = 0x8D81,
        Rgba32i = 0x8D82,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba32iEXT = 0x8D82,

        [GLExtension("GL_ARB_texture_buffer_object_rgb32")]
        Rgb32i = 0x8D83,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb32iEXT = 0x8D83,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha32iEXT = 0x8D84,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity32iEXT = 0x8D85,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance32iEXT = 0x8D86,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha32iEXT = 0x8D87,
        Rgba16i = 0x8D88,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba16iEXT = 0x8D88,
        Rgb16i = 0x8D89,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb16iEXT = 0x8D89,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha16iEXT = 0x8D8A,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity16iEXT = 0x8D8B,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance16iEXT = 0x8D8C,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha16iEXT = 0x8D8D,
        Rgba8i = 0x8D8E,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba8iEXT = 0x8D8E,
        Rgb8i = 0x8D8F,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb8iEXT = 0x8D8F,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha8iEXT = 0x8D90,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity8iEXT = 0x8D91,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance8iEXT = 0x8D92,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha8iEXT = 0x8D93,

        [GLExtension("GL_NV_depth_buffer_float")]
        DepthComponent32fNV = 0x8DAB,

        [GLExtension("GL_NV_depth_buffer_float")]
        Depth32fStencil8NV = 0x8DAC,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedRedRgtc1 = 0x8DBB,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedRedRgtc1EXT = 0x8DBB,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedSignedRedRgtc1 = 0x8DBC,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedSignedRedRgtc1EXT = 0x8DBC,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedRedGreenRgtc2EXT = 0x8DBD,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedRgRgtc2 = 0x8DBD,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedSignedRedGreenRgtc2EXT = 0x8DBE,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedSignedRgRgtc2 = 0x8DBE,
        CompressedRgbaBptcUnorm = 0x8E8C,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedRgbaBptcUnormARB = 0x8E8C,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedRgbaBptcUnormEXT = 0x8E8C,
        CompressedSrgbAlphaBptcUnorm = 0x8E8D,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedSrgbAlphaBptcUnormARB = 0x8E8D,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedSrgbAlphaBptcUnormEXT = 0x8E8D,
        CompressedRgbBptcSignedFloat = 0x8E8E,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedRgbBptcSignedFloatARB = 0x8E8E,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedRgbBptcSignedFloatEXT = 0x8E8E,
        CompressedRgbBptcUnsignedFloat = 0x8E8F,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedRgbBptcUnsignedFloatARB = 0x8E8F,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedRgbBptcUnsignedFloatEXT = 0x8E8F,

        [GLExtension("GL_EXT_render_snorm")]
        R8Snorm = 0x8F94,

        [GLExtension("GL_EXT_render_snorm")]
        Rg8Snorm = 0x8F95,

        [GLExtension("GL_EXT_texture_snorm")]
        Rgb8Snorm = 0x8F96,

        [GLExtension("GL_EXT_render_snorm")]
        Rgba8Snorm = 0x8F97,

        [GLExtension("GL_EXT_texture_snorm")]
        R16Snorm = 0x8F98,

        [GLExtension("GL_EXT_render_snorm")]
        R16SnormEXT = 0x8F98,

        [GLExtension("GL_EXT_texture_snorm")]
        Rg16Snorm = 0x8F99,

        [GLExtension("GL_EXT_render_snorm")]
        Rg16SnormEXT = 0x8F99,

        [GLExtension("GL_EXT_texture_snorm")]
        Rgb16Snorm = 0x8F9A,

        [GLExtension("GL_EXT_texture_norm16")]
        Rgb16SnormEXT = 0x8F9A,

        [GLExtension("GL_EXT_texture_snorm")]
        Rgba16Snorm = 0x8F9B,

        [GLExtension("GL_EXT_render_snorm")]
        Rgba16SnormEXT = 0x8F9B,

        [GLExtension("GL_EXT_texture_sRGB_R8")]
        Sr8EXT = 0x8FBD,

        [GLExtension("GL_EXT_texture_sRGB_RG8")]
        Srg8EXT = 0x8FBE,

        [GLExtension("GL_ARB_texture_rgb10_a2ui")]
        Rgb10A2ui = 0x906F,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedR11Eac = 0x9270,
        CompressedR11EacOES = 0x9270,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSignedR11Eac = 0x9271,
        CompressedSignedR11EacOES = 0x9271,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRg11Eac = 0x9272,
        CompressedRg11EacOES = 0x9272,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSignedRg11Eac = 0x9273,
        CompressedSignedRg11EacOES = 0x9273,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRgb8Etc2 = 0x9274,
        CompressedRgb8Etc2OES = 0x9274,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSrgb8Etc2 = 0x9275,
        CompressedSrgb8Etc2OES = 0x9275,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRgb8PunchthroughAlpha1Etc2 = 0x9276,
        CompressedRgb8PunchthroughAlpha1Etc2OES = 0x9276,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277,
        CompressedSrgb8PunchthroughAlpha1Etc2OES = 0x9277,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRgba8Etc2Eac = 0x9278,
        CompressedRgba8Etc2EacOES = 0x9278,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSrgb8Alpha8Etc2Eac = 0x9279,
        CompressedSrgb8Alpha8Etc2EacOES = 0x9279,
        CompressedRgbaAstc4x4 = 0x93B0,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc4x4Khr = 0x93B0,
        CompressedRgbaAstc5x4 = 0x93B1,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc5x4Khr = 0x93B1,
        CompressedRgbaAstc5x5 = 0x93B2,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc5x5Khr = 0x93B2,
        CompressedRgbaAstc6x5 = 0x93B3,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc6x5Khr = 0x93B3,
        CompressedRgbaAstc6x6 = 0x93B4,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc6x6Khr = 0x93B4,
        CompressedRgbaAstc8x5 = 0x93B5,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc8x5Khr = 0x93B5,
        CompressedRgbaAstc8x6 = 0x93B6,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc8x6Khr = 0x93B6,
        CompressedRgbaAstc8x8 = 0x93B7,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc8x8Khr = 0x93B7,
        CompressedRgbaAstc10x5 = 0x93B8,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x5Khr = 0x93B8,
        CompressedRgbaAstc10x6 = 0x93B9,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x6Khr = 0x93B9,
        CompressedRgbaAstc10x8 = 0x93BA,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x8Khr = 0x93BA,
        CompressedRgbaAstc10x10 = 0x93BB,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x10Khr = 0x93BB,
        CompressedRgbaAstc12x10 = 0x93BC,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc12x10Khr = 0x93BC,
        CompressedRgbaAstc12x12 = 0x93BD,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc12x12Khr = 0x93BD,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc3x3x3OES = 0x93C0,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc4x3x3OES = 0x93C1,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc4x4x3OES = 0x93C2,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc4x4x4OES = 0x93C3,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc5x4x4OES = 0x93C4,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc5x5x4OES = 0x93C5,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc5x5x5OES = 0x93C6,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc6x5x5OES = 0x93C7,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc6x6x5OES = 0x93C8,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc6x6x6OES = 0x93C9,
        CompressedSrgb8Alpha8Astc4x4 = 0x93D0,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc4x4Khr = 0x93D0,
        CompressedSrgb8Alpha8Astc5x4 = 0x93D1,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc5x4Khr = 0x93D1,
        CompressedSrgb8Alpha8Astc5x5 = 0x93D2,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc5x5Khr = 0x93D2,
        CompressedSrgb8Alpha8Astc6x5 = 0x93D3,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc6x5Khr = 0x93D3,
        CompressedSrgb8Alpha8Astc6x6 = 0x93D4,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc6x6Khr = 0x93D4,
        CompressedSrgb8Alpha8Astc8x5 = 0x93D5,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc8x5Khr = 0x93D5,
        CompressedSrgb8Alpha8Astc8x6 = 0x93D6,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc8x6Khr = 0x93D6,
        CompressedSrgb8Alpha8Astc8x8 = 0x93D7,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc8x8Khr = 0x93D7,
        CompressedSrgb8Alpha8Astc10x5 = 0x93D8,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x5Khr = 0x93D8,
        CompressedSrgb8Alpha8Astc10x6 = 0x93D9,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x6Khr = 0x93D9,
        CompressedSrgb8Alpha8Astc10x8 = 0x93DA,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x8Khr = 0x93DA,
        CompressedSrgb8Alpha8Astc10x10 = 0x93DB,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x10Khr = 0x93DB,
        CompressedSrgb8Alpha8Astc12x10 = 0x93DC,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc12x10Khr = 0x93DC,
        CompressedSrgb8Alpha8Astc12x12 = 0x93DD,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc12x12Khr = 0x93DD,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc3x3x3OES = 0x93E0,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc4x3x3OES = 0x93E1,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc4x4x3OES = 0x93E2,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc4x4x4OES = 0x93E3,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc5x4x4OES = 0x93E4,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc5x5x4OES = 0x93E5,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc5x5x5OES = 0x93E6,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc6x5x5OES = 0x93E7,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc6x6x5OES = 0x93E8,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc6x6x6OES = 0x93E9,
    }

    public enum DepthStencilTextureMode
    {

        [GLExtension("GL_ARB_texture_stencil8")]
        StencilIndex = 0x1901,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthComponent = 0x1902,
    }

    public enum CombinerComponentUsageNV
    {

        [GLExtension("GL_AMD_interleaved_elements")]
        Blue = 0x1905,

        [GLExtension("GL_AMD_interleaved_elements")]
        Alpha = 0x1906,
        Rgb = 0x1907,
    }

    public enum CombinerPortionNV
    {

        [GLExtension("GL_AMD_interleaved_elements")]
        Alpha = 0x1906,
        Rgb = 0x1907,
    }

    public enum PolygonMode
    {
        Point = 0x1B00,
        Line = 0x1B01,
        Fill = 0x1B02,
    }

    public enum MeshMode1
    {
        Point = 0x1B00,
        Line = 0x1B01,
    }

    public enum MeshMode2
    {
        Point = 0x1B00,
        Line = 0x1B01,
        Fill = 0x1B02,
    }

    public enum EvalMapsModeNV
    {

        [GLExtension("GL_NV_polygon_mode")]
        FillNV = 0x1B02,
    }

    public enum RenderingMode
    {
        Render = 0x1C00,
        Feedback = 0x1C01,
        Select = 0x1C02,
    }

    public enum ShadingModel
    {
        Flat = 0x1D00,
        Smooth = 0x1D01,
    }

    public enum StringName
    {
        Vendor = 0x1F00,
        Renderer = 0x1F01,
        Version = 0x1F02,
        Extensions = 0x1F03,
        ShadingLanguageVersion = 0x8B8C,
    }

    public enum TextureCoordName
    {
        S = 0x2000,
        T = 0x2001,
        R = 0x2002,
        Q = 0x2003,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureGenStrOES = 0x8D60,
    }

    public enum TextureEnvTarget
    {
        TextureEnv = 0x2300,
        TextureFilterControl = 0x8500,
        PointSprite = 0x8861,
    }

    public enum TextureGenMode
    {
        EyeLinear = 0x2400,
        ObjectLinear = 0x2401,
        SphereMap = 0x2402,

        [GLExtension("GL_SGIS_point_line_texgen")]
        EyeDistanceToPointSgis = 0x81F0,

        [GLExtension("GL_SGIS_point_line_texgen")]
        ObjectDistanceToPointSgis = 0x81F1,

        [GLExtension("GL_SGIS_point_line_texgen")]
        EyeDistanceToLineSgis = 0x81F2,

        [GLExtension("GL_SGIS_point_line_texgen")]
        ObjectDistanceToLineSgis = 0x81F3,
    }

    public enum TextureGenParameter
    {
        TextureGenMode = 0x2500,

        [GLExtension("GL_OES_texture_cube_map")]
        TextureGenModeOES = 0x2500,
        ObjectPlane = 0x2501,

        [GLExtension("GL_NV_fog_distance")]
        EyePlane = 0x2502,

        [GLExtension("GL_SGIS_point_line_texgen")]
        EyePointSgis = 0x81F4,

        [GLExtension("GL_SGIS_point_line_texgen")]
        ObjectPointSgis = 0x81F5,

        [GLExtension("GL_SGIS_point_line_texgen")]
        EyeLineSgis = 0x81F6,

        [GLExtension("GL_SGIS_point_line_texgen")]
        ObjectLineSgis = 0x81F7,
    }

    public enum BlitFramebufferFilter
    {
        Nearest = 0x2600,
        Linear = 0x2601,
    }

    public enum TextureMagFilter
    {
        Nearest = 0x2600,
        Linear = 0x2601,

        [GLExtension("GL_SGIS_detail_texture")]
        LinearDetailSgis = 0x8097,

        [GLExtension("GL_SGIS_detail_texture")]
        LinearDetailAlphaSgis = 0x8098,

        [GLExtension("GL_SGIS_detail_texture")]
        LinearDetailColorSgis = 0x8099,

        [GLExtension("GL_SGIS_sharpen_texture")]
        LinearSharpenSgis = 0x80AD,

        [GLExtension("GL_SGIS_sharpen_texture")]
        LinearSharpenAlphaSgis = 0x80AE,

        [GLExtension("GL_SGIS_sharpen_texture")]
        LinearSharpenColorSgis = 0x80AF,

        [GLExtension("GL_SGIS_texture_filter4")]
        Filter4Sgis = 0x8146,
        PixelTexGenQCeilingSGIX = 0x8184,
        PixelTexGenQRoundSGIX = 0x8185,
        PixelTexGenQFloorSGIX = 0x8186,
    }

    public enum TextureMinFilter
    {
        Nearest = 0x2600,
        Linear = 0x2601,
        NearestMipmapNearest = 0x2700,
        LinearMipmapNearest = 0x2701,
        NearestMipmapLinear = 0x2702,
        LinearMipmapLinear = 0x2703,

        [GLExtension("GL_SGIS_texture_filter4")]
        Filter4Sgis = 0x8146,

        [GLExtension("GL_SGIX_clipmap")]
        LinearClipmapLinearSGIX = 0x8170,
        PixelTexGenQCeilingSGIX = 0x8184,
        PixelTexGenQRoundSGIX = 0x8185,
        PixelTexGenQFloorSGIX = 0x8186,

        [GLExtension("GL_SGIX_clipmap")]
        NearestClipmapNearestSGIX = 0x844D,

        [GLExtension("GL_SGIX_clipmap")]
        NearestClipmapLinearSGIX = 0x844E,

        [GLExtension("GL_SGIX_clipmap")]
        LinearClipmapNearestSGIX = 0x844F,
    }

    public enum TextureWrapMode
    {
        LinearMipmapLinear = 0x2703,
        Clamp = 0x2900,
        Repeat = 0x2901,
        ClampToBorder = 0x812D,

        [GLExtension("GL_ARB_texture_border_clamp")]
        ClampToBorderARB = 0x812D,

        [GLExtension("GL_NV_texture_border_clamp")]
        ClampToBorderNV = 0x812D,

        [GLExtension("GL_SGIS_texture_border_clamp")]
        ClampToBorderSgis = 0x812D,
        ClampToEdge = 0x812F,

        [GLExtension("GL_SGIS_texture_edge_clamp")]
        ClampToEdgeSgis = 0x812F,
        MirroredRepeat = 0x8370,
    }

    public enum SamplerParameterI
    {
        TextureMagFilter = 0x2800,
        TextureMinFilter = 0x2801,
        TextureWrapS = 0x2802,
        TextureWrapT = 0x2803,
        TextureWrapR = 0x8072,
        TextureCompareMode = 0x884C,
        TextureCompareFunc = 0x884D,

        [GLExtension("GL_ARM_texture_unnormalized_coordinates")]
        TextureUnnormalizedCoordinatesArm = 0x8F6A,
    }

    public enum SizedInternalFormat
    {
        R3G3B2 = 0x2A10,
        Alpha4 = 0x803B,

        [GLExtension("GL_EXT_texture")]
        Alpha4EXT = 0x803B,
        Alpha8 = 0x803C,

        [GLExtension("GL_EXT_texture")]
        Alpha8EXT = 0x803C,

        [GLExtension("GL_OES_required_internalformat")]
        Alpha8OES = 0x803C,
        Alpha12 = 0x803D,

        [GLExtension("GL_EXT_texture")]
        Alpha12EXT = 0x803D,
        Alpha16 = 0x803E,

        [GLExtension("GL_EXT_texture")]
        Alpha16EXT = 0x803E,
        Luminance4 = 0x803F,

        [GLExtension("GL_EXT_texture")]
        Luminance4EXT = 0x803F,
        Luminance8 = 0x8040,

        [GLExtension("GL_EXT_texture")]
        Luminance8EXT = 0x8040,

        [GLExtension("GL_OES_required_internalformat")]
        Luminance8OES = 0x8040,
        Luminance12 = 0x8041,

        [GLExtension("GL_EXT_texture")]
        Luminance12EXT = 0x8041,
        Luminance16 = 0x8042,

        [GLExtension("GL_EXT_texture")]
        Luminance16EXT = 0x8042,
        Luminance4Alpha4 = 0x8043,

        [GLExtension("GL_EXT_texture")]
        Luminance4Alpha4EXT = 0x8043,

        [GLExtension("GL_OES_required_internalformat")]
        Luminance4Alpha4OES = 0x8043,
        Luminance6Alpha2 = 0x8044,

        [GLExtension("GL_EXT_texture")]
        Luminance6Alpha2EXT = 0x8044,
        Luminance8Alpha8 = 0x8045,

        [GLExtension("GL_EXT_texture")]
        Luminance8Alpha8EXT = 0x8045,

        [GLExtension("GL_OES_required_internalformat")]
        Luminance8Alpha8OES = 0x8045,
        Luminance12Alpha4 = 0x8046,

        [GLExtension("GL_EXT_texture")]
        Luminance12Alpha4EXT = 0x8046,
        Luminance12Alpha12 = 0x8047,

        [GLExtension("GL_EXT_texture")]
        Luminance12Alpha12EXT = 0x8047,
        Luminance16Alpha16 = 0x8048,

        [GLExtension("GL_EXT_texture")]
        Luminance16Alpha16EXT = 0x8048,
        Intensity4 = 0x804A,

        [GLExtension("GL_EXT_texture")]
        Intensity4EXT = 0x804A,
        Intensity8 = 0x804B,

        [GLExtension("GL_EXT_texture")]
        Intensity8EXT = 0x804B,
        Intensity12 = 0x804C,

        [GLExtension("GL_EXT_texture")]
        Intensity12EXT = 0x804C,
        Intensity16 = 0x804D,

        [GLExtension("GL_EXT_texture")]
        Intensity16EXT = 0x804D,

        [GLExtension("GL_EXT_texture")]
        Rgb2EXT = 0x804E,
        Rgb4 = 0x804F,

        [GLExtension("GL_EXT_texture")]
        Rgb4EXT = 0x804F,
        Rgb5 = 0x8050,

        [GLExtension("GL_EXT_texture")]
        Rgb5EXT = 0x8050,
        Rgb8 = 0x8051,

        [GLExtension("GL_EXT_texture")]
        Rgb8EXT = 0x8051,

        [GLExtension("GL_OES_required_internalformat")]
        Rgb8OES = 0x8051,
        Rgb10 = 0x8052,

        [GLExtension("GL_EXT_texture")]
        Rgb10EXT = 0x8052,
        Rgb12 = 0x8053,

        [GLExtension("GL_EXT_texture")]
        Rgb12EXT = 0x8053,
        Rgb16 = 0x8054,

        [GLExtension("GL_EXT_texture")]
        Rgb16EXT = 0x8054,
        Rgba2 = 0x8055,

        [GLExtension("GL_EXT_texture")]
        Rgba2EXT = 0x8055,
        Rgba4 = 0x8056,

        [GLExtension("GL_EXT_texture")]
        Rgba4EXT = 0x8056,

        [GLExtension("GL_OES_framebuffer_object")]
        Rgba4OES = 0x8056,
        Rgb5A1 = 0x8057,

        [GLExtension("GL_EXT_texture")]
        Rgb5A1EXT = 0x8057,

        [GLExtension("GL_OES_framebuffer_object")]
        Rgb5A1OES = 0x8057,
        Rgba8 = 0x8058,

        [GLExtension("GL_EXT_texture")]
        Rgba8EXT = 0x8058,

        [GLExtension("GL_OES_required_internalformat")]
        Rgba8OES = 0x8058,
        Rgb10A2 = 0x8059,

        [GLExtension("GL_EXT_texture")]
        Rgb10A2EXT = 0x8059,
        Rgba12 = 0x805A,

        [GLExtension("GL_EXT_texture")]
        Rgba12EXT = 0x805A,
        Rgba16 = 0x805B,

        [GLExtension("GL_EXT_texture")]
        Rgba16EXT = 0x805B,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthComponent16 = 0x81A5,

        [GLExtension("GL_ARB_depth_texture")]
        DepthComponent16ARB = 0x81A5,

        [GLExtension("GL_OES_framebuffer_object")]
        DepthComponent16OES = 0x81A5,

        [GLExtension("GL_SGIX_depth_texture")]
        DepthComponent16SGIX = 0x81A5,
        DepthComponent24 = 0x81A6,

        [GLExtension("GL_ARB_depth_texture")]
        DepthComponent24ARB = 0x81A6,

        [GLExtension("GL_OES_depth24")]
        DepthComponent24OES = 0x81A6,

        [GLExtension("GL_SGIX_depth_texture")]
        DepthComponent24SGIX = 0x81A6,
        DepthComponent32 = 0x81A7,

        [GLExtension("GL_ARB_depth_texture")]
        DepthComponent32ARB = 0x81A7,

        [GLExtension("GL_ANGLE_depth_texture")]
        DepthComponent32OES = 0x81A7,

        [GLExtension("GL_SGIX_depth_texture")]
        DepthComponent32SGIX = 0x81A7,

        [GLExtension("GL_ARB_texture_rg")]
        R8 = 0x8229,

        [GLExtension("GL_EXT_texture_rg")]
        R8EXT = 0x8229,

        [GLExtension("GL_ARB_texture_rg")]
        R16 = 0x822A,

        [GLExtension("GL_EXT_texture_norm16")]
        R16EXT = 0x822A,

        [GLExtension("GL_ARB_texture_rg")]
        Rg8 = 0x822B,

        [GLExtension("GL_EXT_texture_rg")]
        Rg8EXT = 0x822B,

        [GLExtension("GL_ARB_texture_rg")]
        Rg16 = 0x822C,

        [GLExtension("GL_EXT_texture_norm16")]
        Rg16EXT = 0x822C,

        [GLExtension("GL_ARB_texture_rg")]
        R16f = 0x822D,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        R16fEXT = 0x822D,

        [GLExtension("GL_ARB_texture_rg")]
        R32f = 0x822E,

        [GLExtension("GL_EXT_texture_storage")]
        R32fEXT = 0x822E,

        [GLExtension("GL_ARB_texture_rg")]
        Rg16f = 0x822F,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        Rg16fEXT = 0x822F,

        [GLExtension("GL_ARB_texture_rg")]
        Rg32f = 0x8230,

        [GLExtension("GL_EXT_texture_storage")]
        Rg32fEXT = 0x8230,

        [GLExtension("GL_ARB_texture_rg")]
        R8i = 0x8231,

        [GLExtension("GL_ARB_texture_rg")]
        R8ui = 0x8232,

        [GLExtension("GL_ARB_texture_rg")]
        R16i = 0x8233,

        [GLExtension("GL_ARB_texture_rg")]
        R16ui = 0x8234,

        [GLExtension("GL_ARB_texture_rg")]
        R32i = 0x8235,

        [GLExtension("GL_ARB_texture_rg")]
        R32ui = 0x8236,

        [GLExtension("GL_ARB_texture_rg")]
        Rg8i = 0x8237,

        [GLExtension("GL_AMD_interleaved_elements")]
        Rg8ui = 0x8238,

        [GLExtension("GL_ARB_texture_rg")]
        Rg16i = 0x8239,

        [GLExtension("GL_AMD_interleaved_elements")]
        Rg16ui = 0x823A,

        [GLExtension("GL_ARB_texture_rg")]
        Rg32i = 0x823B,

        [GLExtension("GL_ARB_texture_rg")]
        Rg32ui = 0x823C,

        [GLExtension("GL_EXT_texture_compression_dxt1")]
        CompressedRgbS3tcDxt1EXT = 0x83F0,

        [GLExtension("GL_EXT_texture_compression_dxt1")]
        CompressedRgbaS3tcDxt1EXT = 0x83F1,

        [GLExtension("GL_ANGLE_texture_compression_dxt3")]
        CompressedRgbaS3tcDxt3Angle = 0x83F2,

        [GLExtension("GL_EXT_texture_compression_s3tc")]
        CompressedRgbaS3tcDxt3EXT = 0x83F2,

        [GLExtension("GL_ANGLE_texture_compression_dxt5")]
        CompressedRgbaS3tcDxt5Angle = 0x83F3,

        [GLExtension("GL_EXT_texture_compression_s3tc")]
        CompressedRgbaS3tcDxt5EXT = 0x83F3,
        Rgba32f = 0x8814,

        [GLExtension("GL_ARB_texture_float")]
        Rgba32fARB = 0x8814,

        [GLExtension("GL_EXT_texture_storage")]
        Rgba32fEXT = 0x8814,

        [GLExtension("GL_ARB_texture_buffer_object_rgb32")]
        Rgb32f = 0x8815,

        [GLExtension("GL_ARB_texture_float")]
        Rgb32fARB = 0x8815,

        [GLExtension("GL_EXT_texture_storage")]
        Rgb32fEXT = 0x8815,
        Rgba16f = 0x881A,

        [GLExtension("GL_ARB_texture_float")]
        Rgba16fARB = 0x881A,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        Rgba16fEXT = 0x881A,
        Rgb16f = 0x881B,

        [GLExtension("GL_ARB_texture_float")]
        Rgb16fARB = 0x881B,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        Rgb16fEXT = 0x881B,

        [GLExtension("GL_ARB_framebuffer_object")]
        Depth24Stencil8 = 0x88F0,

        [GLExtension("GL_EXT_packed_depth_stencil")]
        Depth24Stencil8EXT = 0x88F0,

        [GLExtension("GL_ANGLE_depth_texture")]
        Depth24Stencil8OES = 0x88F0,
        R11fG11fB10f = 0x8C3A,

        [GLExtension("GL_APPLE_texture_packed_float")]
        R11fG11fB10fAPPLE = 0x8C3A,

        [GLExtension("GL_EXT_packed_float")]
        R11fG11fB10fEXT = 0x8C3A,
        Rgb9E5 = 0x8C3D,

        [GLExtension("GL_APPLE_texture_packed_float")]
        Rgb9E5APPLE = 0x8C3D,

        [GLExtension("GL_EXT_texture_shared_exponent")]
        Rgb9E5EXT = 0x8C3D,
        Srgb8 = 0x8C41,

        [GLExtension("GL_EXT_texture_sRGB")]
        Srgb8EXT = 0x8C41,

        [GLExtension("GL_NV_sRGB_formats")]
        Srgb8NV = 0x8C41,
        Srgb8Alpha8 = 0x8C43,

        [GLExtension("GL_EXT_sRGB")]
        Srgb8Alpha8EXT = 0x8C43,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbS3tcDxt1EXT = 0x8C4C,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbS3tcDxt1NV = 0x8C4C,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbAlphaS3tcDxt1EXT = 0x8C4D,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbAlphaS3tcDxt1NV = 0x8C4D,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbAlphaS3tcDxt3EXT = 0x8C4E,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbAlphaS3tcDxt3NV = 0x8C4E,

        [GLExtension("GL_EXT_texture_compression_s3tc_srgb")]
        CompressedSrgbAlphaS3tcDxt5EXT = 0x8C4F,

        [GLExtension("GL_NV_sRGB_formats")]
        CompressedSrgbAlphaS3tcDxt5NV = 0x8C4F,

        [GLExtension("GL_ARB_depth_buffer_float")]
        DepthComponent32f = 0x8CAC,

        [GLExtension("GL_ARB_depth_buffer_float")]
        Depth32fStencil8 = 0x8CAD,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex1 = 0x8D46,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex1EXT = 0x8D46,

        [GLExtension("GL_OES_stencil1")]
        StencilIndex1OES = 0x8D46,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex4 = 0x8D47,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex4EXT = 0x8D47,

        [GLExtension("GL_OES_stencil4")]
        StencilIndex4OES = 0x8D47,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex8 = 0x8D48,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex8EXT = 0x8D48,

        [GLExtension("GL_OES_stencil8")]
        StencilIndex8OES = 0x8D48,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilIndex16 = 0x8D49,

        [GLExtension("GL_EXT_framebuffer_object")]
        StencilIndex16EXT = 0x8D49,

        [GLExtension("GL_OES_framebuffer_object")]
        Rgb565OES = 0x8D62,

        [GLExtension("GL_ARB_ES2_compatibility")]
        Rgb565 = 0x8D62,

        [GLExtension("GL_OES_compressed_ETC1_RGB8_texture")]
        Etc1Rgb8OES = 0x8D64,
        Rgba32ui = 0x8D70,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba32uiEXT = 0x8D70,

        [GLExtension("GL_ARB_texture_buffer_object_rgb32")]
        Rgb32ui = 0x8D71,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb32uiEXT = 0x8D71,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha32uiEXT = 0x8D72,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity32uiEXT = 0x8D73,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance32uiEXT = 0x8D74,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha32uiEXT = 0x8D75,
        Rgba16ui = 0x8D76,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba16uiEXT = 0x8D76,
        Rgb16ui = 0x8D77,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb16uiEXT = 0x8D77,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha16uiEXT = 0x8D78,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity16uiEXT = 0x8D79,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance16uiEXT = 0x8D7A,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha16uiEXT = 0x8D7B,

        [GLExtension("GL_AMD_interleaved_elements")]
        Rgba8ui = 0x8D7C,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba8uiEXT = 0x8D7C,
        Rgb8ui = 0x8D7D,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb8uiEXT = 0x8D7D,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha8uiEXT = 0x8D7E,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity8uiEXT = 0x8D7F,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance8uiEXT = 0x8D80,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha8uiEXT = 0x8D81,
        Rgba32i = 0x8D82,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba32iEXT = 0x8D82,

        [GLExtension("GL_ARB_texture_buffer_object_rgb32")]
        Rgb32i = 0x8D83,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb32iEXT = 0x8D83,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha32iEXT = 0x8D84,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity32iEXT = 0x8D85,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance32iEXT = 0x8D86,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha32iEXT = 0x8D87,
        Rgba16i = 0x8D88,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba16iEXT = 0x8D88,
        Rgb16i = 0x8D89,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb16iEXT = 0x8D89,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha16iEXT = 0x8D8A,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity16iEXT = 0x8D8B,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance16iEXT = 0x8D8C,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha16iEXT = 0x8D8D,
        Rgba8i = 0x8D8E,

        [GLExtension("GL_EXT_texture_integer")]
        Rgba8iEXT = 0x8D8E,
        Rgb8i = 0x8D8F,

        [GLExtension("GL_EXT_texture_integer")]
        Rgb8iEXT = 0x8D8F,

        [GLExtension("GL_EXT_texture_integer")]
        Alpha8iEXT = 0x8D90,

        [GLExtension("GL_EXT_texture_integer")]
        Intensity8iEXT = 0x8D91,

        [GLExtension("GL_EXT_texture_integer")]
        Luminance8iEXT = 0x8D92,

        [GLExtension("GL_EXT_texture_integer")]
        LuminanceAlpha8iEXT = 0x8D93,

        [GLExtension("GL_NV_depth_buffer_float")]
        DepthComponent32fNV = 0x8DAB,

        [GLExtension("GL_NV_depth_buffer_float")]
        Depth32fStencil8NV = 0x8DAC,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedRedRgtc1 = 0x8DBB,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedRedRgtc1EXT = 0x8DBB,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedSignedRedRgtc1 = 0x8DBC,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedSignedRedRgtc1EXT = 0x8DBC,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedRedGreenRgtc2EXT = 0x8DBD,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedRgRgtc2 = 0x8DBD,

        [GLExtension("GL_EXT_texture_compression_rgtc")]
        CompressedSignedRedGreenRgtc2EXT = 0x8DBE,

        [GLExtension("GL_ARB_texture_compression_rgtc")]
        CompressedSignedRgRgtc2 = 0x8DBE,
        CompressedRgbaBptcUnorm = 0x8E8C,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedRgbaBptcUnormARB = 0x8E8C,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedRgbaBptcUnormEXT = 0x8E8C,
        CompressedSrgbAlphaBptcUnorm = 0x8E8D,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedSrgbAlphaBptcUnormARB = 0x8E8D,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedSrgbAlphaBptcUnormEXT = 0x8E8D,
        CompressedRgbBptcSignedFloat = 0x8E8E,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedRgbBptcSignedFloatARB = 0x8E8E,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedRgbBptcSignedFloatEXT = 0x8E8E,
        CompressedRgbBptcUnsignedFloat = 0x8E8F,

        [GLExtension("GL_ARB_texture_compression_bptc")]
        CompressedRgbBptcUnsignedFloatARB = 0x8E8F,

        [GLExtension("GL_EXT_texture_compression_bptc")]
        CompressedRgbBptcUnsignedFloatEXT = 0x8E8F,

        [GLExtension("GL_EXT_render_snorm")]
        R8Snorm = 0x8F94,

        [GLExtension("GL_EXT_render_snorm")]
        Rg8Snorm = 0x8F95,

        [GLExtension("GL_EXT_texture_snorm")]
        Rgb8Snorm = 0x8F96,

        [GLExtension("GL_EXT_render_snorm")]
        Rgba8Snorm = 0x8F97,

        [GLExtension("GL_EXT_texture_snorm")]
        R16Snorm = 0x8F98,

        [GLExtension("GL_EXT_render_snorm")]
        R16SnormEXT = 0x8F98,

        [GLExtension("GL_EXT_texture_snorm")]
        Rg16Snorm = 0x8F99,

        [GLExtension("GL_EXT_render_snorm")]
        Rg16SnormEXT = 0x8F99,

        [GLExtension("GL_EXT_texture_snorm")]
        Rgb16Snorm = 0x8F9A,

        [GLExtension("GL_EXT_texture_norm16")]
        Rgb16SnormEXT = 0x8F9A,

        [GLExtension("GL_EXT_texture_snorm")]
        Rgba16Snorm = 0x8F9B,

        [GLExtension("GL_EXT_render_snorm")]
        Rgba16SnormEXT = 0x8F9B,

        [GLExtension("GL_ARB_texture_rgb10_a2ui")]
        Rgb10A2ui = 0x906F,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedR11Eac = 0x9270,
        CompressedR11EacOES = 0x9270,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSignedR11Eac = 0x9271,
        CompressedSignedR11EacOES = 0x9271,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRg11Eac = 0x9272,
        CompressedRg11EacOES = 0x9272,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSignedRg11Eac = 0x9273,
        CompressedSignedRg11EacOES = 0x9273,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRgb8Etc2 = 0x9274,
        CompressedRgb8Etc2OES = 0x9274,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSrgb8Etc2 = 0x9275,
        CompressedSrgb8Etc2OES = 0x9275,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRgb8PunchthroughAlpha1Etc2 = 0x9276,
        CompressedRgb8PunchthroughAlpha1Etc2OES = 0x9276,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277,
        CompressedSrgb8PunchthroughAlpha1Etc2OES = 0x9277,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedRgba8Etc2Eac = 0x9278,
        CompressedRgba8Etc2EacOES = 0x9278,

        [GLExtension("GL_ARB_ES3_compatibility")]
        CompressedSrgb8Alpha8Etc2Eac = 0x9279,
        CompressedSrgb8Alpha8Etc2EacOES = 0x9279,
        CompressedRgbaAstc4x4 = 0x93B0,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc4x4Khr = 0x93B0,
        CompressedRgbaAstc5x4 = 0x93B1,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc5x4Khr = 0x93B1,
        CompressedRgbaAstc5x5 = 0x93B2,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc5x5Khr = 0x93B2,
        CompressedRgbaAstc6x5 = 0x93B3,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc6x5Khr = 0x93B3,
        CompressedRgbaAstc6x6 = 0x93B4,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc6x6Khr = 0x93B4,
        CompressedRgbaAstc8x5 = 0x93B5,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc8x5Khr = 0x93B5,
        CompressedRgbaAstc8x6 = 0x93B6,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc8x6Khr = 0x93B6,
        CompressedRgbaAstc8x8 = 0x93B7,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc8x8Khr = 0x93B7,
        CompressedRgbaAstc10x5 = 0x93B8,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x5Khr = 0x93B8,
        CompressedRgbaAstc10x6 = 0x93B9,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x6Khr = 0x93B9,
        CompressedRgbaAstc10x8 = 0x93BA,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x8Khr = 0x93BA,
        CompressedRgbaAstc10x10 = 0x93BB,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc10x10Khr = 0x93BB,
        CompressedRgbaAstc12x10 = 0x93BC,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc12x10Khr = 0x93BC,
        CompressedRgbaAstc12x12 = 0x93BD,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedRgbaAstc12x12Khr = 0x93BD,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc3x3x3OES = 0x93C0,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc4x3x3OES = 0x93C1,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc4x4x3OES = 0x93C2,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc4x4x4OES = 0x93C3,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc5x4x4OES = 0x93C4,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc5x5x4OES = 0x93C5,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc5x5x5OES = 0x93C6,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc6x5x5OES = 0x93C7,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc6x6x5OES = 0x93C8,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedRgbaAstc6x6x6OES = 0x93C9,
        CompressedSrgb8Alpha8Astc4x4 = 0x93D0,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc4x4Khr = 0x93D0,
        CompressedSrgb8Alpha8Astc5x4 = 0x93D1,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc5x4Khr = 0x93D1,
        CompressedSrgb8Alpha8Astc5x5 = 0x93D2,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc5x5Khr = 0x93D2,
        CompressedSrgb8Alpha8Astc6x5 = 0x93D3,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc6x5Khr = 0x93D3,
        CompressedSrgb8Alpha8Astc6x6 = 0x93D4,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc6x6Khr = 0x93D4,
        CompressedSrgb8Alpha8Astc8x5 = 0x93D5,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc8x5Khr = 0x93D5,
        CompressedSrgb8Alpha8Astc8x6 = 0x93D6,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc8x6Khr = 0x93D6,
        CompressedSrgb8Alpha8Astc8x8 = 0x93D7,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc8x8Khr = 0x93D7,
        CompressedSrgb8Alpha8Astc10x5 = 0x93D8,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x5Khr = 0x93D8,
        CompressedSrgb8Alpha8Astc10x6 = 0x93D9,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x6Khr = 0x93D9,
        CompressedSrgb8Alpha8Astc10x8 = 0x93DA,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x8Khr = 0x93DA,
        CompressedSrgb8Alpha8Astc10x10 = 0x93DB,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc10x10Khr = 0x93DB,
        CompressedSrgb8Alpha8Astc12x10 = 0x93DC,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc12x10Khr = 0x93DC,
        CompressedSrgb8Alpha8Astc12x12 = 0x93DD,

        [GLExtension("GL_KHR_texture_compression_astc_hdr")]
        CompressedSrgb8Alpha8Astc12x12Khr = 0x93DD,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc3x3x3OES = 0x93E0,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc4x3x3OES = 0x93E1,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc4x4x3OES = 0x93E2,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc4x4x4OES = 0x93E3,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc5x4x4OES = 0x93E4,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc5x5x4OES = 0x93E5,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc5x5x5OES = 0x93E6,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc6x5x5OES = 0x93E7,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc6x6x5OES = 0x93E8,

        [GLExtension("GL_OES_texture_compression_astc")]
        CompressedSrgb8Alpha8Astc6x6x6OES = 0x93E9,
    }

    public enum InterleavedArrayFormat
    {
        V2f = 0x2A20,
        V3f = 0x2A21,
        C4ubV2f = 0x2A22,
        C4ubV3f = 0x2A23,
        C3fV3f = 0x2A24,
        N3fV3f = 0x2A25,
        C4fN3fV3f = 0x2A26,
        T2fV3f = 0x2A27,
        T4fV4f = 0x2A28,
        T2fC4ubV3f = 0x2A29,
        T2fC3fV3f = 0x2A2A,
        T2fN3fV3f = 0x2A2B,
        T2fC4fN3fV3f = 0x2A2C,
        T4fC4fN3fV4f = 0x2A2D,
    }

    public enum ClipPlaneName
    {
        ClipPlane0 = 0x3000,
        ClipDistance0 = 0x3000,
        ClipPlane1 = 0x3001,
        ClipDistance1 = 0x3001,
        ClipPlane2 = 0x3002,
        ClipDistance2 = 0x3002,
        ClipPlane3 = 0x3003,
        ClipDistance3 = 0x3003,
        ClipPlane4 = 0x3004,
        ClipDistance4 = 0x3004,
        ClipPlane5 = 0x3005,
        ClipDistance5 = 0x3005,
        ClipDistance6 = 0x3006,
        ClipDistance7 = 0x3007,
    }

    public enum LightName
    {
        Light0 = 0x4000,
        Light1 = 0x4001,
        Light2 = 0x4002,
        Light3 = 0x4003,
        Light4 = 0x4004,
        Light5 = 0x4005,
        Light6 = 0x4006,
        Light7 = 0x4007,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight0SGIX = 0x840C,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight1SGIX = 0x840D,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight2SGIX = 0x840E,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight3SGIX = 0x840F,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight4SGIX = 0x8410,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight5SGIX = 0x8411,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight6SGIX = 0x8412,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight7SGIX = 0x8413,
    }

    public enum BlendEquationModeEXT
    {

        [GLExtension("GL_ARB_imaging")]
        FuncAdd = 0x8006,

        [GLExtension("GL_EXT_blend_minmax")]
        FuncAddEXT = 0x8006,

        [GLExtension("GL_ARB_imaging")]
        Min = 0x8007,

        [GLExtension("GL_EXT_blend_minmax")]
        MinEXT = 0x8007,

        [GLExtension("GL_ARB_imaging")]
        Max = 0x8008,

        [GLExtension("GL_EXT_blend_minmax")]
        MaxEXT = 0x8008,

        [GLExtension("GL_ARB_imaging")]
        FuncSubtract = 0x800A,

        [GLExtension("GL_EXT_blend_subtract")]
        FuncSubtractEXT = 0x800A,

        [GLExtension("GL_ARB_imaging")]
        FuncReverseSubtract = 0x800B,

        [GLExtension("GL_EXT_blend_subtract")]
        FuncReverseSubtractEXT = 0x800B,

        [GLExtension("GL_SGIX_blend_alpha_minmax")]
        AlphaMinSGIX = 0x8320,

        [GLExtension("GL_SGIX_blend_alpha_minmax")]
        AlphaMaxSGIX = 0x8321,
    }

    public enum ConvolutionTarget
    {

        [GLExtension("GL_ARB_imaging")]
        Convolution1D = 0x8010,

        [GLExtension("GL_ARB_imaging")]
        Convolution2D = 0x8011,
    }

    public enum ConvolutionTargetEXT
    {

        [GLExtension("GL_ARB_imaging")]
        Convolution1D = 0x8010,

        [GLExtension("GL_EXT_convolution")]
        Convolution1DEXT = 0x8010,

        [GLExtension("GL_ARB_imaging")]
        Convolution2D = 0x8011,

        [GLExtension("GL_EXT_convolution")]
        Convolution2DEXT = 0x8011,
    }

    public enum SeparableTarget
    {

        [GLExtension("GL_ARB_imaging")]
        Separable2D = 0x8012,
    }

    public enum SeparableTargetEXT
    {

        [GLExtension("GL_ARB_imaging")]
        Separable2D = 0x8012,

        [GLExtension("GL_EXT_convolution")]
        Separable2DEXT = 0x8012,
    }

    public enum ConvolutionParameter
    {

        [GLExtension("GL_ARB_imaging")]
        ConvolutionBorderMode = 0x8013,

        [GLExtension("GL_EXT_convolution")]
        ConvolutionBorderModeEXT = 0x8013,

        [GLExtension("GL_ARB_imaging")]
        ConvolutionFilterScale = 0x8014,

        [GLExtension("GL_EXT_convolution")]
        ConvolutionFilterScaleEXT = 0x8014,

        [GLExtension("GL_ARB_imaging")]
        ConvolutionFilterBias = 0x8015,

        [GLExtension("GL_EXT_convolution")]
        ConvolutionFilterBiasEXT = 0x8015,

        [GLExtension("GL_ARB_imaging")]
        ConvolutionFormat = 0x8017,

        [GLExtension("GL_EXT_convolution")]
        ConvolutionFormatEXT = 0x8017,

        [GLExtension("GL_ARB_imaging")]
        ConvolutionWidth = 0x8018,

        [GLExtension("GL_EXT_convolution")]
        ConvolutionWidthEXT = 0x8018,

        [GLExtension("GL_ARB_imaging")]
        ConvolutionHeight = 0x8019,

        [GLExtension("GL_EXT_convolution")]
        ConvolutionHeightEXT = 0x8019,

        [GLExtension("GL_ARB_imaging")]
        MaxConvolutionWidth = 0x801A,

        [GLExtension("GL_EXT_convolution")]
        MaxConvolutionWidthEXT = 0x801A,

        [GLExtension("GL_ARB_imaging")]
        MaxConvolutionHeight = 0x801B,

        [GLExtension("GL_EXT_convolution")]
        MaxConvolutionHeightEXT = 0x801B,

        [GLExtension("GL_ARB_imaging")]
        ConvolutionBorderColor = 0x8154,
    }

    public enum ConvolutionBorderModeEXT
    {

        [GLExtension("GL_ARB_imaging")]
        Reduce = 0x8016,

        [GLExtension("GL_EXT_convolution")]
        ReduceEXT = 0x8016,
    }

    public enum HistogramTarget
    {

        [GLExtension("GL_ARB_imaging")]
        Histogram = 0x8024,

        [GLExtension("GL_ARB_imaging")]
        ProxyHistogram = 0x8025,
    }

    public enum HistogramTargetEXT
    {

        [GLExtension("GL_ARB_imaging")]
        Histogram = 0x8024,

        [GLExtension("GL_EXT_histogram")]
        HistogramEXT = 0x8024,

        [GLExtension("GL_ARB_imaging")]
        ProxyHistogram = 0x8025,

        [GLExtension("GL_EXT_histogram")]
        ProxyHistogramEXT = 0x8025,
    }

    public enum GetHistogramParameterPNameEXT
    {

        [GLExtension("GL_ARB_imaging")]
        HistogramWidth = 0x8026,

        [GLExtension("GL_EXT_histogram")]
        HistogramWidthEXT = 0x8026,

        [GLExtension("GL_ARB_imaging")]
        HistogramFormat = 0x8027,

        [GLExtension("GL_EXT_histogram")]
        HistogramFormatEXT = 0x8027,

        [GLExtension("GL_ARB_imaging")]
        HistogramRedSize = 0x8028,

        [GLExtension("GL_EXT_histogram")]
        HistogramRedSizeEXT = 0x8028,

        [GLExtension("GL_ARB_imaging")]
        HistogramGreenSize = 0x8029,

        [GLExtension("GL_EXT_histogram")]
        HistogramGreenSizeEXT = 0x8029,

        [GLExtension("GL_ARB_imaging")]
        HistogramBlueSize = 0x802A,

        [GLExtension("GL_EXT_histogram")]
        HistogramBlueSizeEXT = 0x802A,

        [GLExtension("GL_ARB_imaging")]
        HistogramAlphaSize = 0x802B,

        [GLExtension("GL_EXT_histogram")]
        HistogramAlphaSizeEXT = 0x802B,

        [GLExtension("GL_ARB_imaging")]
        HistogramLuminanceSize = 0x802C,

        [GLExtension("GL_EXT_histogram")]
        HistogramLuminanceSizeEXT = 0x802C,

        [GLExtension("GL_ARB_imaging")]
        HistogramSink = 0x802D,

        [GLExtension("GL_EXT_histogram")]
        HistogramSinkEXT = 0x802D,
    }

    public enum MinmaxTarget
    {

        [GLExtension("GL_ARB_imaging")]
        Minmax = 0x802E,
    }

    public enum MinmaxTargetEXT
    {

        [GLExtension("GL_ARB_imaging")]
        Minmax = 0x802E,

        [GLExtension("GL_EXT_histogram")]
        MinmaxEXT = 0x802E,
    }

    public enum GetMinmaxParameterPNameEXT
    {

        [GLExtension("GL_ARB_imaging")]
        MinmaxFormat = 0x802F,

        [GLExtension("GL_EXT_histogram")]
        MinmaxFormatEXT = 0x802F,

        [GLExtension("GL_ARB_imaging")]
        MinmaxSink = 0x8030,

        [GLExtension("GL_EXT_histogram")]
        MinmaxSinkEXT = 0x8030,
    }

    public enum SamplePatternSGIS
    {

        [GLExtension("GL_EXT_multisample")]
        1passEXT = 0x80A1,

        [GLExtension("GL_SGIS_multisample")]
        1passSgis = 0x80A1,

        [GLExtension("GL_EXT_multisample")]
        2pass0EXT = 0x80A2,

        [GLExtension("GL_SGIS_multisample")]
        2pass0Sgis = 0x80A2,

        [GLExtension("GL_EXT_multisample")]
        2pass1EXT = 0x80A3,

        [GLExtension("GL_SGIS_multisample")]
        2pass1Sgis = 0x80A3,

        [GLExtension("GL_EXT_multisample")]
        4pass0EXT = 0x80A4,

        [GLExtension("GL_SGIS_multisample")]
        4pass0Sgis = 0x80A4,

        [GLExtension("GL_EXT_multisample")]
        4pass1EXT = 0x80A5,

        [GLExtension("GL_SGIS_multisample")]
        4pass1Sgis = 0x80A5,

        [GLExtension("GL_EXT_multisample")]
        4pass2EXT = 0x80A6,

        [GLExtension("GL_SGIS_multisample")]
        4pass2Sgis = 0x80A6,

        [GLExtension("GL_EXT_multisample")]
        4pass3EXT = 0x80A7,

        [GLExtension("GL_SGIS_multisample")]
        4pass3Sgis = 0x80A7,
    }

    public enum SamplePatternEXT
    {

        [GLExtension("GL_EXT_multisample")]
        1passEXT = 0x80A1,

        [GLExtension("GL_EXT_multisample")]
        2pass0EXT = 0x80A2,

        [GLExtension("GL_EXT_multisample")]
        2pass1EXT = 0x80A3,

        [GLExtension("GL_EXT_multisample")]
        4pass0EXT = 0x80A4,

        [GLExtension("GL_EXT_multisample")]
        4pass1EXT = 0x80A5,

        [GLExtension("GL_EXT_multisample")]
        4pass2EXT = 0x80A6,

        [GLExtension("GL_EXT_multisample")]
        4pass3EXT = 0x80A7,
    }

    public enum InternalFormatPName
    {

        [GLExtension("GL_ARB_internalformat_query2")]
        Samples = 0x80A9,
        GenerateMipmap = 0x8191,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatSupported = 0x826F,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatPreferred = 0x8270,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatRedSize = 0x8271,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatGreenSize = 0x8272,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatBlueSize = 0x8273,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatAlphaSize = 0x8274,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatDepthSize = 0x8275,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatStencilSize = 0x8276,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatSharedSize = 0x8277,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatRedType = 0x8278,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatGreenType = 0x8279,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatBlueType = 0x827A,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatAlphaType = 0x827B,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatDepthType = 0x827C,

        [GLExtension("GL_ARB_internalformat_query2")]
        InternalformatStencilType = 0x827D,

        [GLExtension("GL_ARB_internalformat_query2")]
        MaxWidth = 0x827E,

        [GLExtension("GL_ARB_internalformat_query2")]
        MaxHeight = 0x827F,

        [GLExtension("GL_ARB_internalformat_query2")]
        MaxDepth = 0x8280,

        [GLExtension("GL_ARB_internalformat_query2")]
        MaxLayers = 0x8281,

        [GLExtension("GL_ARB_internalformat_query2")]
        ColorComponents = 0x8283,

        [GLExtension("GL_ARB_internalformat_query2")]
        ColorRenderable = 0x8286,

        [GLExtension("GL_ARB_internalformat_query2")]
        DepthRenderable = 0x8287,

        [GLExtension("GL_ARB_internalformat_query2")]
        StencilRenderable = 0x8288,

        [GLExtension("GL_ARB_internalformat_query2")]
        FramebufferRenderable = 0x8289,

        [GLExtension("GL_ARB_internalformat_query2")]
        FramebufferRenderableLayered = 0x828A,

        [GLExtension("GL_ARB_internalformat_query2")]
        FramebufferBlend = 0x828B,

        [GLExtension("GL_ARB_internalformat_query2")]
        ReadPixels = 0x828C,

        [GLExtension("GL_ARB_internalformat_query2")]
        ReadPixelsFormat = 0x828D,

        [GLExtension("GL_ARB_internalformat_query2")]
        ReadPixelsType = 0x828E,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureImageFormat = 0x828F,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureImageType = 0x8290,

        [GLExtension("GL_ARB_internalformat_query2")]
        GetTextureImageFormat = 0x8291,

        [GLExtension("GL_ARB_internalformat_query2")]
        GetTextureImageType = 0x8292,

        [GLExtension("GL_ARB_internalformat_query2")]
        Mipmap = 0x8293,

        [GLExtension("GL_ARB_internalformat_query2")]
        AutoGenerateMipmap = 0x8295,

        [GLExtension("GL_ARB_internalformat_query2")]
        ColorEncoding = 0x8296,

        [GLExtension("GL_ARB_internalformat_query2")]
        SrgbRead = 0x8297,

        [GLExtension("GL_ARB_internalformat_query2")]
        SrgbWrite = 0x8298,

        [GLExtension("GL_ARB_internalformat_query2")]
        Filter = 0x829A,

        [GLExtension("GL_ARB_internalformat_query2")]
        VertexTexture = 0x829B,

        [GLExtension("GL_ARB_internalformat_query2")]
        TessControlTexture = 0x829C,

        [GLExtension("GL_ARB_internalformat_query2")]
        TessEvaluationTexture = 0x829D,

        [GLExtension("GL_ARB_internalformat_query2")]
        GeometryTexture = 0x829E,

        [GLExtension("GL_ARB_internalformat_query2")]
        FragmentTexture = 0x829F,

        [GLExtension("GL_ARB_internalformat_query2")]
        ComputeTexture = 0x82A0,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureShadow = 0x82A1,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureGather = 0x82A2,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureGatherShadow = 0x82A3,

        [GLExtension("GL_ARB_internalformat_query2")]
        ShaderImageLoad = 0x82A4,

        [GLExtension("GL_ARB_internalformat_query2")]
        ShaderImageStore = 0x82A5,

        [GLExtension("GL_ARB_internalformat_query2")]
        ShaderImageAtomic = 0x82A6,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageTexelSize = 0x82A7,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageCompatibilityClass = 0x82A8,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImagePixelFormat = 0x82A9,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImagePixelType = 0x82AA,

        [GLExtension("GL_ARB_internalformat_query2")]
        SimultaneousTextureAndDepthTest = 0x82AC,

        [GLExtension("GL_ARB_internalformat_query2")]
        SimultaneousTextureAndStencilTest = 0x82AD,

        [GLExtension("GL_ARB_internalformat_query2")]
        SimultaneousTextureAndDepthWrite = 0x82AE,

        [GLExtension("GL_ARB_internalformat_query2")]
        SimultaneousTextureAndStencilWrite = 0x82AF,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCompressedBlockWidth = 0x82B1,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCompressedBlockHeight = 0x82B2,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCompressedBlockSize = 0x82B3,

        [GLExtension("GL_ARB_internalformat_query2")]
        ClearBuffer = 0x82B4,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureView = 0x82B5,

        [GLExtension("GL_ARB_internalformat_query2")]
        ViewCompatibilityClass = 0x82B6,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureCompressed = 0x86A1,

        [GLExtension("GL_EXT_texture_storage_compression")]
        NumSurfaceCompressionFixedRatesEXT = 0x8F6E,

        [GLExtension("GL_ARB_internalformat_query2")]
        ImageFormatCompatibilityType = 0x90C7,

        [GLExtension("GL_ARB_clear_texture")]
        ClearTexture = 0x9365,

        [GLExtension("GL_ARB_internalformat_query")]
        NumSampleCounts = 0x9380,
    }

    public enum ColorTableTargetSGI
    {

        [GLExtension("GL_SGI_texture_color_table")]
        TextureColorTableSgi = 0x80BC,

        [GLExtension("GL_SGI_texture_color_table")]
        ProxyTextureColorTableSgi = 0x80BD,

        [GLExtension("GL_ARB_imaging")]
        ColorTable = 0x80D0,

        [GLExtension("GL_SGI_color_table")]
        ColorTableSgi = 0x80D0,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionColorTable = 0x80D1,

        [GLExtension("GL_SGI_color_table")]
        PostConvolutionColorTableSgi = 0x80D1,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixColorTable = 0x80D2,

        [GLExtension("GL_SGI_color_table")]
        PostColorMatrixColorTableSgi = 0x80D2,

        [GLExtension("GL_ARB_imaging")]
        ProxyColorTable = 0x80D3,

        [GLExtension("GL_SGI_color_table")]
        ProxyColorTableSgi = 0x80D3,

        [GLExtension("GL_ARB_imaging")]
        ProxyPostConvolutionColorTable = 0x80D4,

        [GLExtension("GL_SGI_color_table")]
        ProxyPostConvolutionColorTableSgi = 0x80D4,

        [GLExtension("GL_ARB_imaging")]
        ProxyPostColorMatrixColorTable = 0x80D5,

        [GLExtension("GL_SGI_color_table")]
        ProxyPostColorMatrixColorTableSgi = 0x80D5,
    }

    public enum ColorTableTarget
    {

        [GLExtension("GL_ARB_imaging")]
        ColorTable = 0x80D0,

        [GLExtension("GL_ARB_imaging")]
        PostConvolutionColorTable = 0x80D1,

        [GLExtension("GL_ARB_imaging")]
        PostColorMatrixColorTable = 0x80D2,

        [GLExtension("GL_ARB_imaging")]
        ProxyColorTable = 0x80D3,

        [GLExtension("GL_ARB_imaging")]
        ProxyPostConvolutionColorTable = 0x80D4,

        [GLExtension("GL_ARB_imaging")]
        ProxyPostColorMatrixColorTable = 0x80D5,
    }

    public enum ColorTableParameterPName
    {

        [GLExtension("GL_ARB_imaging")]
        ColorTableScale = 0x80D6,

        [GLExtension("GL_SGI_color_table")]
        ColorTableScaleSgi = 0x80D6,

        [GLExtension("GL_ARB_imaging")]
        ColorTableBias = 0x80D7,

        [GLExtension("GL_SGI_color_table")]
        ColorTableBiasSgi = 0x80D7,

        [GLExtension("GL_ARB_imaging")]
        ColorTableFormat = 0x80D8,

        [GLExtension("GL_SGI_color_table")]
        ColorTableFormatSgi = 0x80D8,

        [GLExtension("GL_ARB_imaging")]
        ColorTableWidth = 0x80D9,

        [GLExtension("GL_SGI_color_table")]
        ColorTableWidthSgi = 0x80D9,

        [GLExtension("GL_ARB_imaging")]
        ColorTableRedSize = 0x80DA,

        [GLExtension("GL_SGI_color_table")]
        ColorTableRedSizeSgi = 0x80DA,

        [GLExtension("GL_ARB_imaging")]
        ColorTableGreenSize = 0x80DB,

        [GLExtension("GL_SGI_color_table")]
        ColorTableGreenSizeSgi = 0x80DB,

        [GLExtension("GL_ARB_imaging")]
        ColorTableBlueSize = 0x80DC,

        [GLExtension("GL_SGI_color_table")]
        ColorTableBlueSizeSgi = 0x80DC,

        [GLExtension("GL_ARB_imaging")]
        ColorTableAlphaSize = 0x80DD,

        [GLExtension("GL_SGI_color_table")]
        ColorTableAlphaSizeSgi = 0x80DD,

        [GLExtension("GL_ARB_imaging")]
        ColorTableLuminanceSize = 0x80DE,

        [GLExtension("GL_SGI_color_table")]
        ColorTableLuminanceSizeSgi = 0x80DE,

        [GLExtension("GL_ARB_imaging")]
        ColorTableIntensitySize = 0x80DF,

        [GLExtension("GL_SGI_color_table")]
        ColorTableIntensitySizeSgi = 0x80DF,
    }

    public enum BufferTargetARB
    {
        ParameterBuffer = 0x80EE,
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBuffer = 0x8A11,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureBuffer = 0x8C2A,

        [GLExtension("GL_ARB_enhanced_layouts")]
        TransformFeedbackBuffer = 0x8C8E,

        [GLExtension("GL_ARB_copy_buffer")]
        CopyReadBuffer = 0x8F36,

        [GLExtension("GL_ARB_copy_buffer")]
        CopyWriteBuffer = 0x8F37,

        [GLExtension("GL_ARB_draw_indirect")]
        DrawIndirectBuffer = 0x8F3F,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBuffer = 0x90D2,

        [GLExtension("GL_ARB_compute_shader")]
        DispatchIndirectBuffer = 0x90EE,

        [GLExtension("GL_ARB_query_buffer_object")]
        QueryBuffer = 0x9192,

        [GLExtension("GL_ARB_program_interface_query")]
        AtomicCounterBuffer = 0x92C0,
    }

    public enum PointParameterNameARB
    {
        PointSizeMin = 0x8126,

        [GLExtension("GL_ARB_point_parameters")]
        PointSizeMinARB = 0x8126,

        [GLExtension("GL_EXT_point_parameters")]
        PointSizeMinEXT = 0x8126,

        [GLExtension("GL_SGIS_point_parameters")]
        PointSizeMinSgis = 0x8126,
        PointSizeMax = 0x8127,

        [GLExtension("GL_ARB_point_parameters")]
        PointSizeMaxARB = 0x8127,

        [GLExtension("GL_EXT_point_parameters")]
        PointSizeMaxEXT = 0x8127,

        [GLExtension("GL_SGIS_point_parameters")]
        PointSizeMaxSgis = 0x8127,
        PointFadeThresholdSize = 0x8128,

        [GLExtension("GL_ARB_point_parameters")]
        PointFadeThresholdSizeARB = 0x8128,

        [GLExtension("GL_EXT_point_parameters")]
        PointFadeThresholdSizeEXT = 0x8128,

        [GLExtension("GL_SGIS_point_parameters")]
        PointFadeThresholdSizeSgis = 0x8128,

        [GLExtension("GL_EXT_point_parameters")]
        DistanceAttenuationEXT = 0x8129,

        [GLExtension("GL_SGIS_point_parameters")]
        DistanceAttenuationSgis = 0x8129,
        PointDistanceAttenuation = 0x8129,

        [GLExtension("GL_ARB_point_parameters")]
        PointDistanceAttenuationARB = 0x8129,
    }

    public enum TextureFilterSGIS
    {

        [GLExtension("GL_SGIS_texture_filter4")]
        Filter4Sgis = 0x8146,
    }

    public enum SpriteParameterNameSGIX
    {

        [GLExtension("GL_SGIX_sprite")]
        SpriteModeSGIX = 0x8149,
    }

    public enum SpriteModeSGIX
    {

        [GLExtension("GL_SGIX_sprite")]
        SpriteAxialSGIX = 0x814C,

        [GLExtension("GL_SGIX_sprite")]
        SpriteObjectAlignedSGIX = 0x814D,

        [GLExtension("GL_SGIX_sprite")]
        SpriteEyeAlignedSGIX = 0x814E,
    }

    public enum ImageTransformPNameHP
    {

        [GLExtension("GL_HP_image_transform")]
        ImageScaleXHp = 0x8155,

        [GLExtension("GL_HP_image_transform")]
        ImageScaleYHp = 0x8156,

        [GLExtension("GL_HP_image_transform")]
        ImageTranslateXHp = 0x8157,

        [GLExtension("GL_HP_image_transform")]
        ImageTranslateYHp = 0x8158,

        [GLExtension("GL_HP_image_transform")]
        ImageRotateAngleHp = 0x8159,

        [GLExtension("GL_HP_image_transform")]
        ImageRotateOriginXHp = 0x815A,

        [GLExtension("GL_HP_image_transform")]
        ImageRotateOriginYHp = 0x815B,

        [GLExtension("GL_HP_image_transform")]
        ImageMagFilterHp = 0x815C,

        [GLExtension("GL_HP_image_transform")]
        ImageMinFilterHp = 0x815D,

        [GLExtension("GL_HP_image_transform")]
        ImageCubicWeightHp = 0x815E,
    }

    public enum ImageTransformTargetHP
    {

        [GLExtension("GL_HP_image_transform")]
        ImageTransform2DHp = 0x8161,
    }

    public enum ListParameterName
    {

        [GLExtension("GL_SGIX_list_priority")]
        ListPrioritySGIX = 0x8182,
    }

    public enum FfdTargetSGIX
    {

        [GLExtension("GL_SGIX_polynomial_ffd")]
        GeometryDeformationSGIX = 0x8194,

        [GLExtension("GL_SGIX_polynomial_ffd")]
        TextureDeformationSGIX = 0x8195,
    }

    public enum CullParameterEXT
    {

        [GLExtension("GL_EXT_cull_vertex")]
        CullVertexEyePositionEXT = 0x81AB,

        [GLExtension("GL_EXT_cull_vertex")]
        CullVertexObjectPositionEXT = 0x81AC,
    }

    public enum LightModelColorControl
    {
        SingleColor = 0x81F9,

        [GLExtension("GL_EXT_separate_specular_color")]
        SingleColorEXT = 0x81F9,
        SeparateSpecularColor = 0x81FA,

        [GLExtension("GL_EXT_separate_specular_color")]
        SeparateSpecularColorEXT = 0x81FA,
    }

    public enum ProgramTarget
    {

        [GLExtension("GL_ATI_text_fragment_shader")]
        TextFragmentShaderATI = 0x8200,

        [GLExtension("GL_ARB_vertex_program")]
        VertexProgramARB = 0x8620,

        [GLExtension("GL_ARB_fragment_program")]
        FragmentProgramARB = 0x8804,

        [GLExtension("GL_NV_tessellation_program5")]
        TessControlProgramNV = 0x891E,

        [GLExtension("GL_NV_tessellation_program5")]
        TessEvaluationProgramNV = 0x891F,

        [GLExtension("GL_NV_geometry_program4")]
        GeometryProgramNV = 0x8C26,

        [GLExtension("GL_NV_compute_program5")]
        ComputeProgramNV = 0x90FB,
    }

    public enum FramebufferAttachmentParameterName
    {

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentColorEncoding = 0x8210,

        [GLExtension("GL_EXT_sRGB")]
        FramebufferAttachmentColorEncodingEXT = 0x8210,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentComponentType = 0x8211,

        [GLExtension("GL_EXT_color_buffer_half_float")]
        FramebufferAttachmentComponentTypeEXT = 0x8211,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentRedSize = 0x8212,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentGreenSize = 0x8213,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentBlueSize = 0x8214,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentAlphaSize = 0x8215,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentDepthSize = 0x8216,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentStencilSize = 0x8217,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentObjectType = 0x8CD0,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferAttachmentObjectTypeEXT = 0x8CD0,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferAttachmentObjectTypeOES = 0x8CD0,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentObjectName = 0x8CD1,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferAttachmentObjectNameEXT = 0x8CD1,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferAttachmentObjectNameOES = 0x8CD1,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentTextureLevel = 0x8CD2,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferAttachmentTextureLevelEXT = 0x8CD2,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferAttachmentTextureLevelOES = 0x8CD2,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentTextureCubeMapFace = 0x8CD3,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferAttachmentTextureCubeMapFaceEXT = 0x8CD3,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferAttachmentTextureCubeMapFaceOES = 0x8CD3,

        [GLExtension("GL_EXT_framebuffer_object")]
        FramebufferAttachmentTexture3DZoffsetEXT = 0x8CD4,

        [GLExtension("GL_OES_texture_3D")]
        FramebufferAttachmentTexture3DZoffsetOES = 0x8CD4,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferAttachmentTextureLayer = 0x8CD4,

        [GLExtension("GL_EXT_geometry_shader4")]
        FramebufferAttachmentTextureLayerEXT = 0x8CD4,

        [GLExtension("GL_EXT_multisampled_render_to_texture")]
        FramebufferAttachmentTextureSamplesEXT = 0x8D6C,
        FramebufferAttachmentLayered = 0x8DA7,

        [GLExtension("GL_ARB_geometry_shader4")]
        FramebufferAttachmentLayeredARB = 0x8DA7,

        [GLExtension("GL_EXT_geometry_shader")]
        FramebufferAttachmentLayeredEXT = 0x8DA7,

        [GLExtension("GL_OES_geometry_shader")]
        FramebufferAttachmentLayeredOES = 0x8DA7,

        [GLExtension("GL_IMG_framebuffer_downsample")]
        FramebufferAttachmentTextureScaleImg = 0x913F,

        [GLExtension("GL_OVR_multiview")]
        FramebufferAttachmentTextureNumViewsOvr = 0x9630,

        [GLExtension("GL_OVR_multiview")]
        FramebufferAttachmentTextureBaseViewIndexOvr = 0x9632,
    }

    public enum FramebufferStatus
    {

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferUndefined = 0x8219,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferComplete = 0x8CD5,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferIncompleteAttachment = 0x8CD6,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferIncompleteMissingAttachment = 0x8CD7,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferIncompleteDrawBuffer = 0x8CDB,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferIncompleteReadBuffer = 0x8CDC,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferUnsupported = 0x8CDD,

        [GLExtension("GL_ARB_framebuffer_object")]
        FramebufferIncompleteMultisample = 0x8D56,
        FramebufferIncompleteLayerTargets = 0x8DA8,
    }

    public enum FramebufferAttachment
    {

        [GLExtension("GL_ARB_framebuffer_object")]
        DepthStencilAttachment = 0x821A,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment0 = 0x8CE0,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment1 = 0x8CE1,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment2 = 0x8CE2,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment3 = 0x8CE3,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment4 = 0x8CE4,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment5 = 0x8CE5,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment6 = 0x8CE6,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment7 = 0x8CE7,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment8 = 0x8CE8,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment9 = 0x8CE9,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment10 = 0x8CEA,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment11 = 0x8CEB,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment12 = 0x8CEC,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment13 = 0x8CED,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment14 = 0x8CEE,

        [GLExtension("GL_ARB_framebuffer_object")]
        ColorAttachment15 = 0x8CEF,
        ColorAttachment16 = 0x8CF0,
        ColorAttachment17 = 0x8CF1,
        ColorAttachment18 = 0x8CF2,
        ColorAttachment19 = 0x8CF3,
        ColorAttachment20 = 0x8CF4,
        ColorAttachment21 = 0x8CF5,
        ColorAttachment22 = 0x8CF6,
        ColorAttachment23 = 0x8CF7,
        ColorAttachment24 = 0x8CF8,
        ColorAttachment25 = 0x8CF9,
        ColorAttachment26 = 0x8CFA,
        ColorAttachment27 = 0x8CFB,
        ColorAttachment28 = 0x8CFC,
        ColorAttachment29 = 0x8CFD,
        ColorAttachment30 = 0x8CFE,
        ColorAttachment31 = 0x8CFF,

        [GLExtension("GL_ARB_framebuffer_object")]
        DepthAttachment = 0x8D00,

        [GLExtension("GL_ARB_framebuffer_object")]
        StencilAttachment = 0x8D20,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRateAttachmentEXT = 0x96D1,
    }

    public enum BufferPNameARB
    {

        [GLExtension("GL_ARB_buffer_storage")]
        BufferImmutableStorage = 0x821F,

        [GLExtension("GL_ARB_buffer_storage")]
        BufferStorageFlags = 0x8220,
        BufferSize = 0x8764,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        BufferSizeARB = 0x8764,
        BufferUsage = 0x8765,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        BufferUsageARB = 0x8765,
        BufferAccess = 0x88BB,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        BufferAccessARB = 0x88BB,
        BufferMapped = 0x88BC,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        BufferMappedARB = 0x88BC,
        BufferAccessFlags = 0x911F,
        BufferMapLength = 0x9120,
        BufferMapOffset = 0x9121,
    }

    public enum ProgramParameterPName
    {

        [GLExtension("GL_ARB_get_program_binary")]
        ProgramBinaryRetrievableHint = 0x8257,

        [GLExtension("GL_ARB_separate_shader_objects")]
        ProgramSeparable = 0x8258,
    }

    public enum PipelineParameterName
    {

        [GLExtension("GL_ARB_separate_shader_objects")]
        ActiveProgram = 0x8259,
        FragmentShader = 0x8B30,
        VertexShader = 0x8B31,
        InfoLogLength = 0x8B84,
        GeometryShader = 0x8DD9,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessEvaluationShader = 0x8E87,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessControlShader = 0x8E88,
    }

    public enum ProgramPropertyARB
    {

        [GLExtension("GL_ARB_compute_shader")]
        ComputeWorkGroupSize = 0x8267,

        [GLExtension("GL_ARB_get_program_binary")]
        ProgramBinaryLength = 0x8741,
        GeometryVerticesOut = 0x8916,
        GeometryInputType = 0x8917,
        GeometryOutputType = 0x8918,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        ActiveUniformBlockMaxNameLength = 0x8A35,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        ActiveUniformBlocks = 0x8A36,
        DeleteStatus = 0x8B80,
        LinkStatus = 0x8B82,
        ValidateStatus = 0x8B83,
        InfoLogLength = 0x8B84,
        AttachedShaders = 0x8B85,
        ActiveUniforms = 0x8B86,
        ActiveUniformMaxLength = 0x8B87,
        ActiveAttributes = 0x8B89,
        ActiveAttributeMaxLength = 0x8B8A,
        TransformFeedbackVaryingMaxLength = 0x8C76,
        TransformFeedbackBufferMode = 0x8C7F,
        TransformFeedbackVaryings = 0x8C83,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        ActiveAtomicCounterBuffers = 0x92D9,
    }

    public enum VertexAttribPropertyARB
    {

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        VertexAttribBinding = 0x82D4,

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        VertexAttribRelativeOffset = 0x82D5,
        VertexAttribArrayEnabled = 0x8622,
        VertexAttribArraySize = 0x8623,
        VertexAttribArrayStride = 0x8624,
        VertexAttribArrayType = 0x8625,
        CurrentVertexAttrib = 0x8626,
        VertexAttribArrayLong = 0x874E,
        VertexAttribArrayNormalized = 0x886A,
        VertexAttribArrayBufferBinding = 0x889F,
        VertexAttribArrayInteger = 0x88FD,

        [GLExtension("GL_EXT_gpu_shader4")]
        VertexAttribArrayIntegerEXT = 0x88FD,
        VertexAttribArrayDivisor = 0x88FE,
    }

    public enum VertexArrayPName
    {

        [GLExtension("GL_ARB_vertex_attrib_binding")]
        VertexAttribRelativeOffset = 0x82D5,
        VertexAttribArrayEnabled = 0x8622,
        VertexAttribArraySize = 0x8623,
        VertexAttribArrayStride = 0x8624,
        VertexAttribArrayType = 0x8625,
        VertexAttribArrayLong = 0x874E,
        VertexAttribArrayNormalized = 0x886A,
        VertexAttribArrayInteger = 0x88FD,
        VertexAttribArrayDivisor = 0x88FE,
    }

    public enum QueryObjectParameterName
    {

        [GLExtension("GL_ARB_direct_state_access")]
        QueryTarget = 0x82EA,
        QueryResult = 0x8866,
        QueryResultAvailable = 0x8867,

        [GLExtension("GL_ARB_query_buffer_object")]
        QueryResultNoWait = 0x9194,
    }

    public enum QueryTarget
    {
        TransformFeedbackOverflow = 0x82EC,
        VerticesSubmitted = 0x82EE,
        PrimitivesSubmitted = 0x82EF,
        VertexShaderInvocations = 0x82F0,

        [GLExtension("GL_ARB_timer_query")]
        TimeElapsed = 0x88BF,
        SamplesPassed = 0x8914,

        [GLExtension("GL_ARB_occlusion_query2")]
        AnySamplesPassed = 0x8C2F,
        PrimitivesGenerated = 0x8C87,
        TransformFeedbackPrimitivesWritten = 0x8C88,

        [GLExtension("GL_ARB_ES3_compatibility")]
        AnySamplesPassedConservative = 0x8D6A,
    }

    public enum PixelTransformTargetEXT
    {

        [GLExtension("GL_EXT_pixel_transform")]
        PixelTransform2DEXT = 0x8330,
    }

    public enum PixelTransformPNameEXT
    {

        [GLExtension("GL_EXT_pixel_transform")]
        PixelMagFilterEXT = 0x8331,

        [GLExtension("GL_EXT_pixel_transform")]
        PixelMinFilterEXT = 0x8332,

        [GLExtension("GL_EXT_pixel_transform")]
        PixelCubicWeightEXT = 0x8333,
    }

    public enum LightTextureModeEXT
    {

        [GLExtension("GL_EXT_light_texture")]
        FragmentMaterialEXT = 0x8349,

        [GLExtension("GL_EXT_light_texture")]
        FragmentNormalEXT = 0x834A,

        [GLExtension("GL_EXT_light_texture")]
        FragmentColorEXT = 0x834C,
        FragmentDepth = 0x8452,

        [GLExtension("GL_EXT_fog_coord")]
        FragmentDepthEXT = 0x8452,
    }

    public enum LightTexturePNameEXT
    {

        [GLExtension("GL_EXT_light_texture")]
        AttenuationEXT = 0x834D,

        [GLExtension("GL_EXT_light_texture")]
        ShadowAttenuationEXT = 0x834E,
    }

    public enum PixelTexGenParameterNameSGIS
    {

        [GLExtension("GL_SGIS_pixel_texture")]
        PixelFragmentRgbSourceSgis = 0x8354,

        [GLExtension("GL_SGIS_pixel_texture")]
        PixelFragmentAlphaSourceSgis = 0x8355,
    }

    public enum LightEnvParameterSGIX
    {

        [GLExtension("GL_SGIX_fragment_lighting")]
        LightEnvModeSGIX = 0x8407,
    }

    public enum FragmentLightModelParameterSGIX
    {

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelLocalViewerSGIX = 0x8408,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelTwoSideSGIX = 0x8409,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelAmbientSGIX = 0x840A,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLightModelNormalInterpolationSGIX = 0x840B,
    }

    public enum FragmentLightNameSGIX
    {

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight0SGIX = 0x840C,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight1SGIX = 0x840D,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight2SGIX = 0x840E,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight3SGIX = 0x840F,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight4SGIX = 0x8410,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight5SGIX = 0x8411,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight6SGIX = 0x8412,

        [GLExtension("GL_SGIX_fragment_lighting")]
        FragmentLight7SGIX = 0x8413,
    }

    public enum PixelStoreResampleMode
    {

        [GLExtension("GL_SGIX_resample")]
        ResampleDecimateSGIX = 0x8430,

        [GLExtension("GL_SGIX_resample")]
        ResampleReplicateSGIX = 0x8433,

        [GLExtension("GL_SGIX_resample")]
        ResampleZeroFillSGIX = 0x8434,
    }

    public enum FogCoordSrc
    {
        FogCoordinate = 0x8451,

        [GLExtension("GL_EXT_fog_coord")]
        FogCoordinateEXT = 0x8451,
        FogCoord = 0x8451,
        FragmentDepth = 0x8452,

        [GLExtension("GL_EXT_fog_coord")]
        FragmentDepthEXT = 0x8452,
    }

    public enum TextureUnit
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,
    }

    public enum FragmentShaderTextureSourceATI
    {
        Texture0 = 0x84C0,
        Texture1 = 0x84C1,
        Texture2 = 0x84C2,
        Texture3 = 0x84C3,
        Texture4 = 0x84C4,
        Texture5 = 0x84C5,
        Texture6 = 0x84C6,
        Texture7 = 0x84C7,
        Texture8 = 0x84C8,
        Texture9 = 0x84C9,
        Texture10 = 0x84CA,
        Texture11 = 0x84CB,
        Texture12 = 0x84CC,
        Texture13 = 0x84CD,
        Texture14 = 0x84CE,
        Texture15 = 0x84CF,
        Texture16 = 0x84D0,
        Texture17 = 0x84D1,
        Texture18 = 0x84D2,
        Texture19 = 0x84D3,
        Texture20 = 0x84D4,
        Texture21 = 0x84D5,
        Texture22 = 0x84D6,
        Texture23 = 0x84D7,
        Texture24 = 0x84D8,
        Texture25 = 0x84D9,
        Texture26 = 0x84DA,
        Texture27 = 0x84DB,
        Texture28 = 0x84DC,
        Texture29 = 0x84DD,
        Texture30 = 0x84DE,
        Texture31 = 0x84DF,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg0ATI = 0x8921,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg1ATI = 0x8922,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg2ATI = 0x8923,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg3ATI = 0x8924,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg4ATI = 0x8925,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg5ATI = 0x8926,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg6ATI = 0x8927,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg7ATI = 0x8928,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg8ATI = 0x8929,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg9ATI = 0x892A,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg10ATI = 0x892B,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg11ATI = 0x892C,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg12ATI = 0x892D,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg13ATI = 0x892E,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg14ATI = 0x892F,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg15ATI = 0x8930,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg16ATI = 0x8931,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg17ATI = 0x8932,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg18ATI = 0x8933,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg19ATI = 0x8934,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg20ATI = 0x8935,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg21ATI = 0x8936,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg22ATI = 0x8937,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg23ATI = 0x8938,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg24ATI = 0x8939,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg25ATI = 0x893A,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg26ATI = 0x893B,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg27ATI = 0x893C,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg28ATI = 0x893D,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg29ATI = 0x893E,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg30ATI = 0x893F,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg31ATI = 0x8940,
    }

    public enum CombinerRegisterNV
    {

        [GLExtension("GL_ARB_multitexture")]
        Texture0ARB = 0x84C0,

        [GLExtension("GL_ARB_multitexture")]
        Texture1ARB = 0x84C1,

        [GLExtension("GL_NV_path_rendering")]
        PrimaryColorNV = 0x852C,

        [GLExtension("GL_NV_path_rendering")]
        SecondaryColorNV = 0x852D,

        [GLExtension("GL_NV_register_combiners")]
        Spare0NV = 0x852E,

        [GLExtension("GL_NV_register_combiners")]
        Spare1NV = 0x852F,

        [GLExtension("GL_NV_register_combiners")]
        DiscardNV = 0x8530,
    }

    public enum UniformBlockPName
    {

        [GLExtension("GL_ARB_tessellation_shader")]
        UniformBlockReferencedByTessControlShader = 0x84F0,

        [GLExtension("GL_ARB_tessellation_shader")]
        UniformBlockReferencedByTessEvaluationShader = 0x84F1,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockBinding = 0x8A3F,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockDataSize = 0x8A40,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockNameLength = 0x8A41,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockActiveUniforms = 0x8A42,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockActiveUniformIndices = 0x8A43,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockReferencedByVertexShader = 0x8A44,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockReferencedByGeometryShader = 0x8A45,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockReferencedByFragmentShader = 0x8A46,

        [GLExtension("GL_ARB_compute_shader")]
        UniformBlockReferencedByComputeShader = 0x90EC,
    }

    public enum FenceConditionNV
    {

        [GLExtension("GL_NV_fence")]
        AllCompletedNV = 0x84F2,
    }

    public enum FenceParameterNameNV
    {

        [GLExtension("GL_NV_fence")]
        FenceStatusNV = 0x84F3,

        [GLExtension("GL_NV_fence")]
        FenceConditionNV = 0x84F4,
    }

    public enum CombinerVariableNV
    {

        [GLExtension("GL_NV_register_combiners")]
        VariableANV = 0x8523,

        [GLExtension("GL_NV_register_combiners")]
        VariableBNV = 0x8524,

        [GLExtension("GL_NV_register_combiners")]
        VariableCNV = 0x8525,

        [GLExtension("GL_NV_register_combiners")]
        VariableDNV = 0x8526,

        [GLExtension("GL_NV_register_combiners")]
        VariableENV = 0x8527,

        [GLExtension("GL_NV_register_combiners")]
        VariableFNV = 0x8528,

        [GLExtension("GL_NV_register_combiners")]
        VariableGNV = 0x8529,
    }

    public enum PathColor
    {

        [GLExtension("GL_NV_path_rendering")]
        PrimaryColorNV = 0x852C,

        [GLExtension("GL_NV_path_rendering")]
        SecondaryColorNV = 0x852D,

        [GLExtension("GL_NV_path_rendering")]
        PrimaryColor = 0x8577,
    }

    public enum CombinerMappingNV
    {

        [GLExtension("GL_NV_register_combiners")]
        UnsignedIdentityNV = 0x8536,

        [GLExtension("GL_NV_register_combiners")]
        UnsignedInvertNV = 0x8537,

        [GLExtension("GL_NV_register_combiners")]
        ExpandNormalNV = 0x8538,

        [GLExtension("GL_NV_register_combiners")]
        ExpandNegateNV = 0x8539,

        [GLExtension("GL_NV_register_combiners")]
        HalfBiasNormalNV = 0x853A,

        [GLExtension("GL_NV_register_combiners")]
        HalfBiasNegateNV = 0x853B,

        [GLExtension("GL_NV_register_combiners")]
        SignedIdentityNV = 0x853C,

        [GLExtension("GL_NV_register_combiners")]
        SignedNegateNV = 0x853D,
    }

    public enum CombinerParameterNV
    {

        [GLExtension("GL_NV_register_combiners")]
        CombinerInputNV = 0x8542,

        [GLExtension("GL_NV_register_combiners")]
        CombinerMappingNV = 0x8543,

        [GLExtension("GL_NV_register_combiners")]
        CombinerComponentUsageNV = 0x8544,
    }

    public enum CombinerStageNV
    {

        [GLExtension("GL_NV_register_combiners")]
        Combiner0NV = 0x8550,

        [GLExtension("GL_NV_register_combiners")]
        Combiner1NV = 0x8551,

        [GLExtension("GL_NV_register_combiners")]
        Combiner2NV = 0x8552,

        [GLExtension("GL_NV_register_combiners")]
        Combiner3NV = 0x8553,

        [GLExtension("GL_NV_register_combiners")]
        Combiner4NV = 0x8554,

        [GLExtension("GL_NV_register_combiners")]
        Combiner5NV = 0x8555,

        [GLExtension("GL_NV_register_combiners")]
        Combiner6NV = 0x8556,

        [GLExtension("GL_NV_register_combiners")]
        Combiner7NV = 0x8557,
    }

    public enum PixelStoreSubsampleRate
    {

        [GLExtension("GL_SGIX_subsample")]
        PixelSubsample4444SGIX = 0x85A2,

        [GLExtension("GL_SGIX_subsample")]
        PixelSubsample2424SGIX = 0x85A3,

        [GLExtension("GL_SGIX_subsample")]
        PixelSubsample4242SGIX = 0x85A4,
    }

    public enum TextureNormalModeEXT
    {

        [GLExtension("GL_EXT_texture_perturb_normal")]
        PerturbEXT = 0x85AE,
    }

    public enum VertexArrayPNameAPPLE
    {

        [GLExtension("GL_APPLE_vertex_array_range")]
        StorageClientAPPLE = 0x85B4,

        [GLExtension("GL_APPLE_texture_range")]
        StorageCachedAPPLE = 0x85BE,

        [GLExtension("GL_APPLE_texture_range")]
        StorageSharedAPPLE = 0x85BF,
    }

    public enum VertexAttribEnum
    {
        VertexAttribArrayEnabled = 0x8622,
        VertexAttribArraySize = 0x8623,
        VertexAttribArrayStride = 0x8624,
        VertexAttribArrayType = 0x8625,
        CurrentVertexAttrib = 0x8626,
        VertexAttribArrayNormalized = 0x886A,
        VertexAttribArrayBufferBinding = 0x889F,
        VertexAttribArrayInteger = 0x88FD,
        VertexAttribArrayDivisor = 0x88FE,
    }

    public enum ProgramStringProperty
    {

        [GLExtension("GL_ARB_fragment_program")]
        ProgramStringARB = 0x8628,
    }

    public enum VertexAttribEnumNV
    {

        [GLExtension("GL_NV_vertex_program")]
        ProgramParameterNV = 0x8644,
    }

    public enum VertexAttribPointerPropertyARB
    {
        VertexAttribArrayPointer = 0x8645,

        [GLExtension("GL_ARB_vertex_program")]
        VertexAttribArrayPointerARB = 0x8645,
    }

    public enum EvalTargetNV
    {

        [GLExtension("GL_NV_evaluators")]
        Eval2DNV = 0x86C0,

        [GLExtension("GL_NV_evaluators")]
        EvalTriangular2DNV = 0x86C1,
    }

    public enum MapParameterNV
    {

        [GLExtension("GL_NV_evaluators")]
        MapTessellationNV = 0x86C2,
    }

    public enum MapAttribParameterNV
    {

        [GLExtension("GL_NV_evaluators")]
        MapAttribUOrderNV = 0x86C3,

        [GLExtension("GL_NV_evaluators")]
        MapAttribVOrderNV = 0x86C4,
    }

    public enum ArrayObjectUsageATI
    {

        [GLExtension("GL_ATI_vertex_array_object")]
        StaticATI = 0x8760,

        [GLExtension("GL_ATI_vertex_array_object")]
        DynamicATI = 0x8761,
    }

    public enum PreserveModeATI
    {

        [GLExtension("GL_ATI_vertex_array_object")]
        PreserveATI = 0x8762,

        [GLExtension("GL_ATI_vertex_array_object")]
        DiscardATI = 0x8763,
    }

    public enum ArrayObjectPNameATI
    {

        [GLExtension("GL_ATI_vertex_array_object")]
        ObjectBufferSizeATI = 0x8764,

        [GLExtension("GL_ATI_vertex_array_object")]
        ObjectBufferUsageATI = 0x8765,
    }

    public enum VertexStreamATI
    {

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream0ATI = 0x876C,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream1ATI = 0x876D,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream2ATI = 0x876E,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream3ATI = 0x876F,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream4ATI = 0x8770,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream5ATI = 0x8771,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream6ATI = 0x8772,

        [GLExtension("GL_ATI_vertex_streams")]
        VertexStream7ATI = 0x8773,
    }

    public enum GetTexBumpParameterATI
    {

        [GLExtension("GL_ATI_envmap_bumpmap")]
        BumpRotMatrixATI = 0x8775,

        [GLExtension("GL_ATI_envmap_bumpmap")]
        BumpRotMatrixSizeATI = 0x8776,

        [GLExtension("GL_ATI_envmap_bumpmap")]
        BumpNumTexUnitsATI = 0x8777,

        [GLExtension("GL_ATI_envmap_bumpmap")]
        BumpTexUnitsATI = 0x8778,
    }

    public enum TexBumpParameterATI
    {

        [GLExtension("GL_ATI_envmap_bumpmap")]
        BumpRotMatrixATI = 0x8775,
    }

    public enum VertexShaderOpEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        OpIndexEXT = 0x8782,

        [GLExtension("GL_EXT_vertex_shader")]
        OpNegateEXT = 0x8783,

        [GLExtension("GL_EXT_vertex_shader")]
        OpDot3EXT = 0x8784,

        [GLExtension("GL_EXT_vertex_shader")]
        OpDot4EXT = 0x8785,

        [GLExtension("GL_EXT_vertex_shader")]
        OpMulEXT = 0x8786,

        [GLExtension("GL_EXT_vertex_shader")]
        OpAddEXT = 0x8787,

        [GLExtension("GL_EXT_vertex_shader")]
        OpMaddEXT = 0x8788,

        [GLExtension("GL_EXT_vertex_shader")]
        OpFracEXT = 0x8789,

        [GLExtension("GL_EXT_vertex_shader")]
        OpMaxEXT = 0x878A,

        [GLExtension("GL_EXT_vertex_shader")]
        OpMinEXT = 0x878B,

        [GLExtension("GL_EXT_vertex_shader")]
        OpSetGeEXT = 0x878C,

        [GLExtension("GL_EXT_vertex_shader")]
        OpSetLtEXT = 0x878D,

        [GLExtension("GL_EXT_vertex_shader")]
        OpClampEXT = 0x878E,

        [GLExtension("GL_EXT_vertex_shader")]
        OpFloorEXT = 0x878F,

        [GLExtension("GL_EXT_vertex_shader")]
        OpRoundEXT = 0x8790,

        [GLExtension("GL_EXT_vertex_shader")]
        OpExpBase2EXT = 0x8791,

        [GLExtension("GL_EXT_vertex_shader")]
        OpLogBase2EXT = 0x8792,

        [GLExtension("GL_EXT_vertex_shader")]
        OpPowerEXT = 0x8793,

        [GLExtension("GL_EXT_vertex_shader")]
        OpRecipEXT = 0x8794,

        [GLExtension("GL_EXT_vertex_shader")]
        OpRecipSqrtEXT = 0x8795,

        [GLExtension("GL_EXT_vertex_shader")]
        OpSubEXT = 0x8796,

        [GLExtension("GL_EXT_vertex_shader")]
        OpCrossProductEXT = 0x8797,

        [GLExtension("GL_EXT_vertex_shader")]
        OpMultiplyMatrixEXT = 0x8798,

        [GLExtension("GL_EXT_vertex_shader")]
        OpMovEXT = 0x8799,
    }

    public enum DataTypeEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        ScalarEXT = 0x87BE,

        [GLExtension("GL_EXT_vertex_shader")]
        VectorEXT = 0x87BF,

        [GLExtension("GL_EXT_vertex_shader")]
        MatrixEXT = 0x87C0,
    }

    public enum VertexShaderStorageTypeEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        VariantEXT = 0x87C1,

        [GLExtension("GL_EXT_vertex_shader")]
        InvariantEXT = 0x87C2,

        [GLExtension("GL_EXT_vertex_shader")]
        LocalConstantEXT = 0x87C3,

        [GLExtension("GL_EXT_vertex_shader")]
        LocalEXT = 0x87C4,
    }

    public enum VertexShaderCoordOutEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        XEXT = 0x87D5,

        [GLExtension("GL_EXT_vertex_shader")]
        YEXT = 0x87D6,

        [GLExtension("GL_EXT_vertex_shader")]
        ZEXT = 0x87D7,

        [GLExtension("GL_EXT_vertex_shader")]
        WEXT = 0x87D8,

        [GLExtension("GL_EXT_vertex_shader")]
        NegativeXEXT = 0x87D9,

        [GLExtension("GL_EXT_vertex_shader")]
        NegativeYEXT = 0x87DA,

        [GLExtension("GL_EXT_vertex_shader")]
        NegativeZEXT = 0x87DB,

        [GLExtension("GL_EXT_vertex_shader")]
        NegativeWEXT = 0x87DC,

        [GLExtension("GL_EXT_vertex_shader")]
        ZeroEXT = 0x87DD,

        [GLExtension("GL_EXT_vertex_shader")]
        OneEXT = 0x87DE,

        [GLExtension("GL_EXT_vertex_shader")]
        NegativeOneEXT = 0x87DF,
    }

    public enum ParameterRangeEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        NormalizedRangeEXT = 0x87E0,

        [GLExtension("GL_EXT_vertex_shader")]
        FullRangeEXT = 0x87E1,
    }

    public enum VertexShaderParameterEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        CurrentVertexEXT = 0x87E2,

        [GLExtension("GL_EXT_vertex_shader")]
        MvpMatrixEXT = 0x87E3,
    }

    public enum GetVariantValueEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        VariantValueEXT = 0x87E4,

        [GLExtension("GL_EXT_vertex_shader")]
        VariantDatatypeEXT = 0x87E5,

        [GLExtension("GL_EXT_vertex_shader")]
        VariantArrayStrideEXT = 0x87E6,

        [GLExtension("GL_EXT_vertex_shader")]
        VariantArrayTypeEXT = 0x87E7,
    }

    public enum VariantCapEXT
    {

        [GLExtension("GL_EXT_vertex_shader")]
        VariantArrayEXT = 0x87E8,
    }

    public enum PNTrianglesPNameATI
    {

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesPointModeATI = 0x87F2,

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesNormalModeATI = 0x87F3,

        [GLExtension("GL_ATI_pn_triangles")]
        PnTrianglesTesselationLevelATI = 0x87F4,
    }

    public enum QueryParameterName
    {
        QueryCounterBits = 0x8864,
        CurrentQuery = 0x8865,
    }

    public enum OcclusionQueryParameterNameNV
    {

        [GLExtension("GL_NV_occlusion_query")]
        PixelCountNV = 0x8866,

        [GLExtension("GL_NV_occlusion_query")]
        PixelCountAvailableNV = 0x8867,
    }

    public enum ProgramFormat
    {

        [GLExtension("GL_ARB_fragment_program")]
        ProgramFormatAsciiARB = 0x8875,
    }

    public enum PixelDataRangeTargetNV
    {

        [GLExtension("GL_NV_pixel_data_range")]
        WritePixelDataRangeNV = 0x8878,

        [GLExtension("GL_NV_pixel_data_range")]
        ReadPixelDataRangeNV = 0x8879,
    }

    public enum CopyBufferSubDataTarget
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBuffer = 0x8A11,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureBuffer = 0x8C2A,

        [GLExtension("GL_ARB_enhanced_layouts")]
        TransformFeedbackBuffer = 0x8C8E,

        [GLExtension("GL_ARB_copy_buffer")]
        CopyReadBuffer = 0x8F36,

        [GLExtension("GL_ARB_copy_buffer")]
        CopyWriteBuffer = 0x8F37,

        [GLExtension("GL_ARB_draw_indirect")]
        DrawIndirectBuffer = 0x8F3F,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBuffer = 0x90D2,

        [GLExtension("GL_ARB_compute_shader")]
        DispatchIndirectBuffer = 0x90EE,

        [GLExtension("GL_ARB_query_buffer_object")]
        QueryBuffer = 0x9192,

        [GLExtension("GL_ARB_program_interface_query")]
        AtomicCounterBuffer = 0x92C0,
    }

    public enum BufferStorageTarget
    {
        ArrayBuffer = 0x8892,
        ElementArrayBuffer = 0x8893,
        PixelPackBuffer = 0x88EB,
        PixelUnpackBuffer = 0x88EC,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBuffer = 0x8A11,

        [GLExtension("GL_ARB_internalformat_query2")]
        TextureBuffer = 0x8C2A,

        [GLExtension("GL_ARB_enhanced_layouts")]
        TransformFeedbackBuffer = 0x8C8E,

        [GLExtension("GL_ARB_copy_buffer")]
        CopyReadBuffer = 0x8F36,

        [GLExtension("GL_ARB_copy_buffer")]
        CopyWriteBuffer = 0x8F37,

        [GLExtension("GL_ARB_draw_indirect")]
        DrawIndirectBuffer = 0x8F3F,

        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        ShaderStorageBuffer = 0x90D2,

        [GLExtension("GL_ARB_compute_shader")]
        DispatchIndirectBuffer = 0x90EE,

        [GLExtension("GL_ARB_query_buffer_object")]
        QueryBuffer = 0x9192,

        [GLExtension("GL_ARB_program_interface_query")]
        AtomicCounterBuffer = 0x92C0,
    }

    public enum BufferAccessARB
    {
        ReadOnly = 0x88B8,

        [GLExtension("GL_NV_shader_buffer_store")]
        WriteOnly = 0x88B9,

        [GLExtension("GL_NV_shader_buffer_store")]
        ReadWrite = 0x88BA,
    }

    public enum BufferPointerNameARB
    {
        BufferMapPointer = 0x88BD,

        [GLExtension("GL_ARB_vertex_buffer_object")]
        BufferMapPointerARB = 0x88BD,
    }

    public enum VertexBufferObjectUsage
    {
        StreamDraw = 0x88E0,
        StreamRead = 0x88E1,
        StreamCopy = 0x88E2,
        StaticDraw = 0x88E4,
        StaticRead = 0x88E5,
        StaticCopy = 0x88E6,
        DynamicDraw = 0x88E8,
        DynamicRead = 0x88E9,
        DynamicCopy = 0x88EA,
    }

    public enum BufferUsageARB
    {
        StreamDraw = 0x88E0,
        StreamRead = 0x88E1,
        StreamCopy = 0x88E2,
        StaticDraw = 0x88E4,
        StaticRead = 0x88E5,
        StaticCopy = 0x88E6,
        DynamicDraw = 0x88E8,
        DynamicRead = 0x88E9,
        DynamicCopy = 0x88EA,
    }

    public enum ClampColorTargetARB
    {

        [GLExtension("GL_ARB_color_buffer_float")]
        ClampVertexColorARB = 0x891A,

        [GLExtension("GL_ARB_color_buffer_float")]
        ClampFragmentColorARB = 0x891B,
        ClampReadColor = 0x891C,

        [GLExtension("GL_ARB_color_buffer_float")]
        ClampReadColorARB = 0x891C,
    }

    public enum FragmentShaderRegATI
    {

        [GLExtension("GL_ATI_fragment_shader")]
        Reg0ATI = 0x8921,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg1ATI = 0x8922,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg2ATI = 0x8923,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg3ATI = 0x8924,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg4ATI = 0x8925,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg5ATI = 0x8926,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg6ATI = 0x8927,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg7ATI = 0x8928,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg8ATI = 0x8929,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg9ATI = 0x892A,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg10ATI = 0x892B,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg11ATI = 0x892C,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg12ATI = 0x892D,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg13ATI = 0x892E,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg14ATI = 0x892F,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg15ATI = 0x8930,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg16ATI = 0x8931,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg17ATI = 0x8932,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg18ATI = 0x8933,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg19ATI = 0x8934,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg20ATI = 0x8935,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg21ATI = 0x8936,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg22ATI = 0x8937,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg23ATI = 0x8938,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg24ATI = 0x8939,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg25ATI = 0x893A,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg26ATI = 0x893B,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg27ATI = 0x893C,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg28ATI = 0x893D,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg29ATI = 0x893E,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg30ATI = 0x893F,

        [GLExtension("GL_ATI_fragment_shader")]
        Reg31ATI = 0x8940,
    }

    public enum FragmentShaderConATI
    {

        [GLExtension("GL_ATI_fragment_shader")]
        Con0ATI = 0x8941,

        [GLExtension("GL_ATI_fragment_shader")]
        Con1ATI = 0x8942,

        [GLExtension("GL_ATI_fragment_shader")]
        Con2ATI = 0x8943,

        [GLExtension("GL_ATI_fragment_shader")]
        Con3ATI = 0x8944,

        [GLExtension("GL_ATI_fragment_shader")]
        Con4ATI = 0x8945,

        [GLExtension("GL_ATI_fragment_shader")]
        Con5ATI = 0x8946,

        [GLExtension("GL_ATI_fragment_shader")]
        Con6ATI = 0x8947,

        [GLExtension("GL_ATI_fragment_shader")]
        Con7ATI = 0x8948,

        [GLExtension("GL_ATI_fragment_shader")]
        Con8ATI = 0x8949,

        [GLExtension("GL_ATI_fragment_shader")]
        Con9ATI = 0x894A,

        [GLExtension("GL_ATI_fragment_shader")]
        Con10ATI = 0x894B,

        [GLExtension("GL_ATI_fragment_shader")]
        Con11ATI = 0x894C,

        [GLExtension("GL_ATI_fragment_shader")]
        Con12ATI = 0x894D,

        [GLExtension("GL_ATI_fragment_shader")]
        Con13ATI = 0x894E,

        [GLExtension("GL_ATI_fragment_shader")]
        Con14ATI = 0x894F,

        [GLExtension("GL_ATI_fragment_shader")]
        Con15ATI = 0x8950,

        [GLExtension("GL_ATI_fragment_shader")]
        Con16ATI = 0x8951,

        [GLExtension("GL_ATI_fragment_shader")]
        Con17ATI = 0x8952,

        [GLExtension("GL_ATI_fragment_shader")]
        Con18ATI = 0x8953,

        [GLExtension("GL_ATI_fragment_shader")]
        Con19ATI = 0x8954,

        [GLExtension("GL_ATI_fragment_shader")]
        Con20ATI = 0x8955,

        [GLExtension("GL_ATI_fragment_shader")]
        Con21ATI = 0x8956,

        [GLExtension("GL_ATI_fragment_shader")]
        Con22ATI = 0x8957,

        [GLExtension("GL_ATI_fragment_shader")]
        Con23ATI = 0x8958,

        [GLExtension("GL_ATI_fragment_shader")]
        Con24ATI = 0x8959,

        [GLExtension("GL_ATI_fragment_shader")]
        Con25ATI = 0x895A,

        [GLExtension("GL_ATI_fragment_shader")]
        Con26ATI = 0x895B,

        [GLExtension("GL_ATI_fragment_shader")]
        Con27ATI = 0x895C,

        [GLExtension("GL_ATI_fragment_shader")]
        Con28ATI = 0x895D,

        [GLExtension("GL_ATI_fragment_shader")]
        Con29ATI = 0x895E,

        [GLExtension("GL_ATI_fragment_shader")]
        Con30ATI = 0x895F,

        [GLExtension("GL_ATI_fragment_shader")]
        Con31ATI = 0x8960,
    }

    public enum FragmentOp1ATI
    {

        [GLExtension("GL_ATI_fragment_shader")]
        MovATI = 0x8961,
    }

    public enum FragmentOp2ATI
    {

        [GLExtension("GL_ATI_fragment_shader")]
        AddATI = 0x8963,

        [GLExtension("GL_ATI_fragment_shader")]
        MulATI = 0x8964,

        [GLExtension("GL_ATI_fragment_shader")]
        SubATI = 0x8965,

        [GLExtension("GL_ATI_fragment_shader")]
        Dot3ATI = 0x8966,

        [GLExtension("GL_ATI_fragment_shader")]
        Dot4ATI = 0x8967,
    }

    public enum FragmentOp3ATI
    {

        [GLExtension("GL_ATI_fragment_shader")]
        MadATI = 0x8968,

        [GLExtension("GL_ATI_fragment_shader")]
        LerpATI = 0x8969,

        [GLExtension("GL_ATI_fragment_shader")]
        CndATI = 0x896A,

        [GLExtension("GL_ATI_fragment_shader")]
        Cnd0ATI = 0x896B,

        [GLExtension("GL_ATI_fragment_shader")]
        Dot2AddATI = 0x896C,
    }

    public enum SwizzleOpATI
    {

        [GLExtension("GL_ATI_fragment_shader")]
        SwizzleStrATI = 0x8976,

        [GLExtension("GL_ATI_fragment_shader")]
        SwizzleStqATI = 0x8977,

        [GLExtension("GL_ATI_fragment_shader")]
        SwizzleStrDrATI = 0x8978,

        [GLExtension("GL_ATI_fragment_shader")]
        SwizzleStqDqATI = 0x8979,
    }

    public enum ObjectTypeAPPLE
    {

        [GLExtension("GL_APPLE_fence")]
        DrawPixelsAPPLE = 0x8A0A,

        [GLExtension("GL_APPLE_fence")]
        FenceAPPLE = 0x8A0B,
    }

    public enum UniformPName
    {

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformType = 0x8A37,

        [GLExtension("GL_ARB_shader_subroutine")]
        UniformSize = 0x8A38,

        [GLExtension("GL_ARB_shader_subroutine")]
        UniformNameLength = 0x8A39,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformBlockIndex = 0x8A3A,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformOffset = 0x8A3B,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformArrayStride = 0x8A3C,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformMatrixStride = 0x8A3D,

        [GLExtension("GL_ARB_uniform_buffer_object")]
        UniformIsRowMajor = 0x8A3E,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        UniformAtomicCounterBufferIndex = 0x92DA,
    }

    public enum SubroutineParameterName
    {

        [GLExtension("GL_ARB_shader_subroutine")]
        UniformSize = 0x8A38,

        [GLExtension("GL_ARB_shader_subroutine")]
        UniformNameLength = 0x8A39,

        [GLExtension("GL_ARB_program_interface_query")]
        NumCompatibleSubroutines = 0x8E4A,

        [GLExtension("GL_ARB_program_interface_query")]
        CompatibleSubroutines = 0x8E4B,
    }

    public enum ShaderType
    {
        FragmentShader = 0x8B30,

        [GLExtension("GL_ARB_fragment_shader")]
        FragmentShaderARB = 0x8B30,
        VertexShader = 0x8B31,

        [GLExtension("GL_ARB_vertex_shader")]
        VertexShaderARB = 0x8B31,
        GeometryShader = 0x8DD9,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessEvaluationShader = 0x8E87,

        [GLExtension("GL_ARB_tessellation_shader")]
        TessControlShader = 0x8E88,

        [GLExtension("GL_ARB_compute_shader")]
        ComputeShader = 0x91B9,
    }

    public enum ContainerType
    {

        [GLExtension("GL_ARB_shader_objects")]
        ProgramObjectARB = 0x8B40,

        [GLExtension("GL_EXT_debug_label")]
        ProgramObjectEXT = 0x8B40,
    }

    public enum ShaderParameterName
    {
        ShaderType = 0x8B4F,
        DeleteStatus = 0x8B80,
        CompileStatus = 0x8B81,
        InfoLogLength = 0x8B84,
        ShaderSourceLength = 0x8B88,
    }

    public enum ShaderBinaryFormat
    {

        [GLExtension("GL_IMG_shader_binary")]
        SgxBinaryImg = 0x8C0A,

        [GLExtension("GL_ARM_mali_shader_binary")]
        MaliShaderBinaryArm = 0x8F60,

        [GLExtension("GL_VIV_shader_binary")]
        ShaderBinaryViv = 0x8FC4,

        [GLExtension("GL_DMP_shader_binary")]
        ShaderBinaryDmp = 0x9250,

        [GLExtension("GL_FJ_shader_binary_GCCSO")]
        GccsoShaderBinaryFj = 0x9260,
        ShaderBinaryFormatSpirV = 0x9551,
    }

    public enum TransformFeedbackPName
    {
        TransformFeedbackBufferStart = 0x8C84,
        TransformFeedbackBufferSize = 0x8C85,
        TransformFeedbackBufferBinding = 0x8C8F,
        TransformFeedbackPaused = 0x8E23,
        TransformFeedbackActive = 0x8E24,
    }

    public enum TransformFeedbackBufferMode
    {
        InterleavedAttribs = 0x8C8C,
        SeparateAttribs = 0x8C8D,
    }

    public enum ProgramInterface
    {

        [GLExtension("GL_ARB_enhanced_layouts")]
        TransformFeedbackBuffer = 0x8C8E,

        [GLExtension("GL_ARB_program_interface_query")]
        Uniform = 0x92E1,

        [GLExtension("GL_ARB_program_interface_query")]
        UniformBlock = 0x92E2,

        [GLExtension("GL_ARB_program_interface_query")]
        ProgramInput = 0x92E3,

        [GLExtension("GL_ARB_program_interface_query")]
        ProgramOutput = 0x92E4,

        [GLExtension("GL_ARB_program_interface_query")]
        BufferVariable = 0x92E5,

        [GLExtension("GL_ARB_program_interface_query")]
        ShaderStorageBlock = 0x92E6,

        [GLExtension("GL_ARB_program_interface_query")]
        VertexSubroutine = 0x92E8,

        [GLExtension("GL_ARB_program_interface_query")]
        TessControlSubroutine = 0x92E9,

        [GLExtension("GL_ARB_program_interface_query")]
        TessEvaluationSubroutine = 0x92EA,

        [GLExtension("GL_ARB_program_interface_query")]
        GeometrySubroutine = 0x92EB,

        [GLExtension("GL_ARB_program_interface_query")]
        FragmentSubroutine = 0x92EC,

        [GLExtension("GL_ARB_program_interface_query")]
        ComputeSubroutine = 0x92ED,

        [GLExtension("GL_ARB_program_interface_query")]
        VertexSubroutineUniform = 0x92EE,

        [GLExtension("GL_ARB_program_interface_query")]
        TessControlSubroutineUniform = 0x92EF,

        [GLExtension("GL_ARB_program_interface_query")]
        TessEvaluationSubroutineUniform = 0x92F0,

        [GLExtension("GL_ARB_program_interface_query")]
        GeometrySubroutineUniform = 0x92F1,

        [GLExtension("GL_ARB_program_interface_query")]
        FragmentSubroutineUniform = 0x92F2,

        [GLExtension("GL_ARB_program_interface_query")]
        ComputeSubroutineUniform = 0x92F3,

        [GLExtension("GL_ARB_program_interface_query")]
        TransformFeedbackVarying = 0x92F4,
    }

    public enum ClipControlOrigin
    {

        [GLExtension("GL_ARB_clip_control")]
        LowerLeft = 0x8CA1,

        [GLExtension("GL_ARB_clip_control")]
        UpperLeft = 0x8CA2,
    }

    public enum FramebufferTarget
    {

        [GLExtension("GL_ARB_framebuffer_object")]
        ReadFramebuffer = 0x8CA8,

        [GLExtension("GL_ARB_framebuffer_object")]
        DrawFramebuffer = 0x8CA9,

        [GLExtension("GL_ARB_framebuffer_object")]
        Framebuffer = 0x8D40,

        [GLExtension("GL_OES_framebuffer_object")]
        FramebufferOES = 0x8D40,
    }

    public enum RenderbufferParameterName
    {

        [GLExtension("GL_NV_framebuffer_multisample_coverage")]
        RenderbufferCoverageSamplesNV = 0x8CAB,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferSamples = 0x8CAB,

        [GLExtension("GL_ANGLE_framebuffer_multisample")]
        RenderbufferSamplesAngle = 0x8CAB,

        [GLExtension("GL_APPLE_framebuffer_multisample")]
        RenderbufferSamplesAPPLE = 0x8CAB,

        [GLExtension("GL_EXT_framebuffer_multisample")]
        RenderbufferSamplesEXT = 0x8CAB,

        [GLExtension("GL_NV_framebuffer_multisample")]
        RenderbufferSamplesNV = 0x8CAB,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferWidth = 0x8D42,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferWidthEXT = 0x8D42,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferWidthOES = 0x8D42,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferHeight = 0x8D43,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferHeightEXT = 0x8D43,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferHeightOES = 0x8D43,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferInternalFormat = 0x8D44,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferInternalFormatEXT = 0x8D44,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferInternalFormatOES = 0x8D44,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferRedSize = 0x8D50,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferRedSizeEXT = 0x8D50,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferRedSizeOES = 0x8D50,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferGreenSize = 0x8D51,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferGreenSizeEXT = 0x8D51,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferGreenSizeOES = 0x8D51,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferBlueSize = 0x8D52,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferBlueSizeEXT = 0x8D52,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferBlueSizeOES = 0x8D52,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferAlphaSize = 0x8D53,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferAlphaSizeEXT = 0x8D53,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferAlphaSizeOES = 0x8D53,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferDepthSize = 0x8D54,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferDepthSizeEXT = 0x8D54,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferDepthSizeOES = 0x8D54,

        [GLExtension("GL_ARB_framebuffer_object")]
        RenderbufferStencilSize = 0x8D55,

        [GLExtension("GL_EXT_framebuffer_object")]
        RenderbufferStencilSizeEXT = 0x8D55,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferStencilSizeOES = 0x8D55,

        [GLExtension("GL_NV_framebuffer_multisample_coverage")]
        RenderbufferColorSamplesNV = 0x8E10,

        [GLExtension("GL_IMG_multisampled_render_to_texture")]
        RenderbufferSamplesImg = 0x9133,

        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        RenderbufferStorageSamplesAMD = 0x91B2,
    }

    public enum RenderbufferTarget
    {

        [GLExtension("GL_ARB_framebuffer_object")]
        Renderbuffer = 0x8D41,

        [GLExtension("GL_OES_framebuffer_object")]
        RenderbufferOES = 0x8D41,
    }

    public enum ProgramStagePName
    {

        [GLExtension("GL_ARB_shader_subroutine")]
        ActiveSubroutines = 0x8DE5,

        [GLExtension("GL_ARB_shader_subroutine")]
        ActiveSubroutineUniforms = 0x8DE6,

        [GLExtension("GL_ARB_shader_subroutine")]
        ActiveSubroutineUniformLocations = 0x8E47,

        [GLExtension("GL_ARB_shader_subroutine")]
        ActiveSubroutineMaxLength = 0x8E48,

        [GLExtension("GL_ARB_shader_subroutine")]
        ActiveSubroutineUniformMaxLength = 0x8E49,
    }

    public enum PrecisionType
    {

        [GLExtension("GL_ARB_ES2_compatibility")]
        LowFloat = 0x8DF0,

        [GLExtension("GL_ARB_ES2_compatibility")]
        MediumFloat = 0x8DF1,

        [GLExtension("GL_ARB_ES2_compatibility")]
        HighFloat = 0x8DF2,

        [GLExtension("GL_ARB_ES2_compatibility")]
        LowInt = 0x8DF3,

        [GLExtension("GL_ARB_ES2_compatibility")]
        MediumInt = 0x8DF4,

        [GLExtension("GL_ARB_ES2_compatibility")]
        HighInt = 0x8DF5,
    }

    public enum ConditionalRenderMode
    {
        QueryWait = 0x8E13,
        QueryNoWait = 0x8E14,
        QueryByRegionWait = 0x8E15,
        QueryByRegionNoWait = 0x8E16,

        [GLExtension("GL_ARB_conditional_render_inverted")]
        QueryWaitInverted = 0x8E17,

        [GLExtension("GL_ARB_conditional_render_inverted")]
        QueryNoWaitInverted = 0x8E18,

        [GLExtension("GL_ARB_conditional_render_inverted")]
        QueryByRegionWaitInverted = 0x8E19,

        [GLExtension("GL_ARB_conditional_render_inverted")]
        QueryByRegionNoWaitInverted = 0x8E1A,
    }

    public enum BindTransformFeedbackTarget
    {

        [GLExtension("GL_ARB_transform_feedback2")]
        TransformFeedback = 0x8E22,
    }

    public enum QueryCounterTarget
    {

        [GLExtension("GL_ARB_timer_query")]
        Timestamp = 0x8E28,

        [GLExtension("GL_EXT_disjoint_timer_query")]
        TimestampEXT = 0x8E28,
    }

    public enum ProgramResourceProperty
    {

        [GLExtension("GL_ARB_program_interface_query")]
        NumCompatibleSubroutines = 0x8E4A,

        [GLExtension("GL_ARB_program_interface_query")]
        CompatibleSubroutines = 0x8E4B,

        [GLExtension("GL_ARB_program_interface_query")]
        Uniform = 0x92E1,

        [GLExtension("GL_ARB_program_interface_query")]
        IsPerPatch = 0x92E7,

        [GLExtension("GL_ARB_program_interface_query")]
        NameLength = 0x92F9,

        [GLExtension("GL_ARB_program_interface_query")]
        Type = 0x92FA,

        [GLExtension("GL_ARB_program_interface_query")]
        ArraySize = 0x92FB,

        [GLExtension("GL_ARB_program_interface_query")]
        Offset = 0x92FC,

        [GLExtension("GL_ARB_program_interface_query")]
        BlockIndex = 0x92FD,

        [GLExtension("GL_ARB_program_interface_query")]
        ArrayStride = 0x92FE,

        [GLExtension("GL_ARB_program_interface_query")]
        MatrixStride = 0x92FF,

        [GLExtension("GL_ARB_program_interface_query")]
        IsRowMajor = 0x9300,

        [GLExtension("GL_ARB_program_interface_query")]
        AtomicCounterBufferIndex = 0x9301,

        [GLExtension("GL_ARB_program_interface_query")]
        BufferBinding = 0x9302,

        [GLExtension("GL_ARB_program_interface_query")]
        BufferDataSize = 0x9303,

        [GLExtension("GL_ARB_program_interface_query")]
        NumActiveVariables = 0x9304,

        [GLExtension("GL_ARB_program_interface_query")]
        ActiveVariables = 0x9305,

        [GLExtension("GL_ARB_program_interface_query")]
        ReferencedByVertexShader = 0x9306,

        [GLExtension("GL_ARB_program_interface_query")]
        ReferencedByTessControlShader = 0x9307,

        [GLExtension("GL_ARB_program_interface_query")]
        ReferencedByTessEvaluationShader = 0x9308,

        [GLExtension("GL_ARB_program_interface_query")]
        ReferencedByGeometryShader = 0x9309,

        [GLExtension("GL_ARB_program_interface_query")]
        ReferencedByFragmentShader = 0x930A,

        [GLExtension("GL_ARB_program_interface_query")]
        ReferencedByComputeShader = 0x930B,

        [GLExtension("GL_ARB_program_interface_query")]
        TopLevelArraySize = 0x930C,

        [GLExtension("GL_ARB_program_interface_query")]
        TopLevelArrayStride = 0x930D,

        [GLExtension("GL_ARB_program_interface_query")]
        Location = 0x930E,

        [GLExtension("GL_ARB_program_interface_query")]
        LocationIndex = 0x930F,

        [GLExtension("GL_ARB_enhanced_layouts")]
        LocationComponent = 0x934A,

        [GLExtension("GL_ARB_enhanced_layouts")]
        TransformFeedbackBufferIndex = 0x934B,

        [GLExtension("GL_ARB_enhanced_layouts")]
        TransformFeedbackBufferStride = 0x934C,
    }

    public enum VertexProvokingMode
    {

        [GLExtension("GL_ARB_provoking_vertex")]
        FirstVertexConvention = 0x8E4D,

        [GLExtension("GL_ARB_provoking_vertex")]
        LastVertexConvention = 0x8E4E,
    }

    public enum GetMultisamplePNameNV
    {

        [GLExtension("GL_ARB_texture_multisample")]
        SamplePosition = 0x8E50,

        [GLExtension("GL_ARB_sample_locations")]
        SampleLocationARB = 0x8E50,

        [GLExtension("GL_ARB_sample_locations")]
        ProgrammableSampleLocationARB = 0x9341,
    }

    public enum PatchParameterName
    {

        [GLExtension("GL_ARB_tessellation_shader")]
        PatchVertices = 0x8E72,

        [GLExtension("GL_ARB_tessellation_shader")]
        PatchDefaultInnerLevel = 0x8E73,

        [GLExtension("GL_ARB_tessellation_shader")]
        PatchDefaultOuterLevel = 0x8E74,
    }

    public enum PathStringFormat
    {

        [GLExtension("GL_NV_path_rendering")]
        PathFormatSvgNV = 0x9070,

        [GLExtension("GL_NV_path_rendering")]
        PathFormatPsNV = 0x9071,
    }

    public enum PathFontTarget
    {

        [GLExtension("GL_NV_path_rendering")]
        StandardFontNameNV = 0x9072,

        [GLExtension("GL_NV_path_rendering")]
        SystemFontNameNV = 0x9073,

        [GLExtension("GL_NV_path_rendering")]
        FileNameNV = 0x9074,
    }

    public enum PathParameter
    {

        [GLExtension("GL_NV_path_rendering")]
        PathStrokeWidthNV = 0x9075,

        [GLExtension("GL_NV_path_rendering")]
        PathEndCapsNV = 0x9076,

        [GLExtension("GL_NV_path_rendering")]
        PathInitialEndCapNV = 0x9077,

        [GLExtension("GL_NV_path_rendering")]
        PathTerminalEndCapNV = 0x9078,

        [GLExtension("GL_NV_path_rendering")]
        PathJoinStyleNV = 0x9079,

        [GLExtension("GL_NV_path_rendering")]
        PathMiterLimitNV = 0x907A,

        [GLExtension("GL_NV_path_rendering")]
        PathDashCapsNV = 0x907B,

        [GLExtension("GL_NV_path_rendering")]
        PathInitialDashCapNV = 0x907C,

        [GLExtension("GL_NV_path_rendering")]
        PathTerminalDashCapNV = 0x907D,

        [GLExtension("GL_NV_path_rendering")]
        PathDashOffsetNV = 0x907E,

        [GLExtension("GL_NV_path_rendering")]
        PathClientLengthNV = 0x907F,

        [GLExtension("GL_NV_path_rendering")]
        PathFillModeNV = 0x9080,

        [GLExtension("GL_NV_path_rendering")]
        PathFillMaskNV = 0x9081,

        [GLExtension("GL_NV_path_rendering")]
        PathFillCoverModeNV = 0x9082,

        [GLExtension("GL_NV_path_rendering")]
        PathStrokeCoverModeNV = 0x9083,

        [GLExtension("GL_NV_path_rendering")]
        PathStrokeMaskNV = 0x9084,

        [GLExtension("GL_NV_path_rendering")]
        PathObjectBoundingBoxNV = 0x908A,

        [GLExtension("GL_NV_path_rendering")]
        PathCommandCountNV = 0x909D,

        [GLExtension("GL_NV_path_rendering")]
        PathCoordCountNV = 0x909E,

        [GLExtension("GL_NV_path_rendering")]
        PathDashArrayCountNV = 0x909F,

        [GLExtension("GL_NV_path_rendering")]
        PathComputedLengthNV = 0x90A0,

        [GLExtension("GL_NV_path_rendering")]
        PathFillBoundingBoxNV = 0x90A1,

        [GLExtension("GL_NV_path_rendering")]
        PathStrokeBoundingBoxNV = 0x90A2,

        [GLExtension("GL_NV_path_rendering")]
        PathDashOffsetResetNV = 0x90B4,
    }

    public enum PathCoverMode
    {

        [GLExtension("GL_NV_path_rendering")]
        PathFillCoverModeNV = 0x9082,

        [GLExtension("GL_NV_path_rendering")]
        ConvexHullNV = 0x908B,

        [GLExtension("GL_NV_path_rendering")]
        BoundingBoxNV = 0x908D,

        [GLExtension("GL_NV_path_rendering")]
        BoundingBoxOfBoundingBoxesNV = 0x909C,
    }

    public enum PathElementType
    {

        [GLExtension("GL_NV_path_rendering")]
        Utf8NV = 0x909A,

        [GLExtension("GL_NV_path_rendering")]
        Utf16NV = 0x909B,
    }

    public enum PathHandleMissingGlyphs
    {

        [GLExtension("GL_NV_path_rendering")]
        SkipMissingGlyphNV = 0x90A9,

        [GLExtension("GL_NV_path_rendering")]
        UseMissingGlyphNV = 0x90AA,
    }

    public enum PathListMode
    {

        [GLExtension("GL_NV_path_rendering")]
        AccumAdjacentPairsNV = 0x90AD,

        [GLExtension("GL_NV_path_rendering")]
        AdjacentPairsNV = 0x90AE,

        [GLExtension("GL_NV_path_rendering")]
        FirstToRestNV = 0x90AF,
    }

    public enum AtomicCounterBufferPName
    {

        [GLExtension("GL_ARB_compute_shader")]
        AtomicCounterBufferReferencedByComputeShader = 0x90ED,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferBinding = 0x92C1,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferDataSize = 0x92C4,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferActiveAtomicCounters = 0x92C5,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferActiveAtomicCounterIndices = 0x92C6,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferReferencedByVertexShader = 0x92C7,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferReferencedByTessControlShader = 0x92C8,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferReferencedByTessEvaluationShader = 0x92C9,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferReferencedByGeometryShader = 0x92CA,

        [GLExtension("GL_ARB_shader_atomic_counters")]
        AtomicCounterBufferReferencedByFragmentShader = 0x92CB,
    }

    public enum SyncParameterName
    {

        [GLExtension("GL_ARB_sync")]
        ObjectType = 0x9112,

        [GLExtension("GL_ARB_sync")]
        SyncCondition = 0x9113,

        [GLExtension("GL_ARB_sync")]
        SyncStatus = 0x9114,

        [GLExtension("GL_ARB_sync")]
        SyncFlags = 0x9115,
    }

    public enum SyncCondition
    {

        [GLExtension("GL_ARB_sync")]
        SyncGpuCommandsComplete = 0x9117,
    }

    public enum SyncStatus
    {

        [GLExtension("GL_ARB_sync")]
        AlreadySignaled = 0x911A,

        [GLExtension("GL_ARB_sync")]
        TimeoutExpired = 0x911B,

        [GLExtension("GL_ARB_sync")]
        ConditionSatisfied = 0x911C,

        [GLExtension("GL_ARB_sync")]
        WaitFailed = 0x911D,
    }

    public enum ProgramInterfacePName
    {

        [GLExtension("GL_ARB_program_interface_query")]
        ActiveResources = 0x92F5,

        [GLExtension("GL_ARB_program_interface_query")]
        MaxNameLength = 0x92F6,

        [GLExtension("GL_ARB_program_interface_query")]
        MaxNumActiveVariables = 0x92F7,

        [GLExtension("GL_ARB_program_interface_query")]
        MaxNumCompatibleSubroutines = 0x92F8,
    }

    public enum FramebufferParameterName
    {

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultWidth = 0x9310,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultHeight = 0x9311,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultLayers = 0x9312,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultSamples = 0x9313,

        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        FramebufferDefaultFixedSampleLocations = 0x9314,
    }

    public enum ClipControlDepth
    {

        [GLExtension("GL_ARB_clip_control")]
        NegativeOneToOne = 0x935E,

        [GLExtension("GL_ARB_clip_control")]
        ZeroToOne = 0x935F,
    }

    public enum TextureLayout
    {

        [GLExtension("GL_EXT_semaphore")]
        LayoutDepthReadOnlyStencilAttachmentEXT = 0x9530,

        [GLExtension("GL_EXT_semaphore")]
        LayoutDepthAttachmentStencilReadOnlyEXT = 0x9531,

        [GLExtension("GL_EXT_semaphore")]
        LayoutGeneralEXT = 0x958D,

        [GLExtension("GL_EXT_semaphore")]
        LayoutColorAttachmentEXT = 0x958E,

        [GLExtension("GL_EXT_semaphore")]
        LayoutDepthStencilAttachmentEXT = 0x958F,

        [GLExtension("GL_EXT_semaphore")]
        LayoutDepthStencilReadOnlyEXT = 0x9590,

        [GLExtension("GL_EXT_semaphore")]
        LayoutShaderReadOnlyEXT = 0x9591,

        [GLExtension("GL_EXT_semaphore")]
        LayoutTransferSrcEXT = 0x9592,

        [GLExtension("GL_EXT_semaphore")]
        LayoutTransferDstEXT = 0x9593,
    }

    public enum MemoryObjectParameterName
    {

        [GLExtension("GL_EXT_memory_object")]
        DedicatedMemoryObjectEXT = 0x9581,

        [GLExtension("GL_EXT_memory_object")]
        ProtectedMemoryObjectEXT = 0x959B,
    }

    public enum ExternalHandleType
    {

        [GLExtension("GL_EXT_memory_object_fd")]
        HandleTypeOpaqueFdEXT = 0x9586,

        [GLExtension("GL_EXT_memory_object_win32")]
        HandleTypeOpaqueWin32EXT = 0x9587,

        [GLExtension("GL_EXT_memory_object_win32")]
        HandleTypeOpaqueWin32KmtEXT = 0x9588,

        [GLExtension("GL_EXT_memory_object_win32")]
        HandleTypeD3d12TilepoolEXT = 0x9589,

        [GLExtension("GL_EXT_memory_object_win32")]
        HandleTypeD3d12ResourceEXT = 0x958A,

        [GLExtension("GL_EXT_memory_object_win32")]
        HandleTypeD3d11ImageEXT = 0x958B,

        [GLExtension("GL_EXT_memory_object_win32")]
        HandleTypeD3d11ImageKmtEXT = 0x958C,

        [GLExtension("GL_EXT_semaphore_win32")]
        HandleTypeD3d12FenceEXT = 0x9594,
    }

    public enum SemaphoreParameterName
    {

        [GLExtension("GL_EXT_semaphore_win32")]
        D3d12FenceValueEXT = 0x9595,

        [GLExtension("GL_NV_timeline_semaphore")]
        TimelineSemaphoreValueNV = 0x9595,

        [GLExtension("GL_NV_timeline_semaphore")]
        SemaphoreTypeNV = 0x95B3,

        [GLExtension("GL_NV_timeline_semaphore")]
        SemaphoreTypeBinaryNV = 0x95B4,

        [GLExtension("GL_NV_timeline_semaphore")]
        SemaphoreTypeTimelineNV = 0x95B5,
    }

    public enum ShadingRateQCOM
    {

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRate1x1PixelsQCOM = 0x96A6,

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRate1x2PixelsQCOM = 0x96A7,

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRate2x1PixelsQCOM = 0x96A8,

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRate2x2PixelsQCOM = 0x96A9,
        ShadingRate1x4PixelsQCOM = 0x96AA,
        ShadingRate4x1PixelsQCOM = 0x96AB,

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRate4x2PixelsQCOM = 0x96AC,
        ShadingRate2x4PixelsQCOM = 0x96AD,

        [GLExtension("GL_QCOM_shading_rate")]
        ShadingRate4x4PixelsQCOM = 0x96AE,
    }

    public enum ShadingRate
    {

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate1x1PixelsEXT = 0x96A6,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate1x2PixelsEXT = 0x96A7,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate2x1PixelsEXT = 0x96A8,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate2x2PixelsEXT = 0x96A9,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate1x4PixelsEXT = 0x96AA,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate4x1PixelsEXT = 0x96AB,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate4x2PixelsEXT = 0x96AC,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate2x4PixelsEXT = 0x96AD,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        ShadingRate4x4PixelsEXT = 0x96AE,
    }

    public enum TexStorageAttribs
    {

        [GLExtension("GL_EXT_EGL_image_storage_compression")]
        SurfaceCompressionEXT = 0x96C0,

        [GLExtension("GL_EXT_EGL_image_storage_compression")]
        SurfaceCompressionFixedRateNoneEXT = 0x96C1,

        [GLExtension("GL_EXT_EGL_image_storage_compression")]
        SurfaceCompressionFixedRateDefaultEXT = 0x96C2,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate1bpcEXT = 0x96C4,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate2bpcEXT = 0x96C5,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate3bpcEXT = 0x96C6,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate4bpcEXT = 0x96C7,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate5bpcEXT = 0x96C8,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate6bpcEXT = 0x96C9,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate7bpcEXT = 0x96CA,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate8bpcEXT = 0x96CB,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate9bpcEXT = 0x96CC,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate10bpcEXT = 0x96CD,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate11bpcEXT = 0x96CE,

        [GLExtension("GL_EXT_texture_storage_compression")]
        SurfaceCompressionFixedRate12bpcEXT = 0x96CF,
    }

    public enum ShadingRateCombinerOp
    {

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateCombinerOpKeepEXT = 0x96D2,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateCombinerOpReplaceEXT = 0x96D3,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateCombinerOpMinEXT = 0x96D4,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateCombinerOpMaxEXT = 0x96D5,

        [GLExtension("GL_EXT_fragment_shading_rate")]
        FragmentShadingRateCombinerOpMulEXT = 0x96D6,
    }

    public enum HintTargetPGI
    {

        [GLExtension("GL_PGI_vertex_hints")]
        VertexDataHintPGI = 0x1A22A,

        [GLExtension("GL_PGI_vertex_hints")]
        VertexConsistentHintPGI = 0x1A22B,

        [GLExtension("GL_PGI_vertex_hints")]
        MaterialSideHintPGI = 0x1A22C,

        [GLExtension("GL_PGI_vertex_hints")]
        MaxVertexHintPGI = 0x1A22D,
    }

    public static class Gl
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTbufferMask3DFX(uint mask);
        private static GLTbufferMask3DFX glTbufferMask3DFX;


        [GLExtension("GL_3DFX_tbuffer")]
        public static void TbufferMask3DFX(uint mask) =>
            glTbufferMask3DFX.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageEnableAMD(int category, DebugSeverity severity, int count, uint[] ids, bool enabled);
        private static GLDebugMessageEnableAMD glDebugMessageEnableAMD;


        [GLExtension("GL_AMD_debug_output")]
        public static void DebugMessageEnableAMD(int category, DebugSeverity severity, int count, uint[] ids, bool enabled) =>
            glDebugMessageEnableAMD.Invoke(category, severity, count, ids, enabled);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageInsertAMD(int category, DebugSeverity severity, uint id, int length, sbyte[] buf);
        private static GLDebugMessageInsertAMD glDebugMessageInsertAMD;


        [GLExtension("GL_AMD_debug_output")]
        public static void DebugMessageInsertAMD(int category, DebugSeverity severity, uint id, int length, sbyte[] buf) =>
            glDebugMessageInsertAMD.Invoke(category, severity, id, length, buf);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageCallbackAMD(DebugProcAMD callback, out nint userParam);
        private static GLDebugMessageCallbackAMD glDebugMessageCallbackAMD;


        [GLExtension("GL_AMD_debug_output")]
        public static void DebugMessageCallbackAMD(DebugProcAMD callback, out nint userParam) =>
            glDebugMessageCallbackAMD.Invoke(callback, out userParam);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetDebugMessageLogAMD(uint count, int bufSize, out int categories, out DebugSeverity severities, out uint ids, out int lengths, out sbyte message);
        private static GLGetDebugMessageLogAMD glGetDebugMessageLogAMD;


        [GLExtension("GL_AMD_debug_output")]
        public static uint GetDebugMessageLogAMD(uint count, int bufSize, out int categories, out DebugSeverity severities, out uint ids, out int lengths, out sbyte message) =>
            glGetDebugMessageLogAMD.Invoke(count, bufSize, out categories, out severities, out ids, out lengths, out message);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncIndexedAMD(uint buf, int src, int dst);
        private static GLBlendFuncIndexedAMD glBlendFuncIndexedAMD;


        [GLExtension("GL_AMD_draw_buffers_blend")]
        public static void BlendFuncIndexedAMD(uint buf, int src, int dst) =>
            glBlendFuncIndexedAMD.Invoke(buf, src, dst);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparateIndexedAMD(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
        private static GLBlendFuncSeparateIndexedAMD glBlendFuncSeparateIndexedAMD;


        [GLExtension("GL_AMD_draw_buffers_blend")]
        public static void BlendFuncSeparateIndexedAMD(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) =>
            glBlendFuncSeparateIndexedAMD.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationIndexedAMD(uint buf, BlendEquationModeEXT mode);
        private static GLBlendEquationIndexedAMD glBlendEquationIndexedAMD;


        [GLExtension("GL_AMD_draw_buffers_blend")]
        public static void BlendEquationIndexedAMD(uint buf, BlendEquationModeEXT mode) =>
            glBlendEquationIndexedAMD.Invoke(buf, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparateIndexedAMD(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparateIndexedAMD glBlendEquationSeparateIndexedAMD;


        [GLExtension("GL_AMD_draw_buffers_blend")]
        public static void BlendEquationSeparateIndexedAMD(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparateIndexedAMD.Invoke(buf, modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisampleAdvancedAMD(RenderbufferTarget target, int samples, int storageSamples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisampleAdvancedAMD glRenderbufferStorageMultisampleAdvancedAMD;


        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        public static void RenderbufferStorageMultisampleAdvancedAMD(RenderbufferTarget target, int samples, int storageSamples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisampleAdvancedAMD.Invoke(target, samples, storageSamples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, InternalFormat internalformat, int width, int height);
        private static GLNamedRenderbufferStorageMultisampleAdvancedAMD glNamedRenderbufferStorageMultisampleAdvancedAMD;


        [GLExtension("GL_AMD_framebuffer_multisample_advanced")]
        public static void NamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, InternalFormat internalformat, int width, int height) =>
            glNamedRenderbufferStorageMultisampleAdvancedAMD.Invoke(renderbuffer, samples, storageSamples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferSamplePositionsfvAMD(FramebufferTarget target, uint numsamples, uint pixelindex, float[] values);
        private static GLFramebufferSamplePositionsfvAMD glFramebufferSamplePositionsfvAMD;


        [GLExtension("GL_AMD_framebuffer_sample_positions")]
        public static void FramebufferSamplePositionsfvAMD(FramebufferTarget target, uint numsamples, uint pixelindex, float[] values) =>
            glFramebufferSamplePositionsfvAMD.Invoke(target, numsamples, pixelindex, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float[] values);
        private static GLNamedFramebufferSamplePositionsfvAMD glNamedFramebufferSamplePositionsfvAMD;


        [GLExtension("GL_AMD_framebuffer_sample_positions")]
        public static void NamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float[] values) =>
            glNamedFramebufferSamplePositionsfvAMD.Invoke(framebuffer, numsamples, pixelindex, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, out float values);
        private static GLGetFramebufferParameterfvAMD glGetFramebufferParameterfvAMD;


        [GLExtension("GL_AMD_framebuffer_sample_positions")]
        public static void GetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, out float values) =>
            glGetFramebufferParameterfvAMD.Invoke(target, pname, numsamples, pixelindex, size, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedFramebufferParameterfvAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, out float values);
        private static GLGetNamedFramebufferParameterfvAMD glGetNamedFramebufferParameterfvAMD;


        [GLExtension("GL_AMD_framebuffer_sample_positions")]
        public static void GetNamedFramebufferParameterfvAMD(uint framebuffer, int pname, uint numsamples, uint pixelindex, int size, out float values) =>
            glGetNamedFramebufferParameterfvAMD.Invoke(framebuffer, pname, numsamples, pixelindex, size, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1i64NV(int location, long x);
        private static GLUniform1i64NV glUniform1i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform1i64NV(int location, long x) =>
            glUniform1i64NV.Invoke(location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2i64NV(int location, long x, long y);
        private static GLUniform2i64NV glUniform2i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform2i64NV(int location, long x, long y) =>
            glUniform2i64NV.Invoke(location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3i64NV(int location, long x, long y, long z);
        private static GLUniform3i64NV glUniform3i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform3i64NV(int location, long x, long y, long z) =>
            glUniform3i64NV.Invoke(location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4i64NV(int location, long x, long y, long z, long w);
        private static GLUniform4i64NV glUniform4i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform4i64NV(int location, long x, long y, long z, long w) =>
            glUniform4i64NV.Invoke(location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1i64vNV(int location, int count, long[] value);
        private static GLUniform1i64vNV glUniform1i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform1i64vNV(int location, int count, long[] value) =>
            glUniform1i64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2i64vNV(int location, int count, long[] value);
        private static GLUniform2i64vNV glUniform2i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform2i64vNV(int location, int count, long[] value) =>
            glUniform2i64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3i64vNV(int location, int count, long[] value);
        private static GLUniform3i64vNV glUniform3i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform3i64vNV(int location, int count, long[] value) =>
            glUniform3i64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4i64vNV(int location, int count, long[] value);
        private static GLUniform4i64vNV glUniform4i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform4i64vNV(int location, int count, long[] value) =>
            glUniform4i64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1ui64NV(int location, ulong x);
        private static GLUniform1ui64NV glUniform1ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform1ui64NV(int location, ulong x) =>
            glUniform1ui64NV.Invoke(location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2ui64NV(int location, ulong x, ulong y);
        private static GLUniform2ui64NV glUniform2ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform2ui64NV(int location, ulong x, ulong y) =>
            glUniform2ui64NV.Invoke(location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3ui64NV(int location, ulong x, ulong y, ulong z);
        private static GLUniform3ui64NV glUniform3ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform3ui64NV(int location, ulong x, ulong y, ulong z) =>
            glUniform3ui64NV.Invoke(location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w);
        private static GLUniform4ui64NV glUniform4ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w) =>
            glUniform4ui64NV.Invoke(location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1ui64vNV(int location, int count, ulong[] value);
        private static GLUniform1ui64vNV glUniform1ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform1ui64vNV(int location, int count, ulong[] value) =>
            glUniform1ui64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2ui64vNV(int location, int count, ulong[] value);
        private static GLUniform2ui64vNV glUniform2ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform2ui64vNV(int location, int count, ulong[] value) =>
            glUniform2ui64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3ui64vNV(int location, int count, ulong[] value);
        private static GLUniform3ui64vNV glUniform3ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform3ui64vNV(int location, int count, ulong[] value) =>
            glUniform3ui64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4ui64vNV(int location, int count, ulong[] value);
        private static GLUniform4ui64vNV glUniform4ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void Uniform4ui64vNV(int location, int count, ulong[] value) =>
            glUniform4ui64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformi64vNV(uint program, int location, out long parameters);
        private static GLGetUniformi64vNV glGetUniformi64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void GetUniformi64vNV(uint program, int location, out long parameters) =>
            glGetUniformi64vNV.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformui64vNV(uint program, int location, out ulong parameters);
        private static GLGetUniformui64vNV glGetUniformui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void GetUniformui64vNV(uint program, int location, out ulong parameters) =>
            glGetUniformui64vNV.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1i64NV(uint program, int location, long x);
        private static GLProgramUniform1i64NV glProgramUniform1i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform1i64NV(uint program, int location, long x) =>
            glProgramUniform1i64NV.Invoke(program, location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2i64NV(uint program, int location, long x, long y);
        private static GLProgramUniform2i64NV glProgramUniform2i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform2i64NV(uint program, int location, long x, long y) =>
            glProgramUniform2i64NV.Invoke(program, location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3i64NV(uint program, int location, long x, long y, long z);
        private static GLProgramUniform3i64NV glProgramUniform3i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform3i64NV(uint program, int location, long x, long y, long z) =>
            glProgramUniform3i64NV.Invoke(program, location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w);
        private static GLProgramUniform4i64NV glProgramUniform4i64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w) =>
            glProgramUniform4i64NV.Invoke(program, location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1i64vNV(uint program, int location, int count, long[] value);
        private static GLProgramUniform1i64vNV glProgramUniform1i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform1i64vNV(uint program, int location, int count, long[] value) =>
            glProgramUniform1i64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2i64vNV(uint program, int location, int count, long[] value);
        private static GLProgramUniform2i64vNV glProgramUniform2i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform2i64vNV(uint program, int location, int count, long[] value) =>
            glProgramUniform2i64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3i64vNV(uint program, int location, int count, long[] value);
        private static GLProgramUniform3i64vNV glProgramUniform3i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform3i64vNV(uint program, int location, int count, long[] value) =>
            glProgramUniform3i64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4i64vNV(uint program, int location, int count, long[] value);
        private static GLProgramUniform4i64vNV glProgramUniform4i64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform4i64vNV(uint program, int location, int count, long[] value) =>
            glProgramUniform4i64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1ui64NV(uint program, int location, ulong x);
        private static GLProgramUniform1ui64NV glProgramUniform1ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform1ui64NV(uint program, int location, ulong x) =>
            glProgramUniform1ui64NV.Invoke(program, location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2ui64NV(uint program, int location, ulong x, ulong y);
        private static GLProgramUniform2ui64NV glProgramUniform2ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform2ui64NV(uint program, int location, ulong x, ulong y) =>
            glProgramUniform2ui64NV.Invoke(program, location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z);
        private static GLProgramUniform3ui64NV glProgramUniform3ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z) =>
            glProgramUniform3ui64NV.Invoke(program, location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w);
        private static GLProgramUniform4ui64NV glProgramUniform4ui64NV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w) =>
            glProgramUniform4ui64NV.Invoke(program, location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1ui64vNV(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform1ui64vNV glProgramUniform1ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform1ui64vNV(uint program, int location, int count, ulong[] value) =>
            glProgramUniform1ui64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2ui64vNV(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform2ui64vNV glProgramUniform2ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform2ui64vNV(uint program, int location, int count, ulong[] value) =>
            glProgramUniform2ui64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3ui64vNV(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform3ui64vNV glProgramUniform3ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform3ui64vNV(uint program, int location, int count, ulong[] value) =>
            glProgramUniform3ui64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4ui64vNV(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform4ui64vNV glProgramUniform4ui64vNV;


        [GLExtension("GL_AMD_gpu_shader_int64")]
        public static void ProgramUniform4ui64vNV(uint program, int location, int count, ulong[] value) =>
            glProgramUniform4ui64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribParameteriAMD(uint index, int pname, int param);
        private static GLVertexAttribParameteriAMD glVertexAttribParameteriAMD;


        [GLExtension("GL_AMD_interleaved_elements")]
        public static void VertexAttribParameteriAMD(uint index, int pname, int param) =>
            glVertexAttribParameteriAMD.Invoke(index, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysIndirectAMD(PrimitiveType mode, nint indirect, int primcount, int stride);
        private static GLMultiDrawArraysIndirectAMD glMultiDrawArraysIndirectAMD;


        [GLExtension("GL_AMD_multi_draw_indirect")]
        public static void MultiDrawArraysIndirectAMD(PrimitiveType mode, nint indirect, int primcount, int stride) =>
            glMultiDrawArraysIndirectAMD.Invoke(mode, indirect, primcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsIndirectAMD(PrimitiveType mode, DrawElementsType type, nint indirect, int primcount, int stride);
        private static GLMultiDrawElementsIndirectAMD glMultiDrawElementsIndirectAMD;


        [GLExtension("GL_AMD_multi_draw_indirect")]
        public static void MultiDrawElementsIndirectAMD(PrimitiveType mode, DrawElementsType type, nint indirect, int primcount, int stride) =>
            glMultiDrawElementsIndirectAMD.Invoke(mode, type, indirect, primcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenNamesAMD(int identifier, uint num, out uint names);
        private static GLGenNamesAMD glGenNamesAMD;


        [GLExtension("GL_AMD_name_gen_delete")]
        public static void GenNamesAMD(int identifier, uint num, out uint names) =>
            glGenNamesAMD.Invoke(identifier, num, out names);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteNamesAMD(int identifier, uint num, uint[] names);
        private static GLDeleteNamesAMD glDeleteNamesAMD;


        [GLExtension("GL_AMD_name_gen_delete")]
        public static void DeleteNamesAMD(int identifier, uint num, uint[] names) =>
            glDeleteNamesAMD.Invoke(identifier, num, names);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsNameAMD(int identifier, uint name);
        private static GLIsNameAMD glIsNameAMD;


        [GLExtension("GL_AMD_name_gen_delete")]
        public static bool IsNameAMD(int identifier, uint name) =>
            glIsNameAMD.Invoke(identifier, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLQueryObjectParameteruiAMD(QueryTarget target, uint id, int pname, uint param);
        private static GLQueryObjectParameteruiAMD glQueryObjectParameteruiAMD;


        [GLExtension("GL_AMD_occlusion_query_event")]
        public static void QueryObjectParameteruiAMD(QueryTarget target, uint id, int pname, uint param) =>
            glQueryObjectParameteruiAMD.Invoke(target, id, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfMonitorGroupsAMD(out int numGroups, int groupsSize, out uint groups);
        private static GLGetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void GetPerfMonitorGroupsAMD(out int numGroups, int groupsSize, out uint groups) =>
            glGetPerfMonitorGroupsAMD.Invoke(out numGroups, groupsSize, out groups);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, int counterSize, out uint counters);
        private static GLGetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void GetPerfMonitorCountersAMD(uint group, out int numCounters, out int maxActiveCounters, int counterSize, out uint counters) =>
            glGetPerfMonitorCountersAMD.Invoke(group, out numCounters, out maxActiveCounters, counterSize, out counters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfMonitorGroupStringAMD(uint group, int bufSize, out int length, out sbyte groupString);
        private static GLGetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, out int length, out sbyte groupString) =>
            glGetPerfMonitorGroupStringAMD.Invoke(group, bufSize, out length, out groupString);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, out int length, out sbyte counterString);
        private static GLGetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, out int length, out sbyte counterString) =>
            glGetPerfMonitorCounterStringAMD.Invoke(group, counter, bufSize, out length, out counterString);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, out nint data);
        private static GLGetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void GetPerfMonitorCounterInfoAMD(uint group, uint counter, int pname, out nint data) =>
            glGetPerfMonitorCounterInfoAMD.Invoke(group, counter, pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenPerfMonitorsAMD(int n, out uint monitors);
        private static GLGenPerfMonitorsAMD glGenPerfMonitorsAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void GenPerfMonitorsAMD(int n, out uint monitors) =>
            glGenPerfMonitorsAMD.Invoke(n, out monitors);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeletePerfMonitorsAMD(int n, out uint monitors);
        private static GLDeletePerfMonitorsAMD glDeletePerfMonitorsAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void DeletePerfMonitorsAMD(int n, out uint monitors) =>
            glDeletePerfMonitorsAMD.Invoke(n, out monitors);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, out uint counterList);
        private static GLSelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void SelectPerfMonitorCountersAMD(uint monitor, bool enable, uint group, int numCounters, out uint counterList) =>
            glSelectPerfMonitorCountersAMD.Invoke(monitor, enable, group, numCounters, out counterList);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginPerfMonitorAMD(uint monitor);
        private static GLBeginPerfMonitorAMD glBeginPerfMonitorAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void BeginPerfMonitorAMD(uint monitor) =>
            glBeginPerfMonitorAMD.Invoke(monitor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndPerfMonitorAMD(uint monitor);
        private static GLEndPerfMonitorAMD glEndPerfMonitorAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void EndPerfMonitorAMD(uint monitor) =>
            glEndPerfMonitorAMD.Invoke(monitor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, out uint data, out int bytesWritten);
        private static GLGetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD;


        [GLExtension("GL_AMD_performance_monitor")]
        public static void GetPerfMonitorCounterDataAMD(uint monitor, int pname, int dataSize, out uint data, out int bytesWritten) =>
            glGetPerfMonitorCounterDataAMD.Invoke(monitor, pname, dataSize, out data, out bytesWritten);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSetMultisamplefvAMD(int pname, uint index, float[] val);
        private static GLSetMultisamplefvAMD glSetMultisamplefvAMD;


        [GLExtension("GL_AMD_sample_positions")]
        public static void SetMultisamplefvAMD(int pname, uint index, float[] val) =>
            glSetMultisamplefvAMD.Invoke(pname, index, val);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageSparseAMD(TextureTarget target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, TextureStorageMaskAMD flags);
        private static GLTexStorageSparseAMD glTexStorageSparseAMD;


        [GLExtension("GL_AMD_sparse_texture")]
        public static void TexStorageSparseAMD(TextureTarget target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, TextureStorageMaskAMD flags) =>
            glTexStorageSparseAMD.Invoke(target, internalFormat, width, height, depth, layers, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorageSparseAMD(uint texture, int target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, TextureStorageMaskAMD flags);
        private static GLTextureStorageSparseAMD glTextureStorageSparseAMD;


        [GLExtension("GL_AMD_sparse_texture")]
        public static void TextureStorageSparseAMD(uint texture, int target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, TextureStorageMaskAMD flags) =>
            glTextureStorageSparseAMD.Invoke(texture, target, internalFormat, width, height, depth, layers, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilOpValueAMD(TriangleFace face, uint value);
        private static GLStencilOpValueAMD glStencilOpValueAMD;


        [GLExtension("GL_AMD_stencil_operation_extended")]
        public static void StencilOpValueAMD(TriangleFace face, uint value) =>
            glStencilOpValueAMD.Invoke(face, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTessellationFactorAMD(float factor);
        private static GLTessellationFactorAMD glTessellationFactorAMD;


        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        public static void TessellationFactorAMD(float factor) =>
            glTessellationFactorAMD.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTessellationModeAMD(int mode);
        private static GLTessellationModeAMD glTessellationModeAMD;


        [GLExtension("GL_AMD_vertex_shader_tessellator")]
        public static void TessellationModeAMD(int mode) =>
            glTessellationModeAMD.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        private static GLBlitFramebufferANGLE glBlitFramebufferANGLE;


        [GLExtension("GL_ANGLE_framebuffer_blit")]
        public static void BlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter) =>
            glBlitFramebufferANGLE.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisampleANGLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisampleANGLE glRenderbufferStorageMultisampleANGLE;


        [GLExtension("GL_ANGLE_framebuffer_multisample")]
        public static void RenderbufferStorageMultisampleANGLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisampleANGLE.Invoke(target, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysInstancedANGLE(PrimitiveType mode, int first, int count, int primcount);
        private static GLDrawArraysInstancedANGLE glDrawArraysInstancedANGLE;


        [GLExtension("GL_ANGLE_instanced_arrays")]
        public static void DrawArraysInstancedANGLE(PrimitiveType mode, int first, int count, int primcount) =>
            glDrawArraysInstancedANGLE.Invoke(mode, first, count, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedANGLE(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount);
        private static GLDrawElementsInstancedANGLE glDrawElementsInstancedANGLE;


        [GLExtension("GL_ANGLE_instanced_arrays")]
        public static void DrawElementsInstancedANGLE(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount) =>
            glDrawElementsInstancedANGLE.Invoke(mode, count, type, indices, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribDivisorANGLE(uint index, uint divisor);
        private static GLVertexAttribDivisorANGLE glVertexAttribDivisorANGLE;


        [GLExtension("GL_ANGLE_instanced_arrays")]
        public static void VertexAttribDivisorANGLE(uint index, uint divisor) =>
            glVertexAttribDivisorANGLE.Invoke(index, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTranslatedShaderSourceANGLE(uint shader, int bufSize, out int length, out sbyte source);
        private static GLGetTranslatedShaderSourceANGLE glGetTranslatedShaderSourceANGLE;


        [GLExtension("GL_ANGLE_translated_shader_source")]
        public static void GetTranslatedShaderSourceANGLE(uint shader, int bufSize, out int length, out sbyte source) =>
            glGetTranslatedShaderSourceANGLE.Invoke(shader, bufSize, out length, out source);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount);
        private static GLCopyTextureLevelsAPPLE glCopyTextureLevelsAPPLE;


        [GLExtension("GL_APPLE_copy_texture_levels")]
        public static void CopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount) =>
            glCopyTextureLevelsAPPLE.Invoke(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLElementPointerAPPLE(ElementPointerTypeATI type, nint pointer);
        private static GLElementPointerAPPLE glElementPointerAPPLE;


        [GLExtension("GL_APPLE_element_array")]
        public static void ElementPointerAPPLE(ElementPointerTypeATI type, nint pointer) =>
            glElementPointerAPPLE.Invoke(type, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementArrayAPPLE(PrimitiveType mode, int first, int count);
        private static GLDrawElementArrayAPPLE glDrawElementArrayAPPLE;


        [GLExtension("GL_APPLE_element_array")]
        public static void DrawElementArrayAPPLE(PrimitiveType mode, int first, int count) =>
            glDrawElementArrayAPPLE.Invoke(mode, first, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int first, int count);
        private static GLDrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE;


        [GLExtension("GL_APPLE_element_array")]
        public static void DrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int first, int count) =>
            glDrawRangeElementArrayAPPLE.Invoke(mode, start, end, first, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementArrayAPPLE(PrimitiveType mode, int[] first, int[] count, int primcount);
        private static GLMultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE;


        [GLExtension("GL_APPLE_element_array")]
        public static void MultiDrawElementArrayAPPLE(PrimitiveType mode, int[] first, int[] count, int primcount) =>
            glMultiDrawElementArrayAPPLE.Invoke(mode, first, count, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int[] first, int[] count, int primcount);
        private static GLMultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE;


        [GLExtension("GL_APPLE_element_array")]
        public static void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int[] first, int[] count, int primcount) =>
            glMultiDrawRangeElementArrayAPPLE.Invoke(mode, start, end, first, count, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenFencesAPPLE(int n, out uint fences);
        private static GLGenFencesAPPLE glGenFencesAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static void GenFencesAPPLE(int n, out uint fences) =>
            glGenFencesAPPLE.Invoke(n, out fences);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteFencesAPPLE(int n, uint[] fences);
        private static GLDeleteFencesAPPLE glDeleteFencesAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static void DeleteFencesAPPLE(int n, uint[] fences) =>
            glDeleteFencesAPPLE.Invoke(n, fences);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSetFenceAPPLE(uint fence);
        private static GLSetFenceAPPLE glSetFenceAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static void SetFenceAPPLE(uint fence) =>
            glSetFenceAPPLE.Invoke(fence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsFenceAPPLE(uint fence);
        private static GLIsFenceAPPLE glIsFenceAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static bool IsFenceAPPLE(uint fence) =>
            glIsFenceAPPLE.Invoke(fence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLTestFenceAPPLE(uint fence);
        private static GLTestFenceAPPLE glTestFenceAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static bool TestFenceAPPLE(uint fence) =>
            glTestFenceAPPLE.Invoke(fence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFinishFenceAPPLE(uint fence);
        private static GLFinishFenceAPPLE glFinishFenceAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static void FinishFenceAPPLE(uint fence) =>
            glFinishFenceAPPLE.Invoke(fence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLTestObjectAPPLE(ObjectTypeAPPLE object, uint name);
        private static GLTestObjectAPPLE glTestObjectAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static bool TestObjectAPPLE(ObjectTypeAPPLE object, uint name) =>
            glTestObjectAPPLE.Invoke(object, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFinishObjectAPPLE(ObjectTypeAPPLE object, int name);
        private static GLFinishObjectAPPLE glFinishObjectAPPLE;


        [GLExtension("GL_APPLE_fence")]
        public static void FinishObjectAPPLE(ObjectTypeAPPLE object, int name) =>
            glFinishObjectAPPLE.Invoke(object, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferParameteriAPPLE(int target, int pname, int param);
        private static GLBufferParameteriAPPLE glBufferParameteriAPPLE;


        [GLExtension("GL_APPLE_flush_buffer_range")]
        public static void BufferParameteriAPPLE(int target, int pname, int param) =>
            glBufferParameteriAPPLE.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushMappedBufferRangeAPPLE(BufferTargetARB target, nint offset, nint size);
        private static GLFlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE;


        [GLExtension("GL_APPLE_flush_buffer_range")]
        public static void FlushMappedBufferRangeAPPLE(BufferTargetARB target, nint offset, nint size) =>
            glFlushMappedBufferRangeAPPLE.Invoke(target, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisampleAPPLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisampleAPPLE glRenderbufferStorageMultisampleAPPLE;


        [GLExtension("GL_APPLE_framebuffer_multisample")]
        public static void RenderbufferStorageMultisampleAPPLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisampleAPPLE.Invoke(target, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResolveMultisampleFramebufferAPPLE();
        private static GLResolveMultisampleFramebufferAPPLE glResolveMultisampleFramebufferAPPLE;


        [GLExtension("GL_APPLE_framebuffer_multisample")]
        public static void ResolveMultisampleFramebufferAPPLE() =>
            glResolveMultisampleFramebufferAPPLE.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLObjectPurgeableAPPLE(int objectType, uint name, int option);
        private static GLObjectPurgeableAPPLE glObjectPurgeableAPPLE;


        [GLExtension("GL_APPLE_object_purgeable")]
        public static int ObjectPurgeableAPPLE(int objectType, uint name, int option) =>
            glObjectPurgeableAPPLE.Invoke(objectType, name, option);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLObjectUnpurgeableAPPLE(int objectType, uint name, int option);
        private static GLObjectUnpurgeableAPPLE glObjectUnpurgeableAPPLE;


        [GLExtension("GL_APPLE_object_purgeable")]
        public static int ObjectUnpurgeableAPPLE(int objectType, uint name, int option) =>
            glObjectUnpurgeableAPPLE.Invoke(objectType, name, option);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectParameterivAPPLE(int objectType, uint name, int pname, out int parameters);
        private static GLGetObjectParameterivAPPLE glGetObjectParameterivAPPLE;


        [GLExtension("GL_APPLE_object_purgeable")]
        public static void GetObjectParameterivAPPLE(int objectType, uint name, int pname, out int parameters) =>
            glGetObjectParameterivAPPLE.Invoke(objectType, name, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLFenceSyncAPPLE(SyncCondition condition, SyncBehaviorFlags flags);
        private static GLFenceSyncAPPLE glFenceSyncAPPLE;


        [GLExtension("GL_APPLE_sync")]
        public static nint FenceSyncAPPLE(SyncCondition condition, SyncBehaviorFlags flags) =>
            glFenceSyncAPPLE.Invoke(condition, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsSyncAPPLE(nint sync);
        private static GLIsSyncAPPLE glIsSyncAPPLE;


        [GLExtension("GL_APPLE_sync")]
        public static bool IsSyncAPPLE(nint sync) =>
            glIsSyncAPPLE.Invoke(sync);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteSyncAPPLE(nint sync);
        private static GLDeleteSyncAPPLE glDeleteSyncAPPLE;


        [GLExtension("GL_APPLE_sync")]
        public static void DeleteSyncAPPLE(nint sync) =>
            glDeleteSyncAPPLE.Invoke(sync);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate SyncStatus GLClientWaitSyncAPPLE(nint sync, SyncObjectMask flags, ulong timeout);
        private static GLClientWaitSyncAPPLE glClientWaitSyncAPPLE;


        [GLExtension("GL_APPLE_sync")]
        public static SyncStatus ClientWaitSyncAPPLE(nint sync, SyncObjectMask flags, ulong timeout) =>
            glClientWaitSyncAPPLE.Invoke(sync, flags, timeout);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWaitSyncAPPLE(nint sync, SyncBehaviorFlags flags, ulong timeout);
        private static GLWaitSyncAPPLE glWaitSyncAPPLE;


        [GLExtension("GL_APPLE_sync")]
        public static void WaitSyncAPPLE(nint sync, SyncBehaviorFlags flags, ulong timeout) =>
            glWaitSyncAPPLE.Invoke(sync, flags, timeout);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInteger64vAPPLE(GetPName pname, out long parameters);
        private static GLGetInteger64vAPPLE glGetInteger64vAPPLE;


        [GLExtension("GL_APPLE_sync")]
        public static void GetInteger64vAPPLE(GetPName pname, out long parameters) =>
            glGetInteger64vAPPLE.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSyncivAPPLE(nint sync, SyncParameterName pname, int count, out int length, out int values);
        private static GLGetSyncivAPPLE glGetSyncivAPPLE;


        [GLExtension("GL_APPLE_sync")]
        public static void GetSyncivAPPLE(nint sync, SyncParameterName pname, int count, out int length, out int values) =>
            glGetSyncivAPPLE.Invoke(sync, pname, count, out length, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureRangeAPPLE(int target, int length, nint pointer);
        private static GLTextureRangeAPPLE glTextureRangeAPPLE;


        [GLExtension("GL_APPLE_texture_range")]
        public static void TextureRangeAPPLE(int target, int length, nint pointer) =>
            glTextureRangeAPPLE.Invoke(target, length, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterPointervAPPLE(int target, int pname, out nint parameters);
        private static GLGetTexParameterPointervAPPLE glGetTexParameterPointervAPPLE;


        [GLExtension("GL_APPLE_texture_range")]
        public static void GetTexParameterPointervAPPLE(int target, int pname, out nint parameters) =>
            glGetTexParameterPointervAPPLE.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVertexArrayAPPLE(uint array);
        private static GLBindVertexArrayAPPLE glBindVertexArrayAPPLE;


        [GLExtension("GL_APPLE_vertex_array_object")]
        public static void BindVertexArrayAPPLE(uint array) =>
            glBindVertexArrayAPPLE.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteVertexArraysAPPLE(int n, uint[] arrays);
        private static GLDeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE;


        [GLExtension("GL_APPLE_vertex_array_object")]
        public static void DeleteVertexArraysAPPLE(int n, uint[] arrays) =>
            glDeleteVertexArraysAPPLE.Invoke(n, arrays);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenVertexArraysAPPLE(int n, out uint arrays);
        private static GLGenVertexArraysAPPLE glGenVertexArraysAPPLE;


        [GLExtension("GL_APPLE_vertex_array_object")]
        public static void GenVertexArraysAPPLE(int n, out uint arrays) =>
            glGenVertexArraysAPPLE.Invoke(n, out arrays);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsVertexArrayAPPLE(uint array);
        private static GLIsVertexArrayAPPLE glIsVertexArrayAPPLE;


        [GLExtension("GL_APPLE_vertex_array_object")]
        public static bool IsVertexArrayAPPLE(uint array) =>
            glIsVertexArrayAPPLE.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayRangeAPPLE(int length, out nint pointer);
        private static GLVertexArrayRangeAPPLE glVertexArrayRangeAPPLE;


        [GLExtension("GL_APPLE_vertex_array_range")]
        public static void VertexArrayRangeAPPLE(int length, out nint pointer) =>
            glVertexArrayRangeAPPLE.Invoke(length, out pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushVertexArrayRangeAPPLE(int length, out nint pointer);
        private static GLFlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE;


        [GLExtension("GL_APPLE_vertex_array_range")]
        public static void FlushVertexArrayRangeAPPLE(int length, out nint pointer) =>
            glFlushVertexArrayRangeAPPLE.Invoke(length, out pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayParameteriAPPLE(VertexArrayPNameAPPLE pname, int param);
        private static GLVertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE;


        [GLExtension("GL_APPLE_vertex_array_range")]
        public static void VertexArrayParameteriAPPLE(VertexArrayPNameAPPLE pname, int param) =>
            glVertexArrayParameteriAPPLE.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableVertexAttribAPPLE(uint index, int pname);
        private static GLEnableVertexAttribAPPLE glEnableVertexAttribAPPLE;


        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        public static void EnableVertexAttribAPPLE(uint index, int pname) =>
            glEnableVertexAttribAPPLE.Invoke(index, pname);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableVertexAttribAPPLE(uint index, int pname);
        private static GLDisableVertexAttribAPPLE glDisableVertexAttribAPPLE;


        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        public static void DisableVertexAttribAPPLE(uint index, int pname) =>
            glDisableVertexAttribAPPLE.Invoke(index, pname);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsVertexAttribEnabledAPPLE(uint index, int pname);
        private static GLIsVertexAttribEnabledAPPLE glIsVertexAttribEnabledAPPLE;


        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        public static bool IsVertexAttribEnabledAPPLE(uint index, int pname) =>
            glIsVertexAttribEnabledAPPLE.Invoke(index, pname);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double[] points);
        private static GLMapVertexAttrib1dAPPLE glMapVertexAttrib1dAPPLE;


        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        public static void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double[] points) =>
            glMapVertexAttrib1dAPPLE.Invoke(index, size, u1, u2, stride, order, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float[] points);
        private static GLMapVertexAttrib1fAPPLE glMapVertexAttrib1fAPPLE;


        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        public static void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float[] points) =>
            glMapVertexAttrib1fAPPLE.Invoke(index, size, u1, u2, stride, order, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points);
        private static GLMapVertexAttrib2dAPPLE glMapVertexAttrib2dAPPLE;


        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        public static void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points) =>
            glMapVertexAttrib2dAPPLE.Invoke(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points);
        private static GLMapVertexAttrib2fAPPLE glMapVertexAttrib2fAPPLE;


        [GLExtension("GL_APPLE_vertex_program_evaluators")]
        public static void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points) =>
            glMapVertexAttrib2fAPPLE.Invoke(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReleaseShaderCompiler();
        private static GLReleaseShaderCompiler glReleaseShaderCompiler;


        [GLExtension("GL_ARB_ES2_compatibility")]
        public static void ReleaseShaderCompiler() =>
            glReleaseShaderCompiler.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShaderBinary(int count, uint[] shaders, ShaderBinaryFormat binaryFormat, nint binary, int length);
        private static GLShaderBinary glShaderBinary;


        [GLExtension("GL_ARB_ES2_compatibility")]
        public static void ShaderBinary(int count, uint[] shaders, ShaderBinaryFormat binaryFormat, nint binary, int length) =>
            glShaderBinary.Invoke(count, shaders, binaryFormat, binary, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, out int range, out int precision);
        private static GLGetShaderPrecisionFormat glGetShaderPrecisionFormat;


        [GLExtension("GL_ARB_ES2_compatibility")]
        public static void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, out int range, out int precision) =>
            glGetShaderPrecisionFormat.Invoke(shadertype, precisiontype, out range, out precision);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangef(float n, float f);
        private static GLDepthRangef glDepthRangef;


        [GLExtension("GL_ARB_ES2_compatibility")]
        public static void DepthRangef(float n, float f) =>
            glDepthRangef.Invoke(n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearDepthf(float d);
        private static GLClearDepthf glClearDepthf;


        [GLExtension("GL_ARB_ES2_compatibility")]
        public static void ClearDepthf(float d) =>
            glClearDepthf.Invoke(d);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMemoryBarrierByRegion(MemoryBarrierMask barriers);
        private static GLMemoryBarrierByRegion glMemoryBarrierByRegion;


        [GLExtension("GL_ARB_ES3_1_compatibility")]
        public static void MemoryBarrierByRegion(MemoryBarrierMask barriers) =>
            glMemoryBarrierByRegion.Invoke(barriers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        private static GLPrimitiveBoundingBoxARB glPrimitiveBoundingBoxARB;


        [GLExtension("GL_ARB_ES3_2_compatibility")]
        public static void PrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) =>
            glPrimitiveBoundingBoxARB.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance);
        private static GLDrawArraysInstancedBaseInstance glDrawArraysInstancedBaseInstance;


        [GLExtension("GL_ARB_base_instance")]
        public static void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance) =>
            glDrawArraysInstancedBaseInstance.Invoke(mode, first, count, instancecount, baseinstance);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, uint baseinstance);
        private static GLDrawElementsInstancedBaseInstance glDrawElementsInstancedBaseInstance;


        [GLExtension("GL_ARB_base_instance")]
        public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, uint baseinstance) =>
            glDrawElementsInstancedBaseInstance.Invoke(mode, count, type, indices, instancecount, baseinstance);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex, uint baseinstance);
        private static GLDrawElementsInstancedBaseVertexBaseInstance glDrawElementsInstancedBaseVertexBaseInstance;


        [GLExtension("GL_ARB_base_instance")]
        public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex, uint baseinstance) =>
            glDrawElementsInstancedBaseVertexBaseInstance.Invoke(mode, count, type, indices, instancecount, basevertex, baseinstance);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetTextureHandleARB(uint texture);
        private static GLGetTextureHandleARB glGetTextureHandleARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static ulong GetTextureHandleARB(uint texture) =>
            glGetTextureHandleARB.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetTextureSamplerHandleARB(uint texture, uint sampler);
        private static GLGetTextureSamplerHandleARB glGetTextureSamplerHandleARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static ulong GetTextureSamplerHandleARB(uint texture, uint sampler) =>
            glGetTextureSamplerHandleARB.Invoke(texture, sampler);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeTextureHandleResidentARB(ulong handle);
        private static GLMakeTextureHandleResidentARB glMakeTextureHandleResidentARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void MakeTextureHandleResidentARB(ulong handle) =>
            glMakeTextureHandleResidentARB.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeTextureHandleNonResidentARB(ulong handle);
        private static GLMakeTextureHandleNonResidentARB glMakeTextureHandleNonResidentARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void MakeTextureHandleNonResidentARB(ulong handle) =>
            glMakeTextureHandleNonResidentARB.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetImageHandleARB(uint texture, int level, bool layered, int layer, PixelFormat format);
        private static GLGetImageHandleARB glGetImageHandleARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static ulong GetImageHandleARB(uint texture, int level, bool layered, int layer, PixelFormat format) =>
            glGetImageHandleARB.Invoke(texture, level, layered, layer, format);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeImageHandleResidentARB(ulong handle, int access);
        private static GLMakeImageHandleResidentARB glMakeImageHandleResidentARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void MakeImageHandleResidentARB(ulong handle, int access) =>
            glMakeImageHandleResidentARB.Invoke(handle, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeImageHandleNonResidentARB(ulong handle);
        private static GLMakeImageHandleNonResidentARB glMakeImageHandleNonResidentARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void MakeImageHandleNonResidentARB(ulong handle) =>
            glMakeImageHandleNonResidentARB.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformHandleui64ARB(int location, ulong value);
        private static GLUniformHandleui64ARB glUniformHandleui64ARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void UniformHandleui64ARB(int location, ulong value) =>
            glUniformHandleui64ARB.Invoke(location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformHandleui64vARB(int location, int count, ulong[] value);
        private static GLUniformHandleui64vARB glUniformHandleui64vARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void UniformHandleui64vARB(int location, int count, ulong[] value) =>
            glUniformHandleui64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformHandleui64ARB(uint program, int location, ulong value);
        private static GLProgramUniformHandleui64ARB glProgramUniformHandleui64ARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void ProgramUniformHandleui64ARB(uint program, int location, ulong value) =>
            glProgramUniformHandleui64ARB.Invoke(program, location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformHandleui64vARB(uint program, int location, int count, ulong[] values);
        private static GLProgramUniformHandleui64vARB glProgramUniformHandleui64vARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void ProgramUniformHandleui64vARB(uint program, int location, int count, ulong[] values) =>
            glProgramUniformHandleui64vARB.Invoke(program, location, count, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsTextureHandleResidentARB(ulong handle);
        private static GLIsTextureHandleResidentARB glIsTextureHandleResidentARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static bool IsTextureHandleResidentARB(ulong handle) =>
            glIsTextureHandleResidentARB.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsImageHandleResidentARB(ulong handle);
        private static GLIsImageHandleResidentARB glIsImageHandleResidentARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static bool IsImageHandleResidentARB(ulong handle) =>
            glIsImageHandleResidentARB.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1ui64ARB(uint index, ulong x);
        private static GLVertexAttribL1ui64ARB glVertexAttribL1ui64ARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void VertexAttribL1ui64ARB(uint index, ulong x) =>
            glVertexAttribL1ui64ARB.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1ui64vARB(uint index, ulong[] v);
        private static GLVertexAttribL1ui64vARB glVertexAttribL1ui64vARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void VertexAttribL1ui64vARB(uint index, ulong[] v) =>
            glVertexAttribL1ui64vARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribLui64vARB(uint index, VertexAttribEnum pname, out ulong parameters);
        private static GLGetVertexAttribLui64vARB glGetVertexAttribLui64vARB;


        [GLExtension("GL_ARB_bindless_texture")]
        public static void GetVertexAttribLui64vARB(uint index, VertexAttribEnum pname, out ulong parameters) =>
            glGetVertexAttribLui64vARB.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, sbyte[] name);
        private static GLBindFragDataLocationIndexed glBindFragDataLocationIndexed;


        [GLExtension("GL_ARB_blend_func_extended")]
        public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, sbyte[] name) =>
            glBindFragDataLocationIndexed.Invoke(program, colorNumber, index, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetFragDataIndex(uint program, sbyte[] name);
        private static GLGetFragDataIndex glGetFragDataIndex;


        [GLExtension("GL_ARB_blend_func_extended")]
        public static int GetFragDataIndex(uint program, sbyte[] name) =>
            glGetFragDataIndex.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferStorage(BufferStorageTarget target, nint size, nint data, BufferStorageMask flags);
        private static GLBufferStorage glBufferStorage;


        [GLExtension("GL_ARB_buffer_storage")]
        public static void BufferStorage(BufferStorageTarget target, nint size, nint data, BufferStorageMask flags) =>
            glBufferStorage.Invoke(target, size, data, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLCreateSyncFromCLeventARB(out nint context, out nint event, uint flags);
        private static GLCreateSyncFromCLeventARB glCreateSyncFromCLeventARB;


        [GLExtension("GL_ARB_cl_event")]
        public static nint CreateSyncFromCLeventARB(out nint context, out nint event, uint flags) =>
            glCreateSyncFromCLeventARB.Invoke(out context, out event, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data);
        private static GLClearBufferData glClearBufferData;


        [GLExtension("GL_ARB_clear_buffer_object")]
        public static void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data) =>
            glClearBufferData.Invoke(target, internalformat, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, nint data);
        private static GLClearBufferSubData glClearBufferSubData;


        [GLExtension("GL_ARB_clear_buffer_object")]
        public static void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, nint data) =>
            glClearBufferSubData.Invoke(target, internalformat, offset, size, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearTexImage(uint texture, int level, PixelFormat format, PixelType type, nint data);
        private static GLClearTexImage glClearTexImage;


        [GLExtension("GL_ARB_clear_texture")]
        public static void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, nint data) =>
            glClearTexImage.Invoke(texture, level, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint data);
        private static GLClearTexSubImage glClearTexSubImage;


        [GLExtension("GL_ARB_clear_texture")]
        public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint data) =>
            glClearTexSubImage.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipControl(ClipControlOrigin origin, ClipControlDepth depth);
        private static GLClipControl glClipControl;


        [GLExtension("GL_ARB_clip_control")]
        public static void ClipControl(ClipControlOrigin origin, ClipControlDepth depth) =>
            glClipControl.Invoke(origin, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClampColorARB(ClampColorTargetARB target, ClampColorModeARB clamp);
        private static GLClampColorARB glClampColorARB;


        [GLExtension("GL_ARB_color_buffer_float")]
        public static void ClampColorARB(ClampColorTargetARB target, ClampColorModeARB clamp) =>
            glClampColorARB.Invoke(target, clamp);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z);
        private static GLDispatchCompute glDispatchCompute;


        [GLExtension("GL_ARB_compute_shader")]
        public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z) =>
            glDispatchCompute.Invoke(num_groups_x, num_groups_y, num_groups_z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDispatchComputeIndirect(nint indirect);
        private static GLDispatchComputeIndirect glDispatchComputeIndirect;


        [GLExtension("GL_ARB_compute_shader")]
        public static void DispatchComputeIndirect(nint indirect) =>
            glDispatchComputeIndirect.Invoke(indirect);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z);
        private static GLDispatchComputeGroupSizeARB glDispatchComputeGroupSizeARB;


        [GLExtension("GL_ARB_compute_variable_group_size")]
        public static void DispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z) =>
            glDispatchComputeGroupSizeARB.Invoke(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, nint readOffset, nint writeOffset, nint size);
        private static GLCopyBufferSubData glCopyBufferSubData;


        [GLExtension("GL_ARB_copy_buffer")]
        public static void CopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, nint readOffset, nint writeOffset, nint size) =>
            glCopyBufferSubData.Invoke(readTarget, writeTarget, readOffset, writeOffset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyImageSubData(uint srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        private static GLCopyImageSubData glCopyImageSubData;


        [GLExtension("GL_ARB_copy_image")]
        public static void CopyImageSubData(uint srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) =>
            glCopyImageSubData.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled);
        private static GLDebugMessageControlARB glDebugMessageControlARB;


        [GLExtension("GL_ARB_debug_output")]
        public static void DebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled) =>
            glDebugMessageControlARB.Invoke(source, type, severity, count, ids, enabled);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageInsertARB(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, sbyte[] buf);
        private static GLDebugMessageInsertARB glDebugMessageInsertARB;


        [GLExtension("GL_ARB_debug_output")]
        public static void DebugMessageInsertARB(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, sbyte[] buf) =>
            glDebugMessageInsertARB.Invoke(source, type, id, severity, length, buf);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageCallbackARB(DebugProc callback, nint userParam);
        private static GLDebugMessageCallbackARB glDebugMessageCallbackARB;


        [GLExtension("GL_ARB_debug_output")]
        public static void DebugMessageCallbackARB(DebugProc callback, nint userParam) =>
            glDebugMessageCallbackARB.Invoke(callback, userParam);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetDebugMessageLogARB(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, out sbyte messageLog);
        private static GLGetDebugMessageLogARB glGetDebugMessageLogARB;


        [GLExtension("GL_ARB_debug_output")]
        public static uint GetDebugMessageLogARB(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, out sbyte messageLog) =>
            glGetDebugMessageLogARB.Invoke(count, bufSize, out sources, out types, out ids, out severities, out lengths, out messageLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateTransformFeedbacks(int n, out uint ids);
        private static GLCreateTransformFeedbacks glCreateTransformFeedbacks;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateTransformFeedbacks(int n, out uint ids) =>
            glCreateTransformFeedbacks.Invoke(n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformFeedbackBufferBase(uint xfb, uint index, uint buffer);
        private static GLTransformFeedbackBufferBase glTransformFeedbackBufferBase;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer) =>
            glTransformFeedbackBufferBase.Invoke(xfb, index, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, nint size);
        private static GLTransformFeedbackBufferRange glTransformFeedbackBufferRange;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, nint size) =>
            glTransformFeedbackBufferRange.Invoke(xfb, index, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTransformFeedbackiv(uint xfb, TransformFeedbackPName pname, out int param);
        private static GLGetTransformFeedbackiv glGetTransformFeedbackiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTransformFeedbackiv(uint xfb, TransformFeedbackPName pname, out int param) =>
            glGetTransformFeedbackiv.Invoke(xfb, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTransformFeedbacki_v(uint xfb, TransformFeedbackPName pname, uint index, out int param);
        private static GLGetTransformFeedbacki_v glGetTransformFeedbacki_v;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTransformFeedbacki_v(uint xfb, TransformFeedbackPName pname, uint index, out int param) =>
            glGetTransformFeedbacki_v.Invoke(xfb, pname, index, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTransformFeedbacki64_v(uint xfb, TransformFeedbackPName pname, uint index, out long param);
        private static GLGetTransformFeedbacki64_v glGetTransformFeedbacki64_v;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTransformFeedbacki64_v(uint xfb, TransformFeedbackPName pname, uint index, out long param) =>
            glGetTransformFeedbacki64_v.Invoke(xfb, pname, index, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateBuffers(int n, out uint buffers);
        private static GLCreateBuffers glCreateBuffers;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateBuffers(int n, out uint buffers) =>
            glCreateBuffers.Invoke(n, out buffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferStorage(uint buffer, nint size, nint data, BufferStorageMask flags);
        private static GLNamedBufferStorage glNamedBufferStorage;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedBufferStorage(uint buffer, nint size, nint data, BufferStorageMask flags) =>
            glNamedBufferStorage.Invoke(buffer, size, data, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferData(uint buffer, nint size, nint data, VertexBufferObjectUsage usage);
        private static GLNamedBufferData glNamedBufferData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedBufferData(uint buffer, nint size, nint data, VertexBufferObjectUsage usage) =>
            glNamedBufferData.Invoke(buffer, size, data, usage);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferSubData(uint buffer, nint offset, nint size, nint data);
        private static GLNamedBufferSubData glNamedBufferSubData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedBufferSubData(uint buffer, nint offset, nint size, nint data) =>
            glNamedBufferSubData.Invoke(buffer, offset, size, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);
        private static GLCopyNamedBufferSubData glCopyNamedBufferSubData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size) =>
            glCopyNamedBufferSubData.Invoke(readBuffer, writeBuffer, readOffset, writeOffset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedBufferData(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data);
        private static GLClearNamedBufferData glClearNamedBufferData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void ClearNamedBufferData(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data) =>
            glClearNamedBufferData.Invoke(buffer, internalformat, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedBufferSubData(uint buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, nint data);
        private static GLClearNamedBufferSubData glClearNamedBufferSubData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void ClearNamedBufferSubData(uint buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, nint data) =>
            glClearNamedBufferSubData.Invoke(buffer, internalformat, offset, size, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapNamedBuffer(uint buffer, BufferAccessARB access);
        private static GLMapNamedBuffer glMapNamedBuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static nint MapNamedBuffer(uint buffer, BufferAccessARB access) =>
            glMapNamedBuffer.Invoke(buffer, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapNamedBufferRange(uint buffer, nint offset, nint length, MapBufferAccessMask access);
        private static GLMapNamedBufferRange glMapNamedBufferRange;


        [GLExtension("GL_ARB_direct_state_access")]
        public static nint MapNamedBufferRange(uint buffer, nint offset, nint length, MapBufferAccessMask access) =>
            glMapNamedBufferRange.Invoke(buffer, offset, length, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLUnmapNamedBuffer(uint buffer);
        private static GLUnmapNamedBuffer glUnmapNamedBuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static bool UnmapNamedBuffer(uint buffer) =>
            glUnmapNamedBuffer.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushMappedNamedBufferRange(uint buffer, nint offset, nint length);
        private static GLFlushMappedNamedBufferRange glFlushMappedNamedBufferRange;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void FlushMappedNamedBufferRange(uint buffer, nint offset, nint length) =>
            glFlushMappedNamedBufferRange.Invoke(buffer, offset, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferParameteriv(uint buffer, BufferPNameARB pname, out int parameters);
        private static GLGetNamedBufferParameteriv glGetNamedBufferParameteriv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetNamedBufferParameteriv(uint buffer, BufferPNameARB pname, out int parameters) =>
            glGetNamedBufferParameteriv.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferParameteri64v(uint buffer, BufferPNameARB pname, out long parameters);
        private static GLGetNamedBufferParameteri64v glGetNamedBufferParameteri64v;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetNamedBufferParameteri64v(uint buffer, BufferPNameARB pname, out long parameters) =>
            glGetNamedBufferParameteri64v.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferPointerv(uint buffer, BufferPointerNameARB pname, out nint parameters);
        private static GLGetNamedBufferPointerv glGetNamedBufferPointerv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetNamedBufferPointerv(uint buffer, BufferPointerNameARB pname, out nint parameters) =>
            glGetNamedBufferPointerv.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferSubData(uint buffer, nint offset, nint size, out nint data);
        private static GLGetNamedBufferSubData glGetNamedBufferSubData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetNamedBufferSubData(uint buffer, nint offset, nint size, out nint data) =>
            glGetNamedBufferSubData.Invoke(buffer, offset, size, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateFramebuffers(int n, out uint framebuffers);
        private static GLCreateFramebuffers glCreateFramebuffers;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateFramebuffers(int n, out uint framebuffers) =>
            glCreateFramebuffers.Invoke(n, out framebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        private static GLNamedFramebufferRenderbuffer glNamedFramebufferRenderbuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer) =>
            glNamedFramebufferRenderbuffer.Invoke(framebuffer, attachment, renderbuffertarget, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferParameteri(uint framebuffer, FramebufferParameterName pname, int param);
        private static GLNamedFramebufferParameteri glNamedFramebufferParameteri;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedFramebufferParameteri(uint framebuffer, FramebufferParameterName pname, int param) =>
            glNamedFramebufferParameteri.Invoke(framebuffer, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level);
        private static GLNamedFramebufferTexture glNamedFramebufferTexture;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level) =>
            glNamedFramebufferTexture.Invoke(framebuffer, attachment, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer);
        private static GLNamedFramebufferTextureLayer glNamedFramebufferTextureLayer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer) =>
            glNamedFramebufferTextureLayer.Invoke(framebuffer, attachment, texture, level, layer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferDrawBuffer(uint framebuffer, ColorBuffer buf);
        private static GLNamedFramebufferDrawBuffer glNamedFramebufferDrawBuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedFramebufferDrawBuffer(uint framebuffer, ColorBuffer buf) =>
            glNamedFramebufferDrawBuffer.Invoke(framebuffer, buf);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferDrawBuffers(uint framebuffer, int n, ColorBuffer[] bufs);
        private static GLNamedFramebufferDrawBuffers glNamedFramebufferDrawBuffers;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedFramebufferDrawBuffers(uint framebuffer, int n, ColorBuffer[] bufs) =>
            glNamedFramebufferDrawBuffers.Invoke(framebuffer, n, bufs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferReadBuffer(uint framebuffer, ColorBuffer src);
        private static GLNamedFramebufferReadBuffer glNamedFramebufferReadBuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedFramebufferReadBuffer(uint framebuffer, ColorBuffer src) =>
            glNamedFramebufferReadBuffer.Invoke(framebuffer, src);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments);
        private static GLInvalidateNamedFramebufferData glInvalidateNamedFramebufferData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments) =>
            glInvalidateNamedFramebufferData.Invoke(framebuffer, numAttachments, attachments);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height);
        private static GLInvalidateNamedFramebufferSubData glInvalidateNamedFramebufferSubData;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, FramebufferAttachment[] attachments, int x, int y, int width, int height) =>
            glInvalidateNamedFramebufferSubData.Invoke(framebuffer, numAttachments, attachments, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedFramebufferiv(uint framebuffer, Buffer buffer, int drawbuffer, int[] value);
        private static GLClearNamedFramebufferiv glClearNamedFramebufferiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void ClearNamedFramebufferiv(uint framebuffer, Buffer buffer, int drawbuffer, int[] value) =>
            glClearNamedFramebufferiv.Invoke(framebuffer, buffer, drawbuffer, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedFramebufferuiv(uint framebuffer, Buffer buffer, int drawbuffer, uint[] value);
        private static GLClearNamedFramebufferuiv glClearNamedFramebufferuiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void ClearNamedFramebufferuiv(uint framebuffer, Buffer buffer, int drawbuffer, uint[] value) =>
            glClearNamedFramebufferuiv.Invoke(framebuffer, buffer, drawbuffer, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedFramebufferfv(uint framebuffer, Buffer buffer, int drawbuffer, float[] value);
        private static GLClearNamedFramebufferfv glClearNamedFramebufferfv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void ClearNamedFramebufferfv(uint framebuffer, Buffer buffer, int drawbuffer, float[] value) =>
            glClearNamedFramebufferfv.Invoke(framebuffer, buffer, drawbuffer, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedFramebufferfi(uint framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil);
        private static GLClearNamedFramebufferfi glClearNamedFramebufferfi;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void ClearNamedFramebufferfi(uint framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil) =>
            glClearNamedFramebufferfi.Invoke(framebuffer, buffer, drawbuffer, depth, stencil);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        private static GLBlitNamedFramebuffer glBlitNamedFramebuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter) =>
            glBlitNamedFramebuffer.Invoke(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate FramebufferStatus GLCheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target);
        private static GLCheckNamedFramebufferStatus glCheckNamedFramebufferStatus;


        [GLExtension("GL_ARB_direct_state_access")]
        public static FramebufferStatus CheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target) =>
            glCheckNamedFramebufferStatus.Invoke(framebuffer, target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedFramebufferParameteriv(uint framebuffer, GetFramebufferParameter pname, out int param);
        private static GLGetNamedFramebufferParameteriv glGetNamedFramebufferParameteriv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetNamedFramebufferParameteriv(uint framebuffer, GetFramebufferParameter pname, out int param) =>
            glGetNamedFramebufferParameteriv.Invoke(framebuffer, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedFramebufferAttachmentParameteriv(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters);
        private static GLGetNamedFramebufferAttachmentParameteriv glGetNamedFramebufferAttachmentParameteriv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetNamedFramebufferAttachmentParameteriv(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters) =>
            glGetNamedFramebufferAttachmentParameteriv.Invoke(framebuffer, attachment, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateRenderbuffers(int n, out uint renderbuffers);
        private static GLCreateRenderbuffers glCreateRenderbuffers;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateRenderbuffers(int n, out uint renderbuffers) =>
            glCreateRenderbuffers.Invoke(n, out renderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedRenderbufferStorage(uint renderbuffer, InternalFormat internalformat, int width, int height);
        private static GLNamedRenderbufferStorage glNamedRenderbufferStorage;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedRenderbufferStorage(uint renderbuffer, InternalFormat internalformat, int width, int height) =>
            glNamedRenderbufferStorage.Invoke(renderbuffer, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height);
        private static GLNamedRenderbufferStorageMultisample glNamedRenderbufferStorageMultisample;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height) =>
            glNamedRenderbufferStorageMultisample.Invoke(renderbuffer, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedRenderbufferParameteriv(uint renderbuffer, RenderbufferParameterName pname, out int parameters);
        private static GLGetNamedRenderbufferParameteriv glGetNamedRenderbufferParameteriv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetNamedRenderbufferParameteriv(uint renderbuffer, RenderbufferParameterName pname, out int parameters) =>
            glGetNamedRenderbufferParameteriv.Invoke(renderbuffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateTextures(TextureTarget target, int n, out uint textures);
        private static GLCreateTextures glCreateTextures;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateTextures(TextureTarget target, int n, out uint textures) =>
            glCreateTextures.Invoke(target, n, out textures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureBuffer(uint texture, SizedInternalFormat internalformat, uint buffer);
        private static GLTextureBuffer glTextureBuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureBuffer(uint texture, SizedInternalFormat internalformat, uint buffer) =>
            glTextureBuffer.Invoke(texture, internalformat, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureBufferRange(uint texture, SizedInternalFormat internalformat, uint buffer, nint offset, nint size);
        private static GLTextureBufferRange glTextureBufferRange;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureBufferRange(uint texture, SizedInternalFormat internalformat, uint buffer, nint offset, nint size) =>
            glTextureBufferRange.Invoke(texture, internalformat, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage1D(uint texture, int levels, SizedInternalFormat internalformat, int width);
        private static GLTextureStorage1D glTextureStorage1D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureStorage1D(uint texture, int levels, SizedInternalFormat internalformat, int width) =>
            glTextureStorage1D.Invoke(texture, levels, internalformat, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage2D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height);
        private static GLTextureStorage2D glTextureStorage2D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureStorage2D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height) =>
            glTextureStorage2D.Invoke(texture, levels, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage3D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth);
        private static GLTextureStorage3D glTextureStorage3D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureStorage3D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth) =>
            glTextureStorage3D.Invoke(texture, levels, internalformat, width, height, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage2DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        private static GLTextureStorage2DMultisample glTextureStorage2DMultisample;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureStorage2DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations) =>
            glTextureStorage2DMultisample.Invoke(texture, samples, internalformat, width, height, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage3DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static GLTextureStorage3DMultisample glTextureStorage3DMultisample;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureStorage3DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations) =>
            glTextureStorage3DMultisample.Invoke(texture, samples, internalformat, width, height, depth, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureSubImage1D glTextureSubImage1D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels) =>
            glTextureSubImage1D.Invoke(texture, level, xoffset, width, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureSubImage2D glTextureSubImage2D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels) =>
            glTextureSubImage2D.Invoke(texture, level, xoffset, yoffset, width, height, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureSubImage3D glTextureSubImage3D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels) =>
            glTextureSubImage3D.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTextureSubImage1D glCompressedTextureSubImage1D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data) =>
            glCompressedTextureSubImage1D.Invoke(texture, level, xoffset, width, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTextureSubImage2D glCompressedTextureSubImage2D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data) =>
            glCompressedTextureSubImage2D.Invoke(texture, level, xoffset, yoffset, width, height, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTextureSubImage3D glCompressedTextureSubImage3D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data) =>
            glCompressedTextureSubImage3D.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width);
        private static GLCopyTextureSubImage1D glCopyTextureSubImage1D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width) =>
            glCopyTextureSubImage1D.Invoke(texture, level, xoffset, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static GLCopyTextureSubImage2D glCopyTextureSubImage2D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
            glCopyTextureSubImage2D.Invoke(texture, level, xoffset, yoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static GLCopyTextureSubImage3D glCopyTextureSubImage3D;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
            glCopyTextureSubImage3D.Invoke(texture, level, xoffset, yoffset, zoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterf(uint texture, TextureParameterName pname, float param);
        private static GLTextureParameterf glTextureParameterf;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureParameterf(uint texture, TextureParameterName pname, float param) =>
            glTextureParameterf.Invoke(texture, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterfv(uint texture, TextureParameterName pname, float[] param);
        private static GLTextureParameterfv glTextureParameterfv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureParameterfv(uint texture, TextureParameterName pname, float[] param) =>
            glTextureParameterfv.Invoke(texture, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameteri(uint texture, TextureParameterName pname, int param);
        private static GLTextureParameteri glTextureParameteri;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureParameteri(uint texture, TextureParameterName pname, int param) =>
            glTextureParameteri.Invoke(texture, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterIiv(uint texture, TextureParameterName pname, int[] parameters);
        private static GLTextureParameterIiv glTextureParameterIiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureParameterIiv(uint texture, TextureParameterName pname, int[] parameters) =>
            glTextureParameterIiv.Invoke(texture, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterIuiv(uint texture, TextureParameterName pname, uint[] parameters);
        private static GLTextureParameterIuiv glTextureParameterIuiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureParameterIuiv(uint texture, TextureParameterName pname, uint[] parameters) =>
            glTextureParameterIuiv.Invoke(texture, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameteriv(uint texture, TextureParameterName pname, int[] param);
        private static GLTextureParameteriv glTextureParameteriv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void TextureParameteriv(uint texture, TextureParameterName pname, int[] param) =>
            glTextureParameteriv.Invoke(texture, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenerateTextureMipmap(uint texture);
        private static GLGenerateTextureMipmap glGenerateTextureMipmap;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GenerateTextureMipmap(uint texture) =>
            glGenerateTextureMipmap.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindTextureUnit(uint unit, uint texture);
        private static GLBindTextureUnit glBindTextureUnit;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void BindTextureUnit(uint unit, uint texture) =>
            glBindTextureUnit.Invoke(unit, texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, out nint pixels);
        private static GLGetTextureImage glGetTextureImage;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, out nint pixels) =>
            glGetTextureImage.Invoke(texture, level, format, type, bufSize, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCompressedTextureImage(uint texture, int level, int bufSize, out nint pixels);
        private static GLGetCompressedTextureImage glGetCompressedTextureImage;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetCompressedTextureImage(uint texture, int level, int bufSize, out nint pixels) =>
            glGetCompressedTextureImage.Invoke(texture, level, bufSize, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureLevelParameterfv(uint texture, int level, GetTextureParameter pname, out float parameters);
        private static GLGetTextureLevelParameterfv glGetTextureLevelParameterfv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTextureLevelParameterfv(uint texture, int level, GetTextureParameter pname, out float parameters) =>
            glGetTextureLevelParameterfv.Invoke(texture, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureLevelParameteriv(uint texture, int level, GetTextureParameter pname, out int parameters);
        private static GLGetTextureLevelParameteriv glGetTextureLevelParameteriv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTextureLevelParameteriv(uint texture, int level, GetTextureParameter pname, out int parameters) =>
            glGetTextureLevelParameteriv.Invoke(texture, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameterfv(uint texture, GetTextureParameter pname, out float parameters);
        private static GLGetTextureParameterfv glGetTextureParameterfv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTextureParameterfv(uint texture, GetTextureParameter pname, out float parameters) =>
            glGetTextureParameterfv.Invoke(texture, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameterIiv(uint texture, GetTextureParameter pname, out int parameters);
        private static GLGetTextureParameterIiv glGetTextureParameterIiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTextureParameterIiv(uint texture, GetTextureParameter pname, out int parameters) =>
            glGetTextureParameterIiv.Invoke(texture, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameterIuiv(uint texture, GetTextureParameter pname, out uint parameters);
        private static GLGetTextureParameterIuiv glGetTextureParameterIuiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTextureParameterIuiv(uint texture, GetTextureParameter pname, out uint parameters) =>
            glGetTextureParameterIuiv.Invoke(texture, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameteriv(uint texture, GetTextureParameter pname, out int parameters);
        private static GLGetTextureParameteriv glGetTextureParameteriv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetTextureParameteriv(uint texture, GetTextureParameter pname, out int parameters) =>
            glGetTextureParameteriv.Invoke(texture, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateVertexArrays(int n, out uint arrays);
        private static GLCreateVertexArrays glCreateVertexArrays;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateVertexArrays(int n, out uint arrays) =>
            glCreateVertexArrays.Invoke(n, out arrays);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableVertexArrayAttrib(uint vaobj, uint index);
        private static GLDisableVertexArrayAttrib glDisableVertexArrayAttrib;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void DisableVertexArrayAttrib(uint vaobj, uint index) =>
            glDisableVertexArrayAttrib.Invoke(vaobj, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableVertexArrayAttrib(uint vaobj, uint index);
        private static GLEnableVertexArrayAttrib glEnableVertexArrayAttrib;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void EnableVertexArrayAttrib(uint vaobj, uint index) =>
            glEnableVertexArrayAttrib.Invoke(vaobj, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayElementBuffer(uint vaobj, uint buffer);
        private static GLVertexArrayElementBuffer glVertexArrayElementBuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayElementBuffer(uint vaobj, uint buffer) =>
            glVertexArrayElementBuffer.Invoke(vaobj, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);
        private static GLVertexArrayVertexBuffer glVertexArrayVertexBuffer;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride) =>
            glVertexArrayVertexBuffer.Invoke(vaobj, bindingindex, buffer, offset, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, nint[] offsets, int[] strides);
        private static GLVertexArrayVertexBuffers glVertexArrayVertexBuffers;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint[] buffers, nint[] offsets, int[] strides) =>
            glVertexArrayVertexBuffers.Invoke(vaobj, first, count, buffers, offsets, strides);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex);
        private static GLVertexArrayAttribBinding glVertexArrayAttribBinding;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex) =>
            glVertexArrayAttribBinding.Invoke(vaobj, attribindex, bindingindex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset);
        private static GLVertexArrayAttribFormat glVertexArrayAttribFormat;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset) =>
            glVertexArrayAttribFormat.Invoke(vaobj, attribindex, size, type, normalized, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset);
        private static GLVertexArrayAttribIFormat glVertexArrayAttribIFormat;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset) =>
            glVertexArrayAttribIFormat.Invoke(vaobj, attribindex, size, type, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset);
        private static GLVertexArrayAttribLFormat glVertexArrayAttribLFormat;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset) =>
            glVertexArrayAttribLFormat.Invoke(vaobj, attribindex, size, type, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor);
        private static GLVertexArrayBindingDivisor glVertexArrayBindingDivisor;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor) =>
            glVertexArrayBindingDivisor.Invoke(vaobj, bindingindex, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexArrayiv(uint vaobj, VertexArrayPName pname, out int param);
        private static GLGetVertexArrayiv glGetVertexArrayiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetVertexArrayiv(uint vaobj, VertexArrayPName pname, out int param) =>
            glGetVertexArrayiv.Invoke(vaobj, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexArrayIndexediv(uint vaobj, uint index, VertexArrayPName pname, out int param);
        private static GLGetVertexArrayIndexediv glGetVertexArrayIndexediv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetVertexArrayIndexediv(uint vaobj, uint index, VertexArrayPName pname, out int param) =>
            glGetVertexArrayIndexediv.Invoke(vaobj, index, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexArrayIndexed64iv(uint vaobj, uint index, VertexArrayPName pname, out long param);
        private static GLGetVertexArrayIndexed64iv glGetVertexArrayIndexed64iv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetVertexArrayIndexed64iv(uint vaobj, uint index, VertexArrayPName pname, out long param) =>
            glGetVertexArrayIndexed64iv.Invoke(vaobj, index, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateSamplers(int n, out uint samplers);
        private static GLCreateSamplers glCreateSamplers;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateSamplers(int n, out uint samplers) =>
            glCreateSamplers.Invoke(n, out samplers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateProgramPipelines(int n, out uint pipelines);
        private static GLCreateProgramPipelines glCreateProgramPipelines;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateProgramPipelines(int n, out uint pipelines) =>
            glCreateProgramPipelines.Invoke(n, out pipelines);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateQueries(QueryTarget target, int n, out uint ids);
        private static GLCreateQueries glCreateQueries;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void CreateQueries(QueryTarget target, int n, out uint ids) =>
            glCreateQueries.Invoke(target, n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryBufferObjecti64v(uint id, uint buffer, QueryObjectParameterName pname, nint offset);
        private static GLGetQueryBufferObjecti64v glGetQueryBufferObjecti64v;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetQueryBufferObjecti64v(uint id, uint buffer, QueryObjectParameterName pname, nint offset) =>
            glGetQueryBufferObjecti64v.Invoke(id, buffer, pname, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryBufferObjectiv(uint id, uint buffer, QueryObjectParameterName pname, nint offset);
        private static GLGetQueryBufferObjectiv glGetQueryBufferObjectiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetQueryBufferObjectiv(uint id, uint buffer, QueryObjectParameterName pname, nint offset) =>
            glGetQueryBufferObjectiv.Invoke(id, buffer, pname, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryBufferObjectui64v(uint id, uint buffer, QueryObjectParameterName pname, nint offset);
        private static GLGetQueryBufferObjectui64v glGetQueryBufferObjectui64v;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetQueryBufferObjectui64v(uint id, uint buffer, QueryObjectParameterName pname, nint offset) =>
            glGetQueryBufferObjectui64v.Invoke(id, buffer, pname, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryBufferObjectuiv(uint id, uint buffer, QueryObjectParameterName pname, nint offset);
        private static GLGetQueryBufferObjectuiv glGetQueryBufferObjectuiv;


        [GLExtension("GL_ARB_direct_state_access")]
        public static void GetQueryBufferObjectuiv(uint id, uint buffer, QueryObjectParameterName pname, nint offset) =>
            glGetQueryBufferObjectuiv.Invoke(id, buffer, pname, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawBuffersARB(int n, DrawBufferMode[] bufs);
        private static GLDrawBuffersARB glDrawBuffersARB;


        [GLExtension("GL_ARB_draw_buffers")]
        public static void DrawBuffersARB(int n, DrawBufferMode[] bufs) =>
            glDrawBuffersARB.Invoke(n, bufs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationiARB(uint buf, BlendEquationModeEXT mode);
        private static GLBlendEquationiARB glBlendEquationiARB;


        [GLExtension("GL_ARB_draw_buffers_blend")]
        public static void BlendEquationiARB(uint buf, BlendEquationModeEXT mode) =>
            glBlendEquationiARB.Invoke(buf, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparateiARB(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparateiARB glBlendEquationSeparateiARB;


        [GLExtension("GL_ARB_draw_buffers_blend")]
        public static void BlendEquationSeparateiARB(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparateiARB.Invoke(buf, modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFunciARB(uint buf, BlendingFactor src, BlendingFactor dst);
        private static GLBlendFunciARB glBlendFunciARB;


        [GLExtension("GL_ARB_draw_buffers_blend")]
        public static void BlendFunciARB(uint buf, BlendingFactor src, BlendingFactor dst) =>
            glBlendFunciARB.Invoke(buf, src, dst);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparateiARB(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
        private static GLBlendFuncSeparateiARB glBlendFuncSeparateiARB;


        [GLExtension("GL_ARB_draw_buffers_blend")]
        public static void BlendFuncSeparateiARB(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) =>
            glBlendFuncSeparateiARB.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint indices, int basevertex);
        private static GLDrawElementsBaseVertex glDrawElementsBaseVertex;


        [GLExtension("GL_ARB_draw_elements_base_vertex")]
        public static void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint indices, int basevertex) =>
            glDrawElementsBaseVertex.Invoke(mode, count, type, indices, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices, int basevertex);
        private static GLDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex;


        [GLExtension("GL_ARB_draw_elements_base_vertex")]
        public static void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices, int basevertex) =>
            glDrawRangeElementsBaseVertex.Invoke(mode, start, end, count, type, indices, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex);
        private static GLDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex;


        [GLExtension("GL_ARB_draw_elements_base_vertex")]
        public static void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex) =>
            glDrawElementsInstancedBaseVertex.Invoke(mode, count, type, indices, instancecount, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int drawcount, int[] basevertex);
        private static GLMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex;


        [GLExtension("GL_ARB_draw_elements_base_vertex")]
        public static void MultiDrawElementsBaseVertex(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int drawcount, int[] basevertex) =>
            glMultiDrawElementsBaseVertex.Invoke(mode, count, type, indices, drawcount, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysIndirect(PrimitiveType mode, nint indirect);
        private static GLDrawArraysIndirect glDrawArraysIndirect;


        [GLExtension("GL_ARB_draw_indirect")]
        public static void DrawArraysIndirect(PrimitiveType mode, nint indirect) =>
            glDrawArraysIndirect.Invoke(mode, indirect);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, nint indirect);
        private static GLDrawElementsIndirect glDrawElementsIndirect;


        [GLExtension("GL_ARB_draw_indirect")]
        public static void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, nint indirect) =>
            glDrawElementsIndirect.Invoke(mode, type, indirect);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysInstancedARB(PrimitiveType mode, int first, int count, int primcount);
        private static GLDrawArraysInstancedARB glDrawArraysInstancedARB;


        [GLExtension("GL_ARB_draw_instanced")]
        public static void DrawArraysInstancedARB(PrimitiveType mode, int first, int count, int primcount) =>
            glDrawArraysInstancedARB.Invoke(mode, first, count, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedARB(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount);
        private static GLDrawElementsInstancedARB glDrawElementsInstancedARB;


        [GLExtension("GL_ARB_draw_instanced")]
        public static void DrawElementsInstancedARB(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount) =>
            glDrawElementsInstancedARB.Invoke(mode, count, type, indices, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramStringARB(ProgramTarget target, ProgramFormat format, int len, nint str);
        private static GLProgramStringARB glProgramStringARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramStringARB(ProgramTarget target, ProgramFormat format, int len, nint str) =>
            glProgramStringARB.Invoke(target, format, len, str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindProgramARB(ProgramTarget target, uint program);
        private static GLBindProgramARB glBindProgramARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void BindProgramARB(ProgramTarget target, uint program) =>
            glBindProgramARB.Invoke(target, program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteProgramsARB(int n, uint[] programs);
        private static GLDeleteProgramsARB glDeleteProgramsARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void DeleteProgramsARB(int n, uint[] programs) =>
            glDeleteProgramsARB.Invoke(n, programs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenProgramsARB(int n, out uint programs);
        private static GLGenProgramsARB glGenProgramsARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void GenProgramsARB(int n, out uint programs) =>
            glGenProgramsARB.Invoke(n, out programs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameter4dARB(ProgramTarget target, uint index, double x, double y, double z, double w);
        private static GLProgramEnvParameter4dARB glProgramEnvParameter4dARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramEnvParameter4dARB(ProgramTarget target, uint index, double x, double y, double z, double w) =>
            glProgramEnvParameter4dARB.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameter4dvARB(ProgramTarget target, uint index, double[] parameters);
        private static GLProgramEnvParameter4dvARB glProgramEnvParameter4dvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramEnvParameter4dvARB(ProgramTarget target, uint index, double[] parameters) =>
            glProgramEnvParameter4dvARB.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameter4fARB(ProgramTarget target, uint index, float x, float y, float z, float w);
        private static GLProgramEnvParameter4fARB glProgramEnvParameter4fARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramEnvParameter4fARB(ProgramTarget target, uint index, float x, float y, float z, float w) =>
            glProgramEnvParameter4fARB.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameter4fvARB(ProgramTarget target, uint index, float[] parameters);
        private static GLProgramEnvParameter4fvARB glProgramEnvParameter4fvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramEnvParameter4fvARB(ProgramTarget target, uint index, float[] parameters) =>
            glProgramEnvParameter4fvARB.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameter4dARB(ProgramTarget target, uint index, double x, double y, double z, double w);
        private static GLProgramLocalParameter4dARB glProgramLocalParameter4dARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramLocalParameter4dARB(ProgramTarget target, uint index, double x, double y, double z, double w) =>
            glProgramLocalParameter4dARB.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameter4dvARB(ProgramTarget target, uint index, double[] parameters);
        private static GLProgramLocalParameter4dvARB glProgramLocalParameter4dvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramLocalParameter4dvARB(ProgramTarget target, uint index, double[] parameters) =>
            glProgramLocalParameter4dvARB.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameter4fARB(ProgramTarget target, uint index, float x, float y, float z, float w);
        private static GLProgramLocalParameter4fARB glProgramLocalParameter4fARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramLocalParameter4fARB(ProgramTarget target, uint index, float x, float y, float z, float w) =>
            glProgramLocalParameter4fARB.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameter4fvARB(ProgramTarget target, uint index, float[] parameters);
        private static GLProgramLocalParameter4fvARB glProgramLocalParameter4fvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void ProgramLocalParameter4fvARB(ProgramTarget target, uint index, float[] parameters) =>
            glProgramLocalParameter4fvARB.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramEnvParameterdvARB(ProgramTarget target, uint index, out double parameters);
        private static GLGetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void GetProgramEnvParameterdvARB(ProgramTarget target, uint index, out double parameters) =>
            glGetProgramEnvParameterdvARB.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramEnvParameterfvARB(ProgramTarget target, uint index, out float parameters);
        private static GLGetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void GetProgramEnvParameterfvARB(ProgramTarget target, uint index, out float parameters) =>
            glGetProgramEnvParameterfvARB.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramLocalParameterdvARB(ProgramTarget target, uint index, out double parameters);
        private static GLGetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void GetProgramLocalParameterdvARB(ProgramTarget target, uint index, out double parameters) =>
            glGetProgramLocalParameterdvARB.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramLocalParameterfvARB(ProgramTarget target, uint index, out float parameters);
        private static GLGetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void GetProgramLocalParameterfvARB(ProgramTarget target, uint index, out float parameters) =>
            glGetProgramLocalParameterfvARB.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramivARB(ProgramTarget target, ProgramPropertyARB pname, out int parameters);
        private static GLGetProgramivARB glGetProgramivARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void GetProgramivARB(ProgramTarget target, ProgramPropertyARB pname, out int parameters) =>
            glGetProgramivARB.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramStringARB(ProgramTarget target, ProgramStringProperty pname, out nint str);
        private static GLGetProgramStringARB glGetProgramStringARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static void GetProgramStringARB(ProgramTarget target, ProgramStringProperty pname, out nint str) =>
            glGetProgramStringARB.Invoke(target, pname, out str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsProgramARB(uint program);
        private static GLIsProgramARB glIsProgramARB;


        [GLExtension("GL_ARB_fragment_program")]
        public static bool IsProgramARB(uint program) =>
            glIsProgramARB.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferParameteri(FramebufferTarget target, FramebufferParameterName pname, int param);
        private static GLFramebufferParameteri glFramebufferParameteri;


        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        public static void FramebufferParameteri(FramebufferTarget target, FramebufferParameterName pname, int param) =>
            glFramebufferParameteri.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int parameters);
        private static GLGetFramebufferParameteriv glGetFramebufferParameteriv;


        [GLExtension("GL_ARB_framebuffer_no_attachments")]
        public static void GetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int parameters) =>
            glGetFramebufferParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsRenderbuffer(uint renderbuffer);
        private static GLIsRenderbuffer glIsRenderbuffer;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static bool IsRenderbuffer(uint renderbuffer) =>
            glIsRenderbuffer.Invoke(renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindRenderbuffer(RenderbufferTarget target, uint renderbuffer);
        private static GLBindRenderbuffer glBindRenderbuffer;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer) =>
            glBindRenderbuffer.Invoke(target, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteRenderbuffers(int n, uint[] renderbuffers);
        private static GLDeleteRenderbuffers glDeleteRenderbuffers;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void DeleteRenderbuffers(int n, uint[] renderbuffers) =>
            glDeleteRenderbuffers.Invoke(n, renderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenRenderbuffers(int n, out uint renderbuffers);
        private static GLGenRenderbuffers glGenRenderbuffers;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void GenRenderbuffers(int n, out uint renderbuffers) =>
            glGenRenderbuffers.Invoke(n, out renderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorage glRenderbufferStorage;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void RenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorage.Invoke(target, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters);
        private static GLGetRenderbufferParameteriv glGetRenderbufferParameteriv;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters) =>
            glGetRenderbufferParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsFramebuffer(uint framebuffer);
        private static GLIsFramebuffer glIsFramebuffer;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static bool IsFramebuffer(uint framebuffer) =>
            glIsFramebuffer.Invoke(framebuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFramebuffer(FramebufferTarget target, uint framebuffer);
        private static GLBindFramebuffer glBindFramebuffer;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void BindFramebuffer(FramebufferTarget target, uint framebuffer) =>
            glBindFramebuffer.Invoke(target, framebuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteFramebuffers(int n, uint[] framebuffers);
        private static GLDeleteFramebuffers glDeleteFramebuffers;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void DeleteFramebuffers(int n, uint[] framebuffers) =>
            glDeleteFramebuffers.Invoke(n, framebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenFramebuffers(int n, out uint framebuffers);
        private static GLGenFramebuffers glGenFramebuffers;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void GenFramebuffers(int n, out uint framebuffers) =>
            glGenFramebuffers.Invoke(n, out framebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate FramebufferStatus GLCheckFramebufferStatus(FramebufferTarget target);
        private static GLCheckFramebufferStatus glCheckFramebufferStatus;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static FramebufferStatus CheckFramebufferStatus(FramebufferTarget target) =>
            glCheckFramebufferStatus.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        private static GLFramebufferTexture1D glFramebufferTexture1D;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level) =>
            glFramebufferTexture1D.Invoke(target, attachment, textarget, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        private static GLFramebufferTexture2D glFramebufferTexture2D;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level) =>
            glFramebufferTexture2D.Invoke(target, attachment, textarget, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);
        private static GLFramebufferTexture3D glFramebufferTexture3D;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset) =>
            glFramebufferTexture3D.Invoke(target, attachment, textarget, texture, level, zoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        private static GLFramebufferRenderbuffer glFramebufferRenderbuffer;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer) =>
            glFramebufferRenderbuffer.Invoke(target, attachment, renderbuffertarget, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters);
        private static GLGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters) =>
            glGetFramebufferAttachmentParameteriv.Invoke(target, attachment, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenerateMipmap(TextureTarget target);
        private static GLGenerateMipmap glGenerateMipmap;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void GenerateMipmap(TextureTarget target) =>
            glGenerateMipmap.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        private static GLBlitFramebuffer glBlitFramebuffer;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter) =>
            glBlitFramebuffer.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisample(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisample glRenderbufferStorageMultisample;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisample.Invoke(target, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);
        private static GLFramebufferTextureLayer glFramebufferTextureLayer;


        [GLExtension("GL_ARB_framebuffer_object")]
        public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer) =>
            glFramebufferTextureLayer.Invoke(target, attachment, texture, level, layer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameteriARB(uint program, ProgramParameterPName pname, int value);
        private static GLProgramParameteriARB glProgramParameteriARB;


        [GLExtension("GL_ARB_geometry_shader4")]
        public static void ProgramParameteriARB(uint program, ProgramParameterPName pname, int value) =>
            glProgramParameteriARB.Invoke(program, pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);
        private static GLFramebufferTextureARB glFramebufferTextureARB;


        [GLExtension("GL_ARB_geometry_shader4")]
        public static void FramebufferTextureARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level) =>
            glFramebufferTextureARB.Invoke(target, attachment, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureLayerARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);
        private static GLFramebufferTextureLayerARB glFramebufferTextureLayerARB;


        [GLExtension("GL_ARB_geometry_shader4")]
        public static void FramebufferTextureLayerARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer) =>
            glFramebufferTextureLayerARB.Invoke(target, attachment, texture, level, layer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureFaceARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);
        private static GLFramebufferTextureFaceARB glFramebufferTextureFaceARB;


        [GLExtension("GL_ARB_geometry_shader4")]
        public static void FramebufferTextureFaceARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face) =>
            glFramebufferTextureFaceARB.Invoke(target, attachment, texture, level, face);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramBinary(uint program, int bufSize, out int length, out int binaryFormat, out nint binary);
        private static GLGetProgramBinary glGetProgramBinary;


        [GLExtension("GL_ARB_get_program_binary")]
        public static void GetProgramBinary(uint program, int bufSize, out int length, out int binaryFormat, out nint binary) =>
            glGetProgramBinary.Invoke(program, bufSize, out length, out binaryFormat, out binary);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramBinary(uint program, int binaryFormat, nint binary, int length);
        private static GLProgramBinary glProgramBinary;


        [GLExtension("GL_ARB_get_program_binary")]
        public static void ProgramBinary(uint program, int binaryFormat, nint binary, int length) =>
            glProgramBinary.Invoke(program, binaryFormat, binary, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameteri(uint program, ProgramParameterPName pname, int value);
        private static GLProgramParameteri glProgramParameteri;


        [GLExtension("GL_ARB_get_program_binary")]
        public static void ProgramParameteri(uint program, ProgramParameterPName pname, int value) =>
            glProgramParameteri.Invoke(program, pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, out nint pixels);
        private static GLGetTextureSubImage glGetTextureSubImage;


        [GLExtension("GL_ARB_get_texture_sub_image")]
        public static void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, out nint pixels) =>
            glGetTextureSubImage.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, out nint pixels);
        private static GLGetCompressedTextureSubImage glGetCompressedTextureSubImage;


        [GLExtension("GL_ARB_get_texture_sub_image")]
        public static void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, out nint pixels) =>
            glGetCompressedTextureSubImage.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSpecializeShaderARB(uint shader, sbyte[] pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue);
        private static GLSpecializeShaderARB glSpecializeShaderARB;


        [GLExtension("GL_ARB_gl_spirv")]
        public static void SpecializeShaderARB(uint shader, sbyte[] pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue) =>
            glSpecializeShaderARB.Invoke(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1d(int location, double x);
        private static GLUniform1d glUniform1d;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform1d(int location, double x) =>
            glUniform1d.Invoke(location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2d(int location, double x, double y);
        private static GLUniform2d glUniform2d;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform2d(int location, double x, double y) =>
            glUniform2d.Invoke(location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3d(int location, double x, double y, double z);
        private static GLUniform3d glUniform3d;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform3d(int location, double x, double y, double z) =>
            glUniform3d.Invoke(location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4d(int location, double x, double y, double z, double w);
        private static GLUniform4d glUniform4d;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform4d(int location, double x, double y, double z, double w) =>
            glUniform4d.Invoke(location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1dv(int location, int count, double[] value);
        private static GLUniform1dv glUniform1dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform1dv(int location, int count, double[] value) =>
            glUniform1dv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2dv(int location, int count, double[] value);
        private static GLUniform2dv glUniform2dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform2dv(int location, int count, double[] value) =>
            glUniform2dv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3dv(int location, int count, double[] value);
        private static GLUniform3dv glUniform3dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform3dv(int location, int count, double[] value) =>
            glUniform3dv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4dv(int location, int count, double[] value);
        private static GLUniform4dv glUniform4dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void Uniform4dv(int location, int count, double[] value) =>
            glUniform4dv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix2dv glUniformMatrix2dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix2dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix2dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix3dv glUniformMatrix3dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix3dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix3dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix4dv glUniformMatrix4dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix4dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix4dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2x3dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix2x3dv glUniformMatrix2x3dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix2x3dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix2x3dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2x4dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix2x4dv glUniformMatrix2x4dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix2x4dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix2x4dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3x2dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix3x2dv glUniformMatrix3x2dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix3x2dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix3x2dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3x4dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix3x4dv glUniformMatrix3x4dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix3x4dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix3x4dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4x2dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix4x2dv glUniformMatrix4x2dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix4x2dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix4x2dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4x3dv(int location, int count, bool transpose, double[] value);
        private static GLUniformMatrix4x3dv glUniformMatrix4x3dv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void UniformMatrix4x3dv(int location, int count, bool transpose, double[] value) =>
            glUniformMatrix4x3dv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformdv(uint program, int location, out double parameters);
        private static GLGetUniformdv glGetUniformdv;


        [GLExtension("GL_ARB_gpu_shader_fp64")]
        public static void GetUniformdv(uint program, int location, out double parameters) =>
            glGetUniformdv.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1i64ARB(int location, long x);
        private static GLUniform1i64ARB glUniform1i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform1i64ARB(int location, long x) =>
            glUniform1i64ARB.Invoke(location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2i64ARB(int location, long x, long y);
        private static GLUniform2i64ARB glUniform2i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform2i64ARB(int location, long x, long y) =>
            glUniform2i64ARB.Invoke(location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3i64ARB(int location, long x, long y, long z);
        private static GLUniform3i64ARB glUniform3i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform3i64ARB(int location, long x, long y, long z) =>
            glUniform3i64ARB.Invoke(location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4i64ARB(int location, long x, long y, long z, long w);
        private static GLUniform4i64ARB glUniform4i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform4i64ARB(int location, long x, long y, long z, long w) =>
            glUniform4i64ARB.Invoke(location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1i64vARB(int location, int count, long[] value);
        private static GLUniform1i64vARB glUniform1i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform1i64vARB(int location, int count, long[] value) =>
            glUniform1i64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2i64vARB(int location, int count, long[] value);
        private static GLUniform2i64vARB glUniform2i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform2i64vARB(int location, int count, long[] value) =>
            glUniform2i64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3i64vARB(int location, int count, long[] value);
        private static GLUniform3i64vARB glUniform3i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform3i64vARB(int location, int count, long[] value) =>
            glUniform3i64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4i64vARB(int location, int count, long[] value);
        private static GLUniform4i64vARB glUniform4i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform4i64vARB(int location, int count, long[] value) =>
            glUniform4i64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1ui64ARB(int location, ulong x);
        private static GLUniform1ui64ARB glUniform1ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform1ui64ARB(int location, ulong x) =>
            glUniform1ui64ARB.Invoke(location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2ui64ARB(int location, ulong x, ulong y);
        private static GLUniform2ui64ARB glUniform2ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform2ui64ARB(int location, ulong x, ulong y) =>
            glUniform2ui64ARB.Invoke(location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3ui64ARB(int location, ulong x, ulong y, ulong z);
        private static GLUniform3ui64ARB glUniform3ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform3ui64ARB(int location, ulong x, ulong y, ulong z) =>
            glUniform3ui64ARB.Invoke(location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w);
        private static GLUniform4ui64ARB glUniform4ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w) =>
            glUniform4ui64ARB.Invoke(location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1ui64vARB(int location, int count, ulong[] value);
        private static GLUniform1ui64vARB glUniform1ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform1ui64vARB(int location, int count, ulong[] value) =>
            glUniform1ui64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2ui64vARB(int location, int count, ulong[] value);
        private static GLUniform2ui64vARB glUniform2ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform2ui64vARB(int location, int count, ulong[] value) =>
            glUniform2ui64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3ui64vARB(int location, int count, ulong[] value);
        private static GLUniform3ui64vARB glUniform3ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform3ui64vARB(int location, int count, ulong[] value) =>
            glUniform3ui64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4ui64vARB(int location, int count, ulong[] value);
        private static GLUniform4ui64vARB glUniform4ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void Uniform4ui64vARB(int location, int count, ulong[] value) =>
            glUniform4ui64vARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformi64vARB(uint program, int location, out long parameters);
        private static GLGetUniformi64vARB glGetUniformi64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void GetUniformi64vARB(uint program, int location, out long parameters) =>
            glGetUniformi64vARB.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformui64vARB(uint program, int location, out ulong parameters);
        private static GLGetUniformui64vARB glGetUniformui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void GetUniformui64vARB(uint program, int location, out ulong parameters) =>
            glGetUniformui64vARB.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformi64vARB(uint program, int location, int bufSize, out long parameters);
        private static GLGetnUniformi64vARB glGetnUniformi64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void GetnUniformi64vARB(uint program, int location, int bufSize, out long parameters) =>
            glGetnUniformi64vARB.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformui64vARB(uint program, int location, int bufSize, out ulong parameters);
        private static GLGetnUniformui64vARB glGetnUniformui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void GetnUniformui64vARB(uint program, int location, int bufSize, out ulong parameters) =>
            glGetnUniformui64vARB.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1i64ARB(uint program, int location, long x);
        private static GLProgramUniform1i64ARB glProgramUniform1i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform1i64ARB(uint program, int location, long x) =>
            glProgramUniform1i64ARB.Invoke(program, location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2i64ARB(uint program, int location, long x, long y);
        private static GLProgramUniform2i64ARB glProgramUniform2i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform2i64ARB(uint program, int location, long x, long y) =>
            glProgramUniform2i64ARB.Invoke(program, location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3i64ARB(uint program, int location, long x, long y, long z);
        private static GLProgramUniform3i64ARB glProgramUniform3i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform3i64ARB(uint program, int location, long x, long y, long z) =>
            glProgramUniform3i64ARB.Invoke(program, location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w);
        private static GLProgramUniform4i64ARB glProgramUniform4i64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w) =>
            glProgramUniform4i64ARB.Invoke(program, location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1i64vARB(uint program, int location, int count, long[] value);
        private static GLProgramUniform1i64vARB glProgramUniform1i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform1i64vARB(uint program, int location, int count, long[] value) =>
            glProgramUniform1i64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2i64vARB(uint program, int location, int count, long[] value);
        private static GLProgramUniform2i64vARB glProgramUniform2i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform2i64vARB(uint program, int location, int count, long[] value) =>
            glProgramUniform2i64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3i64vARB(uint program, int location, int count, long[] value);
        private static GLProgramUniform3i64vARB glProgramUniform3i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform3i64vARB(uint program, int location, int count, long[] value) =>
            glProgramUniform3i64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4i64vARB(uint program, int location, int count, long[] value);
        private static GLProgramUniform4i64vARB glProgramUniform4i64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform4i64vARB(uint program, int location, int count, long[] value) =>
            glProgramUniform4i64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1ui64ARB(uint program, int location, ulong x);
        private static GLProgramUniform1ui64ARB glProgramUniform1ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform1ui64ARB(uint program, int location, ulong x) =>
            glProgramUniform1ui64ARB.Invoke(program, location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y);
        private static GLProgramUniform2ui64ARB glProgramUniform2ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y) =>
            glProgramUniform2ui64ARB.Invoke(program, location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z);
        private static GLProgramUniform3ui64ARB glProgramUniform3ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z) =>
            glProgramUniform3ui64ARB.Invoke(program, location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w);
        private static GLProgramUniform4ui64ARB glProgramUniform4ui64ARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w) =>
            glProgramUniform4ui64ARB.Invoke(program, location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1ui64vARB(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform1ui64vARB glProgramUniform1ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform1ui64vARB(uint program, int location, int count, ulong[] value) =>
            glProgramUniform1ui64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2ui64vARB(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform2ui64vARB glProgramUniform2ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform2ui64vARB(uint program, int location, int count, ulong[] value) =>
            glProgramUniform2ui64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3ui64vARB(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform3ui64vARB glProgramUniform3ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform3ui64vARB(uint program, int location, int count, ulong[] value) =>
            glProgramUniform3ui64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4ui64vARB(uint program, int location, int count, ulong[] value);
        private static GLProgramUniform4ui64vARB glProgramUniform4ui64vARB;


        [GLExtension("GL_ARB_gpu_shader_int64")]
        public static void ProgramUniform4ui64vARB(uint program, int location, int count, ulong[] value) =>
            glProgramUniform4ui64vARB.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendColor(float red, float green, float blue, float alpha);
        private static GLBlendColor glBlendColor;


        [GLExtension("GL_ARB_imaging")]
        public static void BlendColor(float red, float green, float blue, float alpha) =>
            glBlendColor.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquation(BlendEquationModeEXT mode);
        private static GLBlendEquation glBlendEquation;


        [GLExtension("GL_ARB_imaging")]
        public static void BlendEquation(BlendEquationModeEXT mode) =>
            glBlendEquation.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint table);
        private static GLColorTable glColorTable;


        [GLExtension("GL_ARB_imaging")]
        public static void ColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint table) =>
            glColorTable.Invoke(target, internalformat, width, format, type, table);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters);
        private static GLColorTableParameterfv glColorTableParameterfv;


        [GLExtension("GL_ARB_imaging")]
        public static void ColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, float[] parameters) =>
            glColorTableParameterfv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters);
        private static GLColorTableParameteriv glColorTableParameteriv;


        [GLExtension("GL_ARB_imaging")]
        public static void ColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, int[] parameters) =>
            glColorTableParameteriv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyColorTable(ColorTableTarget target, InternalFormat internalformat, int x, int y, int width);
        private static GLCopyColorTable glCopyColorTable;


        [GLExtension("GL_ARB_imaging")]
        public static void CopyColorTable(ColorTableTarget target, InternalFormat internalformat, int x, int y, int width) =>
            glCopyColorTable.Invoke(target, internalformat, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, out nint table);
        private static GLGetColorTable glGetColorTable;


        [GLExtension("GL_ARB_imaging")]
        public static void GetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, out nint table) =>
            glGetColorTable.Invoke(target, format, type, out table);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, out float parameters);
        private static GLGetColorTableParameterfv glGetColorTableParameterfv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetColorTableParameterfv(ColorTableTarget target, ColorTableParameterPName pname, out float parameters) =>
            glGetColorTableParameterfv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, out int parameters);
        private static GLGetColorTableParameteriv glGetColorTableParameteriv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetColorTableParameteriv(ColorTableTarget target, ColorTableParameterPName pname, out int parameters) =>
            glGetColorTableParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, nint data);
        private static GLColorSubTable glColorSubTable;


        [GLExtension("GL_ARB_imaging")]
        public static void ColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, nint data) =>
            glColorSubTable.Invoke(target, start, count, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width);
        private static GLCopyColorSubTable glCopyColorSubTable;


        [GLExtension("GL_ARB_imaging")]
        public static void CopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width) =>
            glCopyColorSubTable.Invoke(target, start, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint image);
        private static GLConvolutionFilter1D glConvolutionFilter1D;


        [GLExtension("GL_ARB_imaging")]
        public static void ConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint image) =>
            glConvolutionFilter1D.Invoke(target, internalformat, width, format, type, image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint image);
        private static GLConvolutionFilter2D glConvolutionFilter2D;


        [GLExtension("GL_ARB_imaging")]
        public static void ConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint image) =>
            glConvolutionFilter2D.Invoke(target, internalformat, width, height, format, type, image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float parameters);
        private static GLConvolutionParameterf glConvolutionParameterf;


        [GLExtension("GL_ARB_imaging")]
        public static void ConvolutionParameterf(ConvolutionTarget target, ConvolutionParameter pname, float parameters) =>
            glConvolutionParameterf.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters);
        private static GLConvolutionParameterfv glConvolutionParameterfv;


        [GLExtension("GL_ARB_imaging")]
        public static void ConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameter pname, float[] parameters) =>
            glConvolutionParameterfv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int parameters);
        private static GLConvolutionParameteri glConvolutionParameteri;


        [GLExtension("GL_ARB_imaging")]
        public static void ConvolutionParameteri(ConvolutionTarget target, ConvolutionParameter pname, int parameters) =>
            glConvolutionParameteri.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters);
        private static GLConvolutionParameteriv glConvolutionParameteriv;


        [GLExtension("GL_ARB_imaging")]
        public static void ConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameter pname, int[] parameters) =>
            glConvolutionParameteriv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width);
        private static GLCopyConvolutionFilter1D glCopyConvolutionFilter1D;


        [GLExtension("GL_ARB_imaging")]
        public static void CopyConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width) =>
            glCopyConvolutionFilter1D.Invoke(target, internalformat, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width, int height);
        private static GLCopyConvolutionFilter2D glCopyConvolutionFilter2D;


        [GLExtension("GL_ARB_imaging")]
        public static void CopyConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width, int height) =>
            glCopyConvolutionFilter2D.Invoke(target, internalformat, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, out nint image);
        private static GLGetConvolutionFilter glGetConvolutionFilter;


        [GLExtension("GL_ARB_imaging")]
        public static void GetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, out nint image) =>
            glGetConvolutionFilter.Invoke(target, format, type, out image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameter pname, out float parameters);
        private static GLGetConvolutionParameterfv glGetConvolutionParameterfv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameter pname, out float parameters) =>
            glGetConvolutionParameterfv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameter pname, out int parameters);
        private static GLGetConvolutionParameteriv glGetConvolutionParameteriv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameter pname, out int parameters) =>
            glGetConvolutionParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, out nint row, out nint column, out nint span);
        private static GLGetSeparableFilter glGetSeparableFilter;


        [GLExtension("GL_ARB_imaging")]
        public static void GetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, out nint row, out nint column, out nint span) =>
            glGetSeparableFilter.Invoke(target, format, type, out row, out column, out span);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint row, nint column);
        private static GLSeparableFilter2D glSeparableFilter2D;


        [GLExtension("GL_ARB_imaging")]
        public static void SeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint row, nint column) =>
            glSeparableFilter2D.Invoke(target, internalformat, width, height, format, type, row, column);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values);
        private static GLGetHistogram glGetHistogram;


        [GLExtension("GL_ARB_imaging")]
        public static void GetHistogram(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values) =>
            glGetHistogram.Invoke(target, reset, format, type, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetHistogramParameterfv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out float parameters);
        private static GLGetHistogramParameterfv glGetHistogramParameterfv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetHistogramParameterfv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out float parameters) =>
            glGetHistogramParameterfv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetHistogramParameteriv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters);
        private static GLGetHistogramParameteriv glGetHistogramParameteriv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetHistogramParameteriv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters) =>
            glGetHistogramParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values);
        private static GLGetMinmax glGetMinmax;


        [GLExtension("GL_ARB_imaging")]
        public static void GetMinmax(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values) =>
            glGetMinmax.Invoke(target, reset, format, type, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMinmaxParameterfv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out float parameters);
        private static GLGetMinmaxParameterfv glGetMinmaxParameterfv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetMinmaxParameterfv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out float parameters) =>
            glGetMinmaxParameterfv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMinmaxParameteriv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out int parameters);
        private static GLGetMinmaxParameteriv glGetMinmaxParameteriv;


        [GLExtension("GL_ARB_imaging")]
        public static void GetMinmaxParameteriv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out int parameters) =>
            glGetMinmaxParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLHistogram(HistogramTargetEXT target, int width, InternalFormat internalformat, bool sink);
        private static GLHistogram glHistogram;


        [GLExtension("GL_ARB_imaging")]
        public static void Histogram(HistogramTargetEXT target, int width, InternalFormat internalformat, bool sink) =>
            glHistogram.Invoke(target, width, internalformat, sink);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMinmax(MinmaxTargetEXT target, InternalFormat internalformat, bool sink);
        private static GLMinmax glMinmax;


        [GLExtension("GL_ARB_imaging")]
        public static void Minmax(MinmaxTargetEXT target, InternalFormat internalformat, bool sink) =>
            glMinmax.Invoke(target, internalformat, sink);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResetHistogram(HistogramTargetEXT target);
        private static GLResetHistogram glResetHistogram;


        [GLExtension("GL_ARB_imaging")]
        public static void ResetHistogram(HistogramTargetEXT target) =>
            glResetHistogram.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResetMinmax(MinmaxTargetEXT target);
        private static GLResetMinmax glResetMinmax;


        [GLExtension("GL_ARB_imaging")]
        public static void ResetMinmax(MinmaxTargetEXT target) =>
            glResetMinmax.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysIndirectCountARB(PrimitiveType mode, nint indirect, nint drawcount, int maxdrawcount, int stride);
        private static GLMultiDrawArraysIndirectCountARB glMultiDrawArraysIndirectCountARB;


        [GLExtension("GL_ARB_indirect_parameters")]
        public static void MultiDrawArraysIndirectCountARB(PrimitiveType mode, nint indirect, nint drawcount, int maxdrawcount, int stride) =>
            glMultiDrawArraysIndirectCountARB.Invoke(mode, indirect, drawcount, maxdrawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsIndirectCountARB(PrimitiveType mode, DrawElementsType type, nint indirect, nint drawcount, int maxdrawcount, int stride);
        private static GLMultiDrawElementsIndirectCountARB glMultiDrawElementsIndirectCountARB;


        [GLExtension("GL_ARB_indirect_parameters")]
        public static void MultiDrawElementsIndirectCountARB(PrimitiveType mode, DrawElementsType type, nint indirect, nint drawcount, int maxdrawcount, int stride) =>
            glMultiDrawElementsIndirectCountARB.Invoke(mode, type, indirect, drawcount, maxdrawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribDivisorARB(uint index, uint divisor);
        private static GLVertexAttribDivisorARB glVertexAttribDivisorARB;


        [GLExtension("GL_ARB_instanced_arrays")]
        public static void VertexAttribDivisorARB(uint index, uint divisor) =>
            glVertexAttribDivisorARB.Invoke(index, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInternalformativ(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, out int parameters);
        private static GLGetInternalformativ glGetInternalformativ;


        [GLExtension("GL_ARB_internalformat_query")]
        public static void GetInternalformativ(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, out int parameters) =>
            glGetInternalformativ.Invoke(target, internalformat, pname, count, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInternalformati64v(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, out long parameters);
        private static GLGetInternalformati64v glGetInternalformati64v;


        [GLExtension("GL_ARB_internalformat_query2")]
        public static void GetInternalformati64v(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, out long parameters) =>
            glGetInternalformati64v.Invoke(target, internalformat, pname, count, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth);
        private static GLInvalidateTexSubImage glInvalidateTexSubImage;


        [GLExtension("GL_ARB_invalidate_subdata")]
        public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth) =>
            glInvalidateTexSubImage.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateTexImage(uint texture, int level);
        private static GLInvalidateTexImage glInvalidateTexImage;


        [GLExtension("GL_ARB_invalidate_subdata")]
        public static void InvalidateTexImage(uint texture, int level) =>
            glInvalidateTexImage.Invoke(texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateBufferSubData(uint buffer, nint offset, nint length);
        private static GLInvalidateBufferSubData glInvalidateBufferSubData;


        [GLExtension("GL_ARB_invalidate_subdata")]
        public static void InvalidateBufferSubData(uint buffer, nint offset, nint length) =>
            glInvalidateBufferSubData.Invoke(buffer, offset, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateBufferData(uint buffer);
        private static GLInvalidateBufferData glInvalidateBufferData;


        [GLExtension("GL_ARB_invalidate_subdata")]
        public static void InvalidateBufferData(uint buffer) =>
            glInvalidateBufferData.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments);
        private static GLInvalidateFramebuffer glInvalidateFramebuffer;


        [GLExtension("GL_ARB_invalidate_subdata")]
        public static void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments) =>
            glInvalidateFramebuffer.Invoke(target, numAttachments, attachments);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height);
        private static GLInvalidateSubFramebuffer glInvalidateSubFramebuffer;


        [GLExtension("GL_ARB_invalidate_subdata")]
        public static void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments, int x, int y, int width, int height) =>
            glInvalidateSubFramebuffer.Invoke(target, numAttachments, attachments, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapBufferRange(BufferTargetARB target, nint offset, nint length, MapBufferAccessMask access);
        private static GLMapBufferRange glMapBufferRange;


        [GLExtension("GL_ARB_map_buffer_range")]
        public static nint MapBufferRange(BufferTargetARB target, nint offset, nint length, MapBufferAccessMask access) =>
            glMapBufferRange.Invoke(target, offset, length, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushMappedBufferRange(BufferTargetARB target, nint offset, nint length);
        private static GLFlushMappedBufferRange glFlushMappedBufferRange;


        [GLExtension("GL_ARB_map_buffer_range")]
        public static void FlushMappedBufferRange(BufferTargetARB target, nint offset, nint length) =>
            glFlushMappedBufferRange.Invoke(target, offset, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCurrentPaletteMatrixARB(int index);
        private static GLCurrentPaletteMatrixARB glCurrentPaletteMatrixARB;


        [GLExtension("GL_ARB_matrix_palette")]
        public static void CurrentPaletteMatrixARB(int index) =>
            glCurrentPaletteMatrixARB.Invoke(index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixIndexubvARB(int size, byte[] indices);
        private static GLMatrixIndexubvARB glMatrixIndexubvARB;


        [GLExtension("GL_ARB_matrix_palette")]
        public static void MatrixIndexubvARB(int size, byte[] indices) =>
            glMatrixIndexubvARB.Invoke(size, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixIndexusvARB(int size, ushort[] indices);
        private static GLMatrixIndexusvARB glMatrixIndexusvARB;


        [GLExtension("GL_ARB_matrix_palette")]
        public static void MatrixIndexusvARB(int size, ushort[] indices) =>
            glMatrixIndexusvARB.Invoke(size, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixIndexuivARB(int size, uint[] indices);
        private static GLMatrixIndexuivARB glMatrixIndexuivARB;


        [GLExtension("GL_ARB_matrix_palette")]
        public static void MatrixIndexuivARB(int size, uint[] indices) =>
            glMatrixIndexuivARB.Invoke(size, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixIndexPointerARB(int size, MatrixIndexPointerTypeARB type, int stride, nint pointer);
        private static GLMatrixIndexPointerARB glMatrixIndexPointerARB;


        [GLExtension("GL_ARB_matrix_palette")]
        public static void MatrixIndexPointerARB(int size, MatrixIndexPointerTypeARB type, int stride, nint pointer) =>
            glMatrixIndexPointerARB.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBuffersBase(BufferTargetARB target, uint first, int count, uint[] buffers);
        private static GLBindBuffersBase glBindBuffersBase;


        [GLExtension("GL_ARB_multi_bind")]
        public static void BindBuffersBase(BufferTargetARB target, uint first, int count, uint[] buffers) =>
            glBindBuffersBase.Invoke(target, first, count, buffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBuffersRange(BufferTargetARB target, uint first, int count, uint[] buffers, nint[] offsets, nint[] sizes);
        private static GLBindBuffersRange glBindBuffersRange;


        [GLExtension("GL_ARB_multi_bind")]
        public static void BindBuffersRange(BufferTargetARB target, uint first, int count, uint[] buffers, nint[] offsets, nint[] sizes) =>
            glBindBuffersRange.Invoke(target, first, count, buffers, offsets, sizes);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindTextures(uint first, int count, uint[] textures);
        private static GLBindTextures glBindTextures;


        [GLExtension("GL_ARB_multi_bind")]
        public static void BindTextures(uint first, int count, uint[] textures) =>
            glBindTextures.Invoke(first, count, textures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindSamplers(uint first, int count, uint[] samplers);
        private static GLBindSamplers glBindSamplers;


        [GLExtension("GL_ARB_multi_bind")]
        public static void BindSamplers(uint first, int count, uint[] samplers) =>
            glBindSamplers.Invoke(first, count, samplers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindImageTextures(uint first, int count, uint[] textures);
        private static GLBindImageTextures glBindImageTextures;


        [GLExtension("GL_ARB_multi_bind")]
        public static void BindImageTextures(uint first, int count, uint[] textures) =>
            glBindImageTextures.Invoke(first, count, textures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVertexBuffers(uint first, int count, uint[] buffers, nint[] offsets, int[] strides);
        private static GLBindVertexBuffers glBindVertexBuffers;


        [GLExtension("GL_ARB_multi_bind")]
        public static void BindVertexBuffers(uint first, int count, uint[] buffers, nint[] offsets, int[] strides) =>
            glBindVertexBuffers.Invoke(first, count, buffers, offsets, strides);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysIndirect(PrimitiveType mode, nint indirect, int drawcount, int stride);
        private static GLMultiDrawArraysIndirect glMultiDrawArraysIndirect;


        [GLExtension("GL_ARB_multi_draw_indirect")]
        public static void MultiDrawArraysIndirect(PrimitiveType mode, nint indirect, int drawcount, int stride) =>
            glMultiDrawArraysIndirect.Invoke(mode, indirect, drawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, nint indirect, int drawcount, int stride);
        private static GLMultiDrawElementsIndirect glMultiDrawElementsIndirect;


        [GLExtension("GL_ARB_multi_draw_indirect")]
        public static void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, nint indirect, int drawcount, int stride) =>
            glMultiDrawElementsIndirect.Invoke(mode, type, indirect, drawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleCoverageARB(float value, bool invert);
        private static GLSampleCoverageARB glSampleCoverageARB;


        [GLExtension("GL_ARB_multisample")]
        public static void SampleCoverageARB(float value, bool invert) =>
            glSampleCoverageARB.Invoke(value, invert);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLActiveTextureARB(TextureUnit texture);
        private static GLActiveTextureARB glActiveTextureARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void ActiveTextureARB(TextureUnit texture) =>
            glActiveTextureARB.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClientActiveTextureARB(TextureUnit texture);
        private static GLClientActiveTextureARB glClientActiveTextureARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void ClientActiveTextureARB(TextureUnit texture) =>
            glClientActiveTextureARB.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1dARB(TextureUnit target, double s);
        private static GLMultiTexCoord1dARB glMultiTexCoord1dARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1dARB(TextureUnit target, double s) =>
            glMultiTexCoord1dARB.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1dvARB(TextureUnit target, double[] v);
        private static GLMultiTexCoord1dvARB glMultiTexCoord1dvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1dvARB(TextureUnit target, double[] v) =>
            glMultiTexCoord1dvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1fARB(TextureUnit target, float s);
        private static GLMultiTexCoord1fARB glMultiTexCoord1fARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1fARB(TextureUnit target, float s) =>
            glMultiTexCoord1fARB.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1fvARB(TextureUnit target, float[] v);
        private static GLMultiTexCoord1fvARB glMultiTexCoord1fvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1fvARB(TextureUnit target, float[] v) =>
            glMultiTexCoord1fvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1iARB(TextureUnit target, int s);
        private static GLMultiTexCoord1iARB glMultiTexCoord1iARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1iARB(TextureUnit target, int s) =>
            glMultiTexCoord1iARB.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1ivARB(TextureUnit target, int[] v);
        private static GLMultiTexCoord1ivARB glMultiTexCoord1ivARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1ivARB(TextureUnit target, int[] v) =>
            glMultiTexCoord1ivARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1sARB(TextureUnit target, short s);
        private static GLMultiTexCoord1sARB glMultiTexCoord1sARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1sARB(TextureUnit target, short s) =>
            glMultiTexCoord1sARB.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1svARB(TextureUnit target, short[] v);
        private static GLMultiTexCoord1svARB glMultiTexCoord1svARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord1svARB(TextureUnit target, short[] v) =>
            glMultiTexCoord1svARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2dARB(TextureUnit target, double s, double t);
        private static GLMultiTexCoord2dARB glMultiTexCoord2dARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2dARB(TextureUnit target, double s, double t) =>
            glMultiTexCoord2dARB.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2dvARB(TextureUnit target, double[] v);
        private static GLMultiTexCoord2dvARB glMultiTexCoord2dvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2dvARB(TextureUnit target, double[] v) =>
            glMultiTexCoord2dvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2fARB(TextureUnit target, float s, float t);
        private static GLMultiTexCoord2fARB glMultiTexCoord2fARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2fARB(TextureUnit target, float s, float t) =>
            glMultiTexCoord2fARB.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2fvARB(TextureUnit target, float[] v);
        private static GLMultiTexCoord2fvARB glMultiTexCoord2fvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2fvARB(TextureUnit target, float[] v) =>
            glMultiTexCoord2fvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2iARB(TextureUnit target, int s, int t);
        private static GLMultiTexCoord2iARB glMultiTexCoord2iARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2iARB(TextureUnit target, int s, int t) =>
            glMultiTexCoord2iARB.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2ivARB(TextureUnit target, int[] v);
        private static GLMultiTexCoord2ivARB glMultiTexCoord2ivARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2ivARB(TextureUnit target, int[] v) =>
            glMultiTexCoord2ivARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2sARB(TextureUnit target, short s, short t);
        private static GLMultiTexCoord2sARB glMultiTexCoord2sARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2sARB(TextureUnit target, short s, short t) =>
            glMultiTexCoord2sARB.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2svARB(TextureUnit target, short[] v);
        private static GLMultiTexCoord2svARB glMultiTexCoord2svARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord2svARB(TextureUnit target, short[] v) =>
            glMultiTexCoord2svARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3dARB(TextureUnit target, double s, double t, double r);
        private static GLMultiTexCoord3dARB glMultiTexCoord3dARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3dARB(TextureUnit target, double s, double t, double r) =>
            glMultiTexCoord3dARB.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3dvARB(TextureUnit target, double[] v);
        private static GLMultiTexCoord3dvARB glMultiTexCoord3dvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3dvARB(TextureUnit target, double[] v) =>
            glMultiTexCoord3dvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3fARB(TextureUnit target, float s, float t, float r);
        private static GLMultiTexCoord3fARB glMultiTexCoord3fARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3fARB(TextureUnit target, float s, float t, float r) =>
            glMultiTexCoord3fARB.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3fvARB(TextureUnit target, float[] v);
        private static GLMultiTexCoord3fvARB glMultiTexCoord3fvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3fvARB(TextureUnit target, float[] v) =>
            glMultiTexCoord3fvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3iARB(TextureUnit target, int s, int t, int r);
        private static GLMultiTexCoord3iARB glMultiTexCoord3iARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3iARB(TextureUnit target, int s, int t, int r) =>
            glMultiTexCoord3iARB.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3ivARB(TextureUnit target, int[] v);
        private static GLMultiTexCoord3ivARB glMultiTexCoord3ivARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3ivARB(TextureUnit target, int[] v) =>
            glMultiTexCoord3ivARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3sARB(TextureUnit target, short s, short t, short r);
        private static GLMultiTexCoord3sARB glMultiTexCoord3sARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3sARB(TextureUnit target, short s, short t, short r) =>
            glMultiTexCoord3sARB.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3svARB(TextureUnit target, short[] v);
        private static GLMultiTexCoord3svARB glMultiTexCoord3svARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord3svARB(TextureUnit target, short[] v) =>
            glMultiTexCoord3svARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4dARB(TextureUnit target, double s, double t, double r, double q);
        private static GLMultiTexCoord4dARB glMultiTexCoord4dARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4dARB(TextureUnit target, double s, double t, double r, double q) =>
            glMultiTexCoord4dARB.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4dvARB(TextureUnit target, double[] v);
        private static GLMultiTexCoord4dvARB glMultiTexCoord4dvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4dvARB(TextureUnit target, double[] v) =>
            glMultiTexCoord4dvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4fARB(TextureUnit target, float s, float t, float r, float q);
        private static GLMultiTexCoord4fARB glMultiTexCoord4fARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4fARB(TextureUnit target, float s, float t, float r, float q) =>
            glMultiTexCoord4fARB.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4fvARB(TextureUnit target, float[] v);
        private static GLMultiTexCoord4fvARB glMultiTexCoord4fvARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4fvARB(TextureUnit target, float[] v) =>
            glMultiTexCoord4fvARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4iARB(TextureUnit target, int s, int t, int r, int q);
        private static GLMultiTexCoord4iARB glMultiTexCoord4iARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4iARB(TextureUnit target, int s, int t, int r, int q) =>
            glMultiTexCoord4iARB.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4ivARB(TextureUnit target, int[] v);
        private static GLMultiTexCoord4ivARB glMultiTexCoord4ivARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4ivARB(TextureUnit target, int[] v) =>
            glMultiTexCoord4ivARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4sARB(TextureUnit target, short s, short t, short r, short q);
        private static GLMultiTexCoord4sARB glMultiTexCoord4sARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4sARB(TextureUnit target, short s, short t, short r, short q) =>
            glMultiTexCoord4sARB.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4svARB(TextureUnit target, short[] v);
        private static GLMultiTexCoord4svARB glMultiTexCoord4svARB;


        [GLExtension("GL_ARB_multitexture")]
        public static void MultiTexCoord4svARB(TextureUnit target, short[] v) =>
            glMultiTexCoord4svARB.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenQueriesARB(int n, out uint ids);
        private static GLGenQueriesARB glGenQueriesARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static void GenQueriesARB(int n, out uint ids) =>
            glGenQueriesARB.Invoke(n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteQueriesARB(int n, uint[] ids);
        private static GLDeleteQueriesARB glDeleteQueriesARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static void DeleteQueriesARB(int n, uint[] ids) =>
            glDeleteQueriesARB.Invoke(n, ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsQueryARB(uint id);
        private static GLIsQueryARB glIsQueryARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static bool IsQueryARB(uint id) =>
            glIsQueryARB.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginQueryARB(QueryTarget target, uint id);
        private static GLBeginQueryARB glBeginQueryARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static void BeginQueryARB(QueryTarget target, uint id) =>
            glBeginQueryARB.Invoke(target, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndQueryARB(QueryTarget target);
        private static GLEndQueryARB glEndQueryARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static void EndQueryARB(QueryTarget target) =>
            glEndQueryARB.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryivARB(QueryTarget target, QueryParameterName pname, out int parameters);
        private static GLGetQueryivARB glGetQueryivARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static void GetQueryivARB(QueryTarget target, QueryParameterName pname, out int parameters) =>
            glGetQueryivARB.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectivARB(uint id, QueryObjectParameterName pname, out int parameters);
        private static GLGetQueryObjectivARB glGetQueryObjectivARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static void GetQueryObjectivARB(uint id, QueryObjectParameterName pname, out int parameters) =>
            glGetQueryObjectivARB.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectuivARB(uint id, QueryObjectParameterName pname, out uint parameters);
        private static GLGetQueryObjectuivARB glGetQueryObjectuivARB;


        [GLExtension("GL_ARB_occlusion_query")]
        public static void GetQueryObjectuivARB(uint id, QueryObjectParameterName pname, out uint parameters) =>
            glGetQueryObjectuivARB.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaxShaderCompilerThreadsARB(uint count);
        private static GLMaxShaderCompilerThreadsARB glMaxShaderCompilerThreadsARB;


        [GLExtension("GL_ARB_parallel_shader_compile")]
        public static void MaxShaderCompilerThreadsARB(uint count) =>
            glMaxShaderCompilerThreadsARB.Invoke(count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterfARB(PointParameterNameARB pname, float param);
        private static GLPointParameterfARB glPointParameterfARB;


        [GLExtension("GL_ARB_point_parameters")]
        public static void PointParameterfARB(PointParameterNameARB pname, float param) =>
            glPointParameterfARB.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterfvARB(PointParameterNameARB pname, float[] parameters);
        private static GLPointParameterfvARB glPointParameterfvARB;


        [GLExtension("GL_ARB_point_parameters")]
        public static void PointParameterfvARB(PointParameterNameARB pname, float[] parameters) =>
            glPointParameterfvARB.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonOffsetClamp(float factor, float units, float clamp);
        private static GLPolygonOffsetClamp glPolygonOffsetClamp;


        [GLExtension("GL_ARB_polygon_offset_clamp")]
        public static void PolygonOffsetClamp(float factor, float units, float clamp) =>
            glPolygonOffsetClamp.Invoke(factor, units, clamp);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramInterfaceiv(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, out int parameters);
        private static GLGetProgramInterfaceiv glGetProgramInterfaceiv;


        [GLExtension("GL_ARB_program_interface_query")]
        public static void GetProgramInterfaceiv(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, out int parameters) =>
            glGetProgramInterfaceiv.Invoke(program, programInterface, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetProgramResourceIndex(uint program, ProgramInterface programInterface, sbyte[] name);
        private static GLGetProgramResourceIndex glGetProgramResourceIndex;


        [GLExtension("GL_ARB_program_interface_query")]
        public static uint GetProgramResourceIndex(uint program, ProgramInterface programInterface, sbyte[] name) =>
            glGetProgramResourceIndex.Invoke(program, programInterface, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, out int length, out sbyte name);
        private static GLGetProgramResourceName glGetProgramResourceName;


        [GLExtension("GL_ARB_program_interface_query")]
        public static void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, out int length, out sbyte name) =>
            glGetProgramResourceName.Invoke(program, programInterface, index, bufSize, out length, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramResourceiv(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramResourceProperty[] props, int count, out int length, out int parameters);
        private static GLGetProgramResourceiv glGetProgramResourceiv;


        [GLExtension("GL_ARB_program_interface_query")]
        public static void GetProgramResourceiv(uint program, ProgramInterface programInterface, uint index, int propCount, ProgramResourceProperty[] props, int count, out int length, out int parameters) =>
            glGetProgramResourceiv.Invoke(program, programInterface, index, propCount, props, count, out length, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetProgramResourceLocation(uint program, ProgramInterface programInterface, sbyte[] name);
        private static GLGetProgramResourceLocation glGetProgramResourceLocation;


        [GLExtension("GL_ARB_program_interface_query")]
        public static int GetProgramResourceLocation(uint program, ProgramInterface programInterface, sbyte[] name) =>
            glGetProgramResourceLocation.Invoke(program, programInterface, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, sbyte[] name);
        private static GLGetProgramResourceLocationIndex glGetProgramResourceLocationIndex;


        [GLExtension("GL_ARB_program_interface_query")]
        public static int GetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, sbyte[] name) =>
            glGetProgramResourceLocationIndex.Invoke(program, programInterface, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProvokingVertex(VertexProvokingMode mode);
        private static GLProvokingVertex glProvokingVertex;


        [GLExtension("GL_ARB_provoking_vertex")]
        public static void ProvokingVertex(VertexProvokingMode mode) =>
            glProvokingVertex.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GraphicsResetStatus GLGetGraphicsResetStatusARB();
        private static GLGetGraphicsResetStatusARB glGetGraphicsResetStatusARB;


        [GLExtension("GL_ARB_robustness")]
        public static GraphicsResetStatus GetGraphicsResetStatusARB() =>
            glGetGraphicsResetStatusARB.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnTexImageARB(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, out nint img);
        private static GLGetnTexImageARB glGetnTexImageARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnTexImageARB(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, out nint img) =>
            glGetnTexImageARB.Invoke(target, level, format, type, bufSize, out img);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadnPixelsARB(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data);
        private static GLReadnPixelsARB glReadnPixelsARB;


        [GLExtension("GL_ARB_robustness")]
        public static void ReadnPixelsARB(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data) =>
            glReadnPixelsARB.Invoke(x, y, width, height, format, type, bufSize, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnCompressedTexImageARB(TextureTarget target, int lod, int bufSize, out nint img);
        private static GLGetnCompressedTexImageARB glGetnCompressedTexImageARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnCompressedTexImageARB(TextureTarget target, int lod, int bufSize, out nint img) =>
            glGetnCompressedTexImageARB.Invoke(target, lod, bufSize, out img);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformfvARB(uint program, int location, int bufSize, out float parameters);
        private static GLGetnUniformfvARB glGetnUniformfvARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnUniformfvARB(uint program, int location, int bufSize, out float parameters) =>
            glGetnUniformfvARB.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformivARB(uint program, int location, int bufSize, out int parameters);
        private static GLGetnUniformivARB glGetnUniformivARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnUniformivARB(uint program, int location, int bufSize, out int parameters) =>
            glGetnUniformivARB.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformuivARB(uint program, int location, int bufSize, out uint parameters);
        private static GLGetnUniformuivARB glGetnUniformuivARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnUniformuivARB(uint program, int location, int bufSize, out uint parameters) =>
            glGetnUniformuivARB.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformdvARB(uint program, int location, int bufSize, out double parameters);
        private static GLGetnUniformdvARB glGetnUniformdvARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnUniformdvARB(uint program, int location, int bufSize, out double parameters) =>
            glGetnUniformdvARB.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnMapdvARB(MapTarget target, MapQuery query, int bufSize, out double v);
        private static GLGetnMapdvARB glGetnMapdvARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnMapdvARB(MapTarget target, MapQuery query, int bufSize, out double v) =>
            glGetnMapdvARB.Invoke(target, query, bufSize, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnMapfvARB(MapTarget target, MapQuery query, int bufSize, out float v);
        private static GLGetnMapfvARB glGetnMapfvARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnMapfvARB(MapTarget target, MapQuery query, int bufSize, out float v) =>
            glGetnMapfvARB.Invoke(target, query, bufSize, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnMapivARB(MapTarget target, MapQuery query, int bufSize, out int v);
        private static GLGetnMapivARB glGetnMapivARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnMapivARB(MapTarget target, MapQuery query, int bufSize, out int v) =>
            glGetnMapivARB.Invoke(target, query, bufSize, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnPixelMapfvARB(PixelMap map, int bufSize, out float values);
        private static GLGetnPixelMapfvARB glGetnPixelMapfvARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnPixelMapfvARB(PixelMap map, int bufSize, out float values) =>
            glGetnPixelMapfvARB.Invoke(map, bufSize, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnPixelMapuivARB(PixelMap map, int bufSize, out uint values);
        private static GLGetnPixelMapuivARB glGetnPixelMapuivARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnPixelMapuivARB(PixelMap map, int bufSize, out uint values) =>
            glGetnPixelMapuivARB.Invoke(map, bufSize, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnPixelMapusvARB(PixelMap map, int bufSize, out ushort values);
        private static GLGetnPixelMapusvARB glGetnPixelMapusvARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnPixelMapusvARB(PixelMap map, int bufSize, out ushort values) =>
            glGetnPixelMapusvARB.Invoke(map, bufSize, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnPolygonStippleARB(int bufSize, out byte pattern);
        private static GLGetnPolygonStippleARB glGetnPolygonStippleARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnPolygonStippleARB(int bufSize, out byte pattern) =>
            glGetnPolygonStippleARB.Invoke(bufSize, out pattern);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, out nint table);
        private static GLGetnColorTableARB glGetnColorTableARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, out nint table) =>
            glGetnColorTableARB.Invoke(target, format, type, bufSize, out table);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, out nint image);
        private static GLGetnConvolutionFilterARB glGetnConvolutionFilterARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, out nint image) =>
            glGetnConvolutionFilterARB.Invoke(target, format, type, bufSize, out image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, out nint row, int columnBufSize, out nint column, out nint span);
        private static GLGetnSeparableFilterARB glGetnSeparableFilterARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, out nint row, int columnBufSize, out nint column, out nint span) =>
            glGetnSeparableFilterARB.Invoke(target, format, type, rowBufSize, out row, columnBufSize, out column, out span);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnHistogramARB(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, out nint values);
        private static GLGetnHistogramARB glGetnHistogramARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnHistogramARB(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, out nint values) =>
            glGetnHistogramARB.Invoke(target, reset, format, type, bufSize, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnMinmaxARB(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, out nint values);
        private static GLGetnMinmaxARB glGetnMinmaxARB;


        [GLExtension("GL_ARB_robustness")]
        public static void GetnMinmaxARB(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, int bufSize, out nint values) =>
            glGetnMinmaxARB.Invoke(target, reset, format, type, bufSize, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferSampleLocationsfvARB(FramebufferTarget target, uint start, int count, float[] v);
        private static GLFramebufferSampleLocationsfvARB glFramebufferSampleLocationsfvARB;


        [GLExtension("GL_ARB_sample_locations")]
        public static void FramebufferSampleLocationsfvARB(FramebufferTarget target, uint start, int count, float[] v) =>
            glFramebufferSampleLocationsfvARB.Invoke(target, start, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float[] v);
        private static GLNamedFramebufferSampleLocationsfvARB glNamedFramebufferSampleLocationsfvARB;


        [GLExtension("GL_ARB_sample_locations")]
        public static void NamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float[] v) =>
            glNamedFramebufferSampleLocationsfvARB.Invoke(framebuffer, start, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvaluateDepthValuesARB();
        private static GLEvaluateDepthValuesARB glEvaluateDepthValuesARB;


        [GLExtension("GL_ARB_sample_locations")]
        public static void EvaluateDepthValuesARB() =>
            glEvaluateDepthValuesARB.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMinSampleShadingARB(float value);
        private static GLMinSampleShadingARB glMinSampleShadingARB;


        [GLExtension("GL_ARB_sample_shading")]
        public static void MinSampleShadingARB(float value) =>
            glMinSampleShadingARB.Invoke(value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenSamplers(int count, out uint samplers);
        private static GLGenSamplers glGenSamplers;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void GenSamplers(int count, out uint samplers) =>
            glGenSamplers.Invoke(count, out samplers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteSamplers(int count, uint[] samplers);
        private static GLDeleteSamplers glDeleteSamplers;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void DeleteSamplers(int count, uint[] samplers) =>
            glDeleteSamplers.Invoke(count, samplers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsSampler(uint sampler);
        private static GLIsSampler glIsSampler;


        [GLExtension("GL_ARB_sampler_objects")]
        public static bool IsSampler(uint sampler) =>
            glIsSampler.Invoke(sampler);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindSampler(uint unit, uint sampler);
        private static GLBindSampler glBindSampler;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void BindSampler(uint unit, uint sampler) =>
            glBindSampler.Invoke(unit, sampler);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameteri(uint sampler, SamplerParameterI pname, int param);
        private static GLSamplerParameteri glSamplerParameteri;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void SamplerParameteri(uint sampler, SamplerParameterI pname, int param) =>
            glSamplerParameteri.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameteriv(uint sampler, SamplerParameterI pname, int[] param);
        private static GLSamplerParameteriv glSamplerParameteriv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void SamplerParameteriv(uint sampler, SamplerParameterI pname, int[] param) =>
            glSamplerParameteriv.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterf(uint sampler, SamplerParameterF pname, float param);
        private static GLSamplerParameterf glSamplerParameterf;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void SamplerParameterf(uint sampler, SamplerParameterF pname, float param) =>
            glSamplerParameterf.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterfv(uint sampler, SamplerParameterF pname, float[] param);
        private static GLSamplerParameterfv glSamplerParameterfv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void SamplerParameterfv(uint sampler, SamplerParameterF pname, float[] param) =>
            glSamplerParameterfv.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterIiv(uint sampler, SamplerParameterI pname, int[] param);
        private static GLSamplerParameterIiv glSamplerParameterIiv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void SamplerParameterIiv(uint sampler, SamplerParameterI pname, int[] param) =>
            glSamplerParameterIiv.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterIuiv(uint sampler, SamplerParameterI pname, uint[] param);
        private static GLSamplerParameterIuiv glSamplerParameterIuiv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void SamplerParameterIuiv(uint sampler, SamplerParameterI pname, uint[] param) =>
            glSamplerParameterIuiv.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameteriv(uint sampler, SamplerParameterI pname, out int parameters);
        private static GLGetSamplerParameteriv glGetSamplerParameteriv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void GetSamplerParameteriv(uint sampler, SamplerParameterI pname, out int parameters) =>
            glGetSamplerParameteriv.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameterIiv(uint sampler, SamplerParameterI pname, out int parameters);
        private static GLGetSamplerParameterIiv glGetSamplerParameterIiv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void GetSamplerParameterIiv(uint sampler, SamplerParameterI pname, out int parameters) =>
            glGetSamplerParameterIiv.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameterfv(uint sampler, SamplerParameterF pname, out float parameters);
        private static GLGetSamplerParameterfv glGetSamplerParameterfv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void GetSamplerParameterfv(uint sampler, SamplerParameterF pname, out float parameters) =>
            glGetSamplerParameterfv.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameterIuiv(uint sampler, SamplerParameterI pname, out uint parameters);
        private static GLGetSamplerParameterIuiv glGetSamplerParameterIuiv;


        [GLExtension("GL_ARB_sampler_objects")]
        public static void GetSamplerParameterIuiv(uint sampler, SamplerParameterI pname, out uint parameters) =>
            glGetSamplerParameterIuiv.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUseProgramStages(uint pipeline, UseProgramStageMask stages, uint program);
        private static GLUseProgramStages glUseProgramStages;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void UseProgramStages(uint pipeline, UseProgramStageMask stages, uint program) =>
            glUseProgramStages.Invoke(pipeline, stages, program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLActiveShaderProgram(uint pipeline, uint program);
        private static GLActiveShaderProgram glActiveShaderProgram;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ActiveShaderProgram(uint pipeline, uint program) =>
            glActiveShaderProgram.Invoke(pipeline, program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLCreateShaderProgramv(ShaderType type, int count, sbyte strings);
        private static GLCreateShaderProgramv glCreateShaderProgramv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static uint CreateShaderProgramv(ShaderType type, int count, sbyte strings) =>
            glCreateShaderProgramv.Invoke(type, count, strings);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindProgramPipeline(uint pipeline);
        private static GLBindProgramPipeline glBindProgramPipeline;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void BindProgramPipeline(uint pipeline) =>
            glBindProgramPipeline.Invoke(pipeline);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteProgramPipelines(int n, uint[] pipelines);
        private static GLDeleteProgramPipelines glDeleteProgramPipelines;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void DeleteProgramPipelines(int n, uint[] pipelines) =>
            glDeleteProgramPipelines.Invoke(n, pipelines);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenProgramPipelines(int n, out uint pipelines);
        private static GLGenProgramPipelines glGenProgramPipelines;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void GenProgramPipelines(int n, out uint pipelines) =>
            glGenProgramPipelines.Invoke(n, out pipelines);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsProgramPipeline(uint pipeline);
        private static GLIsProgramPipeline glIsProgramPipeline;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static bool IsProgramPipeline(uint pipeline) =>
            glIsProgramPipeline.Invoke(pipeline);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramPipelineiv(uint pipeline, PipelineParameterName pname, out int parameters);
        private static GLGetProgramPipelineiv glGetProgramPipelineiv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void GetProgramPipelineiv(uint pipeline, PipelineParameterName pname, out int parameters) =>
            glGetProgramPipelineiv.Invoke(pipeline, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1i(uint program, int location, int v0);
        private static GLProgramUniform1i glProgramUniform1i;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1i(uint program, int location, int v0) =>
            glProgramUniform1i.Invoke(program, location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1iv(uint program, int location, int count, int[] value);
        private static GLProgramUniform1iv glProgramUniform1iv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1iv(uint program, int location, int count, int[] value) =>
            glProgramUniform1iv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1f(uint program, int location, float v0);
        private static GLProgramUniform1f glProgramUniform1f;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1f(uint program, int location, float v0) =>
            glProgramUniform1f.Invoke(program, location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1fv(uint program, int location, int count, float[] value);
        private static GLProgramUniform1fv glProgramUniform1fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1fv(uint program, int location, int count, float[] value) =>
            glProgramUniform1fv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1d(uint program, int location, double v0);
        private static GLProgramUniform1d glProgramUniform1d;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1d(uint program, int location, double v0) =>
            glProgramUniform1d.Invoke(program, location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1dv(uint program, int location, int count, double[] value);
        private static GLProgramUniform1dv glProgramUniform1dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1dv(uint program, int location, int count, double[] value) =>
            glProgramUniform1dv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1ui(uint program, int location, uint v0);
        private static GLProgramUniform1ui glProgramUniform1ui;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1ui(uint program, int location, uint v0) =>
            glProgramUniform1ui.Invoke(program, location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1uiv(uint program, int location, int count, uint[] value);
        private static GLProgramUniform1uiv glProgramUniform1uiv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform1uiv(uint program, int location, int count, uint[] value) =>
            glProgramUniform1uiv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2i(uint program, int location, int v0, int v1);
        private static GLProgramUniform2i glProgramUniform2i;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2i(uint program, int location, int v0, int v1) =>
            glProgramUniform2i.Invoke(program, location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2iv(uint program, int location, int count, int[] value);
        private static GLProgramUniform2iv glProgramUniform2iv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2iv(uint program, int location, int count, int[] value) =>
            glProgramUniform2iv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2f(uint program, int location, float v0, float v1);
        private static GLProgramUniform2f glProgramUniform2f;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2f(uint program, int location, float v0, float v1) =>
            glProgramUniform2f.Invoke(program, location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2fv(uint program, int location, int count, float[] value);
        private static GLProgramUniform2fv glProgramUniform2fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2fv(uint program, int location, int count, float[] value) =>
            glProgramUniform2fv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2d(uint program, int location, double v0, double v1);
        private static GLProgramUniform2d glProgramUniform2d;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2d(uint program, int location, double v0, double v1) =>
            glProgramUniform2d.Invoke(program, location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2dv(uint program, int location, int count, double[] value);
        private static GLProgramUniform2dv glProgramUniform2dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2dv(uint program, int location, int count, double[] value) =>
            glProgramUniform2dv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2ui(uint program, int location, uint v0, uint v1);
        private static GLProgramUniform2ui glProgramUniform2ui;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2ui(uint program, int location, uint v0, uint v1) =>
            glProgramUniform2ui.Invoke(program, location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2uiv(uint program, int location, int count, uint[] value);
        private static GLProgramUniform2uiv glProgramUniform2uiv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform2uiv(uint program, int location, int count, uint[] value) =>
            glProgramUniform2uiv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3i(uint program, int location, int v0, int v1, int v2);
        private static GLProgramUniform3i glProgramUniform3i;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3i(uint program, int location, int v0, int v1, int v2) =>
            glProgramUniform3i.Invoke(program, location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3iv(uint program, int location, int count, int[] value);
        private static GLProgramUniform3iv glProgramUniform3iv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3iv(uint program, int location, int count, int[] value) =>
            glProgramUniform3iv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3f(uint program, int location, float v0, float v1, float v2);
        private static GLProgramUniform3f glProgramUniform3f;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3f(uint program, int location, float v0, float v1, float v2) =>
            glProgramUniform3f.Invoke(program, location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3fv(uint program, int location, int count, float[] value);
        private static GLProgramUniform3fv glProgramUniform3fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3fv(uint program, int location, int count, float[] value) =>
            glProgramUniform3fv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3d(uint program, int location, double v0, double v1, double v2);
        private static GLProgramUniform3d glProgramUniform3d;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3d(uint program, int location, double v0, double v1, double v2) =>
            glProgramUniform3d.Invoke(program, location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3dv(uint program, int location, int count, double[] value);
        private static GLProgramUniform3dv glProgramUniform3dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3dv(uint program, int location, int count, double[] value) =>
            glProgramUniform3dv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2);
        private static GLProgramUniform3ui glProgramUniform3ui;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2) =>
            glProgramUniform3ui.Invoke(program, location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3uiv(uint program, int location, int count, uint[] value);
        private static GLProgramUniform3uiv glProgramUniform3uiv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform3uiv(uint program, int location, int count, uint[] value) =>
            glProgramUniform3uiv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3);
        private static GLProgramUniform4i glProgramUniform4i;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3) =>
            glProgramUniform4i.Invoke(program, location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4iv(uint program, int location, int count, int[] value);
        private static GLProgramUniform4iv glProgramUniform4iv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4iv(uint program, int location, int count, int[] value) =>
            glProgramUniform4iv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3);
        private static GLProgramUniform4f glProgramUniform4f;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3) =>
            glProgramUniform4f.Invoke(program, location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4fv(uint program, int location, int count, float[] value);
        private static GLProgramUniform4fv glProgramUniform4fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4fv(uint program, int location, int count, float[] value) =>
            glProgramUniform4fv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3);
        private static GLProgramUniform4d glProgramUniform4d;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3) =>
            glProgramUniform4d.Invoke(program, location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4dv(uint program, int location, int count, double[] value);
        private static GLProgramUniform4dv glProgramUniform4dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4dv(uint program, int location, int count, double[] value) =>
            glProgramUniform4dv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        private static GLProgramUniform4ui glProgramUniform4ui;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3) =>
            glProgramUniform4ui.Invoke(program, location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4uiv(uint program, int location, int count, uint[] value);
        private static GLProgramUniform4uiv glProgramUniform4uiv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniform4uiv(uint program, int location, int count, uint[] value) =>
            glProgramUniform4uiv.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix2fv glProgramUniformMatrix2fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix2fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix3fv glProgramUniformMatrix3fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix3fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix4fv glProgramUniformMatrix4fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix4fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix2dv glProgramUniformMatrix2dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix2dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix3dv glProgramUniformMatrix3dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix3dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix4dv glProgramUniformMatrix4dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix4dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix2x3fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix3x2fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix2x4fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix4x2fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix3x4fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix4x3fv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix2x3dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix3x2dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix2x4dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix4x2dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix3x4dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix4x3dv.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLValidateProgramPipeline(uint pipeline);
        private static GLValidateProgramPipeline glValidateProgramPipeline;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void ValidateProgramPipeline(uint pipeline) =>
            glValidateProgramPipeline.Invoke(pipeline);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, out sbyte infoLog);
        private static GLGetProgramPipelineInfoLog glGetProgramPipelineInfoLog;


        [GLExtension("GL_ARB_separate_shader_objects")]
        public static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, out int length, out sbyte infoLog) =>
            glGetProgramPipelineInfoLog.Invoke(pipeline, bufSize, out length, out infoLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, AtomicCounterBufferPName pname, out int parameters);
        private static GLGetActiveAtomicCounterBufferiv glGetActiveAtomicCounterBufferiv;


        [GLExtension("GL_ARB_shader_atomic_counters")]
        public static void GetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, AtomicCounterBufferPName pname, out int parameters) =>
            glGetActiveAtomicCounterBufferiv.Invoke(program, bufferIndex, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindImageTexture(uint unit, uint texture, int level, bool layered, int layer, BufferAccessARB access, InternalFormat format);
        private static GLBindImageTexture glBindImageTexture;


        [GLExtension("GL_ARB_shader_image_load_store")]
        public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, BufferAccessARB access, InternalFormat format) =>
            glBindImageTexture.Invoke(unit, texture, level, layered, layer, access, format);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMemoryBarrier(MemoryBarrierMask barriers);
        private static GLMemoryBarrier glMemoryBarrier;


        [GLExtension("GL_ARB_shader_image_load_store")]
        public static void MemoryBarrier(MemoryBarrierMask barriers) =>
            glMemoryBarrier.Invoke(barriers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteObjectARB(ushort obj);
        private static GLDeleteObjectARB glDeleteObjectARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void DeleteObjectARB(ushort obj) =>
            glDeleteObjectARB.Invoke(obj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ushort GLGetHandleARB(ContainerType pname);
        private static GLGetHandleARB glGetHandleARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static ushort GetHandleARB(ContainerType pname) =>
            glGetHandleARB.Invoke(pname);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDetachObjectARB(ushort containerObj, ushort attachedObj);
        private static GLDetachObjectARB glDetachObjectARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void DetachObjectARB(ushort containerObj, ushort attachedObj) =>
            glDetachObjectARB.Invoke(containerObj, attachedObj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ushort GLCreateShaderObjectARB(ShaderType shaderType);
        private static GLCreateShaderObjectARB glCreateShaderObjectARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static ushort CreateShaderObjectARB(ShaderType shaderType) =>
            glCreateShaderObjectARB.Invoke(shaderType);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShaderSourceARB(ushort shaderObj, int count, sbyte[] str, int[] length);
        private static GLShaderSourceARB glShaderSourceARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void ShaderSourceARB(ushort shaderObj, int count, sbyte[] str, int[] length) =>
            glShaderSourceARB.Invoke(shaderObj, count, str, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompileShaderARB(ushort shaderObj);
        private static GLCompileShaderARB glCompileShaderARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void CompileShaderARB(ushort shaderObj) =>
            glCompileShaderARB.Invoke(shaderObj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ushort GLCreateProgramObjectARB();
        private static GLCreateProgramObjectARB glCreateProgramObjectARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static ushort CreateProgramObjectARB() =>
            glCreateProgramObjectARB.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAttachObjectARB(ushort containerObj, ushort obj);
        private static GLAttachObjectARB glAttachObjectARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void AttachObjectARB(ushort containerObj, ushort obj) =>
            glAttachObjectARB.Invoke(containerObj, obj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLinkProgramARB(ushort programObj);
        private static GLLinkProgramARB glLinkProgramARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void LinkProgramARB(ushort programObj) =>
            glLinkProgramARB.Invoke(programObj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUseProgramObjectARB(ushort programObj);
        private static GLUseProgramObjectARB glUseProgramObjectARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void UseProgramObjectARB(ushort programObj) =>
            glUseProgramObjectARB.Invoke(programObj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLValidateProgramARB(ushort programObj);
        private static GLValidateProgramARB glValidateProgramARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void ValidateProgramARB(ushort programObj) =>
            glValidateProgramARB.Invoke(programObj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1fARB(int location, float v0);
        private static GLUniform1fARB glUniform1fARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform1fARB(int location, float v0) =>
            glUniform1fARB.Invoke(location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2fARB(int location, float v0, float v1);
        private static GLUniform2fARB glUniform2fARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform2fARB(int location, float v0, float v1) =>
            glUniform2fARB.Invoke(location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3fARB(int location, float v0, float v1, float v2);
        private static GLUniform3fARB glUniform3fARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform3fARB(int location, float v0, float v1, float v2) =>
            glUniform3fARB.Invoke(location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4fARB(int location, float v0, float v1, float v2, float v3);
        private static GLUniform4fARB glUniform4fARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform4fARB(int location, float v0, float v1, float v2, float v3) =>
            glUniform4fARB.Invoke(location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1iARB(int location, int v0);
        private static GLUniform1iARB glUniform1iARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform1iARB(int location, int v0) =>
            glUniform1iARB.Invoke(location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2iARB(int location, int v0, int v1);
        private static GLUniform2iARB glUniform2iARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform2iARB(int location, int v0, int v1) =>
            glUniform2iARB.Invoke(location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3iARB(int location, int v0, int v1, int v2);
        private static GLUniform3iARB glUniform3iARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform3iARB(int location, int v0, int v1, int v2) =>
            glUniform3iARB.Invoke(location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4iARB(int location, int v0, int v1, int v2, int v3);
        private static GLUniform4iARB glUniform4iARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform4iARB(int location, int v0, int v1, int v2, int v3) =>
            glUniform4iARB.Invoke(location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1fvARB(int location, int count, float[] value);
        private static GLUniform1fvARB glUniform1fvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform1fvARB(int location, int count, float[] value) =>
            glUniform1fvARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2fvARB(int location, int count, float[] value);
        private static GLUniform2fvARB glUniform2fvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform2fvARB(int location, int count, float[] value) =>
            glUniform2fvARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3fvARB(int location, int count, float[] value);
        private static GLUniform3fvARB glUniform3fvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform3fvARB(int location, int count, float[] value) =>
            glUniform3fvARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4fvARB(int location, int count, float[] value);
        private static GLUniform4fvARB glUniform4fvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform4fvARB(int location, int count, float[] value) =>
            glUniform4fvARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1ivARB(int location, int count, int[] value);
        private static GLUniform1ivARB glUniform1ivARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform1ivARB(int location, int count, int[] value) =>
            glUniform1ivARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2ivARB(int location, int count, int[] value);
        private static GLUniform2ivARB glUniform2ivARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform2ivARB(int location, int count, int[] value) =>
            glUniform2ivARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3ivARB(int location, int count, int[] value);
        private static GLUniform3ivARB glUniform3ivARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform3ivARB(int location, int count, int[] value) =>
            glUniform3ivARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4ivARB(int location, int count, int[] value);
        private static GLUniform4ivARB glUniform4ivARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void Uniform4ivARB(int location, int count, int[] value) =>
            glUniform4ivARB.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2fvARB(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix2fvARB glUniformMatrix2fvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void UniformMatrix2fvARB(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix2fvARB.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3fvARB(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix3fvARB glUniformMatrix3fvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void UniformMatrix3fvARB(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix3fvARB.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4fvARB(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix4fvARB glUniformMatrix4fvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void UniformMatrix4fvARB(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix4fvARB.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectParameterfvARB(ushort obj, int pname, out float parameters);
        private static GLGetObjectParameterfvARB glGetObjectParameterfvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetObjectParameterfvARB(ushort obj, int pname, out float parameters) =>
            glGetObjectParameterfvARB.Invoke(obj, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectParameterivARB(ushort obj, int pname, out int parameters);
        private static GLGetObjectParameterivARB glGetObjectParameterivARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetObjectParameterivARB(ushort obj, int pname, out int parameters) =>
            glGetObjectParameterivARB.Invoke(obj, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInfoLogARB(ushort obj, int maxLength, out int length, out sbyte infoLog);
        private static GLGetInfoLogARB glGetInfoLogARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetInfoLogARB(ushort obj, int maxLength, out int length, out sbyte infoLog) =>
            glGetInfoLogARB.Invoke(obj, maxLength, out length, out infoLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetAttachedObjectsARB(ushort containerObj, int maxCount, out int count, out ushort obj);
        private static GLGetAttachedObjectsARB glGetAttachedObjectsARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetAttachedObjectsARB(ushort containerObj, int maxCount, out int count, out ushort obj) =>
            glGetAttachedObjectsARB.Invoke(containerObj, maxCount, out count, out obj);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetUniformLocationARB(ushort programObj, sbyte[] name);
        private static GLGetUniformLocationARB glGetUniformLocationARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static int GetUniformLocationARB(ushort programObj, sbyte[] name) =>
            glGetUniformLocationARB.Invoke(programObj, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveUniformARB(ushort programObj, uint index, int maxLength, out int length, out int size, out UniformType type, out sbyte name);
        private static GLGetActiveUniformARB glGetActiveUniformARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetActiveUniformARB(ushort programObj, uint index, int maxLength, out int length, out int size, out UniformType type, out sbyte name) =>
            glGetActiveUniformARB.Invoke(programObj, index, maxLength, out length, out size, out type, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformfvARB(ushort programObj, int location, out float parameters);
        private static GLGetUniformfvARB glGetUniformfvARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetUniformfvARB(ushort programObj, int location, out float parameters) =>
            glGetUniformfvARB.Invoke(programObj, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformivARB(ushort programObj, int location, out int parameters);
        private static GLGetUniformivARB glGetUniformivARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetUniformivARB(ushort programObj, int location, out int parameters) =>
            glGetUniformivARB.Invoke(programObj, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetShaderSourceARB(ushort obj, int maxLength, out int length, out sbyte source);
        private static GLGetShaderSourceARB glGetShaderSourceARB;


        [GLExtension("GL_ARB_shader_objects")]
        public static void GetShaderSourceARB(ushort obj, int maxLength, out int length, out sbyte source) =>
            glGetShaderSourceARB.Invoke(obj, maxLength, out length, out source);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding);
        private static GLShaderStorageBlockBinding glShaderStorageBlockBinding;


        [GLExtension("GL_ARB_shader_storage_buffer_object")]
        public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding) =>
            glShaderStorageBlockBinding.Invoke(program, storageBlockIndex, storageBlockBinding);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetSubroutineUniformLocation(uint program, ShaderType shadertype, sbyte[] name);
        private static GLGetSubroutineUniformLocation glGetSubroutineUniformLocation;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static int GetSubroutineUniformLocation(uint program, ShaderType shadertype, sbyte[] name) =>
            glGetSubroutineUniformLocation.Invoke(program, shadertype, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetSubroutineIndex(uint program, ShaderType shadertype, sbyte[] name);
        private static GLGetSubroutineIndex glGetSubroutineIndex;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static uint GetSubroutineIndex(uint program, ShaderType shadertype, sbyte[] name) =>
            glGetSubroutineIndex.Invoke(program, shadertype, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveSubroutineUniformiv(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, out int values);
        private static GLGetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static void GetActiveSubroutineUniformiv(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, out int values) =>
            glGetActiveSubroutineUniformiv.Invoke(program, shadertype, index, pname, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufSize, out int length, out sbyte name);
        private static GLGetActiveSubroutineUniformName glGetActiveSubroutineUniformName;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufSize, out int length, out sbyte name) =>
            glGetActiveSubroutineUniformName.Invoke(program, shadertype, index, bufSize, out length, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufSize, out int length, out sbyte name);
        private static GLGetActiveSubroutineName glGetActiveSubroutineName;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufSize, out int length, out sbyte name) =>
            glGetActiveSubroutineName.Invoke(program, shadertype, index, bufSize, out length, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformSubroutinesuiv(ShaderType shadertype, int count, uint[] indices);
        private static GLUniformSubroutinesuiv glUniformSubroutinesuiv;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static void UniformSubroutinesuiv(ShaderType shadertype, int count, uint[] indices) =>
            glUniformSubroutinesuiv.Invoke(shadertype, count, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformSubroutineuiv(ShaderType shadertype, int location, out uint parameters);
        private static GLGetUniformSubroutineuiv glGetUniformSubroutineuiv;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static void GetUniformSubroutineuiv(ShaderType shadertype, int location, out uint parameters) =>
            glGetUniformSubroutineuiv.Invoke(shadertype, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramStageiv(uint program, ShaderType shadertype, ProgramStagePName pname, out int values);
        private static GLGetProgramStageiv glGetProgramStageiv;


        [GLExtension("GL_ARB_shader_subroutine")]
        public static void GetProgramStageiv(uint program, ShaderType shadertype, ProgramStagePName pname, out int values) =>
            glGetProgramStageiv.Invoke(program, shadertype, pname, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedStringARB(int type, int namelen, sbyte[] name, int stringlen, sbyte[] str);
        private static GLNamedStringARB glNamedStringARB;


        [GLExtension("GL_ARB_shading_language_include")]
        public static void NamedStringARB(int type, int namelen, sbyte[] name, int stringlen, sbyte[] str) =>
            glNamedStringARB.Invoke(type, namelen, name, stringlen, str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteNamedStringARB(int namelen, sbyte[] name);
        private static GLDeleteNamedStringARB glDeleteNamedStringARB;


        [GLExtension("GL_ARB_shading_language_include")]
        public static void DeleteNamedStringARB(int namelen, sbyte[] name) =>
            glDeleteNamedStringARB.Invoke(namelen, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompileShaderIncludeARB(uint shader, int count, sbyte path, int[] length);
        private static GLCompileShaderIncludeARB glCompileShaderIncludeARB;


        [GLExtension("GL_ARB_shading_language_include")]
        public static void CompileShaderIncludeARB(uint shader, int count, sbyte path, int[] length) =>
            glCompileShaderIncludeARB.Invoke(shader, count, path, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsNamedStringARB(int namelen, sbyte[] name);
        private static GLIsNamedStringARB glIsNamedStringARB;


        [GLExtension("GL_ARB_shading_language_include")]
        public static bool IsNamedStringARB(int namelen, sbyte[] name) =>
            glIsNamedStringARB.Invoke(namelen, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedStringARB(int namelen, sbyte[] name, int bufSize, out int stringlen, out sbyte str);
        private static GLGetNamedStringARB glGetNamedStringARB;


        [GLExtension("GL_ARB_shading_language_include")]
        public static void GetNamedStringARB(int namelen, sbyte[] name, int bufSize, out int stringlen, out sbyte str) =>
            glGetNamedStringARB.Invoke(namelen, name, bufSize, out stringlen, out str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedStringivARB(int namelen, sbyte[] name, int pname, out int parameters);
        private static GLGetNamedStringivARB glGetNamedStringivARB;


        [GLExtension("GL_ARB_shading_language_include")]
        public static void GetNamedStringivARB(int namelen, sbyte[] name, int pname, out int parameters) =>
            glGetNamedStringivARB.Invoke(namelen, name, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferPageCommitmentARB(int target, nint offset, nint size, bool commit);
        private static GLBufferPageCommitmentARB glBufferPageCommitmentARB;


        [GLExtension("GL_ARB_sparse_buffer")]
        public static void BufferPageCommitmentARB(int target, nint offset, nint size, bool commit) =>
            glBufferPageCommitmentARB.Invoke(target, offset, size, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferPageCommitmentEXT(uint buffer, nint offset, nint size, bool commit);
        private static GLNamedBufferPageCommitmentEXT glNamedBufferPageCommitmentEXT;


        [GLExtension("GL_ARB_sparse_buffer")]
        public static void NamedBufferPageCommitmentEXT(uint buffer, nint offset, nint size, bool commit) =>
            glNamedBufferPageCommitmentEXT.Invoke(buffer, offset, size, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferPageCommitmentARB(uint buffer, nint offset, nint size, bool commit);
        private static GLNamedBufferPageCommitmentARB glNamedBufferPageCommitmentARB;


        [GLExtension("GL_ARB_sparse_buffer")]
        public static void NamedBufferPageCommitmentARB(uint buffer, nint offset, nint size, bool commit) =>
            glNamedBufferPageCommitmentARB.Invoke(buffer, offset, size, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        private static GLTexPageCommitmentARB glTexPageCommitmentARB;


        [GLExtension("GL_ARB_sparse_texture")]
        public static void TexPageCommitmentARB(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit) =>
            glTexPageCommitmentARB.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLFenceSync(SyncCondition condition, SyncBehaviorFlags flags);
        private static GLFenceSync glFenceSync;


        [GLExtension("GL_ARB_sync")]
        public static nint FenceSync(SyncCondition condition, SyncBehaviorFlags flags) =>
            glFenceSync.Invoke(condition, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsSync(nint sync);
        private static GLIsSync glIsSync;


        [GLExtension("GL_ARB_sync")]
        public static bool IsSync(nint sync) =>
            glIsSync.Invoke(sync);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteSync(nint sync);
        private static GLDeleteSync glDeleteSync;


        [GLExtension("GL_ARB_sync")]
        public static void DeleteSync(nint sync) =>
            glDeleteSync.Invoke(sync);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate SyncStatus GLClientWaitSync(nint sync, SyncObjectMask flags, ulong timeout);
        private static GLClientWaitSync glClientWaitSync;


        [GLExtension("GL_ARB_sync")]
        public static SyncStatus ClientWaitSync(nint sync, SyncObjectMask flags, ulong timeout) =>
            glClientWaitSync.Invoke(sync, flags, timeout);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWaitSync(nint sync, SyncBehaviorFlags flags, ulong timeout);
        private static GLWaitSync glWaitSync;


        [GLExtension("GL_ARB_sync")]
        public static void WaitSync(nint sync, SyncBehaviorFlags flags, ulong timeout) =>
            glWaitSync.Invoke(sync, flags, timeout);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInteger64v(GetPName pname, out long data);
        private static GLGetInteger64v glGetInteger64v;


        [GLExtension("GL_ARB_sync")]
        public static void GetInteger64v(GetPName pname, out long data) =>
            glGetInteger64v.Invoke(pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSynciv(nint sync, SyncParameterName pname, int count, out int length, out int values);
        private static GLGetSynciv glGetSynciv;


        [GLExtension("GL_ARB_sync")]
        public static void GetSynciv(nint sync, SyncParameterName pname, int count, out int length, out int values) =>
            glGetSynciv.Invoke(sync, pname, count, out length, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPatchParameteri(PatchParameterName pname, int value);
        private static GLPatchParameteri glPatchParameteri;


        [GLExtension("GL_ARB_tessellation_shader")]
        public static void PatchParameteri(PatchParameterName pname, int value) =>
            glPatchParameteri.Invoke(pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPatchParameterfv(PatchParameterName pname, float[] values);
        private static GLPatchParameterfv glPatchParameterfv;


        [GLExtension("GL_ARB_tessellation_shader")]
        public static void PatchParameterfv(PatchParameterName pname, float[] values) =>
            glPatchParameterfv.Invoke(pname, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureBarrier();
        private static GLTextureBarrier glTextureBarrier;


        [GLExtension("GL_ARB_texture_barrier")]
        public static void TextureBarrier() =>
            glTextureBarrier.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBufferARB(TextureTarget target, SizedInternalFormat internalformat, uint buffer);
        private static GLTexBufferARB glTexBufferARB;


        [GLExtension("GL_ARB_texture_buffer_object")]
        public static void TexBufferARB(TextureTarget target, SizedInternalFormat internalformat, uint buffer) =>
            glTexBufferARB.Invoke(target, internalformat, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBufferRange(TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size);
        private static GLTexBufferRange glTexBufferRange;


        [GLExtension("GL_ARB_texture_buffer_range")]
        public static void TexBufferRange(TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size) =>
            glTexBufferRange.Invoke(target, internalformat, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexImage3DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data);
        private static GLCompressedTexImage3DARB glCompressedTexImage3DARB;


        [GLExtension("GL_ARB_texture_compression")]
        public static void CompressedTexImage3DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data) =>
            glCompressedTexImage3DARB.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexImage2DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint data);
        private static GLCompressedTexImage2DARB glCompressedTexImage2DARB;


        [GLExtension("GL_ARB_texture_compression")]
        public static void CompressedTexImage2DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint data) =>
            glCompressedTexImage2DARB.Invoke(target, level, internalformat, width, height, border, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexImage1DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint data);
        private static GLCompressedTexImage1DARB glCompressedTexImage1DARB;


        [GLExtension("GL_ARB_texture_compression")]
        public static void CompressedTexImage1DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint data) =>
            glCompressedTexImage1DARB.Invoke(target, level, internalformat, width, border, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexSubImage3DARB(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTexSubImage3DARB glCompressedTexSubImage3DARB;


        [GLExtension("GL_ARB_texture_compression")]
        public static void CompressedTexSubImage3DARB(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data) =>
            glCompressedTexSubImage3DARB.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexSubImage2DARB(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTexSubImage2DARB glCompressedTexSubImage2DARB;


        [GLExtension("GL_ARB_texture_compression")]
        public static void CompressedTexSubImage2DARB(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data) =>
            glCompressedTexSubImage2DARB.Invoke(target, level, xoffset, yoffset, width, height, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexSubImage1DARB(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTexSubImage1DARB glCompressedTexSubImage1DARB;


        [GLExtension("GL_ARB_texture_compression")]
        public static void CompressedTexSubImage1DARB(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data) =>
            glCompressedTexSubImage1DARB.Invoke(target, level, xoffset, width, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCompressedTexImageARB(TextureTarget target, int level, out nint img);
        private static GLGetCompressedTexImageARB glGetCompressedTexImageARB;


        [GLExtension("GL_ARB_texture_compression")]
        public static void GetCompressedTexImageARB(TextureTarget target, int level, out nint img) =>
            glGetCompressedTexImageARB.Invoke(target, level, out img);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage2DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        private static GLTexImage2DMultisample glTexImage2DMultisample;


        [GLExtension("GL_ARB_texture_multisample")]
        public static void TexImage2DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, bool fixedsamplelocations) =>
            glTexImage2DMultisample.Invoke(target, samples, internalformat, width, height, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage3DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static GLTexImage3DMultisample glTexImage3DMultisample;


        [GLExtension("GL_ARB_texture_multisample")]
        public static void TexImage3DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations) =>
            glTexImage3DMultisample.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultisamplefv(GetMultisamplePNameNV pname, uint index, out float val);
        private static GLGetMultisamplefv glGetMultisamplefv;


        [GLExtension("GL_ARB_texture_multisample")]
        public static void GetMultisamplefv(GetMultisamplePNameNV pname, uint index, out float val) =>
            glGetMultisamplefv.Invoke(pname, index, out val);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleMaski(uint maskNumber, uint mask);
        private static GLSampleMaski glSampleMaski;


        [GLExtension("GL_ARB_texture_multisample")]
        public static void SampleMaski(uint maskNumber, uint mask) =>
            glSampleMaski.Invoke(maskNumber, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage1D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width);
        private static GLTexStorage1D glTexStorage1D;


        [GLExtension("GL_ARB_texture_storage")]
        public static void TexStorage1D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width) =>
            glTexStorage1D.Invoke(target, levels, internalformat, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage2D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height);
        private static GLTexStorage2D glTexStorage2D;


        [GLExtension("GL_ARB_texture_storage")]
        public static void TexStorage2D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height) =>
            glTexStorage2D.Invoke(target, levels, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage3D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth);
        private static GLTexStorage3D glTexStorage3D;


        [GLExtension("GL_ARB_texture_storage")]
        public static void TexStorage3D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth) =>
            glTexStorage3D.Invoke(target, levels, internalformat, width, height, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage2DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        private static GLTexStorage2DMultisample glTexStorage2DMultisample;


        [GLExtension("GL_ARB_texture_storage_multisample")]
        public static void TexStorage2DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations) =>
            glTexStorage2DMultisample.Invoke(target, samples, internalformat, width, height, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage3DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static GLTexStorage3DMultisample glTexStorage3DMultisample;


        [GLExtension("GL_ARB_texture_storage_multisample")]
        public static void TexStorage3DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations) =>
            glTexStorage3DMultisample.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureView(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        private static GLTextureView glTextureView;


        [GLExtension("GL_ARB_texture_view")]
        public static void TextureView(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) =>
            glTextureView.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLQueryCounter(uint id, QueryCounterTarget target);
        private static GLQueryCounter glQueryCounter;


        [GLExtension("GL_ARB_timer_query")]
        public static void QueryCounter(uint id, QueryCounterTarget target) =>
            glQueryCounter.Invoke(id, target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjecti64v(uint id, QueryObjectParameterName pname, out long parameters);
        private static GLGetQueryObjecti64v glGetQueryObjecti64v;


        [GLExtension("GL_ARB_timer_query")]
        public static void GetQueryObjecti64v(uint id, QueryObjectParameterName pname, out long parameters) =>
            glGetQueryObjecti64v.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectui64v(uint id, QueryObjectParameterName pname, out ulong parameters);
        private static GLGetQueryObjectui64v glGetQueryObjectui64v;


        [GLExtension("GL_ARB_timer_query")]
        public static void GetQueryObjectui64v(uint id, QueryObjectParameterName pname, out ulong parameters) =>
            glGetQueryObjectui64v.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindTransformFeedback(BindTransformFeedbackTarget target, uint id);
        private static GLBindTransformFeedback glBindTransformFeedback;


        [GLExtension("GL_ARB_transform_feedback2")]
        public static void BindTransformFeedback(BindTransformFeedbackTarget target, uint id) =>
            glBindTransformFeedback.Invoke(target, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteTransformFeedbacks(int n, uint[] ids);
        private static GLDeleteTransformFeedbacks glDeleteTransformFeedbacks;


        [GLExtension("GL_ARB_transform_feedback2")]
        public static void DeleteTransformFeedbacks(int n, uint[] ids) =>
            glDeleteTransformFeedbacks.Invoke(n, ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenTransformFeedbacks(int n, out uint ids);
        private static GLGenTransformFeedbacks glGenTransformFeedbacks;


        [GLExtension("GL_ARB_transform_feedback2")]
        public static void GenTransformFeedbacks(int n, out uint ids) =>
            glGenTransformFeedbacks.Invoke(n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsTransformFeedback(uint id);
        private static GLIsTransformFeedback glIsTransformFeedback;


        [GLExtension("GL_ARB_transform_feedback2")]
        public static bool IsTransformFeedback(uint id) =>
            glIsTransformFeedback.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPauseTransformFeedback();
        private static GLPauseTransformFeedback glPauseTransformFeedback;


        [GLExtension("GL_ARB_transform_feedback2")]
        public static void PauseTransformFeedback() =>
            glPauseTransformFeedback.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResumeTransformFeedback();
        private static GLResumeTransformFeedback glResumeTransformFeedback;


        [GLExtension("GL_ARB_transform_feedback2")]
        public static void ResumeTransformFeedback() =>
            glResumeTransformFeedback.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTransformFeedback(PrimitiveType mode, uint id);
        private static GLDrawTransformFeedback glDrawTransformFeedback;


        [GLExtension("GL_ARB_transform_feedback2")]
        public static void DrawTransformFeedback(PrimitiveType mode, uint id) =>
            glDrawTransformFeedback.Invoke(mode, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream);
        private static GLDrawTransformFeedbackStream glDrawTransformFeedbackStream;


        [GLExtension("GL_ARB_transform_feedback3")]
        public static void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream) =>
            glDrawTransformFeedbackStream.Invoke(mode, id, stream);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginQueryIndexed(QueryTarget target, uint index, uint id);
        private static GLBeginQueryIndexed glBeginQueryIndexed;


        [GLExtension("GL_ARB_transform_feedback3")]
        public static void BeginQueryIndexed(QueryTarget target, uint index, uint id) =>
            glBeginQueryIndexed.Invoke(target, index, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndQueryIndexed(QueryTarget target, uint index);
        private static GLEndQueryIndexed glEndQueryIndexed;


        [GLExtension("GL_ARB_transform_feedback3")]
        public static void EndQueryIndexed(QueryTarget target, uint index) =>
            glEndQueryIndexed.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryIndexediv(QueryTarget target, uint index, QueryParameterName pname, out int parameters);
        private static GLGetQueryIndexediv glGetQueryIndexediv;


        [GLExtension("GL_ARB_transform_feedback3")]
        public static void GetQueryIndexediv(QueryTarget target, uint index, QueryParameterName pname, out int parameters) =>
            glGetQueryIndexediv.Invoke(target, index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount);
        private static GLDrawTransformFeedbackInstanced glDrawTransformFeedbackInstanced;


        [GLExtension("GL_ARB_transform_feedback_instanced")]
        public static void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount) =>
            glDrawTransformFeedbackInstanced.Invoke(mode, id, instancecount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount);
        private static GLDrawTransformFeedbackStreamInstanced glDrawTransformFeedbackStreamInstanced;


        [GLExtension("GL_ARB_transform_feedback_instanced")]
        public static void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount) =>
            glDrawTransformFeedbackStreamInstanced.Invoke(mode, id, stream, instancecount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadTransposeMatrixfARB(float[] m);
        private static GLLoadTransposeMatrixfARB glLoadTransposeMatrixfARB;


        [GLExtension("GL_ARB_transpose_matrix")]
        public static void LoadTransposeMatrixfARB(float[] m) =>
            glLoadTransposeMatrixfARB.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadTransposeMatrixdARB(double[] m);
        private static GLLoadTransposeMatrixdARB glLoadTransposeMatrixdARB;


        [GLExtension("GL_ARB_transpose_matrix")]
        public static void LoadTransposeMatrixdARB(double[] m) =>
            glLoadTransposeMatrixdARB.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultTransposeMatrixfARB(float[] m);
        private static GLMultTransposeMatrixfARB glMultTransposeMatrixfARB;


        [GLExtension("GL_ARB_transpose_matrix")]
        public static void MultTransposeMatrixfARB(float[] m) =>
            glMultTransposeMatrixfARB.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultTransposeMatrixdARB(double[] m);
        private static GLMultTransposeMatrixdARB glMultTransposeMatrixdARB;


        [GLExtension("GL_ARB_transpose_matrix")]
        public static void MultTransposeMatrixdARB(double[] m) =>
            glMultTransposeMatrixdARB.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformIndices(uint program, int uniformCount, sbyte uniformNames, out uint uniformIndices);
        private static GLGetUniformIndices glGetUniformIndices;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void GetUniformIndices(uint program, int uniformCount, sbyte uniformNames, out uint uniformIndices) =>
            glGetUniformIndices.Invoke(program, uniformCount, uniformNames, out uniformIndices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, UniformPName pname, out int parameters);
        private static GLGetActiveUniformsiv glGetActiveUniformsiv;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void GetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, UniformPName pname, out int parameters) =>
            glGetActiveUniformsiv.Invoke(program, uniformCount, uniformIndices, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, out sbyte uniformName);
        private static GLGetActiveUniformName glGetActiveUniformName;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, out int length, out sbyte uniformName) =>
            glGetActiveUniformName.Invoke(program, uniformIndex, bufSize, out length, out uniformName);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetUniformBlockIndex(uint program, sbyte[] uniformBlockName);
        private static GLGetUniformBlockIndex glGetUniformBlockIndex;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static uint GetUniformBlockIndex(uint program, sbyte[] uniformBlockName) =>
            glGetUniformBlockIndex.Invoke(program, uniformBlockName);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, UniformBlockPName pname, out int parameters);
        private static GLGetActiveUniformBlockiv glGetActiveUniformBlockiv;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, UniformBlockPName pname, out int parameters) =>
            glGetActiveUniformBlockiv.Invoke(program, uniformBlockIndex, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, out sbyte uniformBlockName);
        private static GLGetActiveUniformBlockName glGetActiveUniformBlockName;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, out int length, out sbyte uniformBlockName) =>
            glGetActiveUniformBlockName.Invoke(program, uniformBlockIndex, bufSize, out length, out uniformBlockName);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding);
        private static GLUniformBlockBinding glUniformBlockBinding;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding) =>
            glUniformBlockBinding.Invoke(program, uniformBlockIndex, uniformBlockBinding);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferRange(BufferTargetARB target, uint index, uint buffer, nint offset, nint size);
        private static GLBindBufferRange glBindBufferRange;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void BindBufferRange(BufferTargetARB target, uint index, uint buffer, nint offset, nint size) =>
            glBindBufferRange.Invoke(target, index, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferBase(BufferTargetARB target, uint index, uint buffer);
        private static GLBindBufferBase glBindBufferBase;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void BindBufferBase(BufferTargetARB target, uint index, uint buffer) =>
            glBindBufferBase.Invoke(target, index, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetIntegeri_v(GetPName target, uint index, out int data);
        private static GLGetIntegeri_v glGetIntegeri_v;


        [GLExtension("GL_ARB_uniform_buffer_object")]
        public static void GetIntegeri_v(GetPName target, uint index, out int data) =>
            glGetIntegeri_v.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVertexArray(uint array);
        private static GLBindVertexArray glBindVertexArray;


        [GLExtension("GL_ARB_vertex_array_object")]
        public static void BindVertexArray(uint array) =>
            glBindVertexArray.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteVertexArrays(int n, uint[] arrays);
        private static GLDeleteVertexArrays glDeleteVertexArrays;


        [GLExtension("GL_ARB_vertex_array_object")]
        public static void DeleteVertexArrays(int n, uint[] arrays) =>
            glDeleteVertexArrays.Invoke(n, arrays);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenVertexArrays(int n, out uint arrays);
        private static GLGenVertexArrays glGenVertexArrays;


        [GLExtension("GL_ARB_vertex_array_object")]
        public static void GenVertexArrays(int n, out uint arrays) =>
            glGenVertexArrays.Invoke(n, out arrays);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsVertexArray(uint array);
        private static GLIsVertexArray glIsVertexArray;


        [GLExtension("GL_ARB_vertex_array_object")]
        public static bool IsVertexArray(uint array) =>
            glIsVertexArray.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1d(uint index, double x);
        private static GLVertexAttribL1d glVertexAttribL1d;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL1d(uint index, double x) =>
            glVertexAttribL1d.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2d(uint index, double x, double y);
        private static GLVertexAttribL2d glVertexAttribL2d;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL2d(uint index, double x, double y) =>
            glVertexAttribL2d.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3d(uint index, double x, double y, double z);
        private static GLVertexAttribL3d glVertexAttribL3d;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL3d(uint index, double x, double y, double z) =>
            glVertexAttribL3d.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4d(uint index, double x, double y, double z, double w);
        private static GLVertexAttribL4d glVertexAttribL4d;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL4d(uint index, double x, double y, double z, double w) =>
            glVertexAttribL4d.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1dv(uint index, double[] v);
        private static GLVertexAttribL1dv glVertexAttribL1dv;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL1dv(uint index, double[] v) =>
            glVertexAttribL1dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2dv(uint index, double[] v);
        private static GLVertexAttribL2dv glVertexAttribL2dv;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL2dv(uint index, double[] v) =>
            glVertexAttribL2dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3dv(uint index, double[] v);
        private static GLVertexAttribL3dv glVertexAttribL3dv;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL3dv(uint index, double[] v) =>
            glVertexAttribL3dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4dv(uint index, double[] v);
        private static GLVertexAttribL4dv glVertexAttribL4dv;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribL4dv(uint index, double[] v) =>
            glVertexAttribL4dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint pointer);
        private static GLVertexAttribLPointer glVertexAttribLPointer;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, nint pointer) =>
            glVertexAttribLPointer.Invoke(index, size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribLdv(uint index, VertexAttribEnum pname, out double parameters);
        private static GLGetVertexAttribLdv glGetVertexAttribLdv;


        [GLExtension("GL_ARB_vertex_attrib_64bit")]
        public static void GetVertexAttribLdv(uint index, VertexAttribEnum pname, out double parameters) =>
            glGetVertexAttribLdv.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride);
        private static GLBindVertexBuffer glBindVertexBuffer;


        [GLExtension("GL_ARB_vertex_attrib_binding")]
        public static void BindVertexBuffer(uint bindingindex, uint buffer, nint offset, int stride) =>
            glBindVertexBuffer.Invoke(bindingindex, buffer, offset, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset);
        private static GLVertexAttribFormat glVertexAttribFormat;


        [GLExtension("GL_ARB_vertex_attrib_binding")]
        public static void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset) =>
            glVertexAttribFormat.Invoke(attribindex, size, type, normalized, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribIFormat(uint attribindex, int size, VertexAttribIType type, uint relativeoffset);
        private static GLVertexAttribIFormat glVertexAttribIFormat;


        [GLExtension("GL_ARB_vertex_attrib_binding")]
        public static void VertexAttribIFormat(uint attribindex, int size, VertexAttribIType type, uint relativeoffset) =>
            glVertexAttribIFormat.Invoke(attribindex, size, type, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribLFormat(uint attribindex, int size, VertexAttribLType type, uint relativeoffset);
        private static GLVertexAttribLFormat glVertexAttribLFormat;


        [GLExtension("GL_ARB_vertex_attrib_binding")]
        public static void VertexAttribLFormat(uint attribindex, int size, VertexAttribLType type, uint relativeoffset) =>
            glVertexAttribLFormat.Invoke(attribindex, size, type, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribBinding(uint attribindex, uint bindingindex);
        private static GLVertexAttribBinding glVertexAttribBinding;


        [GLExtension("GL_ARB_vertex_attrib_binding")]
        public static void VertexAttribBinding(uint attribindex, uint bindingindex) =>
            glVertexAttribBinding.Invoke(attribindex, bindingindex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexBindingDivisor(uint bindingindex, uint divisor);
        private static GLVertexBindingDivisor glVertexBindingDivisor;


        [GLExtension("GL_ARB_vertex_attrib_binding")]
        public static void VertexBindingDivisor(uint bindingindex, uint divisor) =>
            glVertexBindingDivisor.Invoke(bindingindex, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightbvARB(int size, sbyte[] weights);
        private static GLWeightbvARB glWeightbvARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightbvARB(int size, sbyte[] weights) =>
            glWeightbvARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightsvARB(int size, short[] weights);
        private static GLWeightsvARB glWeightsvARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightsvARB(int size, short[] weights) =>
            glWeightsvARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightivARB(int size, int[] weights);
        private static GLWeightivARB glWeightivARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightivARB(int size, int[] weights) =>
            glWeightivARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightfvARB(int size, float[] weights);
        private static GLWeightfvARB glWeightfvARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightfvARB(int size, float[] weights) =>
            glWeightfvARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightdvARB(int size, double[] weights);
        private static GLWeightdvARB glWeightdvARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightdvARB(int size, double[] weights) =>
            glWeightdvARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightubvARB(int size, byte[] weights);
        private static GLWeightubvARB glWeightubvARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightubvARB(int size, byte[] weights) =>
            glWeightubvARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightusvARB(int size, ushort[] weights);
        private static GLWeightusvARB glWeightusvARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightusvARB(int size, ushort[] weights) =>
            glWeightusvARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightuivARB(int size, uint[] weights);
        private static GLWeightuivARB glWeightuivARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightuivARB(int size, uint[] weights) =>
            glWeightuivARB.Invoke(size, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightPointerARB(int size, WeightPointerTypeARB type, int stride, nint pointer);
        private static GLWeightPointerARB glWeightPointerARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void WeightPointerARB(int size, WeightPointerTypeARB type, int stride, nint pointer) =>
            glWeightPointerARB.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexBlendARB(int count);
        private static GLVertexBlendARB glVertexBlendARB;


        [GLExtension("GL_ARB_vertex_blend")]
        public static void VertexBlendARB(int count) =>
            glVertexBlendARB.Invoke(count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferARB(BufferTargetARB target, uint buffer);
        private static GLBindBufferARB glBindBufferARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void BindBufferARB(BufferTargetARB target, uint buffer) =>
            glBindBufferARB.Invoke(target, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteBuffersARB(int n, uint[] buffers);
        private static GLDeleteBuffersARB glDeleteBuffersARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void DeleteBuffersARB(int n, uint[] buffers) =>
            glDeleteBuffersARB.Invoke(n, buffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenBuffersARB(int n, out uint buffers);
        private static GLGenBuffersARB glGenBuffersARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void GenBuffersARB(int n, out uint buffers) =>
            glGenBuffersARB.Invoke(n, out buffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsBufferARB(uint buffer);
        private static GLIsBufferARB glIsBufferARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static bool IsBufferARB(uint buffer) =>
            glIsBufferARB.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferDataARB(BufferTargetARB target, nint size, nint data, BufferUsageARB usage);
        private static GLBufferDataARB glBufferDataARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void BufferDataARB(BufferTargetARB target, nint size, nint data, BufferUsageARB usage) =>
            glBufferDataARB.Invoke(target, size, data, usage);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferSubDataARB(BufferTargetARB target, nint offset, nint size, nint data);
        private static GLBufferSubDataARB glBufferSubDataARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void BufferSubDataARB(BufferTargetARB target, nint offset, nint size, nint data) =>
            glBufferSubDataARB.Invoke(target, offset, size, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferSubDataARB(BufferTargetARB target, nint offset, nint size, out nint data);
        private static GLGetBufferSubDataARB glGetBufferSubDataARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void GetBufferSubDataARB(BufferTargetARB target, nint offset, nint size, out nint data) =>
            glGetBufferSubDataARB.Invoke(target, offset, size, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapBufferARB(BufferTargetARB target, BufferAccessARB access);
        private static GLMapBufferARB glMapBufferARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static nint MapBufferARB(BufferTargetARB target, BufferAccessARB access) =>
            glMapBufferARB.Invoke(target, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLUnmapBufferARB(BufferTargetARB target);
        private static GLUnmapBufferARB glUnmapBufferARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static bool UnmapBufferARB(BufferTargetARB target) =>
            glUnmapBufferARB.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname, out int parameters);
        private static GLGetBufferParameterivARB glGetBufferParameterivARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void GetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname, out int parameters) =>
            glGetBufferParameterivARB.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferPointervARB(BufferTargetARB target, BufferPointerNameARB pname, out nint parameters);
        private static GLGetBufferPointervARB glGetBufferPointervARB;


        [GLExtension("GL_ARB_vertex_buffer_object")]
        public static void GetBufferPointervARB(BufferTargetARB target, BufferPointerNameARB pname, out nint parameters) =>
            glGetBufferPointervARB.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1dARB(uint index, double x);
        private static GLVertexAttrib1dARB glVertexAttrib1dARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib1dARB(uint index, double x) =>
            glVertexAttrib1dARB.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1dvARB(uint index, double[] v);
        private static GLVertexAttrib1dvARB glVertexAttrib1dvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib1dvARB(uint index, double[] v) =>
            glVertexAttrib1dvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1fARB(uint index, float x);
        private static GLVertexAttrib1fARB glVertexAttrib1fARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib1fARB(uint index, float x) =>
            glVertexAttrib1fARB.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1fvARB(uint index, float[] v);
        private static GLVertexAttrib1fvARB glVertexAttrib1fvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib1fvARB(uint index, float[] v) =>
            glVertexAttrib1fvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1sARB(uint index, short x);
        private static GLVertexAttrib1sARB glVertexAttrib1sARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib1sARB(uint index, short x) =>
            glVertexAttrib1sARB.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1svARB(uint index, short[] v);
        private static GLVertexAttrib1svARB glVertexAttrib1svARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib1svARB(uint index, short[] v) =>
            glVertexAttrib1svARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2dARB(uint index, double x, double y);
        private static GLVertexAttrib2dARB glVertexAttrib2dARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib2dARB(uint index, double x, double y) =>
            glVertexAttrib2dARB.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2dvARB(uint index, double[] v);
        private static GLVertexAttrib2dvARB glVertexAttrib2dvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib2dvARB(uint index, double[] v) =>
            glVertexAttrib2dvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2fARB(uint index, float x, float y);
        private static GLVertexAttrib2fARB glVertexAttrib2fARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib2fARB(uint index, float x, float y) =>
            glVertexAttrib2fARB.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2fvARB(uint index, float[] v);
        private static GLVertexAttrib2fvARB glVertexAttrib2fvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib2fvARB(uint index, float[] v) =>
            glVertexAttrib2fvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2sARB(uint index, short x, short y);
        private static GLVertexAttrib2sARB glVertexAttrib2sARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib2sARB(uint index, short x, short y) =>
            glVertexAttrib2sARB.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2svARB(uint index, short[] v);
        private static GLVertexAttrib2svARB glVertexAttrib2svARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib2svARB(uint index, short[] v) =>
            glVertexAttrib2svARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3dARB(uint index, double x, double y, double z);
        private static GLVertexAttrib3dARB glVertexAttrib3dARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib3dARB(uint index, double x, double y, double z) =>
            glVertexAttrib3dARB.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3dvARB(uint index, double[] v);
        private static GLVertexAttrib3dvARB glVertexAttrib3dvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib3dvARB(uint index, double[] v) =>
            glVertexAttrib3dvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3fARB(uint index, float x, float y, float z);
        private static GLVertexAttrib3fARB glVertexAttrib3fARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib3fARB(uint index, float x, float y, float z) =>
            glVertexAttrib3fARB.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3fvARB(uint index, float[] v);
        private static GLVertexAttrib3fvARB glVertexAttrib3fvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib3fvARB(uint index, float[] v) =>
            glVertexAttrib3fvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3sARB(uint index, short x, short y, short z);
        private static GLVertexAttrib3sARB glVertexAttrib3sARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib3sARB(uint index, short x, short y, short z) =>
            glVertexAttrib3sARB.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3svARB(uint index, short[] v);
        private static GLVertexAttrib3svARB glVertexAttrib3svARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib3svARB(uint index, short[] v) =>
            glVertexAttrib3svARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4NbvARB(uint index, sbyte[] v);
        private static GLVertexAttrib4NbvARB glVertexAttrib4NbvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4NbvARB(uint index, sbyte[] v) =>
            glVertexAttrib4NbvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4NivARB(uint index, int[] v);
        private static GLVertexAttrib4NivARB glVertexAttrib4NivARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4NivARB(uint index, int[] v) =>
            glVertexAttrib4NivARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4NsvARB(uint index, short[] v);
        private static GLVertexAttrib4NsvARB glVertexAttrib4NsvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4NsvARB(uint index, short[] v) =>
            glVertexAttrib4NsvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w);
        private static GLVertexAttrib4NubARB glVertexAttrib4NubARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w) =>
            glVertexAttrib4NubARB.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4NubvARB(uint index, byte[] v);
        private static GLVertexAttrib4NubvARB glVertexAttrib4NubvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4NubvARB(uint index, byte[] v) =>
            glVertexAttrib4NubvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4NuivARB(uint index, uint[] v);
        private static GLVertexAttrib4NuivARB glVertexAttrib4NuivARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4NuivARB(uint index, uint[] v) =>
            glVertexAttrib4NuivARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4NusvARB(uint index, ushort[] v);
        private static GLVertexAttrib4NusvARB glVertexAttrib4NusvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4NusvARB(uint index, ushort[] v) =>
            glVertexAttrib4NusvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4bvARB(uint index, sbyte[] v);
        private static GLVertexAttrib4bvARB glVertexAttrib4bvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4bvARB(uint index, sbyte[] v) =>
            glVertexAttrib4bvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4dARB(uint index, double x, double y, double z, double w);
        private static GLVertexAttrib4dARB glVertexAttrib4dARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4dARB(uint index, double x, double y, double z, double w) =>
            glVertexAttrib4dARB.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4dvARB(uint index, double[] v);
        private static GLVertexAttrib4dvARB glVertexAttrib4dvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4dvARB(uint index, double[] v) =>
            glVertexAttrib4dvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4fARB(uint index, float x, float y, float z, float w);
        private static GLVertexAttrib4fARB glVertexAttrib4fARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4fARB(uint index, float x, float y, float z, float w) =>
            glVertexAttrib4fARB.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4fvARB(uint index, float[] v);
        private static GLVertexAttrib4fvARB glVertexAttrib4fvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4fvARB(uint index, float[] v) =>
            glVertexAttrib4fvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4ivARB(uint index, int[] v);
        private static GLVertexAttrib4ivARB glVertexAttrib4ivARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4ivARB(uint index, int[] v) =>
            glVertexAttrib4ivARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4sARB(uint index, short x, short y, short z, short w);
        private static GLVertexAttrib4sARB glVertexAttrib4sARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4sARB(uint index, short x, short y, short z, short w) =>
            glVertexAttrib4sARB.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4svARB(uint index, short[] v);
        private static GLVertexAttrib4svARB glVertexAttrib4svARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4svARB(uint index, short[] v) =>
            glVertexAttrib4svARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4ubvARB(uint index, byte[] v);
        private static GLVertexAttrib4ubvARB glVertexAttrib4ubvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4ubvARB(uint index, byte[] v) =>
            glVertexAttrib4ubvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4uivARB(uint index, uint[] v);
        private static GLVertexAttrib4uivARB glVertexAttrib4uivARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4uivARB(uint index, uint[] v) =>
            glVertexAttrib4uivARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4usvARB(uint index, ushort[] v);
        private static GLVertexAttrib4usvARB glVertexAttrib4usvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttrib4usvARB(uint index, ushort[] v) =>
            glVertexAttrib4usvARB.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribPointerARB(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint pointer);
        private static GLVertexAttribPointerARB glVertexAttribPointerARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void VertexAttribPointerARB(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint pointer) =>
            glVertexAttribPointerARB.Invoke(index, size, type, normalized, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableVertexAttribArrayARB(uint index);
        private static GLEnableVertexAttribArrayARB glEnableVertexAttribArrayARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void EnableVertexAttribArrayARB(uint index) =>
            glEnableVertexAttribArrayARB.Invoke(index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableVertexAttribArrayARB(uint index);
        private static GLDisableVertexAttribArrayARB glDisableVertexAttribArrayARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void DisableVertexAttribArrayARB(uint index) =>
            glDisableVertexAttribArrayARB.Invoke(index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, out double parameters);
        private static GLGetVertexAttribdvARB glGetVertexAttribdvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void GetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, out double parameters) =>
            glGetVertexAttribdvARB.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, out float parameters);
        private static GLGetVertexAttribfvARB glGetVertexAttribfvARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void GetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, out float parameters) =>
            glGetVertexAttribfvARB.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, out int parameters);
        private static GLGetVertexAttribivARB glGetVertexAttribivARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void GetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, out int parameters) =>
            glGetVertexAttribivARB.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribPointervARB(uint index, VertexAttribPointerPropertyARB pname, out nint pointer);
        private static GLGetVertexAttribPointervARB glGetVertexAttribPointervARB;


        [GLExtension("GL_ARB_vertex_program")]
        public static void GetVertexAttribPointervARB(uint index, VertexAttribPointerPropertyARB pname, out nint pointer) =>
            glGetVertexAttribPointervARB.Invoke(index, pname, out pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindAttribLocationARB(ushort programObj, uint index, sbyte[] name);
        private static GLBindAttribLocationARB glBindAttribLocationARB;


        [GLExtension("GL_ARB_vertex_shader")]
        public static void BindAttribLocationARB(ushort programObj, uint index, sbyte[] name) =>
            glBindAttribLocationARB.Invoke(programObj, index, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveAttribARB(ushort programObj, uint index, int maxLength, out int length, out int size, out AttributeType type, out sbyte name);
        private static GLGetActiveAttribARB glGetActiveAttribARB;


        [GLExtension("GL_ARB_vertex_shader")]
        public static void GetActiveAttribARB(ushort programObj, uint index, int maxLength, out int length, out int size, out AttributeType type, out sbyte name) =>
            glGetActiveAttribARB.Invoke(programObj, index, maxLength, out length, out size, out type, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetAttribLocationARB(ushort programObj, sbyte[] name);
        private static GLGetAttribLocationARB glGetAttribLocationARB;


        [GLExtension("GL_ARB_vertex_shader")]
        public static int GetAttribLocationARB(ushort programObj, sbyte[] name) =>
            glGetAttribLocationARB.Invoke(programObj, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        private static GLVertexAttribP1ui glVertexAttribP1ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP1ui(uint index, VertexAttribPointerType type, bool normalized, uint value) =>
            glVertexAttribP1ui.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP1uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value);
        private static GLVertexAttribP1uiv glVertexAttribP1uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP1uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value) =>
            glVertexAttribP1uiv.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        private static GLVertexAttribP2ui glVertexAttribP2ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP2ui(uint index, VertexAttribPointerType type, bool normalized, uint value) =>
            glVertexAttribP2ui.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP2uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value);
        private static GLVertexAttribP2uiv glVertexAttribP2uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP2uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value) =>
            glVertexAttribP2uiv.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        private static GLVertexAttribP3ui glVertexAttribP3ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP3ui(uint index, VertexAttribPointerType type, bool normalized, uint value) =>
            glVertexAttribP3ui.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP3uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value);
        private static GLVertexAttribP3uiv glVertexAttribP3uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP3uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value) =>
            glVertexAttribP3uiv.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, uint value);
        private static GLVertexAttribP4ui glVertexAttribP4ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP4ui(uint index, VertexAttribPointerType type, bool normalized, uint value) =>
            glVertexAttribP4ui.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribP4uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value);
        private static GLVertexAttribP4uiv glVertexAttribP4uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexAttribP4uiv(uint index, VertexAttribPointerType type, bool normalized, uint[] value) =>
            glVertexAttribP4uiv.Invoke(index, type, normalized, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexP2ui(VertexPointerType type, uint value);
        private static GLVertexP2ui glVertexP2ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexP2ui(VertexPointerType type, uint value) =>
            glVertexP2ui.Invoke(type, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexP2uiv(VertexPointerType type, uint[] value);
        private static GLVertexP2uiv glVertexP2uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexP2uiv(VertexPointerType type, uint[] value) =>
            glVertexP2uiv.Invoke(type, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexP3ui(VertexPointerType type, uint value);
        private static GLVertexP3ui glVertexP3ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexP3ui(VertexPointerType type, uint value) =>
            glVertexP3ui.Invoke(type, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexP3uiv(VertexPointerType type, uint[] value);
        private static GLVertexP3uiv glVertexP3uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexP3uiv(VertexPointerType type, uint[] value) =>
            glVertexP3uiv.Invoke(type, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexP4ui(VertexPointerType type, uint value);
        private static GLVertexP4ui glVertexP4ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexP4ui(VertexPointerType type, uint value) =>
            glVertexP4ui.Invoke(type, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexP4uiv(VertexPointerType type, uint[] value);
        private static GLVertexP4uiv glVertexP4uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void VertexP4uiv(VertexPointerType type, uint[] value) =>
            glVertexP4uiv.Invoke(type, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP1ui(TexCoordPointerType type, uint coords);
        private static GLTexCoordP1ui glTexCoordP1ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP1ui(TexCoordPointerType type, uint coords) =>
            glTexCoordP1ui.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP1uiv(TexCoordPointerType type, uint[] coords);
        private static GLTexCoordP1uiv glTexCoordP1uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP1uiv(TexCoordPointerType type, uint[] coords) =>
            glTexCoordP1uiv.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP2ui(TexCoordPointerType type, uint coords);
        private static GLTexCoordP2ui glTexCoordP2ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP2ui(TexCoordPointerType type, uint coords) =>
            glTexCoordP2ui.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP2uiv(TexCoordPointerType type, uint[] coords);
        private static GLTexCoordP2uiv glTexCoordP2uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP2uiv(TexCoordPointerType type, uint[] coords) =>
            glTexCoordP2uiv.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP3ui(TexCoordPointerType type, uint coords);
        private static GLTexCoordP3ui glTexCoordP3ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP3ui(TexCoordPointerType type, uint coords) =>
            glTexCoordP3ui.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP3uiv(TexCoordPointerType type, uint[] coords);
        private static GLTexCoordP3uiv glTexCoordP3uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP3uiv(TexCoordPointerType type, uint[] coords) =>
            glTexCoordP3uiv.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP4ui(TexCoordPointerType type, uint coords);
        private static GLTexCoordP4ui glTexCoordP4ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP4ui(TexCoordPointerType type, uint coords) =>
            glTexCoordP4ui.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordP4uiv(TexCoordPointerType type, uint[] coords);
        private static GLTexCoordP4uiv glTexCoordP4uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void TexCoordP4uiv(TexCoordPointerType type, uint[] coords) =>
            glTexCoordP4uiv.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        private static GLMultiTexCoordP1ui glMultiTexCoordP1ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint coords) =>
            glMultiTexCoordP1ui.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP1uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords);
        private static GLMultiTexCoordP1uiv glMultiTexCoordP1uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP1uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords) =>
            glMultiTexCoordP1uiv.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        private static GLMultiTexCoordP2ui glMultiTexCoordP2ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint coords) =>
            glMultiTexCoordP2ui.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP2uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords);
        private static GLMultiTexCoordP2uiv glMultiTexCoordP2uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP2uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords) =>
            glMultiTexCoordP2uiv.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        private static GLMultiTexCoordP3ui glMultiTexCoordP3ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint coords) =>
            glMultiTexCoordP3ui.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP3uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords);
        private static GLMultiTexCoordP3uiv glMultiTexCoordP3uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP3uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords) =>
            glMultiTexCoordP3uiv.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint coords);
        private static GLMultiTexCoordP4ui glMultiTexCoordP4ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint coords) =>
            glMultiTexCoordP4ui.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordP4uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords);
        private static GLMultiTexCoordP4uiv glMultiTexCoordP4uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void MultiTexCoordP4uiv(TextureUnit texture, TexCoordPointerType type, uint[] coords) =>
            glMultiTexCoordP4uiv.Invoke(texture, type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalP3ui(NormalPointerType type, uint coords);
        private static GLNormalP3ui glNormalP3ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void NormalP3ui(NormalPointerType type, uint coords) =>
            glNormalP3ui.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalP3uiv(NormalPointerType type, uint[] coords);
        private static GLNormalP3uiv glNormalP3uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void NormalP3uiv(NormalPointerType type, uint[] coords) =>
            glNormalP3uiv.Invoke(type, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorP3ui(ColorPointerType type, uint color);
        private static GLColorP3ui glColorP3ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void ColorP3ui(ColorPointerType type, uint color) =>
            glColorP3ui.Invoke(type, color);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorP3uiv(ColorPointerType type, uint[] color);
        private static GLColorP3uiv glColorP3uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void ColorP3uiv(ColorPointerType type, uint[] color) =>
            glColorP3uiv.Invoke(type, color);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorP4ui(ColorPointerType type, uint color);
        private static GLColorP4ui glColorP4ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void ColorP4ui(ColorPointerType type, uint color) =>
            glColorP4ui.Invoke(type, color);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorP4uiv(ColorPointerType type, uint[] color);
        private static GLColorP4uiv glColorP4uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void ColorP4uiv(ColorPointerType type, uint[] color) =>
            glColorP4uiv.Invoke(type, color);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColorP3ui(ColorPointerType type, uint color);
        private static GLSecondaryColorP3ui glSecondaryColorP3ui;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void SecondaryColorP3ui(ColorPointerType type, uint color) =>
            glSecondaryColorP3ui.Invoke(type, color);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColorP3uiv(ColorPointerType type, uint[] color);
        private static GLSecondaryColorP3uiv glSecondaryColorP3uiv;


        [GLExtension("GL_ARB_vertex_type_2_10_10_10_rev")]
        public static void SecondaryColorP3uiv(ColorPointerType type, uint[] color) =>
            glSecondaryColorP3uiv.Invoke(type, color);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportArrayv(uint first, int count, float[] v);
        private static GLViewportArrayv glViewportArrayv;


        [GLExtension("GL_ARB_viewport_array")]
        public static void ViewportArrayv(uint first, int count, float[] v) =>
            glViewportArrayv.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportIndexedf(uint index, float x, float y, float w, float h);
        private static GLViewportIndexedf glViewportIndexedf;


        [GLExtension("GL_ARB_viewport_array")]
        public static void ViewportIndexedf(uint index, float x, float y, float w, float h) =>
            glViewportIndexedf.Invoke(index, x, y, w, h);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportIndexedfv(uint index, float[] v);
        private static GLViewportIndexedfv glViewportIndexedfv;


        [GLExtension("GL_ARB_viewport_array")]
        public static void ViewportIndexedfv(uint index, float[] v) =>
            glViewportIndexedfv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorArrayv(uint first, int count, int[] v);
        private static GLScissorArrayv glScissorArrayv;


        [GLExtension("GL_ARB_viewport_array")]
        public static void ScissorArrayv(uint first, int count, int[] v) =>
            glScissorArrayv.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorIndexed(uint index, int left, int bottom, int width, int height);
        private static GLScissorIndexed glScissorIndexed;


        [GLExtension("GL_ARB_viewport_array")]
        public static void ScissorIndexed(uint index, int left, int bottom, int width, int height) =>
            glScissorIndexed.Invoke(index, left, bottom, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorIndexedv(uint index, int[] v);
        private static GLScissorIndexedv glScissorIndexedv;


        [GLExtension("GL_ARB_viewport_array")]
        public static void ScissorIndexedv(uint index, int[] v) =>
            glScissorIndexedv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeArrayv(uint first, int count, double[] v);
        private static GLDepthRangeArrayv glDepthRangeArrayv;


        [GLExtension("GL_ARB_viewport_array")]
        public static void DepthRangeArrayv(uint first, int count, double[] v) =>
            glDepthRangeArrayv.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeIndexed(uint index, double n, double f);
        private static GLDepthRangeIndexed glDepthRangeIndexed;


        [GLExtension("GL_ARB_viewport_array")]
        public static void DepthRangeIndexed(uint index, double n, double f) =>
            glDepthRangeIndexed.Invoke(index, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFloati_v(GetPName target, uint index, out float data);
        private static GLGetFloati_v glGetFloati_v;


        [GLExtension("GL_ARB_viewport_array")]
        public static void GetFloati_v(GetPName target, uint index, out float data) =>
            glGetFloati_v.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetDoublei_v(GetPName target, uint index, out double data);
        private static GLGetDoublei_v glGetDoublei_v;


        [GLExtension("GL_ARB_viewport_array")]
        public static void GetDoublei_v(GetPName target, uint index, out double data) =>
            glGetDoublei_v.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeArraydvNV(uint first, int count, double[] v);
        private static GLDepthRangeArraydvNV glDepthRangeArraydvNV;


        [GLExtension("GL_ARB_viewport_array")]
        public static void DepthRangeArraydvNV(uint first, int count, double[] v) =>
            glDepthRangeArraydvNV.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeIndexeddNV(uint index, double n, double f);
        private static GLDepthRangeIndexeddNV glDepthRangeIndexeddNV;


        [GLExtension("GL_ARB_viewport_array")]
        public static void DepthRangeIndexeddNV(uint index, double n, double f) =>
            glDepthRangeIndexeddNV.Invoke(index, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2dARB(double x, double y);
        private static GLWindowPos2dARB glWindowPos2dARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2dARB(double x, double y) =>
            glWindowPos2dARB.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2dvARB(double[] v);
        private static GLWindowPos2dvARB glWindowPos2dvARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2dvARB(double[] v) =>
            glWindowPos2dvARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2fARB(float x, float y);
        private static GLWindowPos2fARB glWindowPos2fARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2fARB(float x, float y) =>
            glWindowPos2fARB.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2fvARB(float[] v);
        private static GLWindowPos2fvARB glWindowPos2fvARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2fvARB(float[] v) =>
            glWindowPos2fvARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2iARB(int x, int y);
        private static GLWindowPos2iARB glWindowPos2iARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2iARB(int x, int y) =>
            glWindowPos2iARB.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2ivARB(int[] v);
        private static GLWindowPos2ivARB glWindowPos2ivARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2ivARB(int[] v) =>
            glWindowPos2ivARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2sARB(short x, short y);
        private static GLWindowPos2sARB glWindowPos2sARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2sARB(short x, short y) =>
            glWindowPos2sARB.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2svARB(short[] v);
        private static GLWindowPos2svARB glWindowPos2svARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos2svARB(short[] v) =>
            glWindowPos2svARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3dARB(double x, double y, double z);
        private static GLWindowPos3dARB glWindowPos3dARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3dARB(double x, double y, double z) =>
            glWindowPos3dARB.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3dvARB(double[] v);
        private static GLWindowPos3dvARB glWindowPos3dvARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3dvARB(double[] v) =>
            glWindowPos3dvARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3fARB(float x, float y, float z);
        private static GLWindowPos3fARB glWindowPos3fARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3fARB(float x, float y, float z) =>
            glWindowPos3fARB.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3fvARB(float[] v);
        private static GLWindowPos3fvARB glWindowPos3fvARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3fvARB(float[] v) =>
            glWindowPos3fvARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3iARB(int x, int y, int z);
        private static GLWindowPos3iARB glWindowPos3iARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3iARB(int x, int y, int z) =>
            glWindowPos3iARB.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3ivARB(int[] v);
        private static GLWindowPos3ivARB glWindowPos3ivARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3ivARB(int[] v) =>
            glWindowPos3ivARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3sARB(short x, short y, short z);
        private static GLWindowPos3sARB glWindowPos3sARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3sARB(short x, short y, short z) =>
            glWindowPos3sARB.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3svARB(short[] v);
        private static GLWindowPos3svARB glWindowPos3svARB;


        [GLExtension("GL_ARB_window_pos")]
        public static void WindowPos3svARB(short[] v) =>
            glWindowPos3svARB.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawBuffersATI(int n, DrawBufferMode[] bufs);
        private static GLDrawBuffersATI glDrawBuffersATI;


        [GLExtension("GL_ATI_draw_buffers")]
        public static void DrawBuffersATI(int n, DrawBufferMode[] bufs) =>
            glDrawBuffersATI.Invoke(n, bufs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLElementPointerATI(ElementPointerTypeATI type, nint pointer);
        private static GLElementPointerATI glElementPointerATI;


        [GLExtension("GL_ATI_element_array")]
        public static void ElementPointerATI(ElementPointerTypeATI type, nint pointer) =>
            glElementPointerATI.Invoke(type, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementArrayATI(PrimitiveType mode, int count);
        private static GLDrawElementArrayATI glDrawElementArrayATI;


        [GLExtension("GL_ATI_element_array")]
        public static void DrawElementArrayATI(PrimitiveType mode, int count) =>
            glDrawElementArrayATI.Invoke(mode, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawRangeElementArrayATI(PrimitiveType mode, uint start, uint end, int count);
        private static GLDrawRangeElementArrayATI glDrawRangeElementArrayATI;


        [GLExtension("GL_ATI_element_array")]
        public static void DrawRangeElementArrayATI(PrimitiveType mode, uint start, uint end, int count) =>
            glDrawRangeElementArrayATI.Invoke(mode, start, end, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBumpParameterivATI(TexBumpParameterATI pname, int[] param);
        private static GLTexBumpParameterivATI glTexBumpParameterivATI;


        [GLExtension("GL_ATI_envmap_bumpmap")]
        public static void TexBumpParameterivATI(TexBumpParameterATI pname, int[] param) =>
            glTexBumpParameterivATI.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBumpParameterfvATI(TexBumpParameterATI pname, float[] param);
        private static GLTexBumpParameterfvATI glTexBumpParameterfvATI;


        [GLExtension("GL_ATI_envmap_bumpmap")]
        public static void TexBumpParameterfvATI(TexBumpParameterATI pname, float[] param) =>
            glTexBumpParameterfvATI.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexBumpParameterivATI(GetTexBumpParameterATI pname, out int param);
        private static GLGetTexBumpParameterivATI glGetTexBumpParameterivATI;


        [GLExtension("GL_ATI_envmap_bumpmap")]
        public static void GetTexBumpParameterivATI(GetTexBumpParameterATI pname, out int param) =>
            glGetTexBumpParameterivATI.Invoke(pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexBumpParameterfvATI(GetTexBumpParameterATI pname, out float param);
        private static GLGetTexBumpParameterfvATI glGetTexBumpParameterfvATI;


        [GLExtension("GL_ATI_envmap_bumpmap")]
        public static void GetTexBumpParameterfvATI(GetTexBumpParameterATI pname, out float param) =>
            glGetTexBumpParameterfvATI.Invoke(pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGenFragmentShadersATI(uint range);
        private static GLGenFragmentShadersATI glGenFragmentShadersATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static uint GenFragmentShadersATI(uint range) =>
            glGenFragmentShadersATI.Invoke(range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFragmentShaderATI(uint id);
        private static GLBindFragmentShaderATI glBindFragmentShaderATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void BindFragmentShaderATI(uint id) =>
            glBindFragmentShaderATI.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteFragmentShaderATI(uint id);
        private static GLDeleteFragmentShaderATI glDeleteFragmentShaderATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void DeleteFragmentShaderATI(uint id) =>
            glDeleteFragmentShaderATI.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginFragmentShaderATI();
        private static GLBeginFragmentShaderATI glBeginFragmentShaderATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void BeginFragmentShaderATI() =>
            glBeginFragmentShaderATI.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndFragmentShaderATI();
        private static GLEndFragmentShaderATI glEndFragmentShaderATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void EndFragmentShaderATI() =>
            glEndFragmentShaderATI.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPassTexCoordATI(uint dst, uint coord, SwizzleOpATI swizzle);
        private static GLPassTexCoordATI glPassTexCoordATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void PassTexCoordATI(uint dst, uint coord, SwizzleOpATI swizzle) =>
            glPassTexCoordATI.Invoke(dst, coord, swizzle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleMapATI(uint dst, uint interp, SwizzleOpATI swizzle);
        private static GLSampleMapATI glSampleMapATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void SampleMapATI(uint dst, uint interp, SwizzleOpATI swizzle) =>
            glSampleMapATI.Invoke(dst, interp, swizzle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorFragmentOp1ATI(FragmentOp1ATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);
        private static GLColorFragmentOp1ATI glColorFragmentOp1ATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void ColorFragmentOp1ATI(FragmentOp1ATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod) =>
            glColorFragmentOp1ATI.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorFragmentOp2ATI(FragmentOp2ATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);
        private static GLColorFragmentOp2ATI glColorFragmentOp2ATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void ColorFragmentOp2ATI(FragmentOp2ATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod) =>
            glColorFragmentOp2ATI.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorFragmentOp3ATI(FragmentOp3ATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);
        private static GLColorFragmentOp3ATI glColorFragmentOp3ATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void ColorFragmentOp3ATI(FragmentOp3ATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod) =>
            glColorFragmentOp3ATI.Invoke(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaFragmentOp1ATI(FragmentOp1ATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod);
        private static GLAlphaFragmentOp1ATI glAlphaFragmentOp1ATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void AlphaFragmentOp1ATI(FragmentOp1ATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod) =>
            glAlphaFragmentOp1ATI.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaFragmentOp2ATI(FragmentOp2ATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod);
        private static GLAlphaFragmentOp2ATI glAlphaFragmentOp2ATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void AlphaFragmentOp2ATI(FragmentOp2ATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod) =>
            glAlphaFragmentOp2ATI.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaFragmentOp3ATI(FragmentOp3ATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod);
        private static GLAlphaFragmentOp3ATI glAlphaFragmentOp3ATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void AlphaFragmentOp3ATI(FragmentOp3ATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod) =>
            glAlphaFragmentOp3ATI.Invoke(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSetFragmentShaderConstantATI(uint dst, float[] value);
        private static GLSetFragmentShaderConstantATI glSetFragmentShaderConstantATI;


        [GLExtension("GL_ATI_fragment_shader")]
        public static void SetFragmentShaderConstantATI(uint dst, float[] value) =>
            glSetFragmentShaderConstantATI.Invoke(dst, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapObjectBufferATI(uint buffer);
        private static GLMapObjectBufferATI glMapObjectBufferATI;


        [GLExtension("GL_ATI_map_object_buffer")]
        public static nint MapObjectBufferATI(uint buffer) =>
            glMapObjectBufferATI.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUnmapObjectBufferATI(uint buffer);
        private static GLUnmapObjectBufferATI glUnmapObjectBufferATI;


        [GLExtension("GL_ATI_map_object_buffer")]
        public static void UnmapObjectBufferATI(uint buffer) =>
            glUnmapObjectBufferATI.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPNTrianglesiATI(PNTrianglesPNameATI pname, int param);
        private static GLPNTrianglesiATI glPNTrianglesiATI;


        [GLExtension("GL_ATI_pn_triangles")]
        public static void PNTrianglesiATI(PNTrianglesPNameATI pname, int param) =>
            glPNTrianglesiATI.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPNTrianglesfATI(PNTrianglesPNameATI pname, float param);
        private static GLPNTrianglesfATI glPNTrianglesfATI;


        [GLExtension("GL_ATI_pn_triangles")]
        public static void PNTrianglesfATI(PNTrianglesPNameATI pname, float param) =>
            glPNTrianglesfATI.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilOpSeparateATI(TriangleFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        private static GLStencilOpSeparateATI glStencilOpSeparateATI;


        [GLExtension("GL_ATI_separate_stencil")]
        public static void StencilOpSeparateATI(TriangleFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass) =>
            glStencilOpSeparateATI.Invoke(face, sfail, dpfail, dppass);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, int reference, uint mask);
        private static GLStencilFuncSeparateATI glStencilFuncSeparateATI;


        [GLExtension("GL_ATI_separate_stencil")]
        public static void StencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, int reference, uint mask) =>
            glStencilFuncSeparateATI.Invoke(frontfunc, backfunc, reference, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLNewObjectBufferATI(int size, nint pointer, ArrayObjectUsageATI usage);
        private static GLNewObjectBufferATI glNewObjectBufferATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static uint NewObjectBufferATI(int size, nint pointer, ArrayObjectUsageATI usage) =>
            glNewObjectBufferATI.Invoke(size, pointer, usage);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsObjectBufferATI(uint buffer);
        private static GLIsObjectBufferATI glIsObjectBufferATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static bool IsObjectBufferATI(uint buffer) =>
            glIsObjectBufferATI.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUpdateObjectBufferATI(uint buffer, uint offset, int size, nint pointer, PreserveModeATI preserve);
        private static GLUpdateObjectBufferATI glUpdateObjectBufferATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void UpdateObjectBufferATI(uint buffer, uint offset, int size, nint pointer, PreserveModeATI preserve) =>
            glUpdateObjectBufferATI.Invoke(buffer, offset, size, pointer, preserve);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectBufferfvATI(uint buffer, ArrayObjectPNameATI pname, out float parameters);
        private static GLGetObjectBufferfvATI glGetObjectBufferfvATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void GetObjectBufferfvATI(uint buffer, ArrayObjectPNameATI pname, out float parameters) =>
            glGetObjectBufferfvATI.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectBufferivATI(uint buffer, ArrayObjectPNameATI pname, out int parameters);
        private static GLGetObjectBufferivATI glGetObjectBufferivATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void GetObjectBufferivATI(uint buffer, ArrayObjectPNameATI pname, out int parameters) =>
            glGetObjectBufferivATI.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFreeObjectBufferATI(uint buffer);
        private static GLFreeObjectBufferATI glFreeObjectBufferATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void FreeObjectBufferATI(uint buffer) =>
            glFreeObjectBufferATI.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLArrayObjectATI(EnableCap array, int size, ScalarType type, int stride, uint buffer, uint offset);
        private static GLArrayObjectATI glArrayObjectATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void ArrayObjectATI(EnableCap array, int size, ScalarType type, int stride, uint buffer, uint offset) =>
            glArrayObjectATI.Invoke(array, size, type, stride, buffer, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, out float parameters);
        private static GLGetArrayObjectfvATI glGetArrayObjectfvATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void GetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, out float parameters) =>
            glGetArrayObjectfvATI.Invoke(array, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, out int parameters);
        private static GLGetArrayObjectivATI glGetArrayObjectivATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void GetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, out int parameters) =>
            glGetArrayObjectivATI.Invoke(array, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantArrayObjectATI(uint id, ScalarType type, int stride, uint buffer, uint offset);
        private static GLVariantArrayObjectATI glVariantArrayObjectATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void VariantArrayObjectATI(uint id, ScalarType type, int stride, uint buffer, uint offset) =>
            glVariantArrayObjectATI.Invoke(id, type, stride, buffer, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname, out float parameters);
        private static GLGetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void GetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname, out float parameters) =>
            glGetVariantArrayObjectfvATI.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname, out int parameters);
        private static GLGetVariantArrayObjectivATI glGetVariantArrayObjectivATI;


        [GLExtension("GL_ATI_vertex_array_object")]
        public static void GetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname, out int parameters) =>
            glGetVariantArrayObjectivATI.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribArrayObjectATI(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, uint buffer, uint offset);
        private static GLVertexAttribArrayObjectATI glVertexAttribArrayObjectATI;


        [GLExtension("GL_ATI_vertex_attrib_array_object")]
        public static void VertexAttribArrayObjectATI(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, uint buffer, uint offset) =>
            glVertexAttribArrayObjectATI.Invoke(index, size, type, normalized, stride, buffer, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, out float parameters);
        private static GLGetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI;


        [GLExtension("GL_ATI_vertex_attrib_array_object")]
        public static void GetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, out float parameters) =>
            glGetVertexAttribArrayObjectfvATI.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, out int parameters);
        private static GLGetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI;


        [GLExtension("GL_ATI_vertex_attrib_array_object")]
        public static void GetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, out int parameters) =>
            glGetVertexAttribArrayObjectivATI.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1sATI(VertexStreamATI stream, short x);
        private static GLVertexStream1sATI glVertexStream1sATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1sATI(VertexStreamATI stream, short x) =>
            glVertexStream1sATI.Invoke(stream, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1svATI(VertexStreamATI stream, short[] coords);
        private static GLVertexStream1svATI glVertexStream1svATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1svATI(VertexStreamATI stream, short[] coords) =>
            glVertexStream1svATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1iATI(VertexStreamATI stream, int x);
        private static GLVertexStream1iATI glVertexStream1iATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1iATI(VertexStreamATI stream, int x) =>
            glVertexStream1iATI.Invoke(stream, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1ivATI(VertexStreamATI stream, int[] coords);
        private static GLVertexStream1ivATI glVertexStream1ivATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1ivATI(VertexStreamATI stream, int[] coords) =>
            glVertexStream1ivATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1fATI(VertexStreamATI stream, float x);
        private static GLVertexStream1fATI glVertexStream1fATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1fATI(VertexStreamATI stream, float x) =>
            glVertexStream1fATI.Invoke(stream, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1fvATI(VertexStreamATI stream, float[] coords);
        private static GLVertexStream1fvATI glVertexStream1fvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1fvATI(VertexStreamATI stream, float[] coords) =>
            glVertexStream1fvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1dATI(VertexStreamATI stream, double x);
        private static GLVertexStream1dATI glVertexStream1dATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1dATI(VertexStreamATI stream, double x) =>
            glVertexStream1dATI.Invoke(stream, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream1dvATI(VertexStreamATI stream, double[] coords);
        private static GLVertexStream1dvATI glVertexStream1dvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream1dvATI(VertexStreamATI stream, double[] coords) =>
            glVertexStream1dvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2sATI(VertexStreamATI stream, short x, short y);
        private static GLVertexStream2sATI glVertexStream2sATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2sATI(VertexStreamATI stream, short x, short y) =>
            glVertexStream2sATI.Invoke(stream, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2svATI(VertexStreamATI stream, short[] coords);
        private static GLVertexStream2svATI glVertexStream2svATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2svATI(VertexStreamATI stream, short[] coords) =>
            glVertexStream2svATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2iATI(VertexStreamATI stream, int x, int y);
        private static GLVertexStream2iATI glVertexStream2iATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2iATI(VertexStreamATI stream, int x, int y) =>
            glVertexStream2iATI.Invoke(stream, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2ivATI(VertexStreamATI stream, int[] coords);
        private static GLVertexStream2ivATI glVertexStream2ivATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2ivATI(VertexStreamATI stream, int[] coords) =>
            glVertexStream2ivATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2fATI(VertexStreamATI stream, float x, float y);
        private static GLVertexStream2fATI glVertexStream2fATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2fATI(VertexStreamATI stream, float x, float y) =>
            glVertexStream2fATI.Invoke(stream, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2fvATI(VertexStreamATI stream, float[] coords);
        private static GLVertexStream2fvATI glVertexStream2fvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2fvATI(VertexStreamATI stream, float[] coords) =>
            glVertexStream2fvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2dATI(VertexStreamATI stream, double x, double y);
        private static GLVertexStream2dATI glVertexStream2dATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2dATI(VertexStreamATI stream, double x, double y) =>
            glVertexStream2dATI.Invoke(stream, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream2dvATI(VertexStreamATI stream, double[] coords);
        private static GLVertexStream2dvATI glVertexStream2dvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream2dvATI(VertexStreamATI stream, double[] coords) =>
            glVertexStream2dvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3sATI(VertexStreamATI stream, short x, short y, short z);
        private static GLVertexStream3sATI glVertexStream3sATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3sATI(VertexStreamATI stream, short x, short y, short z) =>
            glVertexStream3sATI.Invoke(stream, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3svATI(VertexStreamATI stream, short[] coords);
        private static GLVertexStream3svATI glVertexStream3svATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3svATI(VertexStreamATI stream, short[] coords) =>
            glVertexStream3svATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3iATI(VertexStreamATI stream, int x, int y, int z);
        private static GLVertexStream3iATI glVertexStream3iATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3iATI(VertexStreamATI stream, int x, int y, int z) =>
            glVertexStream3iATI.Invoke(stream, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3ivATI(VertexStreamATI stream, int[] coords);
        private static GLVertexStream3ivATI glVertexStream3ivATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3ivATI(VertexStreamATI stream, int[] coords) =>
            glVertexStream3ivATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3fATI(VertexStreamATI stream, float x, float y, float z);
        private static GLVertexStream3fATI glVertexStream3fATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3fATI(VertexStreamATI stream, float x, float y, float z) =>
            glVertexStream3fATI.Invoke(stream, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3fvATI(VertexStreamATI stream, float[] coords);
        private static GLVertexStream3fvATI glVertexStream3fvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3fvATI(VertexStreamATI stream, float[] coords) =>
            glVertexStream3fvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3dATI(VertexStreamATI stream, double x, double y, double z);
        private static GLVertexStream3dATI glVertexStream3dATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3dATI(VertexStreamATI stream, double x, double y, double z) =>
            glVertexStream3dATI.Invoke(stream, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream3dvATI(VertexStreamATI stream, double[] coords);
        private static GLVertexStream3dvATI glVertexStream3dvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream3dvATI(VertexStreamATI stream, double[] coords) =>
            glVertexStream3dvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4sATI(VertexStreamATI stream, short x, short y, short z, short w);
        private static GLVertexStream4sATI glVertexStream4sATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4sATI(VertexStreamATI stream, short x, short y, short z, short w) =>
            glVertexStream4sATI.Invoke(stream, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4svATI(VertexStreamATI stream, short[] coords);
        private static GLVertexStream4svATI glVertexStream4svATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4svATI(VertexStreamATI stream, short[] coords) =>
            glVertexStream4svATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4iATI(VertexStreamATI stream, int x, int y, int z, int w);
        private static GLVertexStream4iATI glVertexStream4iATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4iATI(VertexStreamATI stream, int x, int y, int z, int w) =>
            glVertexStream4iATI.Invoke(stream, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4ivATI(VertexStreamATI stream, int[] coords);
        private static GLVertexStream4ivATI glVertexStream4ivATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4ivATI(VertexStreamATI stream, int[] coords) =>
            glVertexStream4ivATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4fATI(VertexStreamATI stream, float x, float y, float z, float w);
        private static GLVertexStream4fATI glVertexStream4fATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4fATI(VertexStreamATI stream, float x, float y, float z, float w) =>
            glVertexStream4fATI.Invoke(stream, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4fvATI(VertexStreamATI stream, float[] coords);
        private static GLVertexStream4fvATI glVertexStream4fvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4fvATI(VertexStreamATI stream, float[] coords) =>
            glVertexStream4fvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4dATI(VertexStreamATI stream, double x, double y, double z, double w);
        private static GLVertexStream4dATI glVertexStream4dATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4dATI(VertexStreamATI stream, double x, double y, double z, double w) =>
            glVertexStream4dATI.Invoke(stream, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexStream4dvATI(VertexStreamATI stream, double[] coords);
        private static GLVertexStream4dvATI glVertexStream4dvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexStream4dvATI(VertexStreamATI stream, double[] coords) =>
            glVertexStream4dvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3bATI(VertexStreamATI stream, sbyte nx, sbyte ny, sbyte nz);
        private static GLNormalStream3bATI glNormalStream3bATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3bATI(VertexStreamATI stream, sbyte nx, sbyte ny, sbyte nz) =>
            glNormalStream3bATI.Invoke(stream, nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3bvATI(VertexStreamATI stream, sbyte[] coords);
        private static GLNormalStream3bvATI glNormalStream3bvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3bvATI(VertexStreamATI stream, sbyte[] coords) =>
            glNormalStream3bvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3sATI(VertexStreamATI stream, short nx, short ny, short nz);
        private static GLNormalStream3sATI glNormalStream3sATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3sATI(VertexStreamATI stream, short nx, short ny, short nz) =>
            glNormalStream3sATI.Invoke(stream, nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3svATI(VertexStreamATI stream, short[] coords);
        private static GLNormalStream3svATI glNormalStream3svATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3svATI(VertexStreamATI stream, short[] coords) =>
            glNormalStream3svATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3iATI(VertexStreamATI stream, int nx, int ny, int nz);
        private static GLNormalStream3iATI glNormalStream3iATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3iATI(VertexStreamATI stream, int nx, int ny, int nz) =>
            glNormalStream3iATI.Invoke(stream, nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3ivATI(VertexStreamATI stream, int[] coords);
        private static GLNormalStream3ivATI glNormalStream3ivATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3ivATI(VertexStreamATI stream, int[] coords) =>
            glNormalStream3ivATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3fATI(VertexStreamATI stream, float nx, float ny, float nz);
        private static GLNormalStream3fATI glNormalStream3fATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3fATI(VertexStreamATI stream, float nx, float ny, float nz) =>
            glNormalStream3fATI.Invoke(stream, nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3fvATI(VertexStreamATI stream, float[] coords);
        private static GLNormalStream3fvATI glNormalStream3fvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3fvATI(VertexStreamATI stream, float[] coords) =>
            glNormalStream3fvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3dATI(VertexStreamATI stream, double nx, double ny, double nz);
        private static GLNormalStream3dATI glNormalStream3dATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3dATI(VertexStreamATI stream, double nx, double ny, double nz) =>
            glNormalStream3dATI.Invoke(stream, nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalStream3dvATI(VertexStreamATI stream, double[] coords);
        private static GLNormalStream3dvATI glNormalStream3dvATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void NormalStream3dvATI(VertexStreamATI stream, double[] coords) =>
            glNormalStream3dvATI.Invoke(stream, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClientActiveVertexStreamATI(VertexStreamATI stream);
        private static GLClientActiveVertexStreamATI glClientActiveVertexStreamATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void ClientActiveVertexStreamATI(VertexStreamATI stream) =>
            glClientActiveVertexStreamATI.Invoke(stream);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexBlendEnviATI(VertexStreamATI pname, int param);
        private static GLVertexBlendEnviATI glVertexBlendEnviATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexBlendEnviATI(VertexStreamATI pname, int param) =>
            glVertexBlendEnviATI.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexBlendEnvfATI(VertexStreamATI pname, float param);
        private static GLVertexBlendEnvfATI glVertexBlendEnvfATI;


        [GLExtension("GL_ATI_vertex_streams")]
        public static void VertexBlendEnvfATI(VertexStreamATI pname, float param) =>
            glVertexBlendEnvfATI.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEGLImageTargetTexStorageEXT(int target, nint image, int[] attrib_list);
        private static GLEGLImageTargetTexStorageEXT glEGLImageTargetTexStorageEXT;


        [GLExtension("GL_EXT_EGL_image_storage")]
        public static void EGLImageTargetTexStorageEXT(int target, nint image, int[] attrib_list) =>
            glEGLImageTargetTexStorageEXT.Invoke(target, image, attrib_list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEGLImageTargetTextureStorageEXT(uint texture, nint image, int[] attrib_list);
        private static GLEGLImageTargetTextureStorageEXT glEGLImageTargetTextureStorageEXT;


        [GLExtension("GL_EXT_EGL_image_storage")]
        public static void EGLImageTargetTextureStorageEXT(uint texture, nint image, int[] attrib_list) =>
            glEGLImageTargetTextureStorageEXT.Invoke(texture, image, attrib_list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysInstancedBaseInstanceEXT(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance);
        private static GLDrawArraysInstancedBaseInstanceEXT glDrawArraysInstancedBaseInstanceEXT;


        [GLExtension("GL_EXT_base_instance")]
        public static void DrawArraysInstancedBaseInstanceEXT(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance) =>
            glDrawArraysInstancedBaseInstanceEXT.Invoke(mode, first, count, instancecount, baseinstance);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedBaseInstanceEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, uint baseinstance);
        private static GLDrawElementsInstancedBaseInstanceEXT glDrawElementsInstancedBaseInstanceEXT;


        [GLExtension("GL_EXT_base_instance")]
        public static void DrawElementsInstancedBaseInstanceEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, uint baseinstance) =>
            glDrawElementsInstancedBaseInstanceEXT.Invoke(mode, count, type, indices, instancecount, baseinstance);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedBaseVertexBaseInstanceEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex, uint baseinstance);
        private static GLDrawElementsInstancedBaseVertexBaseInstanceEXT glDrawElementsInstancedBaseVertexBaseInstanceEXT;


        [GLExtension("GL_EXT_base_instance")]
        public static void DrawElementsInstancedBaseVertexBaseInstanceEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex, uint baseinstance) =>
            glDrawElementsInstancedBaseVertexBaseInstanceEXT.Invoke(mode, count, type, indices, instancecount, basevertex, baseinstance);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformBufferEXT(uint program, int location, uint buffer);
        private static GLUniformBufferEXT glUniformBufferEXT;


        [GLExtension("GL_EXT_bindable_uniform")]
        public static void UniformBufferEXT(uint program, int location, uint buffer) =>
            glUniformBufferEXT.Invoke(program, location, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetUniformBufferSizeEXT(uint program, int location);
        private static GLGetUniformBufferSizeEXT glGetUniformBufferSizeEXT;


        [GLExtension("GL_EXT_bindable_uniform")]
        public static int GetUniformBufferSizeEXT(uint program, int location) =>
            glGetUniformBufferSizeEXT.Invoke(program, location);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLGetUniformOffsetEXT(uint program, int location);
        private static GLGetUniformOffsetEXT glGetUniformOffsetEXT;


        [GLExtension("GL_EXT_bindable_uniform")]
        public static nint GetUniformOffsetEXT(uint program, int location) =>
            glGetUniformOffsetEXT.Invoke(program, location);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendColorEXT(float red, float green, float blue, float alpha);
        private static GLBlendColorEXT glBlendColorEXT;


        [GLExtension("GL_EXT_blend_color")]
        public static void BlendColorEXT(float red, float green, float blue, float alpha) =>
            glBlendColorEXT.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparateEXT(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparateEXT glBlendEquationSeparateEXT;


        [GLExtension("GL_EXT_blend_equation_separate")]
        public static void BlendEquationSeparateEXT(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparateEXT.Invoke(modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, sbyte[] name);
        private static GLBindFragDataLocationIndexedEXT glBindFragDataLocationIndexedEXT;


        [GLExtension("GL_EXT_blend_func_extended")]
        public static void BindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, sbyte[] name) =>
            glBindFragDataLocationIndexedEXT.Invoke(program, colorNumber, index, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFragDataLocationEXT(uint program, uint color, sbyte[] name);
        private static GLBindFragDataLocationEXT glBindFragDataLocationEXT;


        [GLExtension("GL_EXT_blend_func_extended")]
        public static void BindFragDataLocationEXT(uint program, uint color, sbyte[] name) =>
            glBindFragDataLocationEXT.Invoke(program, color, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetProgramResourceLocationIndexEXT(uint program, ProgramInterface programInterface, sbyte[] name);
        private static GLGetProgramResourceLocationIndexEXT glGetProgramResourceLocationIndexEXT;


        [GLExtension("GL_EXT_blend_func_extended")]
        public static int GetProgramResourceLocationIndexEXT(uint program, ProgramInterface programInterface, sbyte[] name) =>
            glGetProgramResourceLocationIndexEXT.Invoke(program, programInterface, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetFragDataIndexEXT(uint program, sbyte[] name);
        private static GLGetFragDataIndexEXT glGetFragDataIndexEXT;


        [GLExtension("GL_EXT_blend_func_extended")]
        public static int GetFragDataIndexEXT(uint program, sbyte[] name) =>
            glGetFragDataIndexEXT.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparateEXT(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
        private static GLBlendFuncSeparateEXT glBlendFuncSeparateEXT;


        [GLExtension("GL_EXT_blend_func_separate")]
        public static void BlendFuncSeparateEXT(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) =>
            glBlendFuncSeparateEXT.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationEXT(BlendEquationModeEXT mode);
        private static GLBlendEquationEXT glBlendEquationEXT;


        [GLExtension("GL_EXT_blend_minmax")]
        public static void BlendEquationEXT(BlendEquationModeEXT mode) =>
            glBlendEquationEXT.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferStorageEXT(BufferStorageTarget target, nint size, nint data, BufferStorageMask flags);
        private static GLBufferStorageEXT glBufferStorageEXT;


        [GLExtension("GL_EXT_buffer_storage")]
        public static void BufferStorageEXT(BufferStorageTarget target, nint size, nint data, BufferStorageMask flags) =>
            glBufferStorageEXT.Invoke(target, size, data, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearTexImageEXT(uint texture, int level, PixelFormat format, PixelType type, nint data);
        private static GLClearTexImageEXT glClearTexImageEXT;


        [GLExtension("GL_EXT_clear_texture")]
        public static void ClearTexImageEXT(uint texture, int level, PixelFormat format, PixelType type, nint data) =>
            glClearTexImageEXT.Invoke(texture, level, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint data);
        private static GLClearTexSubImageEXT glClearTexSubImageEXT;


        [GLExtension("GL_EXT_clear_texture")]
        public static void ClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint data) =>
            glClearTexSubImageEXT.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipControlEXT(int origin, int depth);
        private static GLClipControlEXT glClipControlEXT;


        [GLExtension("GL_EXT_clip_control")]
        public static void ClipControlEXT(int origin, int depth) =>
            glClipControlEXT.Invoke(origin, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorSubTableEXT(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, nint data);
        private static GLColorSubTableEXT glColorSubTableEXT;


        [GLExtension("GL_EXT_color_subtable")]
        public static void ColorSubTableEXT(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, nint data) =>
            glColorSubTableEXT.Invoke(target, start, count, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyColorSubTableEXT(ColorTableTarget target, int start, int x, int y, int width);
        private static GLCopyColorSubTableEXT glCopyColorSubTableEXT;


        [GLExtension("GL_EXT_color_subtable")]
        public static void CopyColorSubTableEXT(ColorTableTarget target, int start, int x, int y, int width) =>
            glCopyColorSubTableEXT.Invoke(target, start, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLockArraysEXT(int first, int count);
        private static GLLockArraysEXT glLockArraysEXT;


        [GLExtension("GL_EXT_compiled_vertex_array")]
        public static void LockArraysEXT(int first, int count) =>
            glLockArraysEXT.Invoke(first, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUnlockArraysEXT();
        private static GLUnlockArraysEXT glUnlockArraysEXT;


        [GLExtension("GL_EXT_compiled_vertex_array")]
        public static void UnlockArraysEXT() =>
            glUnlockArraysEXT.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint image);
        private static GLConvolutionFilter1DEXT glConvolutionFilter1DEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void ConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint image) =>
            glConvolutionFilter1DEXT.Invoke(target, internalformat, width, format, type, image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint image);
        private static GLConvolutionFilter2DEXT glConvolutionFilter2DEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void ConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint image) =>
            glConvolutionFilter2DEXT.Invoke(target, internalformat, width, height, format, type, image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameterfEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float parameters);
        private static GLConvolutionParameterfEXT glConvolutionParameterfEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void ConvolutionParameterfEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float parameters) =>
            glConvolutionParameterfEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters);
        private static GLConvolutionParameterfvEXT glConvolutionParameterfvEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void ConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, float[] parameters) =>
            glConvolutionParameterfvEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameteriEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int parameters);
        private static GLConvolutionParameteriEXT glConvolutionParameteriEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void ConvolutionParameteriEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int parameters) =>
            glConvolutionParameteriEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters);
        private static GLConvolutionParameterivEXT glConvolutionParameterivEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void ConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters) =>
            glConvolutionParameterivEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int x, int y, int width);
        private static GLCopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void CopyConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int x, int y, int width) =>
            glCopyConvolutionFilter1DEXT.Invoke(target, internalformat, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int x, int y, int width, int height);
        private static GLCopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void CopyConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int x, int y, int width, int height) =>
            glCopyConvolutionFilter2DEXT.Invoke(target, internalformat, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, out nint image);
        private static GLGetConvolutionFilterEXT glGetConvolutionFilterEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void GetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, out nint image) =>
            glGetConvolutionFilterEXT.Invoke(target, format, type, out image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, out float parameters);
        private static GLGetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void GetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, out float parameters) =>
            glGetConvolutionParameterfvEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, out int parameters);
        private static GLGetConvolutionParameterivEXT glGetConvolutionParameterivEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void GetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameter pname, out int parameters) =>
            glGetConvolutionParameterivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, out nint row, out nint column, out nint span);
        private static GLGetSeparableFilterEXT glGetSeparableFilterEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void GetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, out nint row, out nint column, out nint span) =>
            glGetSeparableFilterEXT.Invoke(target, format, type, out row, out column, out span);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSeparableFilter2DEXT(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint row, nint column);
        private static GLSeparableFilter2DEXT glSeparableFilter2DEXT;


        [GLExtension("GL_EXT_convolution")]
        public static void SeparableFilter2DEXT(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, nint row, nint column) =>
            glSeparableFilter2DEXT.Invoke(target, internalformat, width, height, format, type, row, column);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3bEXT(sbyte tx, sbyte ty, sbyte tz);
        private static GLTangent3bEXT glTangent3bEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3bEXT(sbyte tx, sbyte ty, sbyte tz) =>
            glTangent3bEXT.Invoke(tx, ty, tz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3bvEXT(sbyte[] v);
        private static GLTangent3bvEXT glTangent3bvEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3bvEXT(sbyte[] v) =>
            glTangent3bvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3dEXT(double tx, double ty, double tz);
        private static GLTangent3dEXT glTangent3dEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3dEXT(double tx, double ty, double tz) =>
            glTangent3dEXT.Invoke(tx, ty, tz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3dvEXT(double[] v);
        private static GLTangent3dvEXT glTangent3dvEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3dvEXT(double[] v) =>
            glTangent3dvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3fEXT(float tx, float ty, float tz);
        private static GLTangent3fEXT glTangent3fEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3fEXT(float tx, float ty, float tz) =>
            glTangent3fEXT.Invoke(tx, ty, tz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3fvEXT(float[] v);
        private static GLTangent3fvEXT glTangent3fvEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3fvEXT(float[] v) =>
            glTangent3fvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3iEXT(int tx, int ty, int tz);
        private static GLTangent3iEXT glTangent3iEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3iEXT(int tx, int ty, int tz) =>
            glTangent3iEXT.Invoke(tx, ty, tz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3ivEXT(int[] v);
        private static GLTangent3ivEXT glTangent3ivEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3ivEXT(int[] v) =>
            glTangent3ivEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3sEXT(short tx, short ty, short tz);
        private static GLTangent3sEXT glTangent3sEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3sEXT(short tx, short ty, short tz) =>
            glTangent3sEXT.Invoke(tx, ty, tz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangent3svEXT(short[] v);
        private static GLTangent3svEXT glTangent3svEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Tangent3svEXT(short[] v) =>
            glTangent3svEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3bEXT(sbyte bx, sbyte by, sbyte bz);
        private static GLBinormal3bEXT glBinormal3bEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3bEXT(sbyte bx, sbyte by, sbyte bz) =>
            glBinormal3bEXT.Invoke(bx, by, bz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3bvEXT(sbyte[] v);
        private static GLBinormal3bvEXT glBinormal3bvEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3bvEXT(sbyte[] v) =>
            glBinormal3bvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3dEXT(double bx, double by, double bz);
        private static GLBinormal3dEXT glBinormal3dEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3dEXT(double bx, double by, double bz) =>
            glBinormal3dEXT.Invoke(bx, by, bz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3dvEXT(double[] v);
        private static GLBinormal3dvEXT glBinormal3dvEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3dvEXT(double[] v) =>
            glBinormal3dvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3fEXT(float bx, float by, float bz);
        private static GLBinormal3fEXT glBinormal3fEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3fEXT(float bx, float by, float bz) =>
            glBinormal3fEXT.Invoke(bx, by, bz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3fvEXT(float[] v);
        private static GLBinormal3fvEXT glBinormal3fvEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3fvEXT(float[] v) =>
            glBinormal3fvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3iEXT(int bx, int by, int bz);
        private static GLBinormal3iEXT glBinormal3iEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3iEXT(int bx, int by, int bz) =>
            glBinormal3iEXT.Invoke(bx, by, bz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3ivEXT(int[] v);
        private static GLBinormal3ivEXT glBinormal3ivEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3ivEXT(int[] v) =>
            glBinormal3ivEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3sEXT(short bx, short by, short bz);
        private static GLBinormal3sEXT glBinormal3sEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3sEXT(short bx, short by, short bz) =>
            glBinormal3sEXT.Invoke(bx, by, bz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormal3svEXT(short[] v);
        private static GLBinormal3svEXT glBinormal3svEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void Binormal3svEXT(short[] v) =>
            glBinormal3svEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTangentPointerEXT(TangentPointerTypeEXT type, int stride, nint pointer);
        private static GLTangentPointerEXT glTangentPointerEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void TangentPointerEXT(TangentPointerTypeEXT type, int stride, nint pointer) =>
            glTangentPointerEXT.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBinormalPointerEXT(BinormalPointerTypeEXT type, int stride, nint pointer);
        private static GLBinormalPointerEXT glBinormalPointerEXT;


        [GLExtension("GL_EXT_coordinate_frame")]
        public static void BinormalPointerEXT(BinormalPointerTypeEXT type, int stride, nint pointer) =>
            glBinormalPointerEXT.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyImageSubDataEXT(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        private static GLCopyImageSubDataEXT glCopyImageSubDataEXT;


        [GLExtension("GL_EXT_copy_image")]
        public static void CopyImageSubDataEXT(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) =>
            glCopyImageSubDataEXT.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexImage1DEXT(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border);
        private static GLCopyTexImage1DEXT glCopyTexImage1DEXT;


        [GLExtension("GL_EXT_copy_texture")]
        public static void CopyTexImage1DEXT(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border) =>
            glCopyTexImage1DEXT.Invoke(target, level, internalformat, x, y, width, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexImage2DEXT(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        private static GLCopyTexImage2DEXT glCopyTexImage2DEXT;


        [GLExtension("GL_EXT_copy_texture")]
        public static void CopyTexImage2DEXT(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border) =>
            glCopyTexImage2DEXT.Invoke(target, level, internalformat, x, y, width, height, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexSubImage1DEXT(TextureTarget target, int level, int xoffset, int x, int y, int width);
        private static GLCopyTexSubImage1DEXT glCopyTexSubImage1DEXT;


        [GLExtension("GL_EXT_copy_texture")]
        public static void CopyTexSubImage1DEXT(TextureTarget target, int level, int xoffset, int x, int y, int width) =>
            glCopyTexSubImage1DEXT.Invoke(target, level, xoffset, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static GLCopyTexSubImage2DEXT glCopyTexSubImage2DEXT;


        [GLExtension("GL_EXT_copy_texture")]
        public static void CopyTexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
            glCopyTexSubImage2DEXT.Invoke(target, level, xoffset, yoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static GLCopyTexSubImage3DEXT glCopyTexSubImage3DEXT;


        [GLExtension("GL_EXT_copy_texture")]
        public static void CopyTexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
            glCopyTexSubImage3DEXT.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCullParameterdvEXT(CullParameterEXT pname, out double parameters);
        private static GLCullParameterdvEXT glCullParameterdvEXT;


        [GLExtension("GL_EXT_cull_vertex")]
        public static void CullParameterdvEXT(CullParameterEXT pname, out double parameters) =>
            glCullParameterdvEXT.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCullParameterfvEXT(CullParameterEXT pname, out float parameters);
        private static GLCullParameterfvEXT glCullParameterfvEXT;


        [GLExtension("GL_EXT_cull_vertex")]
        public static void CullParameterfvEXT(CullParameterEXT pname, out float parameters) =>
            glCullParameterfvEXT.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLabelObjectEXT(int type, uint object, int length, sbyte[] label);
        private static GLLabelObjectEXT glLabelObjectEXT;


        [GLExtension("GL_EXT_debug_label")]
        public static void LabelObjectEXT(int type, uint object, int length, sbyte[] label) =>
            glLabelObjectEXT.Invoke(type, object, length, label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectLabelEXT(int type, uint object, int bufSize, out int length, out sbyte label);
        private static GLGetObjectLabelEXT glGetObjectLabelEXT;


        [GLExtension("GL_EXT_debug_label")]
        public static void GetObjectLabelEXT(int type, uint object, int bufSize, out int length, out sbyte label) =>
            glGetObjectLabelEXT.Invoke(type, object, bufSize, out length, out label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInsertEventMarkerEXT(int length, sbyte[] marker);
        private static GLInsertEventMarkerEXT glInsertEventMarkerEXT;


        [GLExtension("GL_EXT_debug_marker")]
        public static void InsertEventMarkerEXT(int length, sbyte[] marker) =>
            glInsertEventMarkerEXT.Invoke(length, marker);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushGroupMarkerEXT(int length, sbyte[] marker);
        private static GLPushGroupMarkerEXT glPushGroupMarkerEXT;


        [GLExtension("GL_EXT_debug_marker")]
        public static void PushGroupMarkerEXT(int length, sbyte[] marker) =>
            glPushGroupMarkerEXT.Invoke(length, marker);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPopGroupMarkerEXT();
        private static GLPopGroupMarkerEXT glPopGroupMarkerEXT;


        [GLExtension("GL_EXT_debug_marker")]
        public static void PopGroupMarkerEXT() =>
            glPopGroupMarkerEXT.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthBoundsEXT(double zmin, double zmax);
        private static GLDepthBoundsEXT glDepthBoundsEXT;


        [GLExtension("GL_EXT_depth_bounds_test")]
        public static void DepthBoundsEXT(double zmin, double zmax) =>
            glDepthBoundsEXT.Invoke(zmin, zmax);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoadfEXT(MatrixMode mode, float[] m);
        private static GLMatrixLoadfEXT glMatrixLoadfEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixLoadfEXT(MatrixMode mode, float[] m) =>
            glMatrixLoadfEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoaddEXT(MatrixMode mode, double[] m);
        private static GLMatrixLoaddEXT glMatrixLoaddEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixLoaddEXT(MatrixMode mode, double[] m) =>
            glMatrixLoaddEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMultfEXT(MatrixMode mode, float[] m);
        private static GLMatrixMultfEXT glMatrixMultfEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixMultfEXT(MatrixMode mode, float[] m) =>
            glMatrixMultfEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMultdEXT(MatrixMode mode, double[] m);
        private static GLMatrixMultdEXT glMatrixMultdEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixMultdEXT(MatrixMode mode, double[] m) =>
            glMatrixMultdEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoadIdentityEXT(MatrixMode mode);
        private static GLMatrixLoadIdentityEXT glMatrixLoadIdentityEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixLoadIdentityEXT(MatrixMode mode) =>
            glMatrixLoadIdentityEXT.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixRotatefEXT(MatrixMode mode, float angle, float x, float y, float z);
        private static GLMatrixRotatefEXT glMatrixRotatefEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixRotatefEXT(MatrixMode mode, float angle, float x, float y, float z) =>
            glMatrixRotatefEXT.Invoke(mode, angle, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixRotatedEXT(MatrixMode mode, double angle, double x, double y, double z);
        private static GLMatrixRotatedEXT glMatrixRotatedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixRotatedEXT(MatrixMode mode, double angle, double x, double y, double z) =>
            glMatrixRotatedEXT.Invoke(mode, angle, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixScalefEXT(MatrixMode mode, float x, float y, float z);
        private static GLMatrixScalefEXT glMatrixScalefEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixScalefEXT(MatrixMode mode, float x, float y, float z) =>
            glMatrixScalefEXT.Invoke(mode, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixScaledEXT(MatrixMode mode, double x, double y, double z);
        private static GLMatrixScaledEXT glMatrixScaledEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixScaledEXT(MatrixMode mode, double x, double y, double z) =>
            glMatrixScaledEXT.Invoke(mode, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixTranslatefEXT(MatrixMode mode, float x, float y, float z);
        private static GLMatrixTranslatefEXT glMatrixTranslatefEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixTranslatefEXT(MatrixMode mode, float x, float y, float z) =>
            glMatrixTranslatefEXT.Invoke(mode, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixTranslatedEXT(MatrixMode mode, double x, double y, double z);
        private static GLMatrixTranslatedEXT glMatrixTranslatedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixTranslatedEXT(MatrixMode mode, double x, double y, double z) =>
            glMatrixTranslatedEXT.Invoke(mode, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);
        private static GLMatrixFrustumEXT glMatrixFrustumEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar) =>
            glMatrixFrustumEXT.Invoke(mode, left, right, bottom, top, zNear, zFar);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar);
        private static GLMatrixOrthoEXT glMatrixOrthoEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar) =>
            glMatrixOrthoEXT.Invoke(mode, left, right, bottom, top, zNear, zFar);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixPopEXT(MatrixMode mode);
        private static GLMatrixPopEXT glMatrixPopEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixPopEXT(MatrixMode mode) =>
            glMatrixPopEXT.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixPushEXT(MatrixMode mode);
        private static GLMatrixPushEXT glMatrixPushEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixPushEXT(MatrixMode mode) =>
            glMatrixPushEXT.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClientAttribDefaultEXT(ClientAttribMask mask);
        private static GLClientAttribDefaultEXT glClientAttribDefaultEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ClientAttribDefaultEXT(ClientAttribMask mask) =>
            glClientAttribDefaultEXT.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushClientAttribDefaultEXT(ClientAttribMask mask);
        private static GLPushClientAttribDefaultEXT glPushClientAttribDefaultEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void PushClientAttribDefaultEXT(ClientAttribMask mask) =>
            glPushClientAttribDefaultEXT.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterfEXT(uint texture, TextureTarget target, TextureParameterName pname, float param);
        private static GLTextureParameterfEXT glTextureParameterfEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureParameterfEXT(uint texture, TextureTarget target, TextureParameterName pname, float param) =>
            glTextureParameterfEXT.Invoke(texture, target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterfvEXT(uint texture, TextureTarget target, TextureParameterName pname, float[] parameters);
        private static GLTextureParameterfvEXT glTextureParameterfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureParameterfvEXT(uint texture, TextureTarget target, TextureParameterName pname, float[] parameters) =>
            glTextureParameterfvEXT.Invoke(texture, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameteriEXT(uint texture, TextureTarget target, TextureParameterName pname, int param);
        private static GLTextureParameteriEXT glTextureParameteriEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureParameteriEXT(uint texture, TextureTarget target, TextureParameterName pname, int param) =>
            glTextureParameteriEXT.Invoke(texture, target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterivEXT(uint texture, TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLTextureParameterivEXT glTextureParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureParameterivEXT(uint texture, TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glTextureParameterivEXT.Invoke(texture, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureImage1DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureImage1DEXT glTextureImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureImage1DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTextureImage1DEXT.Invoke(texture, target, level, internalformat, width, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureImage2DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureImage2DEXT glTextureImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureImage2DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTextureImage2DEXT.Invoke(texture, target, level, internalformat, width, height, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureSubImage1DEXT glTextureSubImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels) =>
            glTextureSubImage1DEXT.Invoke(texture, target, level, xoffset, width, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureSubImage2DEXT glTextureSubImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels) =>
            glTextureSubImage2DEXT.Invoke(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border);
        private static GLCopyTextureImage1DEXT glCopyTextureImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border) =>
            glCopyTextureImage1DEXT.Invoke(texture, target, level, internalformat, x, y, width, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        private static GLCopyTextureImage2DEXT glCopyTextureImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border) =>
            glCopyTextureImage2DEXT.Invoke(texture, target, level, internalformat, x, y, width, height, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width);
        private static GLCopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width) =>
            glCopyTextureSubImage1DEXT.Invoke(texture, target, level, xoffset, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static GLCopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
            glCopyTextureSubImage2DEXT.Invoke(texture, target, level, xoffset, yoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureImageEXT(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, out nint pixels);
        private static GLGetTextureImageEXT glGetTextureImageEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetTextureImageEXT(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, out nint pixels) =>
            glGetTextureImageEXT.Invoke(texture, target, level, format, type, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameterfvEXT(uint texture, TextureTarget target, GetTextureParameter pname, out float parameters);
        private static GLGetTextureParameterfvEXT glGetTextureParameterfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetTextureParameterfvEXT(uint texture, TextureTarget target, GetTextureParameter pname, out float parameters) =>
            glGetTextureParameterfvEXT.Invoke(texture, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameterivEXT(uint texture, TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTextureParameterivEXT glGetTextureParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetTextureParameterivEXT(uint texture, TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTextureParameterivEXT.Invoke(texture, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureLevelParameterfvEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, out float parameters);
        private static GLGetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetTextureLevelParameterfvEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, out float parameters) =>
            glGetTextureLevelParameterfvEXT.Invoke(texture, target, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureLevelParameterivEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, out int parameters);
        private static GLGetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetTextureLevelParameterivEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, out int parameters) =>
            glGetTextureLevelParameterivEXT.Invoke(texture, target, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureImage3DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureImage3DEXT glTextureImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureImage3DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTextureImage3DEXT.Invoke(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels);
        private static GLTextureSubImage3DEXT glTextureSubImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels) =>
            glTextureSubImage3DEXT.Invoke(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static GLCopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
            glCopyTextureSubImage3DEXT.Invoke(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindMultiTextureEXT(TextureUnit texunit, TextureTarget target, uint texture);
        private static GLBindMultiTextureEXT glBindMultiTextureEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void BindMultiTextureEXT(TextureUnit texunit, TextureTarget target, uint texture) =>
            glBindMultiTextureEXT.Invoke(texunit, target, texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, nint pointer);
        private static GLMultiTexCoordPointerEXT glMultiTexCoordPointerEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, nint pointer) =>
            glMultiTexCoordPointerEXT.Invoke(texunit, size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexEnvfEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param);
        private static GLMultiTexEnvfEXT glMultiTexEnvfEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexEnvfEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param) =>
            glMultiTexEnvfEXT.Invoke(texunit, target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters);
        private static GLMultiTexEnvfvEXT glMultiTexEnvfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float[] parameters) =>
            glMultiTexEnvfvEXT.Invoke(texunit, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexEnviEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param);
        private static GLMultiTexEnviEXT glMultiTexEnviEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexEnviEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param) =>
            glMultiTexEnviEXT.Invoke(texunit, target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters);
        private static GLMultiTexEnvivEXT glMultiTexEnvivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int[] parameters) =>
            glMultiTexEnvivEXT.Invoke(texunit, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexGendEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param);
        private static GLMultiTexGendEXT glMultiTexGendEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexGendEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param) =>
            glMultiTexGendEXT.Invoke(texunit, coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters);
        private static GLMultiTexGendvEXT glMultiTexGendvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double[] parameters) =>
            glMultiTexGendvEXT.Invoke(texunit, coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexGenfEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param);
        private static GLMultiTexGenfEXT glMultiTexGenfEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexGenfEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param) =>
            glMultiTexGenfEXT.Invoke(texunit, coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters);
        private static GLMultiTexGenfvEXT glMultiTexGenfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float[] parameters) =>
            glMultiTexGenfvEXT.Invoke(texunit, coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexGeniEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param);
        private static GLMultiTexGeniEXT glMultiTexGeniEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexGeniEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param) =>
            glMultiTexGeniEXT.Invoke(texunit, coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters);
        private static GLMultiTexGenivEXT glMultiTexGenivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int[] parameters) =>
            glMultiTexGenivEXT.Invoke(texunit, coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out float parameters);
        private static GLGetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out float parameters) =>
            glGetMultiTexEnvfvEXT.Invoke(texunit, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out int parameters);
        private static GLGetMultiTexEnvivEXT glGetMultiTexEnvivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, out int parameters) =>
            glGetMultiTexEnvivEXT.Invoke(texunit, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out double parameters);
        private static GLGetMultiTexGendvEXT glGetMultiTexGendvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out double parameters) =>
            glGetMultiTexGendvEXT.Invoke(texunit, coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out float parameters);
        private static GLGetMultiTexGenfvEXT glGetMultiTexGenfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out float parameters) =>
            glGetMultiTexGenfvEXT.Invoke(texunit, coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out int parameters);
        private static GLGetMultiTexGenivEXT glGetMultiTexGenivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, out int parameters) =>
            glGetMultiTexGenivEXT.Invoke(texunit, coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexParameteriEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param);
        private static GLMultiTexParameteriEXT glMultiTexParameteriEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexParameteriEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param) =>
            glMultiTexParameteriEXT.Invoke(texunit, target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLMultiTexParameterivEXT glMultiTexParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glMultiTexParameterivEXT.Invoke(texunit, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexParameterfEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param);
        private static GLMultiTexParameterfEXT glMultiTexParameterfEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexParameterfEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param) =>
            glMultiTexParameterfEXT.Invoke(texunit, target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] parameters);
        private static GLMultiTexParameterfvEXT glMultiTexParameterfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float[] parameters) =>
            glMultiTexParameterfvEXT.Invoke(texunit, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLMultiTexImage1DEXT glMultiTexImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels) =>
            glMultiTexImage1DEXT.Invoke(texunit, target, level, internalformat, width, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLMultiTexImage2DEXT glMultiTexImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels) =>
            glMultiTexImage2DEXT.Invoke(texunit, target, level, internalformat, width, height, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels);
        private static GLMultiTexSubImage1DEXT glMultiTexSubImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels) =>
            glMultiTexSubImage1DEXT.Invoke(texunit, target, level, xoffset, width, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels);
        private static GLMultiTexSubImage2DEXT glMultiTexSubImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels) =>
            glMultiTexSubImage2DEXT.Invoke(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border);
        private static GLCopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border) =>
            glCopyMultiTexImage1DEXT.Invoke(texunit, target, level, internalformat, x, y, width, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        private static GLCopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border) =>
            glCopyMultiTexImage2DEXT.Invoke(texunit, target, level, internalformat, x, y, width, height, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width);
        private static GLCopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width) =>
            glCopyMultiTexSubImage1DEXT.Invoke(texunit, target, level, xoffset, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static GLCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
            glCopyMultiTexSubImage2DEXT.Invoke(texunit, target, level, xoffset, yoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, out nint pixels);
        private static GLGetMultiTexImageEXT glGetMultiTexImageEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, out nint pixels) =>
            glGetMultiTexImageEXT.Invoke(texunit, target, level, format, type, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out float parameters);
        private static GLGetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out float parameters) =>
            glGetMultiTexParameterfvEXT.Invoke(texunit, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetMultiTexParameterivEXT glGetMultiTexParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetMultiTexParameterivEXT.Invoke(texunit, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out float parameters);
        private static GLGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out float parameters) =>
            glGetMultiTexLevelParameterfvEXT.Invoke(texunit, target, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out int parameters);
        private static GLGetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, out int parameters) =>
            glGetMultiTexLevelParameterivEXT.Invoke(texunit, target, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLMultiTexImage3DEXT glMultiTexImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels) =>
            glMultiTexImage3DEXT.Invoke(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels);
        private static GLMultiTexSubImage3DEXT glMultiTexSubImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels) =>
            glMultiTexSubImage3DEXT.Invoke(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static GLCopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CopyMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
            glCopyMultiTexSubImage3DEXT.Invoke(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableClientStateIndexedEXT(EnableCap array, uint index);
        private static GLEnableClientStateIndexedEXT glEnableClientStateIndexedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void EnableClientStateIndexedEXT(EnableCap array, uint index) =>
            glEnableClientStateIndexedEXT.Invoke(array, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableClientStateIndexedEXT(EnableCap array, uint index);
        private static GLDisableClientStateIndexedEXT glDisableClientStateIndexedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void DisableClientStateIndexedEXT(EnableCap array, uint index) =>
            glDisableClientStateIndexedEXT.Invoke(array, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFloatIndexedvEXT(GetPName target, uint index, out float data);
        private static GLGetFloatIndexedvEXT glGetFloatIndexedvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetFloatIndexedvEXT(GetPName target, uint index, out float data) =>
            glGetFloatIndexedvEXT.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetDoubleIndexedvEXT(GetPName target, uint index, out double data);
        private static GLGetDoubleIndexedvEXT glGetDoubleIndexedvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetDoubleIndexedvEXT(GetPName target, uint index, out double data) =>
            glGetDoubleIndexedvEXT.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPointerIndexedvEXT(int target, uint index, out nint data);
        private static GLGetPointerIndexedvEXT glGetPointerIndexedvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetPointerIndexedvEXT(int target, uint index, out nint data) =>
            glGetPointerIndexedvEXT.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableIndexedEXT(EnableCap target, uint index);
        private static GLEnableIndexedEXT glEnableIndexedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void EnableIndexedEXT(EnableCap target, uint index) =>
            glEnableIndexedEXT.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableIndexedEXT(EnableCap target, uint index);
        private static GLDisableIndexedEXT glDisableIndexedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void DisableIndexedEXT(EnableCap target, uint index) =>
            glDisableIndexedEXT.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsEnabledIndexedEXT(EnableCap target, uint index);
        private static GLIsEnabledIndexedEXT glIsEnabledIndexedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static bool IsEnabledIndexedEXT(EnableCap target, uint index) =>
            glIsEnabledIndexedEXT.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetIntegerIndexedvEXT(GetPName target, uint index, out int data);
        private static GLGetIntegerIndexedvEXT glGetIntegerIndexedvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetIntegerIndexedvEXT(GetPName target, uint index, out int data) =>
            glGetIntegerIndexedvEXT.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBooleanIndexedvEXT(BufferTargetARB target, uint index, out bool data);
        private static GLGetBooleanIndexedvEXT glGetBooleanIndexedvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetBooleanIndexedvEXT(BufferTargetARB target, uint index, out bool data) =>
            glGetBooleanIndexedvEXT.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureImage3DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint bits);
        private static GLCompressedTextureImage3DEXT glCompressedTextureImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedTextureImage3DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint bits) =>
            glCompressedTextureImage3DEXT.Invoke(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint bits);
        private static GLCompressedTextureImage2DEXT glCompressedTextureImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint bits) =>
            glCompressedTextureImage2DEXT.Invoke(texture, target, level, internalformat, width, height, border, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint bits);
        private static GLCompressedTextureImage1DEXT glCompressedTextureImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint bits) =>
            glCompressedTextureImage1DEXT.Invoke(texture, target, level, internalformat, width, border, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint bits);
        private static GLCompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint bits) =>
            glCompressedTextureSubImage3DEXT.Invoke(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint bits);
        private static GLCompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint bits) =>
            glCompressedTextureSubImage2DEXT.Invoke(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint bits);
        private static GLCompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint bits) =>
            glCompressedTextureSubImage1DEXT.Invoke(texture, target, level, xoffset, width, format, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCompressedTextureImageEXT(uint texture, TextureTarget target, int lod, out nint img);
        private static GLGetCompressedTextureImageEXT glGetCompressedTextureImageEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetCompressedTextureImageEXT(uint texture, TextureTarget target, int lod, out nint img) =>
            glGetCompressedTextureImageEXT.Invoke(texture, target, lod, out img);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint bits);
        private static GLCompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint bits) =>
            glCompressedMultiTexImage3DEXT.Invoke(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint bits);
        private static GLCompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint bits) =>
            glCompressedMultiTexImage2DEXT.Invoke(texunit, target, level, internalformat, width, height, border, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint bits);
        private static GLCompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint bits) =>
            glCompressedMultiTexImage1DEXT.Invoke(texunit, target, level, internalformat, width, border, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint bits);
        private static GLCompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint bits) =>
            glCompressedMultiTexSubImage3DEXT.Invoke(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint bits);
        private static GLCompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint bits) =>
            glCompressedMultiTexSubImage2DEXT.Invoke(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint bits);
        private static GLCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void CompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint bits) =>
            glCompressedMultiTexSubImage1DEXT.Invoke(texunit, target, level, xoffset, width, format, imageSize, bits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, out nint img);
        private static GLGetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, out nint img) =>
            glGetCompressedMultiTexImageEXT.Invoke(texunit, target, lod, out img);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoadTransposefEXT(MatrixMode mode, float[] m);
        private static GLMatrixLoadTransposefEXT glMatrixLoadTransposefEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixLoadTransposefEXT(MatrixMode mode, float[] m) =>
            glMatrixLoadTransposefEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoadTransposedEXT(MatrixMode mode, double[] m);
        private static GLMatrixLoadTransposedEXT glMatrixLoadTransposedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixLoadTransposedEXT(MatrixMode mode, double[] m) =>
            glMatrixLoadTransposedEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMultTransposefEXT(MatrixMode mode, float[] m);
        private static GLMatrixMultTransposefEXT glMatrixMultTransposefEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixMultTransposefEXT(MatrixMode mode, float[] m) =>
            glMatrixMultTransposefEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMultTransposedEXT(MatrixMode mode, double[] m);
        private static GLMatrixMultTransposedEXT glMatrixMultTransposedEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MatrixMultTransposedEXT(MatrixMode mode, double[] m) =>
            glMatrixMultTransposedEXT.Invoke(mode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferDataEXT(uint buffer, nint size, nint data, VertexBufferObjectUsage usage);
        private static GLNamedBufferDataEXT glNamedBufferDataEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedBufferDataEXT(uint buffer, nint size, nint data, VertexBufferObjectUsage usage) =>
            glNamedBufferDataEXT.Invoke(buffer, size, data, usage);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferSubDataEXT(uint buffer, nint offset, nint size, nint data);
        private static GLNamedBufferSubDataEXT glNamedBufferSubDataEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedBufferSubDataEXT(uint buffer, nint offset, nint size, nint data) =>
            glNamedBufferSubDataEXT.Invoke(buffer, offset, size, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapNamedBufferEXT(uint buffer, BufferAccessARB access);
        private static GLMapNamedBufferEXT glMapNamedBufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static nint MapNamedBufferEXT(uint buffer, BufferAccessARB access) =>
            glMapNamedBufferEXT.Invoke(buffer, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLUnmapNamedBufferEXT(uint buffer);
        private static GLUnmapNamedBufferEXT glUnmapNamedBufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static bool UnmapNamedBufferEXT(uint buffer) =>
            glUnmapNamedBufferEXT.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferParameterivEXT(uint buffer, BufferPNameARB pname, out int parameters);
        private static GLGetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedBufferParameterivEXT(uint buffer, BufferPNameARB pname, out int parameters) =>
            glGetNamedBufferParameterivEXT.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferPointervEXT(uint buffer, BufferPointerNameARB pname, out nint parameters);
        private static GLGetNamedBufferPointervEXT glGetNamedBufferPointervEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedBufferPointervEXT(uint buffer, BufferPointerNameARB pname, out nint parameters) =>
            glGetNamedBufferPointervEXT.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferSubDataEXT(uint buffer, nint offset, nint size, out nint data);
        private static GLGetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedBufferSubDataEXT(uint buffer, nint offset, nint size, out nint data) =>
            glGetNamedBufferSubDataEXT.Invoke(buffer, offset, size, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1fEXT(uint program, int location, float v0);
        private static GLProgramUniform1fEXT glProgramUniform1fEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1fEXT(uint program, int location, float v0) =>
            glProgramUniform1fEXT.Invoke(program, location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2fEXT(uint program, int location, float v0, float v1);
        private static GLProgramUniform2fEXT glProgramUniform2fEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2fEXT(uint program, int location, float v0, float v1) =>
            glProgramUniform2fEXT.Invoke(program, location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2);
        private static GLProgramUniform3fEXT glProgramUniform3fEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2) =>
            glProgramUniform3fEXT.Invoke(program, location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3);
        private static GLProgramUniform4fEXT glProgramUniform4fEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3) =>
            glProgramUniform4fEXT.Invoke(program, location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1iEXT(uint program, int location, int v0);
        private static GLProgramUniform1iEXT glProgramUniform1iEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1iEXT(uint program, int location, int v0) =>
            glProgramUniform1iEXT.Invoke(program, location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2iEXT(uint program, int location, int v0, int v1);
        private static GLProgramUniform2iEXT glProgramUniform2iEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2iEXT(uint program, int location, int v0, int v1) =>
            glProgramUniform2iEXT.Invoke(program, location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2);
        private static GLProgramUniform3iEXT glProgramUniform3iEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2) =>
            glProgramUniform3iEXT.Invoke(program, location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3);
        private static GLProgramUniform4iEXT glProgramUniform4iEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3) =>
            glProgramUniform4iEXT.Invoke(program, location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1fvEXT(uint program, int location, int count, float[] value);
        private static GLProgramUniform1fvEXT glProgramUniform1fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1fvEXT(uint program, int location, int count, float[] value) =>
            glProgramUniform1fvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2fvEXT(uint program, int location, int count, float[] value);
        private static GLProgramUniform2fvEXT glProgramUniform2fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2fvEXT(uint program, int location, int count, float[] value) =>
            glProgramUniform2fvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3fvEXT(uint program, int location, int count, float[] value);
        private static GLProgramUniform3fvEXT glProgramUniform3fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3fvEXT(uint program, int location, int count, float[] value) =>
            glProgramUniform3fvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4fvEXT(uint program, int location, int count, float[] value);
        private static GLProgramUniform4fvEXT glProgramUniform4fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4fvEXT(uint program, int location, int count, float[] value) =>
            glProgramUniform4fvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1ivEXT(uint program, int location, int count, int[] value);
        private static GLProgramUniform1ivEXT glProgramUniform1ivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1ivEXT(uint program, int location, int count, int[] value) =>
            glProgramUniform1ivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2ivEXT(uint program, int location, int count, int[] value);
        private static GLProgramUniform2ivEXT glProgramUniform2ivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2ivEXT(uint program, int location, int count, int[] value) =>
            glProgramUniform2ivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3ivEXT(uint program, int location, int count, int[] value);
        private static GLProgramUniform3ivEXT glProgramUniform3ivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3ivEXT(uint program, int location, int count, int[] value) =>
            glProgramUniform3ivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4ivEXT(uint program, int location, int count, int[] value);
        private static GLProgramUniform4ivEXT glProgramUniform4ivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4ivEXT(uint program, int location, int count, int[] value) =>
            glProgramUniform4ivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix2fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix2fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix3fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix3fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix4fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix4fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix2x3fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix2x3fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix3x2fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix3x2fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix2x4fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix2x4fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix4x2fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix4x2fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix3x4fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix3x4fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float[] value);
        private static GLProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix4x3fvEXT(uint program, int location, int count, bool transpose, float[] value) =>
            glProgramUniformMatrix4x3fvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureBufferEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer);
        private static GLTextureBufferEXT glTextureBufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureBufferEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer) =>
            glTextureBufferEXT.Invoke(texture, target, internalformat, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexBufferEXT(TextureUnit texunit, TextureTarget target, InternalFormat internalformat, uint buffer);
        private static GLMultiTexBufferEXT glMultiTexBufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexBufferEXT(TextureUnit texunit, TextureTarget target, InternalFormat internalformat, uint buffer) =>
            glMultiTexBufferEXT.Invoke(texunit, target, internalformat, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterIivEXT(uint texture, TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLTextureParameterIivEXT glTextureParameterIivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureParameterIivEXT(uint texture, TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glTextureParameterIivEXT.Invoke(texture, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureParameterIuivEXT(uint texture, TextureTarget target, TextureParameterName pname, uint[] parameters);
        private static GLTextureParameterIuivEXT glTextureParameterIuivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureParameterIuivEXT(uint texture, TextureTarget target, TextureParameterName pname, uint[] parameters) =>
            glTextureParameterIuivEXT.Invoke(texture, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameterIivEXT(uint texture, TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTextureParameterIivEXT glGetTextureParameterIivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetTextureParameterIivEXT(uint texture, TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTextureParameterIivEXT.Invoke(texture, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTextureParameterIuivEXT(uint texture, TextureTarget target, GetTextureParameter pname, out uint parameters);
        private static GLGetTextureParameterIuivEXT glGetTextureParameterIuivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetTextureParameterIuivEXT(uint texture, TextureTarget target, GetTextureParameter pname, out uint parameters) =>
            glGetTextureParameterIuivEXT.Invoke(texture, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLMultiTexParameterIivEXT glMultiTexParameterIivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glMultiTexParameterIivEXT.Invoke(texunit, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] parameters);
        private static GLMultiTexParameterIuivEXT glMultiTexParameterIuivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, uint[] parameters) =>
            glMultiTexParameterIuivEXT.Invoke(texunit, target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetMultiTexParameterIivEXT.Invoke(texunit, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out uint parameters);
        private static GLGetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, out uint parameters) =>
            glGetMultiTexParameterIuivEXT.Invoke(texunit, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1uiEXT(uint program, int location, uint v0);
        private static GLProgramUniform1uiEXT glProgramUniform1uiEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1uiEXT(uint program, int location, uint v0) =>
            glProgramUniform1uiEXT.Invoke(program, location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2uiEXT(uint program, int location, uint v0, uint v1);
        private static GLProgramUniform2uiEXT glProgramUniform2uiEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2uiEXT(uint program, int location, uint v0, uint v1) =>
            glProgramUniform2uiEXT.Invoke(program, location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2);
        private static GLProgramUniform3uiEXT glProgramUniform3uiEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2) =>
            glProgramUniform3uiEXT.Invoke(program, location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3);
        private static GLProgramUniform4uiEXT glProgramUniform4uiEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3) =>
            glProgramUniform4uiEXT.Invoke(program, location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1uivEXT(uint program, int location, int count, uint[] value);
        private static GLProgramUniform1uivEXT glProgramUniform1uivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1uivEXT(uint program, int location, int count, uint[] value) =>
            glProgramUniform1uivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2uivEXT(uint program, int location, int count, uint[] value);
        private static GLProgramUniform2uivEXT glProgramUniform2uivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2uivEXT(uint program, int location, int count, uint[] value) =>
            glProgramUniform2uivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3uivEXT(uint program, int location, int count, uint[] value);
        private static GLProgramUniform3uivEXT glProgramUniform3uivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3uivEXT(uint program, int location, int count, uint[] value) =>
            glProgramUniform3uivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4uivEXT(uint program, int location, int count, uint[] value);
        private static GLProgramUniform4uivEXT glProgramUniform4uivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4uivEXT(uint program, int location, int count, uint[] value) =>
            glProgramUniform4uivEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameters4fvEXT(uint program, ProgramTarget target, uint index, int count, float[] parameters);
        private static GLNamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameters4fvEXT(uint program, ProgramTarget target, uint index, int count, float[] parameters) =>
            glNamedProgramLocalParameters4fvEXT.Invoke(program, target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameterI4iEXT(uint program, ProgramTarget target, uint index, int x, int y, int z, int w);
        private static GLNamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameterI4iEXT(uint program, ProgramTarget target, uint index, int x, int y, int z, int w) =>
            glNamedProgramLocalParameterI4iEXT.Invoke(program, target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameterI4ivEXT(uint program, ProgramTarget target, uint index, int[] parameters);
        private static GLNamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameterI4ivEXT(uint program, ProgramTarget target, uint index, int[] parameters) =>
            glNamedProgramLocalParameterI4ivEXT.Invoke(program, target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParametersI4ivEXT(uint program, ProgramTarget target, uint index, int count, int[] parameters);
        private static GLNamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParametersI4ivEXT(uint program, ProgramTarget target, uint index, int count, int[] parameters) =>
            glNamedProgramLocalParametersI4ivEXT.Invoke(program, target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameterI4uiEXT(uint program, ProgramTarget target, uint index, uint x, uint y, uint z, uint w);
        private static GLNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameterI4uiEXT(uint program, ProgramTarget target, uint index, uint x, uint y, uint z, uint w) =>
            glNamedProgramLocalParameterI4uiEXT.Invoke(program, target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameterI4uivEXT(uint program, ProgramTarget target, uint index, uint[] parameters);
        private static GLNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameterI4uivEXT(uint program, ProgramTarget target, uint index, uint[] parameters) =>
            glNamedProgramLocalParameterI4uivEXT.Invoke(program, target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParametersI4uivEXT(uint program, ProgramTarget target, uint index, int count, uint[] parameters);
        private static GLNamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParametersI4uivEXT(uint program, ProgramTarget target, uint index, int count, uint[] parameters) =>
            glNamedProgramLocalParametersI4uivEXT.Invoke(program, target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedProgramLocalParameterIivEXT(uint program, ProgramTarget target, uint index, out int parameters);
        private static GLGetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedProgramLocalParameterIivEXT(uint program, ProgramTarget target, uint index, out int parameters) =>
            glGetNamedProgramLocalParameterIivEXT.Invoke(program, target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedProgramLocalParameterIuivEXT(uint program, ProgramTarget target, uint index, out uint parameters);
        private static GLGetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedProgramLocalParameterIuivEXT(uint program, ProgramTarget target, uint index, out uint parameters) =>
            glGetNamedProgramLocalParameterIuivEXT.Invoke(program, target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableClientStateiEXT(EnableCap array, uint index);
        private static GLEnableClientStateiEXT glEnableClientStateiEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void EnableClientStateiEXT(EnableCap array, uint index) =>
            glEnableClientStateiEXT.Invoke(array, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableClientStateiEXT(EnableCap array, uint index);
        private static GLDisableClientStateiEXT glDisableClientStateiEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void DisableClientStateiEXT(EnableCap array, uint index) =>
            glDisableClientStateiEXT.Invoke(array, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFloati_vEXT(GetPName pname, uint index, out float parameters);
        private static GLGetFloati_vEXT glGetFloati_vEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetFloati_vEXT(GetPName pname, uint index, out float parameters) =>
            glGetFloati_vEXT.Invoke(pname, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetDoublei_vEXT(GetPName pname, uint index, out double parameters);
        private static GLGetDoublei_vEXT glGetDoublei_vEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetDoublei_vEXT(GetPName pname, uint index, out double parameters) =>
            glGetDoublei_vEXT.Invoke(pname, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPointeri_vEXT(int pname, uint index, out nint parameters);
        private static GLGetPointeri_vEXT glGetPointeri_vEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetPointeri_vEXT(int pname, uint index, out nint parameters) =>
            glGetPointeri_vEXT.Invoke(pname, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramStringEXT(uint program, ProgramTarget target, ProgramFormat format, int len, nint str);
        private static GLNamedProgramStringEXT glNamedProgramStringEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramStringEXT(uint program, ProgramTarget target, ProgramFormat format, int len, nint str) =>
            glNamedProgramStringEXT.Invoke(program, target, format, len, str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameter4dEXT(uint program, ProgramTarget target, uint index, double x, double y, double z, double w);
        private static GLNamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameter4dEXT(uint program, ProgramTarget target, uint index, double x, double y, double z, double w) =>
            glNamedProgramLocalParameter4dEXT.Invoke(program, target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameter4dvEXT(uint program, ProgramTarget target, uint index, double[] parameters);
        private static GLNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameter4dvEXT(uint program, ProgramTarget target, uint index, double[] parameters) =>
            glNamedProgramLocalParameter4dvEXT.Invoke(program, target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameter4fEXT(uint program, ProgramTarget target, uint index, float x, float y, float z, float w);
        private static GLNamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameter4fEXT(uint program, ProgramTarget target, uint index, float x, float y, float z, float w) =>
            glNamedProgramLocalParameter4fEXT.Invoke(program, target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedProgramLocalParameter4fvEXT(uint program, ProgramTarget target, uint index, float[] parameters);
        private static GLNamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedProgramLocalParameter4fvEXT(uint program, ProgramTarget target, uint index, float[] parameters) =>
            glNamedProgramLocalParameter4fvEXT.Invoke(program, target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedProgramLocalParameterdvEXT(uint program, ProgramTarget target, uint index, out double parameters);
        private static GLGetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedProgramLocalParameterdvEXT(uint program, ProgramTarget target, uint index, out double parameters) =>
            glGetNamedProgramLocalParameterdvEXT.Invoke(program, target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedProgramLocalParameterfvEXT(uint program, ProgramTarget target, uint index, out float parameters);
        private static GLGetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedProgramLocalParameterfvEXT(uint program, ProgramTarget target, uint index, out float parameters) =>
            glGetNamedProgramLocalParameterfvEXT.Invoke(program, target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedProgramivEXT(uint program, ProgramTarget target, ProgramPropertyARB pname, out int parameters);
        private static GLGetNamedProgramivEXT glGetNamedProgramivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedProgramivEXT(uint program, ProgramTarget target, ProgramPropertyARB pname, out int parameters) =>
            glGetNamedProgramivEXT.Invoke(program, target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedProgramStringEXT(uint program, ProgramTarget target, ProgramStringProperty pname, out nint str);
        private static GLGetNamedProgramStringEXT glGetNamedProgramStringEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedProgramStringEXT(uint program, ProgramTarget target, ProgramStringProperty pname, out nint str) =>
            glGetNamedProgramStringEXT.Invoke(program, target, pname, out str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedRenderbufferStorageEXT(uint renderbuffer, InternalFormat internalformat, int width, int height);
        private static GLNamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedRenderbufferStorageEXT(uint renderbuffer, InternalFormat internalformat, int width, int height) =>
            glNamedRenderbufferStorageEXT.Invoke(renderbuffer, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedRenderbufferParameterivEXT(uint renderbuffer, RenderbufferParameterName pname, out int parameters);
        private static GLGetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedRenderbufferParameterivEXT(uint renderbuffer, RenderbufferParameterName pname, out int parameters) =>
            glGetNamedRenderbufferParameterivEXT.Invoke(renderbuffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height);
        private static GLNamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height) =>
            glNamedRenderbufferStorageMultisampleEXT.Invoke(renderbuffer, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height);
        private static GLNamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height) =>
            glNamedRenderbufferStorageMultisampleCoverageEXT.Invoke(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate FramebufferStatus GLCheckNamedFramebufferStatusEXT(uint framebuffer, FramebufferTarget target);
        private static GLCheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static FramebufferStatus CheckNamedFramebufferStatusEXT(uint framebuffer, FramebufferTarget target) =>
            glCheckNamedFramebufferStatusEXT.Invoke(framebuffer, target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTexture1DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        private static GLNamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferTexture1DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level) =>
            glNamedFramebufferTexture1DEXT.Invoke(framebuffer, attachment, textarget, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTexture2DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        private static GLNamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferTexture2DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level) =>
            glNamedFramebufferTexture2DEXT.Invoke(framebuffer, attachment, textarget, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTexture3DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);
        private static GLNamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferTexture3DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset) =>
            glNamedFramebufferTexture3DEXT.Invoke(framebuffer, attachment, textarget, texture, level, zoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferRenderbufferEXT(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        private static GLNamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferRenderbufferEXT(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer) =>
            glNamedFramebufferRenderbufferEXT.Invoke(framebuffer, attachment, renderbuffertarget, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters);
        private static GLGetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters) =>
            glGetNamedFramebufferAttachmentParameterivEXT.Invoke(framebuffer, attachment, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenerateTextureMipmapEXT(uint texture, TextureTarget target);
        private static GLGenerateTextureMipmapEXT glGenerateTextureMipmapEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GenerateTextureMipmapEXT(uint texture, TextureTarget target) =>
            glGenerateTextureMipmapEXT.Invoke(texture, target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenerateMultiTexMipmapEXT(TextureUnit texunit, TextureTarget target);
        private static GLGenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GenerateMultiTexMipmapEXT(TextureUnit texunit, TextureTarget target) =>
            glGenerateMultiTexMipmapEXT.Invoke(texunit, target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferDrawBufferEXT(uint framebuffer, DrawBufferMode mode);
        private static GLFramebufferDrawBufferEXT glFramebufferDrawBufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void FramebufferDrawBufferEXT(uint framebuffer, DrawBufferMode mode) =>
            glFramebufferDrawBufferEXT.Invoke(framebuffer, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferDrawBuffersEXT(uint framebuffer, int n, DrawBufferMode[] bufs);
        private static GLFramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void FramebufferDrawBuffersEXT(uint framebuffer, int n, DrawBufferMode[] bufs) =>
            glFramebufferDrawBuffersEXT.Invoke(framebuffer, n, bufs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferReadBufferEXT(uint framebuffer, ReadBufferMode mode);
        private static GLFramebufferReadBufferEXT glFramebufferReadBufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void FramebufferReadBufferEXT(uint framebuffer, ReadBufferMode mode) =>
            glFramebufferReadBufferEXT.Invoke(framebuffer, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFramebufferParameterivEXT(uint framebuffer, GetFramebufferParameter pname, out int parameters);
        private static GLGetFramebufferParameterivEXT glGetFramebufferParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetFramebufferParameterivEXT(uint framebuffer, GetFramebufferParameter pname, out int parameters) =>
            glGetFramebufferParameterivEXT.Invoke(framebuffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);
        private static GLNamedCopyBufferSubDataEXT glNamedCopyBufferSubDataEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size) =>
            glNamedCopyBufferSubDataEXT.Invoke(readBuffer, writeBuffer, readOffset, writeOffset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTextureEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level);
        private static GLNamedFramebufferTextureEXT glNamedFramebufferTextureEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferTextureEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level) =>
            glNamedFramebufferTextureEXT.Invoke(framebuffer, attachment, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTextureLayerEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer);
        private static GLNamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferTextureLayerEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer) =>
            glNamedFramebufferTextureLayerEXT.Invoke(framebuffer, attachment, texture, level, layer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferTextureFaceEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);
        private static GLNamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferTextureFaceEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face) =>
            glNamedFramebufferTextureFaceEXT.Invoke(framebuffer, attachment, texture, level, face);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureRenderbufferEXT(uint texture, TextureTarget target, uint renderbuffer);
        private static GLTextureRenderbufferEXT glTextureRenderbufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureRenderbufferEXT(uint texture, TextureTarget target, uint renderbuffer) =>
            glTextureRenderbufferEXT.Invoke(texture, target, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexRenderbufferEXT(TextureUnit texunit, TextureTarget target, uint renderbuffer);
        private static GLMultiTexRenderbufferEXT glMultiTexRenderbufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void MultiTexRenderbufferEXT(TextureUnit texunit, TextureTarget target, uint renderbuffer) =>
            glMultiTexRenderbufferEXT.Invoke(texunit, target, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, VertexPointerType type, int stride, nint offset);
        private static GLVertexArrayVertexOffsetEXT glVertexArrayVertexOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, VertexPointerType type, int stride, nint offset) =>
            glVertexArrayVertexOffsetEXT.Invoke(vaobj, buffer, size, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, nint offset);
        private static GLVertexArrayColorOffsetEXT glVertexArrayColorOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, nint offset) =>
            glVertexArrayColorOffsetEXT.Invoke(vaobj, buffer, size, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, nint offset);
        private static GLVertexArrayEdgeFlagOffsetEXT glVertexArrayEdgeFlagOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, nint offset) =>
            glVertexArrayEdgeFlagOffsetEXT.Invoke(vaobj, buffer, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, IndexPointerType type, int stride, nint offset);
        private static GLVertexArrayIndexOffsetEXT glVertexArrayIndexOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayIndexOffsetEXT(uint vaobj, uint buffer, IndexPointerType type, int stride, nint offset) =>
            glVertexArrayIndexOffsetEXT.Invoke(vaobj, buffer, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, NormalPointerType type, int stride, nint offset);
        private static GLVertexArrayNormalOffsetEXT glVertexArrayNormalOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayNormalOffsetEXT(uint vaobj, uint buffer, NormalPointerType type, int stride, nint offset) =>
            glVertexArrayNormalOffsetEXT.Invoke(vaobj, buffer, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, TexCoordPointerType type, int stride, nint offset);
        private static GLVertexArrayTexCoordOffsetEXT glVertexArrayTexCoordOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, TexCoordPointerType type, int stride, nint offset) =>
            glVertexArrayTexCoordOffsetEXT.Invoke(vaobj, buffer, size, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, int texunit, int size, TexCoordPointerType type, int stride, nint offset);
        private static GLVertexArrayMultiTexCoordOffsetEXT glVertexArrayMultiTexCoordOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, int texunit, int size, TexCoordPointerType type, int stride, nint offset) =>
            glVertexArrayMultiTexCoordOffsetEXT.Invoke(vaobj, buffer, texunit, size, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, FogCoordinatePointerType type, int stride, nint offset);
        private static GLVertexArrayFogCoordOffsetEXT glVertexArrayFogCoordOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, FogCoordinatePointerType type, int stride, nint offset) =>
            glVertexArrayFogCoordOffsetEXT.Invoke(vaobj, buffer, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, nint offset);
        private static GLVertexArraySecondaryColorOffsetEXT glVertexArraySecondaryColorOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, nint offset) =>
            glVertexArraySecondaryColorOffsetEXT.Invoke(vaobj, buffer, size, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint offset);
        private static GLVertexArrayVertexAttribOffsetEXT glVertexArrayVertexAttribOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint offset) =>
            glVertexArrayVertexAttribOffsetEXT.Invoke(vaobj, buffer, index, size, type, normalized, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribType type, int stride, nint offset);
        private static GLVertexArrayVertexAttribIOffsetEXT glVertexArrayVertexAttribIOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribType type, int stride, nint offset) =>
            glVertexArrayVertexAttribIOffsetEXT.Invoke(vaobj, buffer, index, size, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableVertexArrayEXT(uint vaobj, EnableCap array);
        private static GLEnableVertexArrayEXT glEnableVertexArrayEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void EnableVertexArrayEXT(uint vaobj, EnableCap array) =>
            glEnableVertexArrayEXT.Invoke(vaobj, array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableVertexArrayEXT(uint vaobj, EnableCap array);
        private static GLDisableVertexArrayEXT glDisableVertexArrayEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void DisableVertexArrayEXT(uint vaobj, EnableCap array) =>
            glDisableVertexArrayEXT.Invoke(vaobj, array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableVertexArrayAttribEXT(uint vaobj, uint index);
        private static GLEnableVertexArrayAttribEXT glEnableVertexArrayAttribEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void EnableVertexArrayAttribEXT(uint vaobj, uint index) =>
            glEnableVertexArrayAttribEXT.Invoke(vaobj, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableVertexArrayAttribEXT(uint vaobj, uint index);
        private static GLDisableVertexArrayAttribEXT glDisableVertexArrayAttribEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void DisableVertexArrayAttribEXT(uint vaobj, uint index) =>
            glDisableVertexArrayAttribEXT.Invoke(vaobj, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexArrayIntegervEXT(uint vaobj, VertexArrayPName pname, out int param);
        private static GLGetVertexArrayIntegervEXT glGetVertexArrayIntegervEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetVertexArrayIntegervEXT(uint vaobj, VertexArrayPName pname, out int param) =>
            glGetVertexArrayIntegervEXT.Invoke(vaobj, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexArrayPointervEXT(uint vaobj, VertexArrayPName pname, out nint param);
        private static GLGetVertexArrayPointervEXT glGetVertexArrayPointervEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetVertexArrayPointervEXT(uint vaobj, VertexArrayPName pname, out nint param) =>
            glGetVertexArrayPointervEXT.Invoke(vaobj, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, VertexArrayPName pname, out int param);
        private static GLGetVertexArrayIntegeri_vEXT glGetVertexArrayIntegeri_vEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetVertexArrayIntegeri_vEXT(uint vaobj, uint index, VertexArrayPName pname, out int param) =>
            glGetVertexArrayIntegeri_vEXT.Invoke(vaobj, index, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexArrayPointeri_vEXT(uint vaobj, uint index, VertexArrayPName pname, out nint param);
        private static GLGetVertexArrayPointeri_vEXT glGetVertexArrayPointeri_vEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetVertexArrayPointeri_vEXT(uint vaobj, uint index, VertexArrayPName pname, out nint param) =>
            glGetVertexArrayPointeri_vEXT.Invoke(vaobj, index, pname, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapNamedBufferRangeEXT(uint buffer, nint offset, nint length, MapBufferAccessMask access);
        private static GLMapNamedBufferRangeEXT glMapNamedBufferRangeEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static nint MapNamedBufferRangeEXT(uint buffer, nint offset, nint length, MapBufferAccessMask access) =>
            glMapNamedBufferRangeEXT.Invoke(buffer, offset, length, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushMappedNamedBufferRangeEXT(uint buffer, nint offset, nint length);
        private static GLFlushMappedNamedBufferRangeEXT glFlushMappedNamedBufferRangeEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void FlushMappedNamedBufferRangeEXT(uint buffer, nint offset, nint length) =>
            glFlushMappedNamedBufferRangeEXT.Invoke(buffer, offset, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferStorageEXT(uint buffer, nint size, nint data, BufferStorageMask flags);
        private static GLNamedBufferStorageEXT glNamedBufferStorageEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedBufferStorageEXT(uint buffer, nint size, nint data, BufferStorageMask flags) =>
            glNamedBufferStorageEXT.Invoke(buffer, size, data, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedBufferDataEXT(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data);
        private static GLClearNamedBufferDataEXT glClearNamedBufferDataEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ClearNamedBufferDataEXT(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, nint data) =>
            glClearNamedBufferDataEXT.Invoke(buffer, internalformat, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearNamedBufferSubDataEXT(uint buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, nint data);
        private static GLClearNamedBufferSubDataEXT glClearNamedBufferSubDataEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ClearNamedBufferSubDataEXT(uint buffer, SizedInternalFormat internalformat, nint offset, nint size, PixelFormat format, PixelType type, nint data) =>
            glClearNamedBufferSubDataEXT.Invoke(buffer, internalformat, offset, size, format, type, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferParameteriEXT(uint framebuffer, FramebufferParameterName pname, int param);
        private static GLNamedFramebufferParameteriEXT glNamedFramebufferParameteriEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void NamedFramebufferParameteriEXT(uint framebuffer, FramebufferParameterName pname, int param) =>
            glNamedFramebufferParameteriEXT.Invoke(framebuffer, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedFramebufferParameterivEXT(uint framebuffer, GetFramebufferParameter pname, out int parameters);
        private static GLGetNamedFramebufferParameterivEXT glGetNamedFramebufferParameterivEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void GetNamedFramebufferParameterivEXT(uint framebuffer, GetFramebufferParameter pname, out int parameters) =>
            glGetNamedFramebufferParameterivEXT.Invoke(framebuffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1dEXT(uint program, int location, double x);
        private static GLProgramUniform1dEXT glProgramUniform1dEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1dEXT(uint program, int location, double x) =>
            glProgramUniform1dEXT.Invoke(program, location, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2dEXT(uint program, int location, double x, double y);
        private static GLProgramUniform2dEXT glProgramUniform2dEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2dEXT(uint program, int location, double x, double y) =>
            glProgramUniform2dEXT.Invoke(program, location, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3dEXT(uint program, int location, double x, double y, double z);
        private static GLProgramUniform3dEXT glProgramUniform3dEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3dEXT(uint program, int location, double x, double y, double z) =>
            glProgramUniform3dEXT.Invoke(program, location, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w);
        private static GLProgramUniform4dEXT glProgramUniform4dEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w) =>
            glProgramUniform4dEXT.Invoke(program, location, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform1dvEXT(uint program, int location, int count, double[] value);
        private static GLProgramUniform1dvEXT glProgramUniform1dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform1dvEXT(uint program, int location, int count, double[] value) =>
            glProgramUniform1dvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform2dvEXT(uint program, int location, int count, double[] value);
        private static GLProgramUniform2dvEXT glProgramUniform2dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform2dvEXT(uint program, int location, int count, double[] value) =>
            glProgramUniform2dvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform3dvEXT(uint program, int location, int count, double[] value);
        private static GLProgramUniform3dvEXT glProgramUniform3dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform3dvEXT(uint program, int location, int count, double[] value) =>
            glProgramUniform3dvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniform4dvEXT(uint program, int location, int count, double[] value);
        private static GLProgramUniform4dvEXT glProgramUniform4dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniform4dvEXT(uint program, int location, int count, double[] value) =>
            glProgramUniform4dvEXT.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix2dvEXT glProgramUniformMatrix2dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix2dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix2dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix3dvEXT glProgramUniformMatrix3dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix3dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix3dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix4dvEXT glProgramUniformMatrix4dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix4dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix4dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix2x3dvEXT glProgramUniformMatrix2x3dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix2x3dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix2x3dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix2x4dvEXT glProgramUniformMatrix2x4dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix2x4dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix2x4dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix3x2dvEXT glProgramUniformMatrix3x2dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix3x2dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix3x2dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix3x4dvEXT glProgramUniformMatrix3x4dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix3x4dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix3x4dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix4x2dvEXT glProgramUniformMatrix4x2dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix4x2dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix4x2dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double[] value);
        private static GLProgramUniformMatrix4x3dvEXT glProgramUniformMatrix4x3dvEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void ProgramUniformMatrix4x3dvEXT(uint program, int location, int count, bool transpose, double[] value) =>
            glProgramUniformMatrix4x3dvEXT.Invoke(program, location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureBufferRangeEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size);
        private static GLTextureBufferRangeEXT glTextureBufferRangeEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureBufferRangeEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size) =>
            glTextureBufferRangeEXT.Invoke(texture, target, internalformat, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage1DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width);
        private static GLTextureStorage1DEXT glTextureStorage1DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureStorage1DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width) =>
            glTextureStorage1DEXT.Invoke(texture, target, levels, internalformat, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage2DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width, int height);
        private static GLTextureStorage2DEXT glTextureStorage2DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureStorage2DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width, int height) =>
            glTextureStorage2DEXT.Invoke(texture, target, levels, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage3DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width, int height, int depth);
        private static GLTextureStorage3DEXT glTextureStorage3DEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureStorage3DEXT(uint texture, int target, int levels, SizedInternalFormat internalformat, int width, int height, int depth) =>
            glTextureStorage3DEXT.Invoke(texture, target, levels, internalformat, width, height, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage2DMultisampleEXT(uint texture, TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations);
        private static GLTextureStorage2DMultisampleEXT glTextureStorage2DMultisampleEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureStorage2DMultisampleEXT(uint texture, TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, bool fixedsamplelocations) =>
            glTextureStorage2DMultisampleEXT.Invoke(texture, target, samples, internalformat, width, height, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorage3DMultisampleEXT(uint texture, int target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static GLTextureStorage3DMultisampleEXT glTextureStorage3DMultisampleEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TextureStorage3DMultisampleEXT(uint texture, int target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations) =>
            glTextureStorage3DMultisampleEXT.Invoke(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride);
        private static GLVertexArrayBindVertexBufferEXT glVertexArrayBindVertexBufferEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride) =>
            glVertexArrayBindVertexBufferEXT.Invoke(vaobj, bindingindex, buffer, offset, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset);
        private static GLVertexArrayVertexAttribFormatEXT glVertexArrayVertexAttribFormatEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribType type, bool normalized, uint relativeoffset) =>
            glVertexArrayVertexAttribFormatEXT.Invoke(vaobj, attribindex, size, type, normalized, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset);
        private static GLVertexArrayVertexAttribIFormatEXT glVertexArrayVertexAttribIFormatEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset) =>
            glVertexArrayVertexAttribIFormatEXT.Invoke(vaobj, attribindex, size, type, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset);
        private static GLVertexArrayVertexAttribLFormatEXT glVertexArrayVertexAttribLFormatEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset) =>
            glVertexArrayVertexAttribLFormatEXT.Invoke(vaobj, attribindex, size, type, relativeoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex);
        private static GLVertexArrayVertexAttribBindingEXT glVertexArrayVertexAttribBindingEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex) =>
            glVertexArrayVertexAttribBindingEXT.Invoke(vaobj, attribindex, bindingindex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor);
        private static GLVertexArrayVertexBindingDivisorEXT glVertexArrayVertexBindingDivisorEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor) =>
            glVertexArrayVertexBindingDivisorEXT.Invoke(vaobj, bindingindex, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribLType type, int stride, nint offset);
        private static GLVertexArrayVertexAttribLOffsetEXT glVertexArrayVertexAttribLOffsetEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribLType type, int stride, nint offset) =>
            glVertexArrayVertexAttribLOffsetEXT.Invoke(vaobj, buffer, index, size, type, stride, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        private static GLTexturePageCommitmentEXT glTexturePageCommitmentEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void TexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit) =>
            glTexturePageCommitmentEXT.Invoke(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor);
        private static GLVertexArrayVertexAttribDivisorEXT glVertexArrayVertexAttribDivisorEXT;


        [GLExtension("GL_EXT_direct_state_access")]
        public static void VertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor) =>
            glVertexArrayVertexAttribDivisorEXT.Invoke(vaobj, index, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDiscardFramebufferEXT(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments);
        private static GLDiscardFramebufferEXT glDiscardFramebufferEXT;


        [GLExtension("GL_EXT_discard_framebuffer")]
        public static void DiscardFramebufferEXT(FramebufferTarget target, int numAttachments, InvalidateFramebufferAttachment[] attachments) =>
            glDiscardFramebufferEXT.Invoke(target, numAttachments, attachments);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenQueriesEXT(int n, out uint ids);
        private static GLGenQueriesEXT glGenQueriesEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void GenQueriesEXT(int n, out uint ids) =>
            glGenQueriesEXT.Invoke(n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteQueriesEXT(int n, uint[] ids);
        private static GLDeleteQueriesEXT glDeleteQueriesEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void DeleteQueriesEXT(int n, uint[] ids) =>
            glDeleteQueriesEXT.Invoke(n, ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsQueryEXT(uint id);
        private static GLIsQueryEXT glIsQueryEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static bool IsQueryEXT(uint id) =>
            glIsQueryEXT.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginQueryEXT(QueryTarget target, uint id);
        private static GLBeginQueryEXT glBeginQueryEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void BeginQueryEXT(QueryTarget target, uint id) =>
            glBeginQueryEXT.Invoke(target, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndQueryEXT(QueryTarget target);
        private static GLEndQueryEXT glEndQueryEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void EndQueryEXT(QueryTarget target) =>
            glEndQueryEXT.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLQueryCounterEXT(uint id, QueryCounterTarget target);
        private static GLQueryCounterEXT glQueryCounterEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void QueryCounterEXT(uint id, QueryCounterTarget target) =>
            glQueryCounterEXT.Invoke(id, target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryivEXT(QueryTarget target, QueryParameterName pname, out int parameters);
        private static GLGetQueryivEXT glGetQueryivEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void GetQueryivEXT(QueryTarget target, QueryParameterName pname, out int parameters) =>
            glGetQueryivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectivEXT(uint id, QueryObjectParameterName pname, out int parameters);
        private static GLGetQueryObjectivEXT glGetQueryObjectivEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void GetQueryObjectivEXT(uint id, QueryObjectParameterName pname, out int parameters) =>
            glGetQueryObjectivEXT.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectuivEXT(uint id, QueryObjectParameterName pname, out uint parameters);
        private static GLGetQueryObjectuivEXT glGetQueryObjectuivEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void GetQueryObjectuivEXT(uint id, QueryObjectParameterName pname, out uint parameters) =>
            glGetQueryObjectuivEXT.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjecti64vEXT(uint id, QueryObjectParameterName pname, out long parameters);
        private static GLGetQueryObjecti64vEXT glGetQueryObjecti64vEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void GetQueryObjecti64vEXT(uint id, QueryObjectParameterName pname, out long parameters) =>
            glGetQueryObjecti64vEXT.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectui64vEXT(uint id, QueryObjectParameterName pname, out ulong parameters);
        private static GLGetQueryObjectui64vEXT glGetQueryObjectui64vEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void GetQueryObjectui64vEXT(uint id, QueryObjectParameterName pname, out ulong parameters) =>
            glGetQueryObjectui64vEXT.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInteger64vEXT(GetPName pname, out long data);
        private static GLGetInteger64vEXT glGetInteger64vEXT;


        [GLExtension("GL_EXT_disjoint_timer_query")]
        public static void GetInteger64vEXT(GetPName pname, out long data) =>
            glGetInteger64vEXT.Invoke(pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawBuffersEXT(int n, int[] bufs);
        private static GLDrawBuffersEXT glDrawBuffersEXT;


        [GLExtension("GL_EXT_draw_buffers")]
        public static void DrawBuffersEXT(int n, int[] bufs) =>
            glDrawBuffersEXT.Invoke(n, bufs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorMaskIndexedEXT(uint index, bool r, bool g, bool b, bool a);
        private static GLColorMaskIndexedEXT glColorMaskIndexedEXT;


        [GLExtension("GL_EXT_draw_buffers2")]
        public static void ColorMaskIndexedEXT(uint index, bool r, bool g, bool b, bool a) =>
            glColorMaskIndexedEXT.Invoke(index, r, g, b, a);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableiEXT(EnableCap target, uint index);
        private static GLEnableiEXT glEnableiEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static void EnableiEXT(EnableCap target, uint index) =>
            glEnableiEXT.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableiEXT(EnableCap target, uint index);
        private static GLDisableiEXT glDisableiEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static void DisableiEXT(EnableCap target, uint index) =>
            glDisableiEXT.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationiEXT(uint buf, BlendEquationModeEXT mode);
        private static GLBlendEquationiEXT glBlendEquationiEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static void BlendEquationiEXT(uint buf, BlendEquationModeEXT mode) =>
            glBlendEquationiEXT.Invoke(buf, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparateiEXT(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparateiEXT glBlendEquationSeparateiEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static void BlendEquationSeparateiEXT(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparateiEXT.Invoke(buf, modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFunciEXT(uint buf, BlendingFactor src, BlendingFactor dst);
        private static GLBlendFunciEXT glBlendFunciEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static void BlendFunciEXT(uint buf, BlendingFactor src, BlendingFactor dst) =>
            glBlendFunciEXT.Invoke(buf, src, dst);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparateiEXT(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
        private static GLBlendFuncSeparateiEXT glBlendFuncSeparateiEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static void BlendFuncSeparateiEXT(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) =>
            glBlendFuncSeparateiEXT.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorMaskiEXT(uint index, bool r, bool g, bool b, bool a);
        private static GLColorMaskiEXT glColorMaskiEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static void ColorMaskiEXT(uint index, bool r, bool g, bool b, bool a) =>
            glColorMaskiEXT.Invoke(index, r, g, b, a);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsEnablediEXT(EnableCap target, uint index);
        private static GLIsEnablediEXT glIsEnablediEXT;


        [GLExtension("GL_EXT_draw_buffers_indexed")]
        public static bool IsEnablediEXT(EnableCap target, uint index) =>
            glIsEnablediEXT.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsBaseVertexEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int basevertex);
        private static GLDrawElementsBaseVertexEXT glDrawElementsBaseVertexEXT;


        [GLExtension("GL_EXT_draw_elements_base_vertex")]
        public static void DrawElementsBaseVertexEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int basevertex) =>
            glDrawElementsBaseVertexEXT.Invoke(mode, count, type, indices, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawRangeElementsBaseVertexEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices, int basevertex);
        private static GLDrawRangeElementsBaseVertexEXT glDrawRangeElementsBaseVertexEXT;


        [GLExtension("GL_EXT_draw_elements_base_vertex")]
        public static void DrawRangeElementsBaseVertexEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices, int basevertex) =>
            glDrawRangeElementsBaseVertexEXT.Invoke(mode, start, end, count, type, indices, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedBaseVertexEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex);
        private static GLDrawElementsInstancedBaseVertexEXT glDrawElementsInstancedBaseVertexEXT;


        [GLExtension("GL_EXT_draw_elements_base_vertex")]
        public static void DrawElementsInstancedBaseVertexEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex) =>
            glDrawElementsInstancedBaseVertexEXT.Invoke(mode, count, type, indices, instancecount, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsBaseVertexEXT(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int drawcount, int[] basevertex);
        private static GLMultiDrawElementsBaseVertexEXT glMultiDrawElementsBaseVertexEXT;


        [GLExtension("GL_EXT_draw_elements_base_vertex")]
        public static void MultiDrawElementsBaseVertexEXT(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int drawcount, int[] basevertex) =>
            glMultiDrawElementsBaseVertexEXT.Invoke(mode, count, type, indices, drawcount, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysInstancedEXT(PrimitiveType mode, int start, int count, int primcount);
        private static GLDrawArraysInstancedEXT glDrawArraysInstancedEXT;


        [GLExtension("GL_EXT_draw_instanced")]
        public static void DrawArraysInstancedEXT(PrimitiveType mode, int start, int count, int primcount) =>
            glDrawArraysInstancedEXT.Invoke(mode, start, count, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount);
        private static GLDrawElementsInstancedEXT glDrawElementsInstancedEXT;


        [GLExtension("GL_EXT_draw_instanced")]
        public static void DrawElementsInstancedEXT(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount) =>
            glDrawElementsInstancedEXT.Invoke(mode, count, type, indices, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawRangeElementsEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices);
        private static GLDrawRangeElementsEXT glDrawRangeElementsEXT;


        [GLExtension("GL_EXT_draw_range_elements")]
        public static void DrawRangeElementsEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices) =>
            glDrawRangeElementsEXT.Invoke(mode, start, end, count, type, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTransformFeedbackEXT(PrimitiveType mode, uint id);
        private static GLDrawTransformFeedbackEXT glDrawTransformFeedbackEXT;


        [GLExtension("GL_EXT_draw_transform_feedback")]
        public static void DrawTransformFeedbackEXT(PrimitiveType mode, uint id) =>
            glDrawTransformFeedbackEXT.Invoke(mode, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTransformFeedbackInstancedEXT(PrimitiveType mode, uint id, int instancecount);
        private static GLDrawTransformFeedbackInstancedEXT glDrawTransformFeedbackInstancedEXT;


        [GLExtension("GL_EXT_draw_transform_feedback")]
        public static void DrawTransformFeedbackInstancedEXT(PrimitiveType mode, uint id, int instancecount) =>
            glDrawTransformFeedbackInstancedEXT.Invoke(mode, id, instancecount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferStorageExternalEXT(int target, nint offset, nint size, nint clientBuffer, BufferStorageMask flags);
        private static GLBufferStorageExternalEXT glBufferStorageExternalEXT;


        [GLExtension("GL_EXT_external_buffer")]
        public static void BufferStorageExternalEXT(int target, nint offset, nint size, nint clientBuffer, BufferStorageMask flags) =>
            glBufferStorageExternalEXT.Invoke(target, offset, size, clientBuffer, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferStorageExternalEXT(uint buffer, nint offset, nint size, nint clientBuffer, BufferStorageMask flags);
        private static GLNamedBufferStorageExternalEXT glNamedBufferStorageExternalEXT;


        [GLExtension("GL_EXT_external_buffer")]
        public static void NamedBufferStorageExternalEXT(uint buffer, nint offset, nint size, nint clientBuffer, BufferStorageMask flags) =>
            glNamedBufferStorageExternalEXT.Invoke(buffer, offset, size, clientBuffer, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordfEXT(float coord);
        private static GLFogCoordfEXT glFogCoordfEXT;


        [GLExtension("GL_EXT_fog_coord")]
        public static void FogCoordfEXT(float coord) =>
            glFogCoordfEXT.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordfvEXT(float[] coord);
        private static GLFogCoordfvEXT glFogCoordfvEXT;


        [GLExtension("GL_EXT_fog_coord")]
        public static void FogCoordfvEXT(float[] coord) =>
            glFogCoordfvEXT.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoorddEXT(double coord);
        private static GLFogCoorddEXT glFogCoorddEXT;


        [GLExtension("GL_EXT_fog_coord")]
        public static void FogCoorddEXT(double coord) =>
            glFogCoorddEXT.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoorddvEXT(double[] coord);
        private static GLFogCoorddvEXT glFogCoorddvEXT;


        [GLExtension("GL_EXT_fog_coord")]
        public static void FogCoorddvEXT(double[] coord) =>
            glFogCoorddvEXT.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordPointerEXT(FogPointerTypeEXT type, int stride, nint pointer);
        private static GLFogCoordPointerEXT glFogCoordPointerEXT;


        [GLExtension("GL_EXT_fog_coord")]
        public static void FogCoordPointerEXT(FogPointerTypeEXT type, int stride, nint pointer) =>
            glFogCoordPointerEXT.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFragmentShadingRatesEXT(int samples, int maxCount, out int count, out ShadingRate shadingRates);
        private static GLGetFragmentShadingRatesEXT glGetFragmentShadingRatesEXT;


        [GLExtension("GL_EXT_fragment_shading_rate")]
        public static void GetFragmentShadingRatesEXT(int samples, int maxCount, out int count, out ShadingRate shadingRates) =>
            glGetFragmentShadingRatesEXT.Invoke(samples, maxCount, out count, out shadingRates);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadingRateEXT(ShadingRate rate);
        private static GLShadingRateEXT glShadingRateEXT;


        [GLExtension("GL_EXT_fragment_shading_rate")]
        public static void ShadingRateEXT(ShadingRate rate) =>
            glShadingRateEXT.Invoke(rate);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadingRateCombinerOpsEXT(ShadingRateCombinerOp combinerOp0, ShadingRateCombinerOp combinerOp1);
        private static GLShadingRateCombinerOpsEXT glShadingRateCombinerOpsEXT;


        [GLExtension("GL_EXT_fragment_shading_rate")]
        public static void ShadingRateCombinerOpsEXT(ShadingRateCombinerOp combinerOp0, ShadingRateCombinerOp combinerOp1) =>
            glShadingRateCombinerOpsEXT.Invoke(combinerOp0, combinerOp1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferShadingRateEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int baseLayer, int numLayers, int texelWidth, int texelHeight);
        private static GLFramebufferShadingRateEXT glFramebufferShadingRateEXT;


        [GLExtension("GL_EXT_fragment_shading_rate")]
        public static void FramebufferShadingRateEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int baseLayer, int numLayers, int texelWidth, int texelHeight) =>
            glFramebufferShadingRateEXT.Invoke(target, attachment, texture, baseLayer, numLayers, texelWidth, texelHeight);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        private static GLBlitFramebufferEXT glBlitFramebufferEXT;


        [GLExtension("GL_EXT_framebuffer_blit")]
        public static void BlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter) =>
            glBlitFramebufferEXT.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisampleEXT(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT;


        [GLExtension("GL_EXT_framebuffer_multisample")]
        public static void RenderbufferStorageMultisampleEXT(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisampleEXT.Invoke(target, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsRenderbufferEXT(uint renderbuffer);
        private static GLIsRenderbufferEXT glIsRenderbufferEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static bool IsRenderbufferEXT(uint renderbuffer) =>
            glIsRenderbufferEXT.Invoke(renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindRenderbufferEXT(RenderbufferTarget target, uint renderbuffer);
        private static GLBindRenderbufferEXT glBindRenderbufferEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void BindRenderbufferEXT(RenderbufferTarget target, uint renderbuffer) =>
            glBindRenderbufferEXT.Invoke(target, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteRenderbuffersEXT(int n, uint[] renderbuffers);
        private static GLDeleteRenderbuffersEXT glDeleteRenderbuffersEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void DeleteRenderbuffersEXT(int n, uint[] renderbuffers) =>
            glDeleteRenderbuffersEXT.Invoke(n, renderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenRenderbuffersEXT(int n, out uint renderbuffers);
        private static GLGenRenderbuffersEXT glGenRenderbuffersEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void GenRenderbuffersEXT(int n, out uint renderbuffers) =>
            glGenRenderbuffersEXT.Invoke(n, out renderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageEXT(RenderbufferTarget target, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageEXT glRenderbufferStorageEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void RenderbufferStorageEXT(RenderbufferTarget target, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageEXT.Invoke(target, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters);
        private static GLGetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void GetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters) =>
            glGetRenderbufferParameterivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsFramebufferEXT(uint framebuffer);
        private static GLIsFramebufferEXT glIsFramebufferEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static bool IsFramebufferEXT(uint framebuffer) =>
            glIsFramebufferEXT.Invoke(framebuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFramebufferEXT(FramebufferTarget target, uint framebuffer);
        private static GLBindFramebufferEXT glBindFramebufferEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void BindFramebufferEXT(FramebufferTarget target, uint framebuffer) =>
            glBindFramebufferEXT.Invoke(target, framebuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteFramebuffersEXT(int n, uint[] framebuffers);
        private static GLDeleteFramebuffersEXT glDeleteFramebuffersEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void DeleteFramebuffersEXT(int n, uint[] framebuffers) =>
            glDeleteFramebuffersEXT.Invoke(n, framebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenFramebuffersEXT(int n, out uint framebuffers);
        private static GLGenFramebuffersEXT glGenFramebuffersEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void GenFramebuffersEXT(int n, out uint framebuffers) =>
            glGenFramebuffersEXT.Invoke(n, out framebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate FramebufferStatus GLCheckFramebufferStatusEXT(FramebufferTarget target);
        private static GLCheckFramebufferStatusEXT glCheckFramebufferStatusEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static FramebufferStatus CheckFramebufferStatusEXT(FramebufferTarget target) =>
            glCheckFramebufferStatusEXT.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture1DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        private static GLFramebufferTexture1DEXT glFramebufferTexture1DEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void FramebufferTexture1DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level) =>
            glFramebufferTexture1DEXT.Invoke(target, attachment, textarget, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture2DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        private static GLFramebufferTexture2DEXT glFramebufferTexture2DEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void FramebufferTexture2DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level) =>
            glFramebufferTexture2DEXT.Invoke(target, attachment, textarget, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture3DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);
        private static GLFramebufferTexture3DEXT glFramebufferTexture3DEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void FramebufferTexture3DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset) =>
            glFramebufferTexture3DEXT.Invoke(target, attachment, textarget, texture, level, zoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferRenderbufferEXT(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        private static GLFramebufferRenderbufferEXT glFramebufferRenderbufferEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void FramebufferRenderbufferEXT(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer) =>
            glFramebufferRenderbufferEXT.Invoke(target, attachment, renderbuffertarget, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters);
        private static GLGetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void GetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters) =>
            glGetFramebufferAttachmentParameterivEXT.Invoke(target, attachment, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenerateMipmapEXT(TextureTarget target);
        private static GLGenerateMipmapEXT glGenerateMipmapEXT;


        [GLExtension("GL_EXT_framebuffer_object")]
        public static void GenerateMipmapEXT(TextureTarget target) =>
            glGenerateMipmapEXT.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);
        private static GLFramebufferTextureEXT glFramebufferTextureEXT;


        [GLExtension("GL_EXT_geometry_shader")]
        public static void FramebufferTextureEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level) =>
            glFramebufferTextureEXT.Invoke(target, attachment, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameteriEXT(uint program, ProgramParameterPName pname, int value);
        private static GLProgramParameteriEXT glProgramParameteriEXT;


        [GLExtension("GL_EXT_geometry_shader4")]
        public static void ProgramParameteriEXT(uint program, ProgramParameterPName pname, int value) =>
            glProgramParameteriEXT.Invoke(program, pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameters4fvEXT(ProgramTarget target, uint index, int count, float[] parameters);
        private static GLProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT;


        [GLExtension("GL_EXT_gpu_program_parameters")]
        public static void ProgramEnvParameters4fvEXT(ProgramTarget target, uint index, int count, float[] parameters) =>
            glProgramEnvParameters4fvEXT.Invoke(target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameters4fvEXT(ProgramTarget target, uint index, int count, float[] parameters);
        private static GLProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT;


        [GLExtension("GL_EXT_gpu_program_parameters")]
        public static void ProgramLocalParameters4fvEXT(ProgramTarget target, uint index, int count, float[] parameters) =>
            glProgramLocalParameters4fvEXT.Invoke(target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformuivEXT(uint program, int location, out uint parameters);
        private static GLGetUniformuivEXT glGetUniformuivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void GetUniformuivEXT(uint program, int location, out uint parameters) =>
            glGetUniformuivEXT.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetFragDataLocationEXT(uint program, sbyte[] name);
        private static GLGetFragDataLocationEXT glGetFragDataLocationEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static int GetFragDataLocationEXT(uint program, sbyte[] name) =>
            glGetFragDataLocationEXT.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1uiEXT(int location, uint v0);
        private static GLUniform1uiEXT glUniform1uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform1uiEXT(int location, uint v0) =>
            glUniform1uiEXT.Invoke(location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2uiEXT(int location, uint v0, uint v1);
        private static GLUniform2uiEXT glUniform2uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform2uiEXT(int location, uint v0, uint v1) =>
            glUniform2uiEXT.Invoke(location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3uiEXT(int location, uint v0, uint v1, uint v2);
        private static GLUniform3uiEXT glUniform3uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform3uiEXT(int location, uint v0, uint v1, uint v2) =>
            glUniform3uiEXT.Invoke(location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3);
        private static GLUniform4uiEXT glUniform4uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3) =>
            glUniform4uiEXT.Invoke(location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1uivEXT(int location, int count, uint[] value);
        private static GLUniform1uivEXT glUniform1uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform1uivEXT(int location, int count, uint[] value) =>
            glUniform1uivEXT.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2uivEXT(int location, int count, uint[] value);
        private static GLUniform2uivEXT glUniform2uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform2uivEXT(int location, int count, uint[] value) =>
            glUniform2uivEXT.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3uivEXT(int location, int count, uint[] value);
        private static GLUniform3uivEXT glUniform3uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform3uivEXT(int location, int count, uint[] value) =>
            glUniform3uivEXT.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4uivEXT(int location, int count, uint[] value);
        private static GLUniform4uivEXT glUniform4uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void Uniform4uivEXT(int location, int count, uint[] value) =>
            glUniform4uivEXT.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1iEXT(uint index, int x);
        private static GLVertexAttribI1iEXT glVertexAttribI1iEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI1iEXT(uint index, int x) =>
            glVertexAttribI1iEXT.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2iEXT(uint index, int x, int y);
        private static GLVertexAttribI2iEXT glVertexAttribI2iEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI2iEXT(uint index, int x, int y) =>
            glVertexAttribI2iEXT.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3iEXT(uint index, int x, int y, int z);
        private static GLVertexAttribI3iEXT glVertexAttribI3iEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI3iEXT(uint index, int x, int y, int z) =>
            glVertexAttribI3iEXT.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4iEXT(uint index, int x, int y, int z, int w);
        private static GLVertexAttribI4iEXT glVertexAttribI4iEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4iEXT(uint index, int x, int y, int z, int w) =>
            glVertexAttribI4iEXT.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1uiEXT(uint index, uint x);
        private static GLVertexAttribI1uiEXT glVertexAttribI1uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI1uiEXT(uint index, uint x) =>
            glVertexAttribI1uiEXT.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2uiEXT(uint index, uint x, uint y);
        private static GLVertexAttribI2uiEXT glVertexAttribI2uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI2uiEXT(uint index, uint x, uint y) =>
            glVertexAttribI2uiEXT.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3uiEXT(uint index, uint x, uint y, uint z);
        private static GLVertexAttribI3uiEXT glVertexAttribI3uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI3uiEXT(uint index, uint x, uint y, uint z) =>
            glVertexAttribI3uiEXT.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w);
        private static GLVertexAttribI4uiEXT glVertexAttribI4uiEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w) =>
            glVertexAttribI4uiEXT.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1ivEXT(uint index, int[] v);
        private static GLVertexAttribI1ivEXT glVertexAttribI1ivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI1ivEXT(uint index, int[] v) =>
            glVertexAttribI1ivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2ivEXT(uint index, int[] v);
        private static GLVertexAttribI2ivEXT glVertexAttribI2ivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI2ivEXT(uint index, int[] v) =>
            glVertexAttribI2ivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3ivEXT(uint index, int[] v);
        private static GLVertexAttribI3ivEXT glVertexAttribI3ivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI3ivEXT(uint index, int[] v) =>
            glVertexAttribI3ivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4ivEXT(uint index, int[] v);
        private static GLVertexAttribI4ivEXT glVertexAttribI4ivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4ivEXT(uint index, int[] v) =>
            glVertexAttribI4ivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1uivEXT(uint index, uint[] v);
        private static GLVertexAttribI1uivEXT glVertexAttribI1uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI1uivEXT(uint index, uint[] v) =>
            glVertexAttribI1uivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2uivEXT(uint index, uint[] v);
        private static GLVertexAttribI2uivEXT glVertexAttribI2uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI2uivEXT(uint index, uint[] v) =>
            glVertexAttribI2uivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3uivEXT(uint index, uint[] v);
        private static GLVertexAttribI3uivEXT glVertexAttribI3uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI3uivEXT(uint index, uint[] v) =>
            glVertexAttribI3uivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4uivEXT(uint index, uint[] v);
        private static GLVertexAttribI4uivEXT glVertexAttribI4uivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4uivEXT(uint index, uint[] v) =>
            glVertexAttribI4uivEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4bvEXT(uint index, sbyte[] v);
        private static GLVertexAttribI4bvEXT glVertexAttribI4bvEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4bvEXT(uint index, sbyte[] v) =>
            glVertexAttribI4bvEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4svEXT(uint index, short[] v);
        private static GLVertexAttribI4svEXT glVertexAttribI4svEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4svEXT(uint index, short[] v) =>
            glVertexAttribI4svEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4ubvEXT(uint index, byte[] v);
        private static GLVertexAttribI4ubvEXT glVertexAttribI4ubvEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4ubvEXT(uint index, byte[] v) =>
            glVertexAttribI4ubvEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4usvEXT(uint index, ushort[] v);
        private static GLVertexAttribI4usvEXT glVertexAttribI4usvEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribI4usvEXT(uint index, ushort[] v) =>
            glVertexAttribI4usvEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, nint pointer);
        private static GLVertexAttribIPointerEXT glVertexAttribIPointerEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void VertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, nint pointer) =>
            glVertexAttribIPointerEXT.Invoke(index, size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribIivEXT(uint index, VertexAttribEnum pname, out int parameters);
        private static GLGetVertexAttribIivEXT glGetVertexAttribIivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void GetVertexAttribIivEXT(uint index, VertexAttribEnum pname, out int parameters) =>
            glGetVertexAttribIivEXT.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, out uint parameters);
        private static GLGetVertexAttribIuivEXT glGetVertexAttribIuivEXT;


        [GLExtension("GL_EXT_gpu_shader4")]
        public static void GetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, out uint parameters) =>
            glGetVertexAttribIuivEXT.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetHistogramEXT(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values);
        private static GLGetHistogramEXT glGetHistogramEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void GetHistogramEXT(HistogramTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values) =>
            glGetHistogramEXT.Invoke(target, reset, format, type, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out float parameters);
        private static GLGetHistogramParameterfvEXT glGetHistogramParameterfvEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void GetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out float parameters) =>
            glGetHistogramParameterfvEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters);
        private static GLGetHistogramParameterivEXT glGetHistogramParameterivEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void GetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters) =>
            glGetHistogramParameterivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMinmaxEXT(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values);
        private static GLGetMinmaxEXT glGetMinmaxEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void GetMinmaxEXT(MinmaxTargetEXT target, bool reset, PixelFormat format, PixelType type, out nint values) =>
            glGetMinmaxEXT.Invoke(target, reset, format, type, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out float parameters);
        private static GLGetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void GetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out float parameters) =>
            glGetMinmaxParameterfvEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out int parameters);
        private static GLGetMinmaxParameterivEXT glGetMinmaxParameterivEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void GetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, out int parameters) =>
            glGetMinmaxParameterivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLHistogramEXT(HistogramTargetEXT target, int width, InternalFormat internalformat, bool sink);
        private static GLHistogramEXT glHistogramEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void HistogramEXT(HistogramTargetEXT target, int width, InternalFormat internalformat, bool sink) =>
            glHistogramEXT.Invoke(target, width, internalformat, sink);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMinmaxEXT(MinmaxTargetEXT target, InternalFormat internalformat, bool sink);
        private static GLMinmaxEXT glMinmaxEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void MinmaxEXT(MinmaxTargetEXT target, InternalFormat internalformat, bool sink) =>
            glMinmaxEXT.Invoke(target, internalformat, sink);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResetHistogramEXT(HistogramTargetEXT target);
        private static GLResetHistogramEXT glResetHistogramEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void ResetHistogramEXT(HistogramTargetEXT target) =>
            glResetHistogramEXT.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResetMinmaxEXT(MinmaxTargetEXT target);
        private static GLResetMinmaxEXT glResetMinmaxEXT;


        [GLExtension("GL_EXT_histogram")]
        public static void ResetMinmaxEXT(MinmaxTargetEXT target) =>
            glResetMinmaxEXT.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexFuncEXT(IndexFunctionEXT func, float reference);
        private static GLIndexFuncEXT glIndexFuncEXT;


        [GLExtension("GL_EXT_index_func")]
        public static void IndexFuncEXT(IndexFunctionEXT func, float reference) =>
            glIndexFuncEXT.Invoke(func, reference);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexMaterialEXT(TriangleFace face, IndexMaterialParameterEXT mode);
        private static GLIndexMaterialEXT glIndexMaterialEXT;


        [GLExtension("GL_EXT_index_material")]
        public static void IndexMaterialEXT(TriangleFace face, IndexMaterialParameterEXT mode) =>
            glIndexMaterialEXT.Invoke(face, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribDivisorEXT(uint index, uint divisor);
        private static GLVertexAttribDivisorEXT glVertexAttribDivisorEXT;


        [GLExtension("GL_EXT_instanced_arrays")]
        public static void VertexAttribDivisorEXT(uint index, uint divisor) =>
            glVertexAttribDivisorEXT.Invoke(index, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLApplyTextureEXT(LightTextureModeEXT mode);
        private static GLApplyTextureEXT glApplyTextureEXT;


        [GLExtension("GL_EXT_light_texture")]
        public static void ApplyTextureEXT(LightTextureModeEXT mode) =>
            glApplyTextureEXT.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureLightEXT(LightTexturePNameEXT pname);
        private static GLTextureLightEXT glTextureLightEXT;


        [GLExtension("GL_EXT_light_texture")]
        public static void TextureLightEXT(LightTexturePNameEXT pname) =>
            glTextureLightEXT.Invoke(pname);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureMaterialEXT(TriangleFace face, MaterialParameter mode);
        private static GLTextureMaterialEXT glTextureMaterialEXT;


        [GLExtension("GL_EXT_light_texture")]
        public static void TextureMaterialEXT(TriangleFace face, MaterialParameter mode) =>
            glTextureMaterialEXT.Invoke(face, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapBufferRangeEXT(BufferTargetARB target, nint offset, nint length, MapBufferAccessMask access);
        private static GLMapBufferRangeEXT glMapBufferRangeEXT;


        [GLExtension("GL_EXT_map_buffer_range")]
        public static nint MapBufferRangeEXT(BufferTargetARB target, nint offset, nint length, MapBufferAccessMask access) =>
            glMapBufferRangeEXT.Invoke(target, offset, length, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushMappedBufferRangeEXT(BufferTargetARB target, nint offset, nint length);
        private static GLFlushMappedBufferRangeEXT glFlushMappedBufferRangeEXT;


        [GLExtension("GL_EXT_map_buffer_range")]
        public static void FlushMappedBufferRangeEXT(BufferTargetARB target, nint offset, nint length) =>
            glFlushMappedBufferRangeEXT.Invoke(target, offset, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUnsignedBytevEXT(GetPName pname, out byte data);
        private static GLGetUnsignedBytevEXT glGetUnsignedBytevEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void GetUnsignedBytevEXT(GetPName pname, out byte data) =>
            glGetUnsignedBytevEXT.Invoke(pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUnsignedBytei_vEXT(int target, uint index, out byte data);
        private static GLGetUnsignedBytei_vEXT glGetUnsignedBytei_vEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void GetUnsignedBytei_vEXT(int target, uint index, out byte data) =>
            glGetUnsignedBytei_vEXT.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteMemoryObjectsEXT(int n, uint[] memoryObjects);
        private static GLDeleteMemoryObjectsEXT glDeleteMemoryObjectsEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void DeleteMemoryObjectsEXT(int n, uint[] memoryObjects) =>
            glDeleteMemoryObjectsEXT.Invoke(n, memoryObjects);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsMemoryObjectEXT(uint memoryObject);
        private static GLIsMemoryObjectEXT glIsMemoryObjectEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static bool IsMemoryObjectEXT(uint memoryObject) =>
            glIsMemoryObjectEXT.Invoke(memoryObject);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateMemoryObjectsEXT(int n, out uint memoryObjects);
        private static GLCreateMemoryObjectsEXT glCreateMemoryObjectsEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void CreateMemoryObjectsEXT(int n, out uint memoryObjects) =>
            glCreateMemoryObjectsEXT.Invoke(n, out memoryObjects);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, int[] parameters);
        private static GLMemoryObjectParameterivEXT glMemoryObjectParameterivEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void MemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, int[] parameters) =>
            glMemoryObjectParameterivEXT.Invoke(memoryObject, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, out int parameters);
        private static GLGetMemoryObjectParameterivEXT glGetMemoryObjectParameterivEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void GetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, out int parameters) =>
            glGetMemoryObjectParameterivEXT.Invoke(memoryObject, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageMem2DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset);
        private static GLTexStorageMem2DEXT glTexStorageMem2DEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TexStorageMem2DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset) =>
            glTexStorageMem2DEXT.Invoke(target, levels, internalFormat, width, height, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageMem2DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset);
        private static GLTexStorageMem2DMultisampleEXT glTexStorageMem2DMultisampleEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TexStorageMem2DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset) =>
            glTexStorageMem2DMultisampleEXT.Invoke(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageMem3DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset);
        private static GLTexStorageMem3DEXT glTexStorageMem3DEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TexStorageMem3DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset) =>
            glTexStorageMem3DEXT.Invoke(target, levels, internalFormat, width, height, depth, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageMem3DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset);
        private static GLTexStorageMem3DMultisampleEXT glTexStorageMem3DMultisampleEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TexStorageMem3DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset) =>
            glTexStorageMem3DMultisampleEXT.Invoke(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferStorageMemEXT(BufferTargetARB target, nint size, uint memory, ulong offset);
        private static GLBufferStorageMemEXT glBufferStorageMemEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void BufferStorageMemEXT(BufferTargetARB target, nint size, uint memory, ulong offset) =>
            glBufferStorageMemEXT.Invoke(target, size, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorageMem2DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset);
        private static GLTextureStorageMem2DEXT glTextureStorageMem2DEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TextureStorageMem2DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset) =>
            glTextureStorageMem2DEXT.Invoke(texture, levels, internalFormat, width, height, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorageMem2DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset);
        private static GLTextureStorageMem2DMultisampleEXT glTextureStorageMem2DMultisampleEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TextureStorageMem2DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, bool fixedSampleLocations, uint memory, ulong offset) =>
            glTextureStorageMem2DMultisampleEXT.Invoke(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorageMem3DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset);
        private static GLTextureStorageMem3DEXT glTextureStorageMem3DEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TextureStorageMem3DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset) =>
            glTextureStorageMem3DEXT.Invoke(texture, levels, internalFormat, width, height, depth, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorageMem3DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset);
        private static GLTextureStorageMem3DMultisampleEXT glTextureStorageMem3DMultisampleEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TextureStorageMem3DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, bool fixedSampleLocations, uint memory, ulong offset) =>
            glTextureStorageMem3DMultisampleEXT.Invoke(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferStorageMemEXT(uint buffer, nint size, uint memory, ulong offset);
        private static GLNamedBufferStorageMemEXT glNamedBufferStorageMemEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void NamedBufferStorageMemEXT(uint buffer, nint size, uint memory, ulong offset) =>
            glNamedBufferStorageMemEXT.Invoke(buffer, size, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageMem1DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset);
        private static GLTexStorageMem1DEXT glTexStorageMem1DEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TexStorageMem1DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset) =>
            glTexStorageMem1DEXT.Invoke(target, levels, internalFormat, width, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureStorageMem1DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset);
        private static GLTextureStorageMem1DEXT glTextureStorageMem1DEXT;


        [GLExtension("GL_EXT_memory_object")]
        public static void TextureStorageMem1DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset) =>
            glTextureStorageMem1DEXT.Invoke(texture, levels, internalFormat, width, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImportMemoryFdEXT(uint memory, ulong size, ExternalHandleType handleType, int fd);
        private static GLImportMemoryFdEXT glImportMemoryFdEXT;


        [GLExtension("GL_EXT_memory_object_fd")]
        public static void ImportMemoryFdEXT(uint memory, ulong size, ExternalHandleType handleType, int fd) =>
            glImportMemoryFdEXT.Invoke(memory, size, handleType, fd);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImportMemoryWin32HandleEXT(uint memory, ulong size, ExternalHandleType handleType, out nint handle);
        private static GLImportMemoryWin32HandleEXT glImportMemoryWin32HandleEXT;


        [GLExtension("GL_EXT_memory_object_win32")]
        public static void ImportMemoryWin32HandleEXT(uint memory, ulong size, ExternalHandleType handleType, out nint handle) =>
            glImportMemoryWin32HandleEXT.Invoke(memory, size, handleType, out handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImportMemoryWin32NameEXT(uint memory, ulong size, ExternalHandleType handleType, nint name);
        private static GLImportMemoryWin32NameEXT glImportMemoryWin32NameEXT;


        [GLExtension("GL_EXT_memory_object_win32")]
        public static void ImportMemoryWin32NameEXT(uint memory, ulong size, ExternalHandleType handleType, nint name) =>
            glImportMemoryWin32NameEXT.Invoke(memory, size, handleType, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysEXT(PrimitiveType mode, int[] first, int[] count, int primcount);
        private static GLMultiDrawArraysEXT glMultiDrawArraysEXT;


        [GLExtension("GL_EXT_multi_draw_arrays")]
        public static void MultiDrawArraysEXT(PrimitiveType mode, int[] first, int[] count, int primcount) =>
            glMultiDrawArraysEXT.Invoke(mode, first, count, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsEXT(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int primcount);
        private static GLMultiDrawElementsEXT glMultiDrawElementsEXT;


        [GLExtension("GL_EXT_multi_draw_arrays")]
        public static void MultiDrawElementsEXT(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int primcount) =>
            glMultiDrawElementsEXT.Invoke(mode, count, type, indices, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysIndirectEXT(PrimitiveType mode, nint indirect, int drawcount, int stride);
        private static GLMultiDrawArraysIndirectEXT glMultiDrawArraysIndirectEXT;


        [GLExtension("GL_EXT_multi_draw_indirect")]
        public static void MultiDrawArraysIndirectEXT(PrimitiveType mode, nint indirect, int drawcount, int stride) =>
            glMultiDrawArraysIndirectEXT.Invoke(mode, indirect, drawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsIndirectEXT(PrimitiveType mode, DrawElementsType type, nint indirect, int drawcount, int stride);
        private static GLMultiDrawElementsIndirectEXT glMultiDrawElementsIndirectEXT;


        [GLExtension("GL_EXT_multi_draw_indirect")]
        public static void MultiDrawElementsIndirectEXT(PrimitiveType mode, DrawElementsType type, nint indirect, int drawcount, int stride) =>
            glMultiDrawElementsIndirectEXT.Invoke(mode, type, indirect, drawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleMaskEXT(float value, bool invert);
        private static GLSampleMaskEXT glSampleMaskEXT;


        [GLExtension("GL_EXT_multisample")]
        public static void SampleMaskEXT(float value, bool invert) =>
            glSampleMaskEXT.Invoke(value, invert);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplePatternEXT(SamplePatternEXT pattern);
        private static GLSamplePatternEXT glSamplePatternEXT;


        [GLExtension("GL_EXT_multisample")]
        public static void SamplePatternEXT(SamplePatternEXT pattern) =>
            glSamplePatternEXT.Invoke(pattern);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture2DMultisampleEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples);
        private static GLFramebufferTexture2DMultisampleEXT glFramebufferTexture2DMultisampleEXT;


        [GLExtension("GL_EXT_multisampled_render_to_texture")]
        public static void FramebufferTexture2DMultisampleEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples) =>
            glFramebufferTexture2DMultisampleEXT.Invoke(target, attachment, textarget, texture, level, samples);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadBufferIndexedEXT(ReadBufferMode src, int index);
        private static GLReadBufferIndexedEXT glReadBufferIndexedEXT;


        [GLExtension("GL_EXT_multiview_draw_buffers")]
        public static void ReadBufferIndexedEXT(ReadBufferMode src, int index) =>
            glReadBufferIndexedEXT.Invoke(src, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawBuffersIndexedEXT(int n, int[] location, int[] indices);
        private static GLDrawBuffersIndexedEXT glDrawBuffersIndexedEXT;


        [GLExtension("GL_EXT_multiview_draw_buffers")]
        public static void DrawBuffersIndexedEXT(int n, int[] location, int[] indices) =>
            glDrawBuffersIndexedEXT.Invoke(n, location, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetIntegeri_vEXT(GetPName target, uint index, out int data);
        private static GLGetIntegeri_vEXT glGetIntegeri_vEXT;


        [GLExtension("GL_EXT_multiview_draw_buffers")]
        public static void GetIntegeri_vEXT(GetPName target, uint index, out int data) =>
            glGetIntegeri_vEXT.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorTableEXT(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, nint table);
        private static GLColorTableEXT glColorTableEXT;


        [GLExtension("GL_EXT_paletted_texture")]
        public static void ColorTableEXT(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, nint table) =>
            glColorTableEXT.Invoke(target, internalFormat, width, format, type, table);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, out nint data);
        private static GLGetColorTableEXT glGetColorTableEXT;


        [GLExtension("GL_EXT_paletted_texture")]
        public static void GetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, out nint data) =>
            glGetColorTableEXT.Invoke(target, format, type, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, out int parameters);
        private static GLGetColorTableParameterivEXT glGetColorTableParameterivEXT;


        [GLExtension("GL_EXT_paletted_texture")]
        public static void GetColorTableParameterivEXT(ColorTableTarget target, ColorTableParameterPName pname, out int parameters) =>
            glGetColorTableParameterivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, out float parameters);
        private static GLGetColorTableParameterfvEXT glGetColorTableParameterfvEXT;


        [GLExtension("GL_EXT_paletted_texture")]
        public static void GetColorTableParameterfvEXT(ColorTableTarget target, ColorTableParameterPName pname, out float parameters) =>
            glGetColorTableParameterfvEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTransformParameteriEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int param);
        private static GLPixelTransformParameteriEXT glPixelTransformParameteriEXT;


        [GLExtension("GL_EXT_pixel_transform")]
        public static void PixelTransformParameteriEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int param) =>
            glPixelTransformParameteriEXT.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTransformParameterfEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float param);
        private static GLPixelTransformParameterfEXT glPixelTransformParameterfEXT;


        [GLExtension("GL_EXT_pixel_transform")]
        public static void PixelTransformParameterfEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float param) =>
            glPixelTransformParameterfEXT.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int[] parameters);
        private static GLPixelTransformParameterivEXT glPixelTransformParameterivEXT;


        [GLExtension("GL_EXT_pixel_transform")]
        public static void PixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int[] parameters) =>
            glPixelTransformParameterivEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float[] parameters);
        private static GLPixelTransformParameterfvEXT glPixelTransformParameterfvEXT;


        [GLExtension("GL_EXT_pixel_transform")]
        public static void PixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float[] parameters) =>
            glPixelTransformParameterfvEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelTransformParameterivEXT(int target, int pname, out int parameters);
        private static GLGetPixelTransformParameterivEXT glGetPixelTransformParameterivEXT;


        [GLExtension("GL_EXT_pixel_transform")]
        public static void GetPixelTransformParameterivEXT(int target, int pname, out int parameters) =>
            glGetPixelTransformParameterivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelTransformParameterfvEXT(int target, int pname, out float parameters);
        private static GLGetPixelTransformParameterfvEXT glGetPixelTransformParameterfvEXT;


        [GLExtension("GL_EXT_pixel_transform")]
        public static void GetPixelTransformParameterfvEXT(int target, int pname, out float parameters) =>
            glGetPixelTransformParameterfvEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterfEXT(PointParameterNameARB pname, float param);
        private static GLPointParameterfEXT glPointParameterfEXT;


        [GLExtension("GL_EXT_point_parameters")]
        public static void PointParameterfEXT(PointParameterNameARB pname, float param) =>
            glPointParameterfEXT.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterfvEXT(PointParameterNameARB pname, float[] parameters);
        private static GLPointParameterfvEXT glPointParameterfvEXT;


        [GLExtension("GL_EXT_point_parameters")]
        public static void PointParameterfvEXT(PointParameterNameARB pname, float[] parameters) =>
            glPointParameterfvEXT.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonOffsetEXT(float factor, float bias);
        private static GLPolygonOffsetEXT glPolygonOffsetEXT;


        [GLExtension("GL_EXT_polygon_offset")]
        public static void PolygonOffsetEXT(float factor, float bias) =>
            glPolygonOffsetEXT.Invoke(factor, bias);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonOffsetClampEXT(float factor, float units, float clamp);
        private static GLPolygonOffsetClampEXT glPolygonOffsetClampEXT;


        [GLExtension("GL_EXT_polygon_offset_clamp")]
        public static void PolygonOffsetClampEXT(float factor, float units, float clamp) =>
            glPolygonOffsetClampEXT.Invoke(factor, units, clamp);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        private static GLPrimitiveBoundingBoxEXT glPrimitiveBoundingBoxEXT;


        [GLExtension("GL_EXT_primitive_bounding_box")]
        public static void PrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) =>
            glPrimitiveBoundingBoxEXT.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProvokingVertexEXT(VertexProvokingMode mode);
        private static GLProvokingVertexEXT glProvokingVertexEXT;


        [GLExtension("GL_EXT_provoking_vertex")]
        public static void ProvokingVertexEXT(VertexProvokingMode mode) =>
            glProvokingVertexEXT.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterSamplesEXT(uint samples, bool fixedsamplelocations);
        private static GLRasterSamplesEXT glRasterSamplesEXT;


        [GLExtension("GL_EXT_raster_multisample")]
        public static void RasterSamplesEXT(uint samples, bool fixedsamplelocations) =>
            glRasterSamplesEXT.Invoke(samples, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GraphicsResetStatus GLGetGraphicsResetStatusEXT();
        private static GLGetGraphicsResetStatusEXT glGetGraphicsResetStatusEXT;


        [GLExtension("GL_EXT_robustness")]
        public static GraphicsResetStatus GetGraphicsResetStatusEXT() =>
            glGetGraphicsResetStatusEXT.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadnPixelsEXT(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data);
        private static GLReadnPixelsEXT glReadnPixelsEXT;


        [GLExtension("GL_EXT_robustness")]
        public static void ReadnPixelsEXT(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data) =>
            glReadnPixelsEXT.Invoke(x, y, width, height, format, type, bufSize, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformfvEXT(uint program, int location, int bufSize, out float parameters);
        private static GLGetnUniformfvEXT glGetnUniformfvEXT;


        [GLExtension("GL_EXT_robustness")]
        public static void GetnUniformfvEXT(uint program, int location, int bufSize, out float parameters) =>
            glGetnUniformfvEXT.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformivEXT(uint program, int location, int bufSize, out int parameters);
        private static GLGetnUniformivEXT glGetnUniformivEXT;


        [GLExtension("GL_EXT_robustness")]
        public static void GetnUniformivEXT(uint program, int location, int bufSize, out int parameters) =>
            glGetnUniformivEXT.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenSemaphoresEXT(int n, out uint semaphores);
        private static GLGenSemaphoresEXT glGenSemaphoresEXT;


        [GLExtension("GL_EXT_semaphore")]
        public static void GenSemaphoresEXT(int n, out uint semaphores) =>
            glGenSemaphoresEXT.Invoke(n, out semaphores);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteSemaphoresEXT(int n, uint[] semaphores);
        private static GLDeleteSemaphoresEXT glDeleteSemaphoresEXT;


        [GLExtension("GL_EXT_semaphore")]
        public static void DeleteSemaphoresEXT(int n, uint[] semaphores) =>
            glDeleteSemaphoresEXT.Invoke(n, semaphores);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsSemaphoreEXT(uint semaphore);
        private static GLIsSemaphoreEXT glIsSemaphoreEXT;


        [GLExtension("GL_EXT_semaphore")]
        public static bool IsSemaphoreEXT(uint semaphore) =>
            glIsSemaphoreEXT.Invoke(semaphore);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ulong[] parameters);
        private static GLSemaphoreParameterui64vEXT glSemaphoreParameterui64vEXT;


        [GLExtension("GL_EXT_semaphore")]
        public static void SemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ulong[] parameters) =>
            glSemaphoreParameterui64vEXT.Invoke(semaphore, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, out ulong parameters);
        private static GLGetSemaphoreParameterui64vEXT glGetSemaphoreParameterui64vEXT;


        [GLExtension("GL_EXT_semaphore")]
        public static void GetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, out ulong parameters) =>
            glGetSemaphoreParameterui64vEXT.Invoke(semaphore, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, TextureLayout[] srcLayouts);
        private static GLWaitSemaphoreEXT glWaitSemaphoreEXT;


        [GLExtension("GL_EXT_semaphore")]
        public static void WaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, TextureLayout[] srcLayouts) =>
            glWaitSemaphoreEXT.Invoke(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, TextureLayout[] dstLayouts);
        private static GLSignalSemaphoreEXT glSignalSemaphoreEXT;


        [GLExtension("GL_EXT_semaphore")]
        public static void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint[] buffers, uint numTextureBarriers, uint[] textures, TextureLayout[] dstLayouts) =>
            glSignalSemaphoreEXT.Invoke(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImportSemaphoreFdEXT(uint semaphore, ExternalHandleType handleType, int fd);
        private static GLImportSemaphoreFdEXT glImportSemaphoreFdEXT;


        [GLExtension("GL_EXT_semaphore_fd")]
        public static void ImportSemaphoreFdEXT(uint semaphore, ExternalHandleType handleType, int fd) =>
            glImportSemaphoreFdEXT.Invoke(semaphore, handleType, fd);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImportSemaphoreWin32HandleEXT(uint semaphore, ExternalHandleType handleType, out nint handle);
        private static GLImportSemaphoreWin32HandleEXT glImportSemaphoreWin32HandleEXT;


        [GLExtension("GL_EXT_semaphore_win32")]
        public static void ImportSemaphoreWin32HandleEXT(uint semaphore, ExternalHandleType handleType, out nint handle) =>
            glImportSemaphoreWin32HandleEXT.Invoke(semaphore, handleType, out handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImportSemaphoreWin32NameEXT(uint semaphore, ExternalHandleType handleType, nint name);
        private static GLImportSemaphoreWin32NameEXT glImportSemaphoreWin32NameEXT;


        [GLExtension("GL_EXT_semaphore_win32")]
        public static void ImportSemaphoreWin32NameEXT(uint semaphore, ExternalHandleType handleType, nint name) =>
            glImportSemaphoreWin32NameEXT.Invoke(semaphore, handleType, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue);
        private static GLSecondaryColor3bEXT glSecondaryColor3bEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue) =>
            glSecondaryColor3bEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3bvEXT(sbyte[] v);
        private static GLSecondaryColor3bvEXT glSecondaryColor3bvEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3bvEXT(sbyte[] v) =>
            glSecondaryColor3bvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3dEXT(double red, double green, double blue);
        private static GLSecondaryColor3dEXT glSecondaryColor3dEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3dEXT(double red, double green, double blue) =>
            glSecondaryColor3dEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3dvEXT(double[] v);
        private static GLSecondaryColor3dvEXT glSecondaryColor3dvEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3dvEXT(double[] v) =>
            glSecondaryColor3dvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3fEXT(float red, float green, float blue);
        private static GLSecondaryColor3fEXT glSecondaryColor3fEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3fEXT(float red, float green, float blue) =>
            glSecondaryColor3fEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3fvEXT(float[] v);
        private static GLSecondaryColor3fvEXT glSecondaryColor3fvEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3fvEXT(float[] v) =>
            glSecondaryColor3fvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3iEXT(int red, int green, int blue);
        private static GLSecondaryColor3iEXT glSecondaryColor3iEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3iEXT(int red, int green, int blue) =>
            glSecondaryColor3iEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3ivEXT(int[] v);
        private static GLSecondaryColor3ivEXT glSecondaryColor3ivEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3ivEXT(int[] v) =>
            glSecondaryColor3ivEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3sEXT(short red, short green, short blue);
        private static GLSecondaryColor3sEXT glSecondaryColor3sEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3sEXT(short red, short green, short blue) =>
            glSecondaryColor3sEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3svEXT(short[] v);
        private static GLSecondaryColor3svEXT glSecondaryColor3svEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3svEXT(short[] v) =>
            glSecondaryColor3svEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3ubEXT(byte red, byte green, byte blue);
        private static GLSecondaryColor3ubEXT glSecondaryColor3ubEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3ubEXT(byte red, byte green, byte blue) =>
            glSecondaryColor3ubEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3ubvEXT(byte[] v);
        private static GLSecondaryColor3ubvEXT glSecondaryColor3ubvEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3ubvEXT(byte[] v) =>
            glSecondaryColor3ubvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3uiEXT(uint red, uint green, uint blue);
        private static GLSecondaryColor3uiEXT glSecondaryColor3uiEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3uiEXT(uint red, uint green, uint blue) =>
            glSecondaryColor3uiEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3uivEXT(uint[] v);
        private static GLSecondaryColor3uivEXT glSecondaryColor3uivEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3uivEXT(uint[] v) =>
            glSecondaryColor3uivEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3usEXT(ushort red, ushort green, ushort blue);
        private static GLSecondaryColor3usEXT glSecondaryColor3usEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3usEXT(ushort red, ushort green, ushort blue) =>
            glSecondaryColor3usEXT.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3usvEXT(ushort[] v);
        private static GLSecondaryColor3usvEXT glSecondaryColor3usvEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColor3usvEXT(ushort[] v) =>
            glSecondaryColor3usvEXT.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColorPointerEXT(int size, ColorPointerType type, int stride, nint pointer);
        private static GLSecondaryColorPointerEXT glSecondaryColorPointerEXT;


        [GLExtension("GL_EXT_secondary_color")]
        public static void SecondaryColorPointerEXT(int size, ColorPointerType type, int stride, nint pointer) =>
            glSecondaryColorPointerEXT.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUseShaderProgramEXT(int type, uint program);
        private static GLUseShaderProgramEXT glUseShaderProgramEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void UseShaderProgramEXT(int type, uint program) =>
            glUseShaderProgramEXT.Invoke(type, program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLActiveProgramEXT(uint program);
        private static GLActiveProgramEXT glActiveProgramEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void ActiveProgramEXT(uint program) =>
            glActiveProgramEXT.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLCreateShaderProgramEXT(ShaderType type, sbyte[] str);
        private static GLCreateShaderProgramEXT glCreateShaderProgramEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static uint CreateShaderProgramEXT(ShaderType type, sbyte[] str) =>
            glCreateShaderProgramEXT.Invoke(type, str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLActiveShaderProgramEXT(uint pipeline, uint program);
        private static GLActiveShaderProgramEXT glActiveShaderProgramEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void ActiveShaderProgramEXT(uint pipeline, uint program) =>
            glActiveShaderProgramEXT.Invoke(pipeline, program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindProgramPipelineEXT(uint pipeline);
        private static GLBindProgramPipelineEXT glBindProgramPipelineEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void BindProgramPipelineEXT(uint pipeline) =>
            glBindProgramPipelineEXT.Invoke(pipeline);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLCreateShaderProgramvEXT(ShaderType type, int count, sbyte strings);
        private static GLCreateShaderProgramvEXT glCreateShaderProgramvEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static uint CreateShaderProgramvEXT(ShaderType type, int count, sbyte strings) =>
            glCreateShaderProgramvEXT.Invoke(type, count, strings);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteProgramPipelinesEXT(int n, uint[] pipelines);
        private static GLDeleteProgramPipelinesEXT glDeleteProgramPipelinesEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void DeleteProgramPipelinesEXT(int n, uint[] pipelines) =>
            glDeleteProgramPipelinesEXT.Invoke(n, pipelines);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenProgramPipelinesEXT(int n, out uint pipelines);
        private static GLGenProgramPipelinesEXT glGenProgramPipelinesEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void GenProgramPipelinesEXT(int n, out uint pipelines) =>
            glGenProgramPipelinesEXT.Invoke(n, out pipelines);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, out int length, out sbyte infoLog);
        private static GLGetProgramPipelineInfoLogEXT glGetProgramPipelineInfoLogEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void GetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, out int length, out sbyte infoLog) =>
            glGetProgramPipelineInfoLogEXT.Invoke(pipeline, bufSize, out length, out infoLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramPipelineivEXT(uint pipeline, PipelineParameterName pname, out int parameters);
        private static GLGetProgramPipelineivEXT glGetProgramPipelineivEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void GetProgramPipelineivEXT(uint pipeline, PipelineParameterName pname, out int parameters) =>
            glGetProgramPipelineivEXT.Invoke(pipeline, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsProgramPipelineEXT(uint pipeline);
        private static GLIsProgramPipelineEXT glIsProgramPipelineEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static bool IsProgramPipelineEXT(uint pipeline) =>
            glIsProgramPipelineEXT.Invoke(pipeline);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUseProgramStagesEXT(uint pipeline, UseProgramStageMask stages, uint program);
        private static GLUseProgramStagesEXT glUseProgramStagesEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void UseProgramStagesEXT(uint pipeline, UseProgramStageMask stages, uint program) =>
            glUseProgramStagesEXT.Invoke(pipeline, stages, program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLValidateProgramPipelineEXT(uint pipeline);
        private static GLValidateProgramPipelineEXT glValidateProgramPipelineEXT;


        [GLExtension("GL_EXT_separate_shader_objects")]
        public static void ValidateProgramPipelineEXT(uint pipeline) =>
            glValidateProgramPipelineEXT.Invoke(pipeline);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferFetchBarrierEXT();
        private static GLFramebufferFetchBarrierEXT glFramebufferFetchBarrierEXT;


        [GLExtension("GL_EXT_shader_framebuffer_fetch_non_coherent")]
        public static void FramebufferFetchBarrierEXT() =>
            glFramebufferFetchBarrierEXT.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, BufferAccessARB access, int format);
        private static GLBindImageTextureEXT glBindImageTextureEXT;


        [GLExtension("GL_EXT_shader_image_load_store")]
        public static void BindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, BufferAccessARB access, int format) =>
            glBindImageTextureEXT.Invoke(index, texture, level, layered, layer, access, format);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMemoryBarrierEXT(MemoryBarrierMask barriers);
        private static GLMemoryBarrierEXT glMemoryBarrierEXT;


        [GLExtension("GL_EXT_shader_image_load_store")]
        public static void MemoryBarrierEXT(MemoryBarrierMask barriers) =>
            glMemoryBarrierEXT.Invoke(barriers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferPixelLocalStorageSizeEXT(uint target, int size);
        private static GLFramebufferPixelLocalStorageSizeEXT glFramebufferPixelLocalStorageSizeEXT;


        [GLExtension("GL_EXT_shader_pixel_local_storage2")]
        public static void FramebufferPixelLocalStorageSizeEXT(uint target, int size) =>
            glFramebufferPixelLocalStorageSizeEXT.Invoke(target, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetFramebufferPixelLocalStorageSizeEXT(uint target);
        private static GLGetFramebufferPixelLocalStorageSizeEXT glGetFramebufferPixelLocalStorageSizeEXT;


        [GLExtension("GL_EXT_shader_pixel_local_storage2")]
        public static int GetFramebufferPixelLocalStorageSizeEXT(uint target) =>
            glGetFramebufferPixelLocalStorageSizeEXT.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearPixelLocalStorageuiEXT(int offset, int n, uint[] values);
        private static GLClearPixelLocalStorageuiEXT glClearPixelLocalStorageuiEXT;


        [GLExtension("GL_EXT_shader_pixel_local_storage2")]
        public static void ClearPixelLocalStorageuiEXT(int offset, int n, uint[] values) =>
            glClearPixelLocalStorageuiEXT.Invoke(offset, n, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexPageCommitmentEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit);
        private static GLTexPageCommitmentEXT glTexPageCommitmentEXT;


        [GLExtension("GL_EXT_sparse_texture")]
        public static void TexPageCommitmentEXT(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, bool commit) =>
            glTexPageCommitmentEXT.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilClearTagEXT(int stencilTagBits, uint stencilClearTag);
        private static GLStencilClearTagEXT glStencilClearTagEXT;


        [GLExtension("GL_EXT_stencil_clear_tag")]
        public static void StencilClearTagEXT(int stencilTagBits, uint stencilClearTag) =>
            glStencilClearTagEXT.Invoke(stencilTagBits, stencilClearTag);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLActiveStencilFaceEXT(TriangleFace face);
        private static GLActiveStencilFaceEXT glActiveStencilFaceEXT;


        [GLExtension("GL_EXT_stencil_two_side")]
        public static void ActiveStencilFaceEXT(TriangleFace face) =>
            glActiveStencilFaceEXT.Invoke(face);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage1DEXT(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage1DEXT glTexSubImage1DEXT;


        [GLExtension("GL_EXT_subtexture")]
        public static void TexSubImage1DEXT(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage1DEXT.Invoke(target, level, xoffset, width, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage2DEXT glTexSubImage2DEXT;


        [GLExtension("GL_EXT_subtexture")]
        public static void TexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage2DEXT.Invoke(target, level, xoffset, yoffset, width, height, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPatchParameteriEXT(PatchParameterName pname, int value);
        private static GLPatchParameteriEXT glPatchParameteriEXT;


        [GLExtension("GL_EXT_tessellation_shader")]
        public static void PatchParameteriEXT(PatchParameterName pname, int value) =>
            glPatchParameteriEXT.Invoke(pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage3DEXT(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTexImage3DEXT glTexImage3DEXT;


        [GLExtension("GL_EXT_texture3D")]
        public static void TexImage3DEXT(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTexImage3DEXT.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage3DEXT glTexSubImage3DEXT;


        [GLExtension("GL_EXT_texture3D")]
        public static void TexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage3DEXT.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureLayerEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer);
        private static GLFramebufferTextureLayerEXT glFramebufferTextureLayerEXT;


        [GLExtension("GL_EXT_texture_array")]
        public static void FramebufferTextureLayerEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer) =>
            glFramebufferTextureLayerEXT.Invoke(target, attachment, texture, level, layer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterIivEXT(TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLTexParameterIivEXT glTexParameterIivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void TexParameterIivEXT(TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glTexParameterIivEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterIuivEXT(TextureTarget target, TextureParameterName pname, uint[] parameters);
        private static GLTexParameterIuivEXT glTexParameterIuivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void TexParameterIuivEXT(TextureTarget target, TextureParameterName pname, uint[] parameters) =>
            glTexParameterIuivEXT.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTexParameterIivEXT glGetTexParameterIivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void GetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTexParameterIivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, out uint parameters);
        private static GLGetTexParameterIuivEXT glGetTexParameterIuivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void GetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, out uint parameters) =>
            glGetTexParameterIuivEXT.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterIivEXT(uint sampler, SamplerParameterI pname, int[] param);
        private static GLSamplerParameterIivEXT glSamplerParameterIivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void SamplerParameterIivEXT(uint sampler, SamplerParameterI pname, int[] param) =>
            glSamplerParameterIivEXT.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterIuivEXT(uint sampler, SamplerParameterI pname, uint[] param);
        private static GLSamplerParameterIuivEXT glSamplerParameterIuivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void SamplerParameterIuivEXT(uint sampler, SamplerParameterI pname, uint[] param) =>
            glSamplerParameterIuivEXT.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameterIivEXT(uint sampler, SamplerParameterI pname, out int parameters);
        private static GLGetSamplerParameterIivEXT glGetSamplerParameterIivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void GetSamplerParameterIivEXT(uint sampler, SamplerParameterI pname, out int parameters) =>
            glGetSamplerParameterIivEXT.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameterIuivEXT(uint sampler, SamplerParameterI pname, out uint parameters);
        private static GLGetSamplerParameterIuivEXT glGetSamplerParameterIuivEXT;


        [GLExtension("GL_EXT_texture_border_clamp")]
        public static void GetSamplerParameterIuivEXT(uint sampler, SamplerParameterI pname, out uint parameters) =>
            glGetSamplerParameterIuivEXT.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBufferEXT(TextureTarget target, SizedInternalFormat internalformat, uint buffer);
        private static GLTexBufferEXT glTexBufferEXT;


        [GLExtension("GL_EXT_texture_buffer")]
        public static void TexBufferEXT(TextureTarget target, SizedInternalFormat internalformat, uint buffer) =>
            glTexBufferEXT.Invoke(target, internalformat, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBufferRangeEXT(TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size);
        private static GLTexBufferRangeEXT glTexBufferRangeEXT;


        [GLExtension("GL_EXT_texture_buffer")]
        public static void TexBufferRangeEXT(TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size) =>
            glTexBufferRangeEXT.Invoke(target, internalformat, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearColorIiEXT(int red, int green, int blue, int alpha);
        private static GLClearColorIiEXT glClearColorIiEXT;


        [GLExtension("GL_EXT_texture_integer")]
        public static void ClearColorIiEXT(int red, int green, int blue, int alpha) =>
            glClearColorIiEXT.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearColorIuiEXT(uint red, uint green, uint blue, uint alpha);
        private static GLClearColorIuiEXT glClearColorIuiEXT;


        [GLExtension("GL_EXT_texture_integer")]
        public static void ClearColorIuiEXT(uint red, uint green, uint blue, uint alpha) =>
            glClearColorIuiEXT.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLAreTexturesResidentEXT(int n, uint[] textures, out bool residences);
        private static GLAreTexturesResidentEXT glAreTexturesResidentEXT;


        [GLExtension("GL_EXT_texture_object")]
        public static bool AreTexturesResidentEXT(int n, uint[] textures, out bool residences) =>
            glAreTexturesResidentEXT.Invoke(n, textures, out residences);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindTextureEXT(TextureTarget target, uint texture);
        private static GLBindTextureEXT glBindTextureEXT;


        [GLExtension("GL_EXT_texture_object")]
        public static void BindTextureEXT(TextureTarget target, uint texture) =>
            glBindTextureEXT.Invoke(target, texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteTexturesEXT(int n, uint[] textures);
        private static GLDeleteTexturesEXT glDeleteTexturesEXT;


        [GLExtension("GL_EXT_texture_object")]
        public static void DeleteTexturesEXT(int n, uint[] textures) =>
            glDeleteTexturesEXT.Invoke(n, textures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenTexturesEXT(int n, out uint textures);
        private static GLGenTexturesEXT glGenTexturesEXT;


        [GLExtension("GL_EXT_texture_object")]
        public static void GenTexturesEXT(int n, out uint textures) =>
            glGenTexturesEXT.Invoke(n, out textures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsTextureEXT(uint texture);
        private static GLIsTextureEXT glIsTextureEXT;


        [GLExtension("GL_EXT_texture_object")]
        public static bool IsTextureEXT(uint texture) =>
            glIsTextureEXT.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrioritizeTexturesEXT(int n, uint[] textures, float[] priorities);
        private static GLPrioritizeTexturesEXT glPrioritizeTexturesEXT;


        [GLExtension("GL_EXT_texture_object")]
        public static void PrioritizeTexturesEXT(int n, uint[] textures, float[] priorities) =>
            glPrioritizeTexturesEXT.Invoke(n, textures, priorities);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureNormalEXT(TextureNormalModeEXT mode);
        private static GLTextureNormalEXT glTextureNormalEXT;


        [GLExtension("GL_EXT_texture_perturb_normal")]
        public static void TextureNormalEXT(TextureNormalModeEXT mode) =>
            glTextureNormalEXT.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage1DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width);
        private static GLTexStorage1DEXT glTexStorage1DEXT;


        [GLExtension("GL_EXT_texture_storage")]
        public static void TexStorage1DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width) =>
            glTexStorage1DEXT.Invoke(target, levels, internalformat, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage2DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height);
        private static GLTexStorage2DEXT glTexStorage2DEXT;


        [GLExtension("GL_EXT_texture_storage")]
        public static void TexStorage2DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height) =>
            glTexStorage2DEXT.Invoke(target, levels, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage3DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth);
        private static GLTexStorage3DEXT glTexStorage3DEXT;


        [GLExtension("GL_EXT_texture_storage")]
        public static void TexStorage3DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth) =>
            glTexStorage3DEXT.Invoke(target, levels, internalformat, width, height, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageAttribs2DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int[] attrib_list);
        private static GLTexStorageAttribs2DEXT glTexStorageAttribs2DEXT;


        [GLExtension("GL_EXT_texture_storage_compression")]
        public static void TexStorageAttribs2DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int[] attrib_list) =>
            glTexStorageAttribs2DEXT.Invoke(target, levels, internalformat, width, height, attrib_list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorageAttribs3DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth, int[] attrib_list);
        private static GLTexStorageAttribs3DEXT glTexStorageAttribs3DEXT;


        [GLExtension("GL_EXT_texture_storage_compression")]
        public static void TexStorageAttribs3DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth, int[] attrib_list) =>
            glTexStorageAttribs3DEXT.Invoke(target, levels, internalformat, width, height, depth, attrib_list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureViewEXT(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        private static GLTextureViewEXT glTextureViewEXT;


        [GLExtension("GL_EXT_texture_view")]
        public static void TextureViewEXT(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) =>
            glTextureViewEXT.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateSemaphoresNV(int n, out uint semaphores);
        private static GLCreateSemaphoresNV glCreateSemaphoresNV;


        [GLExtension("GL_NV_timeline_semaphore")]
        public static void CreateSemaphoresNV(int n, out uint semaphores) =>
            glCreateSemaphoresNV.Invoke(n, out semaphores);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, int[] parameters);
        private static GLSemaphoreParameterivNV glSemaphoreParameterivNV;


        [GLExtension("GL_NV_timeline_semaphore")]
        public static void SemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, int[] parameters) =>
            glSemaphoreParameterivNV.Invoke(semaphore, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, out int parameters);
        private static GLGetSemaphoreParameterivNV glGetSemaphoreParameterivNV;


        [GLExtension("GL_NV_timeline_semaphore")]
        public static void GetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, out int parameters) =>
            glGetSemaphoreParameterivNV.Invoke(semaphore, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginTransformFeedbackEXT(PrimitiveType primitiveMode);
        private static GLBeginTransformFeedbackEXT glBeginTransformFeedbackEXT;


        [GLExtension("GL_EXT_transform_feedback")]
        public static void BeginTransformFeedbackEXT(PrimitiveType primitiveMode) =>
            glBeginTransformFeedbackEXT.Invoke(primitiveMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndTransformFeedbackEXT();
        private static GLEndTransformFeedbackEXT glEndTransformFeedbackEXT;


        [GLExtension("GL_EXT_transform_feedback")]
        public static void EndTransformFeedbackEXT() =>
            glEndTransformFeedbackEXT.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferRangeEXT(BufferTargetARB target, uint index, uint buffer, nint offset, nint size);
        private static GLBindBufferRangeEXT glBindBufferRangeEXT;


        [GLExtension("GL_EXT_transform_feedback")]
        public static void BindBufferRangeEXT(BufferTargetARB target, uint index, uint buffer, nint offset, nint size) =>
            glBindBufferRangeEXT.Invoke(target, index, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferOffsetEXT(BufferTargetARB target, uint index, uint buffer, nint offset);
        private static GLBindBufferOffsetEXT glBindBufferOffsetEXT;


        [GLExtension("GL_EXT_transform_feedback")]
        public static void BindBufferOffsetEXT(BufferTargetARB target, uint index, uint buffer, nint offset) =>
            glBindBufferOffsetEXT.Invoke(target, index, buffer, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferBaseEXT(BufferTargetARB target, uint index, uint buffer);
        private static GLBindBufferBaseEXT glBindBufferBaseEXT;


        [GLExtension("GL_EXT_transform_feedback")]
        public static void BindBufferBaseEXT(BufferTargetARB target, uint index, uint buffer) =>
            glBindBufferBaseEXT.Invoke(target, index, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformFeedbackVaryingsEXT(uint program, int count, sbyte varyings, TransformFeedbackBufferMode bufferMode);
        private static GLTransformFeedbackVaryingsEXT glTransformFeedbackVaryingsEXT;


        [GLExtension("GL_EXT_transform_feedback")]
        public static void TransformFeedbackVaryingsEXT(uint program, int count, sbyte varyings, TransformFeedbackBufferMode bufferMode) =>
            glTransformFeedbackVaryingsEXT.Invoke(program, count, varyings, bufferMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, out int length, out int size, out AttributeType type, out sbyte name);
        private static GLGetTransformFeedbackVaryingEXT glGetTransformFeedbackVaryingEXT;


        [GLExtension("GL_EXT_transform_feedback")]
        public static void GetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, out int length, out int size, out AttributeType type, out sbyte name) =>
            glGetTransformFeedbackVaryingEXT.Invoke(program, index, bufSize, out length, out size, out type, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLArrayElementEXT(int i);
        private static GLArrayElementEXT glArrayElementEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void ArrayElementEXT(int i) =>
            glArrayElementEXT.Invoke(i);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorPointerEXT(int size, ColorPointerType type, int stride, int count, nint pointer);
        private static GLColorPointerEXT glColorPointerEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void ColorPointerEXT(int size, ColorPointerType type, int stride, int count, nint pointer) =>
            glColorPointerEXT.Invoke(size, type, stride, count, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysEXT(PrimitiveType mode, int first, int count);
        private static GLDrawArraysEXT glDrawArraysEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void DrawArraysEXT(PrimitiveType mode, int first, int count) =>
            glDrawArraysEXT.Invoke(mode, first, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEdgeFlagPointerEXT(int stride, int count, bool[] pointer);
        private static GLEdgeFlagPointerEXT glEdgeFlagPointerEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void EdgeFlagPointerEXT(int stride, int count, bool[] pointer) =>
            glEdgeFlagPointerEXT.Invoke(stride, count, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPointervEXT(GetPointervPName pname, out nint parameters);
        private static GLGetPointervEXT glGetPointervEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void GetPointervEXT(GetPointervPName pname, out nint parameters) =>
            glGetPointervEXT.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexPointerEXT(IndexPointerType type, int stride, int count, nint pointer);
        private static GLIndexPointerEXT glIndexPointerEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void IndexPointerEXT(IndexPointerType type, int stride, int count, nint pointer) =>
            glIndexPointerEXT.Invoke(type, stride, count, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalPointerEXT(NormalPointerType type, int stride, int count, nint pointer);
        private static GLNormalPointerEXT glNormalPointerEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void NormalPointerEXT(NormalPointerType type, int stride, int count, nint pointer) =>
            glNormalPointerEXT.Invoke(type, stride, count, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, nint pointer);
        private static GLTexCoordPointerEXT glTexCoordPointerEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void TexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, nint pointer) =>
            glTexCoordPointerEXT.Invoke(size, type, stride, count, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexPointerEXT(int size, VertexPointerType type, int stride, int count, nint pointer);
        private static GLVertexPointerEXT glVertexPointerEXT;


        [GLExtension("GL_EXT_vertex_array")]
        public static void VertexPointerEXT(int size, VertexPointerType type, int stride, int count, nint pointer) =>
            glVertexPointerEXT.Invoke(size, type, stride, count, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1dEXT(uint index, double x);
        private static GLVertexAttribL1dEXT glVertexAttribL1dEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL1dEXT(uint index, double x) =>
            glVertexAttribL1dEXT.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2dEXT(uint index, double x, double y);
        private static GLVertexAttribL2dEXT glVertexAttribL2dEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL2dEXT(uint index, double x, double y) =>
            glVertexAttribL2dEXT.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3dEXT(uint index, double x, double y, double z);
        private static GLVertexAttribL3dEXT glVertexAttribL3dEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL3dEXT(uint index, double x, double y, double z) =>
            glVertexAttribL3dEXT.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4dEXT(uint index, double x, double y, double z, double w);
        private static GLVertexAttribL4dEXT glVertexAttribL4dEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL4dEXT(uint index, double x, double y, double z, double w) =>
            glVertexAttribL4dEXT.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1dvEXT(uint index, double[] v);
        private static GLVertexAttribL1dvEXT glVertexAttribL1dvEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL1dvEXT(uint index, double[] v) =>
            glVertexAttribL1dvEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2dvEXT(uint index, double[] v);
        private static GLVertexAttribL2dvEXT glVertexAttribL2dvEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL2dvEXT(uint index, double[] v) =>
            glVertexAttribL2dvEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3dvEXT(uint index, double[] v);
        private static GLVertexAttribL3dvEXT glVertexAttribL3dvEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL3dvEXT(uint index, double[] v) =>
            glVertexAttribL3dvEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4dvEXT(uint index, double[] v);
        private static GLVertexAttribL4dvEXT glVertexAttribL4dvEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribL4dvEXT(uint index, double[] v) =>
            glVertexAttribL4dvEXT.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribLPointerEXT(uint index, int size, VertexAttribLType type, int stride, nint pointer);
        private static GLVertexAttribLPointerEXT glVertexAttribLPointerEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void VertexAttribLPointerEXT(uint index, int size, VertexAttribLType type, int stride, nint pointer) =>
            glVertexAttribLPointerEXT.Invoke(index, size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, out double parameters);
        private static GLGetVertexAttribLdvEXT glGetVertexAttribLdvEXT;


        [GLExtension("GL_EXT_vertex_attrib_64bit")]
        public static void GetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, out double parameters) =>
            glGetVertexAttribLdvEXT.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginVertexShaderEXT();
        private static GLBeginVertexShaderEXT glBeginVertexShaderEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void BeginVertexShaderEXT() =>
            glBeginVertexShaderEXT.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndVertexShaderEXT();
        private static GLEndVertexShaderEXT glEndVertexShaderEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void EndVertexShaderEXT() =>
            glEndVertexShaderEXT.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVertexShaderEXT(uint id);
        private static GLBindVertexShaderEXT glBindVertexShaderEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void BindVertexShaderEXT(uint id) =>
            glBindVertexShaderEXT.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGenVertexShadersEXT(uint range);
        private static GLGenVertexShadersEXT glGenVertexShadersEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static uint GenVertexShadersEXT(uint range) =>
            glGenVertexShadersEXT.Invoke(range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteVertexShaderEXT(uint id);
        private static GLDeleteVertexShaderEXT glDeleteVertexShaderEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void DeleteVertexShaderEXT(uint id) =>
            glDeleteVertexShaderEXT.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShaderOp1EXT(VertexShaderOpEXT op, uint res, uint arg1);
        private static GLShaderOp1EXT glShaderOp1EXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void ShaderOp1EXT(VertexShaderOpEXT op, uint res, uint arg1) =>
            glShaderOp1EXT.Invoke(op, res, arg1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShaderOp2EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2);
        private static GLShaderOp2EXT glShaderOp2EXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void ShaderOp2EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2) =>
            glShaderOp2EXT.Invoke(op, res, arg1, arg2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShaderOp3EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2, uint arg3);
        private static GLShaderOp3EXT glShaderOp3EXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void ShaderOp3EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2, uint arg3) =>
            glShaderOp3EXT.Invoke(op, res, arg1, arg2, arg3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSwizzleEXT(uint res, uint input, VertexShaderCoordOutEXT outX, VertexShaderCoordOutEXT outY, VertexShaderCoordOutEXT outZ, VertexShaderCoordOutEXT outW);
        private static GLSwizzleEXT glSwizzleEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void SwizzleEXT(uint res, uint input, VertexShaderCoordOutEXT outX, VertexShaderCoordOutEXT outY, VertexShaderCoordOutEXT outZ, VertexShaderCoordOutEXT outW) =>
            glSwizzleEXT.Invoke(res, input, outX, outY, outZ, outW);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWriteMaskEXT(uint res, uint input, VertexShaderWriteMaskEXT outX, VertexShaderWriteMaskEXT outY, VertexShaderWriteMaskEXT outZ, VertexShaderWriteMaskEXT outW);
        private static GLWriteMaskEXT glWriteMaskEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void WriteMaskEXT(uint res, uint input, VertexShaderWriteMaskEXT outX, VertexShaderWriteMaskEXT outY, VertexShaderWriteMaskEXT outZ, VertexShaderWriteMaskEXT outW) =>
            glWriteMaskEXT.Invoke(res, input, outX, outY, outZ, outW);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInsertComponentEXT(uint res, uint src, uint num);
        private static GLInsertComponentEXT glInsertComponentEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void InsertComponentEXT(uint res, uint src, uint num) =>
            glInsertComponentEXT.Invoke(res, src, num);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtractComponentEXT(uint res, uint src, uint num);
        private static GLExtractComponentEXT glExtractComponentEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void ExtractComponentEXT(uint res, uint src, uint num) =>
            glExtractComponentEXT.Invoke(res, src, num);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGenSymbolsEXT(DataTypeEXT datatype, VertexShaderStorageTypeEXT storagetype, ParameterRangeEXT range, uint components);
        private static GLGenSymbolsEXT glGenSymbolsEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static uint GenSymbolsEXT(DataTypeEXT datatype, VertexShaderStorageTypeEXT storagetype, ParameterRangeEXT range, uint components) =>
            glGenSymbolsEXT.Invoke(datatype, storagetype, range, components);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSetInvariantEXT(uint id, ScalarType type, nint addr);
        private static GLSetInvariantEXT glSetInvariantEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void SetInvariantEXT(uint id, ScalarType type, nint addr) =>
            glSetInvariantEXT.Invoke(id, type, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSetLocalConstantEXT(uint id, ScalarType type, nint addr);
        private static GLSetLocalConstantEXT glSetLocalConstantEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void SetLocalConstantEXT(uint id, ScalarType type, nint addr) =>
            glSetLocalConstantEXT.Invoke(id, type, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantbvEXT(uint id, sbyte[] addr);
        private static GLVariantbvEXT glVariantbvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantbvEXT(uint id, sbyte[] addr) =>
            glVariantbvEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantsvEXT(uint id, short[] addr);
        private static GLVariantsvEXT glVariantsvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantsvEXT(uint id, short[] addr) =>
            glVariantsvEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantivEXT(uint id, int[] addr);
        private static GLVariantivEXT glVariantivEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantivEXT(uint id, int[] addr) =>
            glVariantivEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantfvEXT(uint id, float[] addr);
        private static GLVariantfvEXT glVariantfvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantfvEXT(uint id, float[] addr) =>
            glVariantfvEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantdvEXT(uint id, double[] addr);
        private static GLVariantdvEXT glVariantdvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantdvEXT(uint id, double[] addr) =>
            glVariantdvEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantubvEXT(uint id, byte[] addr);
        private static GLVariantubvEXT glVariantubvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantubvEXT(uint id, byte[] addr) =>
            glVariantubvEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantusvEXT(uint id, ushort[] addr);
        private static GLVariantusvEXT glVariantusvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantusvEXT(uint id, ushort[] addr) =>
            glVariantusvEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantuivEXT(uint id, uint[] addr);
        private static GLVariantuivEXT glVariantuivEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantuivEXT(uint id, uint[] addr) =>
            glVariantuivEXT.Invoke(id, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVariantPointerEXT(uint id, ScalarType type, uint stride, nint addr);
        private static GLVariantPointerEXT glVariantPointerEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void VariantPointerEXT(uint id, ScalarType type, uint stride, nint addr) =>
            glVariantPointerEXT.Invoke(id, type, stride, addr);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableVariantClientStateEXT(uint id);
        private static GLEnableVariantClientStateEXT glEnableVariantClientStateEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void EnableVariantClientStateEXT(uint id) =>
            glEnableVariantClientStateEXT.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableVariantClientStateEXT(uint id);
        private static GLDisableVariantClientStateEXT glDisableVariantClientStateEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void DisableVariantClientStateEXT(uint id) =>
            glDisableVariantClientStateEXT.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLBindLightParameterEXT(LightName light, LightParameter value);
        private static GLBindLightParameterEXT glBindLightParameterEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static uint BindLightParameterEXT(LightName light, LightParameter value) =>
            glBindLightParameterEXT.Invoke(light, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLBindMaterialParameterEXT(TriangleFace face, MaterialParameter value);
        private static GLBindMaterialParameterEXT glBindMaterialParameterEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static uint BindMaterialParameterEXT(TriangleFace face, MaterialParameter value) =>
            glBindMaterialParameterEXT.Invoke(face, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLBindTexGenParameterEXT(TextureUnit unit, TextureCoordName coord, TextureGenParameter value);
        private static GLBindTexGenParameterEXT glBindTexGenParameterEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static uint BindTexGenParameterEXT(TextureUnit unit, TextureCoordName coord, TextureGenParameter value) =>
            glBindTexGenParameterEXT.Invoke(unit, coord, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLBindTextureUnitParameterEXT(TextureUnit unit, VertexShaderTextureUnitParameter value);
        private static GLBindTextureUnitParameterEXT glBindTextureUnitParameterEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static uint BindTextureUnitParameterEXT(TextureUnit unit, VertexShaderTextureUnitParameter value) =>
            glBindTextureUnitParameterEXT.Invoke(unit, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLBindParameterEXT(VertexShaderParameterEXT value);
        private static GLBindParameterEXT glBindParameterEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static uint BindParameterEXT(VertexShaderParameterEXT value) =>
            glBindParameterEXT.Invoke(value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsVariantEnabledEXT(uint id, VariantCapEXT cap);
        private static GLIsVariantEnabledEXT glIsVariantEnabledEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static bool IsVariantEnabledEXT(uint id, VariantCapEXT cap) =>
            glIsVariantEnabledEXT.Invoke(id, cap);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVariantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data);
        private static GLGetVariantBooleanvEXT glGetVariantBooleanvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetVariantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data) =>
            glGetVariantBooleanvEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVariantIntegervEXT(uint id, GetVariantValueEXT value, out int data);
        private static GLGetVariantIntegervEXT glGetVariantIntegervEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetVariantIntegervEXT(uint id, GetVariantValueEXT value, out int data) =>
            glGetVariantIntegervEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVariantFloatvEXT(uint id, GetVariantValueEXT value, out float data);
        private static GLGetVariantFloatvEXT glGetVariantFloatvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetVariantFloatvEXT(uint id, GetVariantValueEXT value, out float data) =>
            glGetVariantFloatvEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVariantPointervEXT(uint id, GetVariantValueEXT value, out nint data);
        private static GLGetVariantPointervEXT glGetVariantPointervEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetVariantPointervEXT(uint id, GetVariantValueEXT value, out nint data) =>
            glGetVariantPointervEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data);
        private static GLGetInvariantBooleanvEXT glGetInvariantBooleanvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data) =>
            glGetInvariantBooleanvEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInvariantIntegervEXT(uint id, GetVariantValueEXT value, out int data);
        private static GLGetInvariantIntegervEXT glGetInvariantIntegervEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetInvariantIntegervEXT(uint id, GetVariantValueEXT value, out int data) =>
            glGetInvariantIntegervEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInvariantFloatvEXT(uint id, GetVariantValueEXT value, out float data);
        private static GLGetInvariantFloatvEXT glGetInvariantFloatvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetInvariantFloatvEXT(uint id, GetVariantValueEXT value, out float data) =>
            glGetInvariantFloatvEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data);
        private static GLGetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, out bool data) =>
            glGetLocalConstantBooleanvEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, out int data);
        private static GLGetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, out int data) =>
            glGetLocalConstantIntegervEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, out float data);
        private static GLGetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT;


        [GLExtension("GL_EXT_vertex_shader")]
        public static void GetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, out float data) =>
            glGetLocalConstantFloatvEXT.Invoke(id, value, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexWeightfEXT(float weight);
        private static GLVertexWeightfEXT glVertexWeightfEXT;


        [GLExtension("GL_EXT_vertex_weighting")]
        public static void VertexWeightfEXT(float weight) =>
            glVertexWeightfEXT.Invoke(weight);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexWeightfvEXT(float[] weight);
        private static GLVertexWeightfvEXT glVertexWeightfvEXT;


        [GLExtension("GL_EXT_vertex_weighting")]
        public static void VertexWeightfvEXT(float[] weight) =>
            glVertexWeightfvEXT.Invoke(weight);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexWeightPointerEXT(int size, VertexWeightPointerTypeEXT type, int stride, nint pointer);
        private static GLVertexWeightPointerEXT glVertexWeightPointerEXT;


        [GLExtension("GL_EXT_vertex_weighting")]
        public static void VertexWeightPointerEXT(int size, VertexWeightPointerTypeEXT type, int stride, nint pointer) =>
            glVertexWeightPointerEXT.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout);
        private static GLAcquireKeyedMutexWin32EXT glAcquireKeyedMutexWin32EXT;


        [GLExtension("GL_EXT_win32_keyed_mutex")]
        public static bool AcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout) =>
            glAcquireKeyedMutexWin32EXT.Invoke(memory, key, timeout);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLReleaseKeyedMutexWin32EXT(uint memory, ulong key);
        private static GLReleaseKeyedMutexWin32EXT glReleaseKeyedMutexWin32EXT;


        [GLExtension("GL_EXT_win32_keyed_mutex")]
        public static bool ReleaseKeyedMutexWin32EXT(uint memory, ulong key) =>
            glReleaseKeyedMutexWin32EXT.Invoke(memory, key);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowRectanglesEXT(int mode, int count, int[] box);
        private static GLWindowRectanglesEXT glWindowRectanglesEXT;


        [GLExtension("GL_EXT_window_rectangles")]
        public static void WindowRectanglesEXT(int mode, int count, int[] box) =>
            glWindowRectanglesEXT.Invoke(mode, count, box);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLImportSyncEXT(int external_sync_type, nint external_sync, uint flags);
        private static GLImportSyncEXT glImportSyncEXT;


        [GLExtension("GL_EXT_x11_sync_object")]
        public static nint ImportSyncEXT(int external_sync_type, nint external_sync, uint flags) =>
            glImportSyncEXT.Invoke(external_sync_type, external_sync, flags);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFrameTerminatorGREMEDY();
        private static GLFrameTerminatorGREMEDY glFrameTerminatorGREMEDY;


        [GLExtension("GL_GREMEDY_frame_terminator")]
        public static void FrameTerminatorGREMEDY() =>
            glFrameTerminatorGREMEDY.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStringMarkerGREMEDY(int len, nint str);
        private static GLStringMarkerGREMEDY glStringMarkerGREMEDY;


        [GLExtension("GL_GREMEDY_string_marker")]
        public static void StringMarkerGREMEDY(int len, nint str) =>
            glStringMarkerGREMEDY.Invoke(len, str);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImageTransformParameteriHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int param);
        private static GLImageTransformParameteriHP glImageTransformParameteriHP;


        [GLExtension("GL_HP_image_transform")]
        public static void ImageTransformParameteriHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int param) =>
            glImageTransformParameteriHP.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImageTransformParameterfHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float param);
        private static GLImageTransformParameterfHP glImageTransformParameterfHP;


        [GLExtension("GL_HP_image_transform")]
        public static void ImageTransformParameterfHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float param) =>
            glImageTransformParameterfHP.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters);
        private static GLImageTransformParameterivHP glImageTransformParameterivHP;


        [GLExtension("GL_HP_image_transform")]
        public static void ImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int[] parameters) =>
            glImageTransformParameterivHP.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters);
        private static GLImageTransformParameterfvHP glImageTransformParameterfvHP;


        [GLExtension("GL_HP_image_transform")]
        public static void ImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float[] parameters) =>
            glImageTransformParameterfvHP.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, out int parameters);
        private static GLGetImageTransformParameterivHP glGetImageTransformParameterivHP;


        [GLExtension("GL_HP_image_transform")]
        public static void GetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, out int parameters) =>
            glGetImageTransformParameterivHP.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, out float parameters);
        private static GLGetImageTransformParameterfvHP glGetImageTransformParameterfvHP;


        [GLExtension("GL_HP_image_transform")]
        public static void GetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, out float parameters) =>
            glGetImageTransformParameterfvHP.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiModeDrawArraysIBM(PrimitiveType[] mode, int[] first, int[] count, int primcount, int modestride);
        private static GLMultiModeDrawArraysIBM glMultiModeDrawArraysIBM;


        [GLExtension("GL_IBM_multimode_draw_arrays")]
        public static void MultiModeDrawArraysIBM(PrimitiveType[] mode, int[] first, int[] count, int primcount, int modestride) =>
            glMultiModeDrawArraysIBM.Invoke(mode, first, count, primcount, modestride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiModeDrawElementsIBM(PrimitiveType[] mode, int[] count, DrawElementsType type, nint indices, int primcount, int modestride);
        private static GLMultiModeDrawElementsIBM glMultiModeDrawElementsIBM;


        [GLExtension("GL_IBM_multimode_draw_arrays")]
        public static void MultiModeDrawElementsIBM(PrimitiveType[] mode, int[] count, DrawElementsType type, nint indices, int primcount, int modestride) =>
            glMultiModeDrawElementsIBM.Invoke(mode, count, type, indices, primcount, modestride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushStaticDataIBM(int target);
        private static GLFlushStaticDataIBM glFlushStaticDataIBM;


        [GLExtension("GL_IBM_static_data")]
        public static void FlushStaticDataIBM(int target) =>
            glFlushStaticDataIBM.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorPointerListIBM(int size, ColorPointerType type, int stride, nint pointer, int ptrstride);
        private static GLColorPointerListIBM glColorPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void ColorPointerListIBM(int size, ColorPointerType type, int stride, nint pointer, int ptrstride) =>
            glColorPointerListIBM.Invoke(size, type, stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColorPointerListIBM(int size, SecondaryColorPointerTypeIBM type, int stride, nint pointer, int ptrstride);
        private static GLSecondaryColorPointerListIBM glSecondaryColorPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void SecondaryColorPointerListIBM(int size, SecondaryColorPointerTypeIBM type, int stride, nint pointer, int ptrstride) =>
            glSecondaryColorPointerListIBM.Invoke(size, type, stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride);
        private static GLEdgeFlagPointerListIBM glEdgeFlagPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void EdgeFlagPointerListIBM(int stride, bool[] pointer, int ptrstride) =>
            glEdgeFlagPointerListIBM.Invoke(stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordPointerListIBM(FogPointerTypeIBM type, int stride, nint pointer, int ptrstride);
        private static GLFogCoordPointerListIBM glFogCoordPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void FogCoordPointerListIBM(FogPointerTypeIBM type, int stride, nint pointer, int ptrstride) =>
            glFogCoordPointerListIBM.Invoke(type, stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexPointerListIBM(IndexPointerType type, int stride, nint pointer, int ptrstride);
        private static GLIndexPointerListIBM glIndexPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void IndexPointerListIBM(IndexPointerType type, int stride, nint pointer, int ptrstride) =>
            glIndexPointerListIBM.Invoke(type, stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalPointerListIBM(NormalPointerType type, int stride, nint pointer, int ptrstride);
        private static GLNormalPointerListIBM glNormalPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void NormalPointerListIBM(NormalPointerType type, int stride, nint pointer, int ptrstride) =>
            glNormalPointerListIBM.Invoke(type, stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordPointerListIBM(int size, TexCoordPointerType type, int stride, nint pointer, int ptrstride);
        private static GLTexCoordPointerListIBM glTexCoordPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void TexCoordPointerListIBM(int size, TexCoordPointerType type, int stride, nint pointer, int ptrstride) =>
            glTexCoordPointerListIBM.Invoke(size, type, stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexPointerListIBM(int size, VertexPointerType type, int stride, nint pointer, int ptrstride);
        private static GLVertexPointerListIBM glVertexPointerListIBM;


        [GLExtension("GL_IBM_vertex_array_lists")]
        public static void VertexPointerListIBM(int size, VertexPointerType type, int stride, nint pointer, int ptrstride) =>
            glVertexPointerListIBM.Invoke(size, type, stride, pointer, ptrstride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetTextureHandleIMG(uint texture);
        private static GLGetTextureHandleIMG glGetTextureHandleIMG;


        [GLExtension("GL_IMG_bindless_texture")]
        public static ulong GetTextureHandleIMG(uint texture) =>
            glGetTextureHandleIMG.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetTextureSamplerHandleIMG(uint texture, uint sampler);
        private static GLGetTextureSamplerHandleIMG glGetTextureSamplerHandleIMG;


        [GLExtension("GL_IMG_bindless_texture")]
        public static ulong GetTextureSamplerHandleIMG(uint texture, uint sampler) =>
            glGetTextureSamplerHandleIMG.Invoke(texture, sampler);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformHandleui64IMG(int location, ulong value);
        private static GLUniformHandleui64IMG glUniformHandleui64IMG;


        [GLExtension("GL_IMG_bindless_texture")]
        public static void UniformHandleui64IMG(int location, ulong value) =>
            glUniformHandleui64IMG.Invoke(location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformHandleui64vIMG(int location, int count, ulong[] value);
        private static GLUniformHandleui64vIMG glUniformHandleui64vIMG;


        [GLExtension("GL_IMG_bindless_texture")]
        public static void UniformHandleui64vIMG(int location, int count, ulong[] value) =>
            glUniformHandleui64vIMG.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformHandleui64IMG(uint program, int location, ulong value);
        private static GLProgramUniformHandleui64IMG glProgramUniformHandleui64IMG;


        [GLExtension("GL_IMG_bindless_texture")]
        public static void ProgramUniformHandleui64IMG(uint program, int location, ulong value) =>
            glProgramUniformHandleui64IMG.Invoke(program, location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformHandleui64vIMG(uint program, int location, int count, ulong[] values);
        private static GLProgramUniformHandleui64vIMG glProgramUniformHandleui64vIMG;


        [GLExtension("GL_IMG_bindless_texture")]
        public static void ProgramUniformHandleui64vIMG(uint program, int location, int count, ulong[] values) =>
            glProgramUniformHandleui64vIMG.Invoke(program, location, count, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture2DDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int xscale, int yscale);
        private static GLFramebufferTexture2DDownsampleIMG glFramebufferTexture2DDownsampleIMG;


        [GLExtension("GL_IMG_framebuffer_downsample")]
        public static void FramebufferTexture2DDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int xscale, int yscale) =>
            glFramebufferTexture2DDownsampleIMG.Invoke(target, attachment, textarget, texture, level, xscale, yscale);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureLayerDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer, int xscale, int yscale);
        private static GLFramebufferTextureLayerDownsampleIMG glFramebufferTextureLayerDownsampleIMG;


        [GLExtension("GL_IMG_framebuffer_downsample")]
        public static void FramebufferTextureLayerDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer, int xscale, int yscale) =>
            glFramebufferTextureLayerDownsampleIMG.Invoke(target, attachment, texture, level, layer, xscale, yscale);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisampleIMG(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisampleIMG glRenderbufferStorageMultisampleIMG;


        [GLExtension("GL_IMG_multisampled_render_to_texture")]
        public static void RenderbufferStorageMultisampleIMG(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisampleIMG.Invoke(target, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture2DMultisampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples);
        private static GLFramebufferTexture2DMultisampleIMG glFramebufferTexture2DMultisampleIMG;


        [GLExtension("GL_IMG_multisampled_render_to_texture")]
        public static void FramebufferTexture2DMultisampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples) =>
            glFramebufferTexture2DMultisampleIMG.Invoke(target, attachment, textarget, texture, level, samples);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipPlanefIMG(ClipPlaneName p, float[] eqn);
        private static GLClipPlanefIMG glClipPlanefIMG;


        [GLExtension("GL_IMG_user_clip_plane")]
        public static void ClipPlanefIMG(ClipPlaneName p, float[] eqn) =>
            glClipPlanefIMG.Invoke(p, eqn);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipPlanexIMG(ClipPlaneName p, int[] eqn);
        private static GLClipPlanexIMG glClipPlanexIMG;


        [GLExtension("GL_IMG_user_clip_plane")]
        public static void ClipPlanexIMG(ClipPlaneName p, int[] eqn) =>
            glClipPlanexIMG.Invoke(p, eqn);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparateINGR(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
        private static GLBlendFuncSeparateINGR glBlendFuncSeparateINGR;


        [GLExtension("GL_INGR_blend_func_separate")]
        public static void BlendFuncSeparateINGR(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) =>
            glBlendFuncSeparateINGR.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLApplyFramebufferAttachmentCMAAINTEL();
        private static GLApplyFramebufferAttachmentCMAAINTEL glApplyFramebufferAttachmentCMAAINTEL;


        [GLExtension("GL_INTEL_framebuffer_CMAA")]
        public static void ApplyFramebufferAttachmentCMAAINTEL() =>
            glApplyFramebufferAttachmentCMAAINTEL.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSyncTextureINTEL(uint texture);
        private static GLSyncTextureINTEL glSyncTextureINTEL;


        [GLExtension("GL_INTEL_map_texture")]
        public static void SyncTextureINTEL(uint texture) =>
            glSyncTextureINTEL.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUnmapTexture2DINTEL(uint texture, int level);
        private static GLUnmapTexture2DINTEL glUnmapTexture2DINTEL;


        [GLExtension("GL_INTEL_map_texture")]
        public static void UnmapTexture2DINTEL(uint texture, int level) =>
            glUnmapTexture2DINTEL.Invoke(texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapTexture2DINTEL(uint texture, int level, uint access, out int stride, out int layout);
        private static GLMapTexture2DINTEL glMapTexture2DINTEL;


        [GLExtension("GL_INTEL_map_texture")]
        public static nint MapTexture2DINTEL(uint texture, int level, uint access, out int stride, out int layout) =>
            glMapTexture2DINTEL.Invoke(texture, level, access, out stride, out layout);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexPointervINTEL(int size, VertexPointerType type, nint pointer);
        private static GLVertexPointervINTEL glVertexPointervINTEL;


        [GLExtension("GL_INTEL_parallel_arrays")]
        public static void VertexPointervINTEL(int size, VertexPointerType type, nint pointer) =>
            glVertexPointervINTEL.Invoke(size, type, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalPointervINTEL(NormalPointerType type, nint pointer);
        private static GLNormalPointervINTEL glNormalPointervINTEL;


        [GLExtension("GL_INTEL_parallel_arrays")]
        public static void NormalPointervINTEL(NormalPointerType type, nint pointer) =>
            glNormalPointervINTEL.Invoke(type, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorPointervINTEL(int size, VertexPointerType type, nint pointer);
        private static GLColorPointervINTEL glColorPointervINTEL;


        [GLExtension("GL_INTEL_parallel_arrays")]
        public static void ColorPointervINTEL(int size, VertexPointerType type, nint pointer) =>
            glColorPointervINTEL.Invoke(size, type, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordPointervINTEL(int size, VertexPointerType type, nint pointer);
        private static GLTexCoordPointervINTEL glTexCoordPointervINTEL;


        [GLExtension("GL_INTEL_parallel_arrays")]
        public static void TexCoordPointervINTEL(int size, VertexPointerType type, nint pointer) =>
            glTexCoordPointervINTEL.Invoke(size, type, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginPerfQueryINTEL(uint queryHandle);
        private static GLBeginPerfQueryINTEL glBeginPerfQueryINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void BeginPerfQueryINTEL(uint queryHandle) =>
            glBeginPerfQueryINTEL.Invoke(queryHandle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreatePerfQueryINTEL(uint queryId, out uint queryHandle);
        private static GLCreatePerfQueryINTEL glCreatePerfQueryINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void CreatePerfQueryINTEL(uint queryId, out uint queryHandle) =>
            glCreatePerfQueryINTEL.Invoke(queryId, out queryHandle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeletePerfQueryINTEL(uint queryHandle);
        private static GLDeletePerfQueryINTEL glDeletePerfQueryINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void DeletePerfQueryINTEL(uint queryHandle) =>
            glDeletePerfQueryINTEL.Invoke(queryHandle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndPerfQueryINTEL(uint queryHandle);
        private static GLEndPerfQueryINTEL glEndPerfQueryINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void EndPerfQueryINTEL(uint queryHandle) =>
            glEndPerfQueryINTEL.Invoke(queryHandle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFirstPerfQueryIdINTEL(out uint queryId);
        private static GLGetFirstPerfQueryIdINTEL glGetFirstPerfQueryIdINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void GetFirstPerfQueryIdINTEL(out uint queryId) =>
            glGetFirstPerfQueryIdINTEL.Invoke(out queryId);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNextPerfQueryIdINTEL(uint queryId, out uint nextQueryId);
        private static GLGetNextPerfQueryIdINTEL glGetNextPerfQueryIdINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void GetNextPerfQueryIdINTEL(uint queryId, out uint nextQueryId) =>
            glGetNextPerfQueryIdINTEL.Invoke(queryId, out nextQueryId);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, out sbyte counterName, uint counterDescLength, out sbyte counterDesc, out uint counterOffset, out uint counterDataSize, out uint counterTypeEnum, out uint counterDataTypeEnum, out ulong rawCounterMaxValue);
        private static GLGetPerfCounterInfoINTEL glGetPerfCounterInfoINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, out sbyte counterName, uint counterDescLength, out sbyte counterDesc, out uint counterOffset, out uint counterDataSize, out uint counterTypeEnum, out uint counterDataTypeEnum, out ulong rawCounterMaxValue) =>
            glGetPerfCounterInfoINTEL.Invoke(queryId, counterId, counterNameLength, out counterName, counterDescLength, out counterDesc, out counterOffset, out counterDataSize, out counterTypeEnum, out counterDataTypeEnum, out rawCounterMaxValue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, out nint data, out uint bytesWritten);
        private static GLGetPerfQueryDataINTEL glGetPerfQueryDataINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void GetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, out nint data, out uint bytesWritten) =>
            glGetPerfQueryDataINTEL.Invoke(queryHandle, flags, dataSize, out data, out bytesWritten);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfQueryIdByNameINTEL(out sbyte queryName, out uint queryId);
        private static GLGetPerfQueryIdByNameINTEL glGetPerfQueryIdByNameINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void GetPerfQueryIdByNameINTEL(out sbyte queryName, out uint queryId) =>
            glGetPerfQueryIdByNameINTEL.Invoke(out queryName, out queryId);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, out sbyte queryName, out uint dataSize, out uint noCounters, out uint noInstances, out uint capsMask);
        private static GLGetPerfQueryInfoINTEL glGetPerfQueryInfoINTEL;


        [GLExtension("GL_INTEL_performance_query")]
        public static void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, out sbyte queryName, out uint dataSize, out uint noCounters, out uint noInstances, out uint capsMask) =>
            glGetPerfQueryInfoINTEL.Invoke(queryId, queryNameLength, out queryName, out dataSize, out noCounters, out noInstances, out capsMask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendBarrierKHR();
        private static GLBlendBarrierKHR glBlendBarrierKHR;


        [GLExtension("GL_KHR_blend_equation_advanced")]
        public static void BlendBarrierKHR() =>
            glBlendBarrierKHR.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled);
        private static GLDebugMessageControl glDebugMessageControl;


        [GLExtension("GL_KHR_debug")]
        public static void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled) =>
            glDebugMessageControl.Invoke(source, type, severity, count, ids, enabled);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, sbyte[] buf);
        private static GLDebugMessageInsert glDebugMessageInsert;


        [GLExtension("GL_KHR_debug")]
        public static void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, sbyte[] buf) =>
            glDebugMessageInsert.Invoke(source, type, id, severity, length, buf);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageCallback(DebugProc callback, nint userParam);
        private static GLDebugMessageCallback glDebugMessageCallback;


        [GLExtension("GL_KHR_debug")]
        public static void DebugMessageCallback(DebugProc callback, nint userParam) =>
            glDebugMessageCallback.Invoke(callback, userParam);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetDebugMessageLog(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, out sbyte messageLog);
        private static GLGetDebugMessageLog glGetDebugMessageLog;


        [GLExtension("GL_KHR_debug")]
        public static uint GetDebugMessageLog(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, out sbyte messageLog) =>
            glGetDebugMessageLog.Invoke(count, bufSize, out sources, out types, out ids, out severities, out lengths, out messageLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushDebugGroup(DebugSource source, uint id, int length, sbyte[] message);
        private static GLPushDebugGroup glPushDebugGroup;


        [GLExtension("GL_KHR_debug")]
        public static void PushDebugGroup(DebugSource source, uint id, int length, sbyte[] message) =>
            glPushDebugGroup.Invoke(source, id, length, message);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPopDebugGroup();
        private static GLPopDebugGroup glPopDebugGroup;


        [GLExtension("GL_KHR_debug")]
        public static void PopDebugGroup() =>
            glPopDebugGroup.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLObjectLabel(ObjectIdentifier identifier, uint name, int length, sbyte[] label);
        private static GLObjectLabel glObjectLabel;


        [GLExtension("GL_KHR_debug")]
        public static void ObjectLabel(ObjectIdentifier identifier, uint name, int length, sbyte[] label) =>
            glObjectLabel.Invoke(identifier, name, length, label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length, out sbyte label);
        private static GLGetObjectLabel glGetObjectLabel;


        [GLExtension("GL_KHR_debug")]
        public static void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, out int length, out sbyte label) =>
            glGetObjectLabel.Invoke(identifier, name, bufSize, out length, out label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLObjectPtrLabel(nint ptr, int length, sbyte[] label);
        private static GLObjectPtrLabel glObjectPtrLabel;


        [GLExtension("GL_KHR_debug")]
        public static void ObjectPtrLabel(nint ptr, int length, sbyte[] label) =>
            glObjectPtrLabel.Invoke(ptr, length, label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectPtrLabel(nint ptr, int bufSize, out int length, out sbyte label);
        private static GLGetObjectPtrLabel glGetObjectPtrLabel;


        [GLExtension("GL_KHR_debug")]
        public static void GetObjectPtrLabel(nint ptr, int bufSize, out int length, out sbyte label) =>
            glGetObjectPtrLabel.Invoke(ptr, bufSize, out length, out label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPointerv(GetPointervPName pname, out nint parameters);
        private static GLGetPointerv glGetPointerv;


        [GLExtension("GL_KHR_debug")]
        public static void GetPointerv(GetPointervPName pname, out nint parameters) =>
            glGetPointerv.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled);
        private static GLDebugMessageControlKHR glDebugMessageControlKHR;


        [GLExtension("GL_KHR_debug")]
        public static void DebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, uint[] ids, bool enabled) =>
            glDebugMessageControlKHR.Invoke(source, type, severity, count, ids, enabled);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageInsertKHR(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, sbyte[] buf);
        private static GLDebugMessageInsertKHR glDebugMessageInsertKHR;


        [GLExtension("GL_KHR_debug")]
        public static void DebugMessageInsertKHR(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, sbyte[] buf) =>
            glDebugMessageInsertKHR.Invoke(source, type, id, severity, length, buf);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDebugMessageCallbackKHR(DebugProc callback, nint userParam);
        private static GLDebugMessageCallbackKHR glDebugMessageCallbackKHR;


        [GLExtension("GL_KHR_debug")]
        public static void DebugMessageCallbackKHR(DebugProc callback, nint userParam) =>
            glDebugMessageCallbackKHR.Invoke(callback, userParam);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetDebugMessageLogKHR(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, out sbyte messageLog);
        private static GLGetDebugMessageLogKHR glGetDebugMessageLogKHR;


        [GLExtension("GL_KHR_debug")]
        public static uint GetDebugMessageLogKHR(uint count, int bufSize, out DebugSource sources, out DebugType types, out uint ids, out DebugSeverity severities, out int lengths, out sbyte messageLog) =>
            glGetDebugMessageLogKHR.Invoke(count, bufSize, out sources, out types, out ids, out severities, out lengths, out messageLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushDebugGroupKHR(DebugSource source, uint id, int length, sbyte[] message);
        private static GLPushDebugGroupKHR glPushDebugGroupKHR;


        [GLExtension("GL_KHR_debug")]
        public static void PushDebugGroupKHR(DebugSource source, uint id, int length, sbyte[] message) =>
            glPushDebugGroupKHR.Invoke(source, id, length, message);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPopDebugGroupKHR();
        private static GLPopDebugGroupKHR glPopDebugGroupKHR;


        [GLExtension("GL_KHR_debug")]
        public static void PopDebugGroupKHR() =>
            glPopDebugGroupKHR.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLObjectLabelKHR(ObjectIdentifier identifier, uint name, int length, sbyte[] label);
        private static GLObjectLabelKHR glObjectLabelKHR;


        [GLExtension("GL_KHR_debug")]
        public static void ObjectLabelKHR(ObjectIdentifier identifier, uint name, int length, sbyte[] label) =>
            glObjectLabelKHR.Invoke(identifier, name, length, label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectLabelKHR(int identifier, uint name, int bufSize, out int length, out sbyte label);
        private static GLGetObjectLabelKHR glGetObjectLabelKHR;


        [GLExtension("GL_KHR_debug")]
        public static void GetObjectLabelKHR(int identifier, uint name, int bufSize, out int length, out sbyte label) =>
            glGetObjectLabelKHR.Invoke(identifier, name, bufSize, out length, out label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLObjectPtrLabelKHR(nint ptr, int length, sbyte[] label);
        private static GLObjectPtrLabelKHR glObjectPtrLabelKHR;


        [GLExtension("GL_KHR_debug")]
        public static void ObjectPtrLabelKHR(nint ptr, int length, sbyte[] label) =>
            glObjectPtrLabelKHR.Invoke(ptr, length, label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetObjectPtrLabelKHR(nint ptr, int bufSize, out int length, out sbyte label);
        private static GLGetObjectPtrLabelKHR glGetObjectPtrLabelKHR;


        [GLExtension("GL_KHR_debug")]
        public static void GetObjectPtrLabelKHR(nint ptr, int bufSize, out int length, out sbyte label) =>
            glGetObjectPtrLabelKHR.Invoke(ptr, bufSize, out length, out label);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPointervKHR(int pname, out nint parameters);
        private static GLGetPointervKHR glGetPointervKHR;


        [GLExtension("GL_KHR_debug")]
        public static void GetPointervKHR(int pname, out nint parameters) =>
            glGetPointervKHR.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GraphicsResetStatus GLGetGraphicsResetStatus();
        private static GLGetGraphicsResetStatus glGetGraphicsResetStatus;


        [GLExtension("GL_KHR_robustness")]
        public static GraphicsResetStatus GetGraphicsResetStatus() =>
            glGetGraphicsResetStatus.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data);
        private static GLReadnPixels glReadnPixels;


        [GLExtension("GL_KHR_robustness")]
        public static void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data) =>
            glReadnPixels.Invoke(x, y, width, height, format, type, bufSize, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformfv(uint program, int location, int bufSize, out float parameters);
        private static GLGetnUniformfv glGetnUniformfv;


        [GLExtension("GL_KHR_robustness")]
        public static void GetnUniformfv(uint program, int location, int bufSize, out float parameters) =>
            glGetnUniformfv.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformiv(uint program, int location, int bufSize, out int parameters);
        private static GLGetnUniformiv glGetnUniformiv;


        [GLExtension("GL_KHR_robustness")]
        public static void GetnUniformiv(uint program, int location, int bufSize, out int parameters) =>
            glGetnUniformiv.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformuiv(uint program, int location, int bufSize, out uint parameters);
        private static GLGetnUniformuiv glGetnUniformuiv;


        [GLExtension("GL_KHR_robustness")]
        public static void GetnUniformuiv(uint program, int location, int bufSize, out uint parameters) =>
            glGetnUniformuiv.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GraphicsResetStatus GLGetGraphicsResetStatusKHR();
        private static GLGetGraphicsResetStatusKHR glGetGraphicsResetStatusKHR;


        [GLExtension("GL_KHR_robustness")]
        public static GraphicsResetStatus GetGraphicsResetStatusKHR() =>
            glGetGraphicsResetStatusKHR.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadnPixelsKHR(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data);
        private static GLReadnPixelsKHR glReadnPixelsKHR;


        [GLExtension("GL_KHR_robustness")]
        public static void ReadnPixelsKHR(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, out nint data) =>
            glReadnPixelsKHR.Invoke(x, y, width, height, format, type, bufSize, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformfvKHR(uint program, int location, int bufSize, out float parameters);
        private static GLGetnUniformfvKHR glGetnUniformfvKHR;


        [GLExtension("GL_KHR_robustness")]
        public static void GetnUniformfvKHR(uint program, int location, int bufSize, out float parameters) =>
            glGetnUniformfvKHR.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformivKHR(uint program, int location, int bufSize, out int parameters);
        private static GLGetnUniformivKHR glGetnUniformivKHR;


        [GLExtension("GL_KHR_robustness")]
        public static void GetnUniformivKHR(uint program, int location, int bufSize, out int parameters) =>
            glGetnUniformivKHR.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformuivKHR(uint program, int location, int bufSize, out uint parameters);
        private static GLGetnUniformuivKHR glGetnUniformuivKHR;


        [GLExtension("GL_KHR_robustness")]
        public static void GetnUniformuivKHR(uint program, int location, int bufSize, out uint parameters) =>
            glGetnUniformuivKHR.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaxShaderCompilerThreadsKHR(uint count);
        private static GLMaxShaderCompilerThreadsKHR glMaxShaderCompilerThreadsKHR;


        [GLExtension("GL_KHR_parallel_shader_compile")]
        public static void MaxShaderCompilerThreadsKHR(uint count) =>
            glMaxShaderCompilerThreadsKHR.Invoke(count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferParameteriMESA(FramebufferTarget target, FramebufferParameterName pname, int param);
        private static GLFramebufferParameteriMESA glFramebufferParameteriMESA;


        [GLExtension("GL_MESA_framebuffer_flip_y")]
        public static void FramebufferParameteriMESA(FramebufferTarget target, FramebufferParameterName pname, int param) =>
            glFramebufferParameteriMESA.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int parameters);
        private static GLGetFramebufferParameterivMESA glGetFramebufferParameterivMESA;


        [GLExtension("GL_MESA_framebuffer_flip_y")]
        public static void GetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, out int parameters) =>
            glGetFramebufferParameterivMESA.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResizeBuffersMESA();
        private static GLResizeBuffersMESA glResizeBuffersMESA;


        [GLExtension("GL_MESA_resize_buffers")]
        public static void ResizeBuffersMESA() =>
            glResizeBuffersMESA.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2dMESA(double x, double y);
        private static GLWindowPos2dMESA glWindowPos2dMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2dMESA(double x, double y) =>
            glWindowPos2dMESA.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2dvMESA(double[] v);
        private static GLWindowPos2dvMESA glWindowPos2dvMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2dvMESA(double[] v) =>
            glWindowPos2dvMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2fMESA(float x, float y);
        private static GLWindowPos2fMESA glWindowPos2fMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2fMESA(float x, float y) =>
            glWindowPos2fMESA.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2fvMESA(float[] v);
        private static GLWindowPos2fvMESA glWindowPos2fvMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2fvMESA(float[] v) =>
            glWindowPos2fvMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2iMESA(int x, int y);
        private static GLWindowPos2iMESA glWindowPos2iMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2iMESA(int x, int y) =>
            glWindowPos2iMESA.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2ivMESA(int[] v);
        private static GLWindowPos2ivMESA glWindowPos2ivMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2ivMESA(int[] v) =>
            glWindowPos2ivMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2sMESA(short x, short y);
        private static GLWindowPos2sMESA glWindowPos2sMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2sMESA(short x, short y) =>
            glWindowPos2sMESA.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2svMESA(short[] v);
        private static GLWindowPos2svMESA glWindowPos2svMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos2svMESA(short[] v) =>
            glWindowPos2svMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3dMESA(double x, double y, double z);
        private static GLWindowPos3dMESA glWindowPos3dMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3dMESA(double x, double y, double z) =>
            glWindowPos3dMESA.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3dvMESA(double[] v);
        private static GLWindowPos3dvMESA glWindowPos3dvMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3dvMESA(double[] v) =>
            glWindowPos3dvMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3fMESA(float x, float y, float z);
        private static GLWindowPos3fMESA glWindowPos3fMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3fMESA(float x, float y, float z) =>
            glWindowPos3fMESA.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3fvMESA(float[] v);
        private static GLWindowPos3fvMESA glWindowPos3fvMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3fvMESA(float[] v) =>
            glWindowPos3fvMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3iMESA(int x, int y, int z);
        private static GLWindowPos3iMESA glWindowPos3iMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3iMESA(int x, int y, int z) =>
            glWindowPos3iMESA.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3ivMESA(int[] v);
        private static GLWindowPos3ivMESA glWindowPos3ivMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3ivMESA(int[] v) =>
            glWindowPos3ivMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3sMESA(short x, short y, short z);
        private static GLWindowPos3sMESA glWindowPos3sMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3sMESA(short x, short y, short z) =>
            glWindowPos3sMESA.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3svMESA(short[] v);
        private static GLWindowPos3svMESA glWindowPos3svMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos3svMESA(short[] v) =>
            glWindowPos3svMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4dMESA(double x, double y, double z, double w);
        private static GLWindowPos4dMESA glWindowPos4dMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4dMESA(double x, double y, double z, double w) =>
            glWindowPos4dMESA.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4dvMESA(double[] v);
        private static GLWindowPos4dvMESA glWindowPos4dvMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4dvMESA(double[] v) =>
            glWindowPos4dvMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4fMESA(float x, float y, float z, float w);
        private static GLWindowPos4fMESA glWindowPos4fMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4fMESA(float x, float y, float z, float w) =>
            glWindowPos4fMESA.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4fvMESA(float[] v);
        private static GLWindowPos4fvMESA glWindowPos4fvMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4fvMESA(float[] v) =>
            glWindowPos4fvMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4iMESA(int x, int y, int z, int w);
        private static GLWindowPos4iMESA glWindowPos4iMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4iMESA(int x, int y, int z, int w) =>
            glWindowPos4iMESA.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4ivMESA(int[] v);
        private static GLWindowPos4ivMESA glWindowPos4ivMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4ivMESA(int[] v) =>
            glWindowPos4ivMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4sMESA(short x, short y, short z, short w);
        private static GLWindowPos4sMESA glWindowPos4sMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4sMESA(short x, short y, short z, short w) =>
            glWindowPos4sMESA.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos4svMESA(short[] v);
        private static GLWindowPos4svMESA glWindowPos4svMESA;


        [GLExtension("GL_MESA_window_pos")]
        public static void WindowPos4svMESA(short[] v) =>
            glWindowPos4svMESA.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginConditionalRenderNVX(uint id);
        private static GLBeginConditionalRenderNVX glBeginConditionalRenderNVX;


        [GLExtension("GL_NVX_conditional_render")]
        public static void BeginConditionalRenderNVX(uint id) =>
            glBeginConditionalRenderNVX.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndConditionalRenderNVX();
        private static GLEndConditionalRenderNVX glEndConditionalRenderNVX;


        [GLExtension("GL_NVX_conditional_render")]
        public static void EndConditionalRenderNVX() =>
            glEndConditionalRenderNVX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, nint offset, nint size, nint data);
        private static GLLGPUNamedBufferSubDataNVX glLGPUNamedBufferSubDataNVX;


        [GLExtension("GL_NVX_linked_gpu_multicast")]
        public static void LGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, nint offset, nint size, nint data) =>
            glLGPUNamedBufferSubDataNVX.Invoke(gpuMask, buffer, offset, size, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
        private static GLLGPUCopyImageSubDataNVX glLGPUCopyImageSubDataNVX;


        [GLExtension("GL_NVX_linked_gpu_multicast")]
        public static void LGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) =>
            glLGPUCopyImageSubDataNVX.Invoke(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLGPUInterlockNVX();
        private static GLLGPUInterlockNVX glLGPUInterlockNVX;


        [GLExtension("GL_NVX_linked_gpu_multicast")]
        public static void LGPUInterlockNVX() =>
            glLGPUInterlockNVX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaToCoverageDitherControlNV(int mode);
        private static GLAlphaToCoverageDitherControlNV glAlphaToCoverageDitherControlNV;


        [GLExtension("GL_NV_alpha_to_coverage_dither_control")]
        public static void AlphaToCoverageDitherControlNV(int mode) =>
            glAlphaToCoverageDitherControlNV.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysIndirectBindlessNV(PrimitiveType mode, nint indirect, int drawCount, int stride, int vertexBufferCount);
        private static GLMultiDrawArraysIndirectBindlessNV glMultiDrawArraysIndirectBindlessNV;


        [GLExtension("GL_NV_bindless_multi_draw_indirect")]
        public static void MultiDrawArraysIndirectBindlessNV(PrimitiveType mode, nint indirect, int drawCount, int stride, int vertexBufferCount) =>
            glMultiDrawArraysIndirectBindlessNV.Invoke(mode, indirect, drawCount, stride, vertexBufferCount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsIndirectBindlessNV(PrimitiveType mode, DrawElementsType type, nint indirect, int drawCount, int stride, int vertexBufferCount);
        private static GLMultiDrawElementsIndirectBindlessNV glMultiDrawElementsIndirectBindlessNV;


        [GLExtension("GL_NV_bindless_multi_draw_indirect")]
        public static void MultiDrawElementsIndirectBindlessNV(PrimitiveType mode, DrawElementsType type, nint indirect, int drawCount, int stride, int vertexBufferCount) =>
            glMultiDrawElementsIndirectBindlessNV.Invoke(mode, type, indirect, drawCount, stride, vertexBufferCount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysIndirectBindlessCountNV(PrimitiveType mode, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
        private static GLMultiDrawArraysIndirectBindlessCountNV glMultiDrawArraysIndirectBindlessCountNV;


        [GLExtension("GL_NV_bindless_multi_draw_indirect_count")]
        public static void MultiDrawArraysIndirectBindlessCountNV(PrimitiveType mode, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) =>
            glMultiDrawArraysIndirectBindlessCountNV.Invoke(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsIndirectBindlessCountNV(PrimitiveType mode, DrawElementsType type, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount);
        private static GLMultiDrawElementsIndirectBindlessCountNV glMultiDrawElementsIndirectBindlessCountNV;


        [GLExtension("GL_NV_bindless_multi_draw_indirect_count")]
        public static void MultiDrawElementsIndirectBindlessCountNV(PrimitiveType mode, DrawElementsType type, nint indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount) =>
            glMultiDrawElementsIndirectBindlessCountNV.Invoke(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetTextureHandleNV(uint texture);
        private static GLGetTextureHandleNV glGetTextureHandleNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static ulong GetTextureHandleNV(uint texture) =>
            glGetTextureHandleNV.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetTextureSamplerHandleNV(uint texture, uint sampler);
        private static GLGetTextureSamplerHandleNV glGetTextureSamplerHandleNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static ulong GetTextureSamplerHandleNV(uint texture, uint sampler) =>
            glGetTextureSamplerHandleNV.Invoke(texture, sampler);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeTextureHandleResidentNV(ulong handle);
        private static GLMakeTextureHandleResidentNV glMakeTextureHandleResidentNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void MakeTextureHandleResidentNV(ulong handle) =>
            glMakeTextureHandleResidentNV.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeTextureHandleNonResidentNV(ulong handle);
        private static GLMakeTextureHandleNonResidentNV glMakeTextureHandleNonResidentNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void MakeTextureHandleNonResidentNV(ulong handle) =>
            glMakeTextureHandleNonResidentNV.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong GLGetImageHandleNV(uint texture, int level, bool layered, int layer, PixelFormat format);
        private static GLGetImageHandleNV glGetImageHandleNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static ulong GetImageHandleNV(uint texture, int level, bool layered, int layer, PixelFormat format) =>
            glGetImageHandleNV.Invoke(texture, level, layered, layer, format);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeImageHandleResidentNV(ulong handle, int access);
        private static GLMakeImageHandleResidentNV glMakeImageHandleResidentNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void MakeImageHandleResidentNV(ulong handle, int access) =>
            glMakeImageHandleResidentNV.Invoke(handle, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeImageHandleNonResidentNV(ulong handle);
        private static GLMakeImageHandleNonResidentNV glMakeImageHandleNonResidentNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void MakeImageHandleNonResidentNV(ulong handle) =>
            glMakeImageHandleNonResidentNV.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformHandleui64NV(int location, ulong value);
        private static GLUniformHandleui64NV glUniformHandleui64NV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void UniformHandleui64NV(int location, ulong value) =>
            glUniformHandleui64NV.Invoke(location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformHandleui64vNV(int location, int count, ulong[] value);
        private static GLUniformHandleui64vNV glUniformHandleui64vNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void UniformHandleui64vNV(int location, int count, ulong[] value) =>
            glUniformHandleui64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformHandleui64NV(uint program, int location, ulong value);
        private static GLProgramUniformHandleui64NV glProgramUniformHandleui64NV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void ProgramUniformHandleui64NV(uint program, int location, ulong value) =>
            glProgramUniformHandleui64NV.Invoke(program, location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformHandleui64vNV(uint program, int location, int count, ulong[] values);
        private static GLProgramUniformHandleui64vNV glProgramUniformHandleui64vNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static void ProgramUniformHandleui64vNV(uint program, int location, int count, ulong[] values) =>
            glProgramUniformHandleui64vNV.Invoke(program, location, count, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsTextureHandleResidentNV(ulong handle);
        private static GLIsTextureHandleResidentNV glIsTextureHandleResidentNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static bool IsTextureHandleResidentNV(ulong handle) =>
            glIsTextureHandleResidentNV.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsImageHandleResidentNV(ulong handle);
        private static GLIsImageHandleResidentNV glIsImageHandleResidentNV;


        [GLExtension("GL_NV_bindless_texture")]
        public static bool IsImageHandleResidentNV(ulong handle) =>
            glIsImageHandleResidentNV.Invoke(handle);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendParameteriNV(int pname, int value);
        private static GLBlendParameteriNV glBlendParameteriNV;


        [GLExtension("GL_NV_blend_equation_advanced")]
        public static void BlendParameteriNV(int pname, int value) =>
            glBlendParameteriNV.Invoke(pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendBarrierNV();
        private static GLBlendBarrierNV glBlendBarrierNV;


        [GLExtension("GL_NV_blend_equation_advanced")]
        public static void BlendBarrierNV() =>
            glBlendBarrierNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff);
        private static GLViewportPositionWScaleNV glViewportPositionWScaleNV;


        [GLExtension("GL_NV_clip_space_w_scaling")]
        public static void ViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff) =>
            glViewportPositionWScaleNV.Invoke(index, xcoeff, ycoeff);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateStatesNV(int n, out uint states);
        private static GLCreateStatesNV glCreateStatesNV;


        [GLExtension("GL_NV_command_list")]
        public static void CreateStatesNV(int n, out uint states) =>
            glCreateStatesNV.Invoke(n, out states);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteStatesNV(int n, uint[] states);
        private static GLDeleteStatesNV glDeleteStatesNV;


        [GLExtension("GL_NV_command_list")]
        public static void DeleteStatesNV(int n, uint[] states) =>
            glDeleteStatesNV.Invoke(n, states);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsStateNV(uint state);
        private static GLIsStateNV glIsStateNV;


        [GLExtension("GL_NV_command_list")]
        public static bool IsStateNV(uint state) =>
            glIsStateNV.Invoke(state);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStateCaptureNV(uint state, int mode);
        private static GLStateCaptureNV glStateCaptureNV;


        [GLExtension("GL_NV_command_list")]
        public static void StateCaptureNV(uint state, int mode) =>
            glStateCaptureNV.Invoke(state, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGetCommandHeaderNV(CommandOpcodesNV tokenID, uint size);
        private static GLGetCommandHeaderNV glGetCommandHeaderNV;


        [GLExtension("GL_NV_command_list")]
        public static uint GetCommandHeaderNV(CommandOpcodesNV tokenID, uint size) =>
            glGetCommandHeaderNV.Invoke(tokenID, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ushort GLGetStageIndexNV(ShaderType shadertype);
        private static GLGetStageIndexNV glGetStageIndexNV;


        [GLExtension("GL_NV_command_list")]
        public static ushort GetStageIndexNV(ShaderType shadertype) =>
            glGetStageIndexNV.Invoke(shadertype);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawCommandsNV(int primitiveMode, uint buffer, nint[] indirects, int[] sizes, uint count);
        private static GLDrawCommandsNV glDrawCommandsNV;


        [GLExtension("GL_NV_command_list")]
        public static void DrawCommandsNV(int primitiveMode, uint buffer, nint[] indirects, int[] sizes, uint count) =>
            glDrawCommandsNV.Invoke(primitiveMode, buffer, indirects, sizes, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawCommandsAddressNV(int primitiveMode, ulong[] indirects, int[] sizes, uint count);
        private static GLDrawCommandsAddressNV glDrawCommandsAddressNV;


        [GLExtension("GL_NV_command_list")]
        public static void DrawCommandsAddressNV(int primitiveMode, ulong[] indirects, int[] sizes, uint count) =>
            glDrawCommandsAddressNV.Invoke(primitiveMode, indirects, sizes, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawCommandsStatesNV(uint buffer, nint[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count);
        private static GLDrawCommandsStatesNV glDrawCommandsStatesNV;


        [GLExtension("GL_NV_command_list")]
        public static void DrawCommandsStatesNV(uint buffer, nint[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count) =>
            glDrawCommandsStatesNV.Invoke(buffer, indirects, sizes, states, fbos, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawCommandsStatesAddressNV(ulong[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count);
        private static GLDrawCommandsStatesAddressNV glDrawCommandsStatesAddressNV;


        [GLExtension("GL_NV_command_list")]
        public static void DrawCommandsStatesAddressNV(ulong[] indirects, int[] sizes, uint[] states, uint[] fbos, uint count) =>
            glDrawCommandsStatesAddressNV.Invoke(indirects, sizes, states, fbos, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCreateCommandListsNV(int n, out uint lists);
        private static GLCreateCommandListsNV glCreateCommandListsNV;


        [GLExtension("GL_NV_command_list")]
        public static void CreateCommandListsNV(int n, out uint lists) =>
            glCreateCommandListsNV.Invoke(n, out lists);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteCommandListsNV(int n, uint[] lists);
        private static GLDeleteCommandListsNV glDeleteCommandListsNV;


        [GLExtension("GL_NV_command_list")]
        public static void DeleteCommandListsNV(int n, uint[] lists) =>
            glDeleteCommandListsNV.Invoke(n, lists);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsCommandListNV(uint list);
        private static GLIsCommandListNV glIsCommandListNV;


        [GLExtension("GL_NV_command_list")]
        public static bool IsCommandListNV(uint list) =>
            glIsCommandListNV.Invoke(list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLListDrawCommandsStatesClientNV(uint list, uint segment, nint indirects, int[] sizes, uint[] states, uint[] fbos, uint count);
        private static GLListDrawCommandsStatesClientNV glListDrawCommandsStatesClientNV;


        [GLExtension("GL_NV_command_list")]
        public static void ListDrawCommandsStatesClientNV(uint list, uint segment, nint indirects, int[] sizes, uint[] states, uint[] fbos, uint count) =>
            glListDrawCommandsStatesClientNV.Invoke(list, segment, indirects, sizes, states, fbos, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCommandListSegmentsNV(uint list, uint segments);
        private static GLCommandListSegmentsNV glCommandListSegmentsNV;


        [GLExtension("GL_NV_command_list")]
        public static void CommandListSegmentsNV(uint list, uint segments) =>
            glCommandListSegmentsNV.Invoke(list, segments);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompileCommandListNV(uint list);
        private static GLCompileCommandListNV glCompileCommandListNV;


        [GLExtension("GL_NV_command_list")]
        public static void CompileCommandListNV(uint list) =>
            glCompileCommandListNV.Invoke(list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCallCommandListNV(uint list);
        private static GLCallCommandListNV glCallCommandListNV;


        [GLExtension("GL_NV_command_list")]
        public static void CallCommandListNV(uint list) =>
            glCallCommandListNV.Invoke(list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginConditionalRenderNV(uint id, ConditionalRenderMode mode);
        private static GLBeginConditionalRenderNV glBeginConditionalRenderNV;


        [GLExtension("GL_NV_conditional_render")]
        public static void BeginConditionalRenderNV(uint id, ConditionalRenderMode mode) =>
            glBeginConditionalRenderNV.Invoke(id, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndConditionalRenderNV();
        private static GLEndConditionalRenderNV glEndConditionalRenderNV;


        [GLExtension("GL_NV_conditional_render")]
        public static void EndConditionalRenderNV() =>
            glEndConditionalRenderNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSubpixelPrecisionBiasNV(uint xbits, uint ybits);
        private static GLSubpixelPrecisionBiasNV glSubpixelPrecisionBiasNV;


        [GLExtension("GL_NV_conservative_raster")]
        public static void SubpixelPrecisionBiasNV(uint xbits, uint ybits) =>
            glSubpixelPrecisionBiasNV.Invoke(xbits, ybits);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConservativeRasterParameterfNV(int pname, float value);
        private static GLConservativeRasterParameterfNV glConservativeRasterParameterfNV;


        [GLExtension("GL_NV_conservative_raster_dilate")]
        public static void ConservativeRasterParameterfNV(int pname, float value) =>
            glConservativeRasterParameterfNV.Invoke(pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConservativeRasterParameteriNV(int pname, int param);
        private static GLConservativeRasterParameteriNV glConservativeRasterParameteriNV;


        [GLExtension("GL_NV_conservative_raster_pre_snap_triangles")]
        public static void ConservativeRasterParameteriNV(int pname, int param) =>
            glConservativeRasterParameteriNV.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyBufferSubDataNV(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, nint readOffset, nint writeOffset, nint size);
        private static GLCopyBufferSubDataNV glCopyBufferSubDataNV;


        [GLExtension("GL_NV_copy_buffer")]
        public static void CopyBufferSubDataNV(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, nint readOffset, nint writeOffset, nint size) =>
            glCopyBufferSubDataNV.Invoke(readTarget, writeTarget, readOffset, writeOffset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyImageSubDataNV(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth);
        private static GLCopyImageSubDataNV glCopyImageSubDataNV;


        [GLExtension("GL_NV_copy_image")]
        public static void CopyImageSubDataNV(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth) =>
            glCopyImageSubDataNV.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverageMaskNV(bool mask);
        private static GLCoverageMaskNV glCoverageMaskNV;


        [GLExtension("GL_NV_coverage_sample")]
        public static void CoverageMaskNV(bool mask) =>
            glCoverageMaskNV.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverageOperationNV(int operation);
        private static GLCoverageOperationNV glCoverageOperationNV;


        [GLExtension("GL_NV_coverage_sample")]
        public static void CoverageOperationNV(int operation) =>
            glCoverageOperationNV.Invoke(operation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangedNV(double zNear, double zFar);
        private static GLDepthRangedNV glDepthRangedNV;


        [GLExtension("GL_NV_depth_buffer_float")]
        public static void DepthRangedNV(double zNear, double zFar) =>
            glDepthRangedNV.Invoke(zNear, zFar);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearDepthdNV(double depth);
        private static GLClearDepthdNV glClearDepthdNV;


        [GLExtension("GL_NV_depth_buffer_float")]
        public static void ClearDepthdNV(double depth) =>
            glClearDepthdNV.Invoke(depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthBoundsdNV(double zmin, double zmax);
        private static GLDepthBoundsdNV glDepthBoundsdNV;


        [GLExtension("GL_NV_depth_buffer_float")]
        public static void DepthBoundsdNV(double zmin, double zmax) =>
            glDepthBoundsdNV.Invoke(zmin, zmax);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawBuffersNV(int n, int[] bufs);
        private static GLDrawBuffersNV glDrawBuffersNV;


        [GLExtension("GL_NV_draw_buffers")]
        public static void DrawBuffersNV(int n, int[] bufs) =>
            glDrawBuffersNV.Invoke(n, bufs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysInstancedNV(PrimitiveType mode, int first, int count, int primcount);
        private static GLDrawArraysInstancedNV glDrawArraysInstancedNV;


        [GLExtension("GL_NV_draw_instanced")]
        public static void DrawArraysInstancedNV(PrimitiveType mode, int first, int count, int primcount) =>
            glDrawArraysInstancedNV.Invoke(mode, first, count, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedNV(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount);
        private static GLDrawElementsInstancedNV glDrawElementsInstancedNV;


        [GLExtension("GL_NV_draw_instanced")]
        public static void DrawElementsInstancedNV(PrimitiveType mode, int count, DrawElementsType type, nint indices, int primcount) =>
            glDrawElementsInstancedNV.Invoke(mode, count, type, indices, primcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
        private static GLDrawTextureNV glDrawTextureNV;


        [GLExtension("GL_NV_draw_texture")]
        public static void DrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) =>
            glDrawTextureNV.Invoke(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1);
        private static GLDrawVkImageNV glDrawVkImageNV;


        [GLExtension("GL_NV_draw_vulkan_image")]
        public static void DrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1) =>
            glDrawVkImageNV.Invoke(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate VulkanDebugProcNV GLGetVkProcAddrNV(sbyte[] name);
        private static GLGetVkProcAddrNV glGetVkProcAddrNV;


        [GLExtension("GL_NV_draw_vulkan_image")]
        public static VulkanDebugProcNV GetVkProcAddrNV(sbyte[] name) =>
            glGetVkProcAddrNV.Invoke(name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWaitVkSemaphoreNV(ulong vkSemaphore);
        private static GLWaitVkSemaphoreNV glWaitVkSemaphoreNV;


        [GLExtension("GL_NV_draw_vulkan_image")]
        public static void WaitVkSemaphoreNV(ulong vkSemaphore) =>
            glWaitVkSemaphoreNV.Invoke(vkSemaphore);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSignalVkSemaphoreNV(ulong vkSemaphore);
        private static GLSignalVkSemaphoreNV glSignalVkSemaphoreNV;


        [GLExtension("GL_NV_draw_vulkan_image")]
        public static void SignalVkSemaphoreNV(ulong vkSemaphore) =>
            glSignalVkSemaphoreNV.Invoke(vkSemaphore);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSignalVkFenceNV(ulong vkFence);
        private static GLSignalVkFenceNV glSignalVkFenceNV;


        [GLExtension("GL_NV_draw_vulkan_image")]
        public static void SignalVkFenceNV(ulong vkFence) =>
            glSignalVkFenceNV.Invoke(vkFence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, nint points);
        private static GLMapControlPointsNV glMapControlPointsNV;


        [GLExtension("GL_NV_evaluators")]
        public static void MapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, nint points) =>
            glMapControlPointsNV.Invoke(target, index, type, ustride, vstride, uorder, vorder, packed, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapParameterivNV(EvalTargetNV target, MapParameterNV pname, int[] parameters);
        private static GLMapParameterivNV glMapParameterivNV;


        [GLExtension("GL_NV_evaluators")]
        public static void MapParameterivNV(EvalTargetNV target, MapParameterNV pname, int[] parameters) =>
            glMapParameterivNV.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, float[] parameters);
        private static GLMapParameterfvNV glMapParameterfvNV;


        [GLExtension("GL_NV_evaluators")]
        public static void MapParameterfvNV(EvalTargetNV target, MapParameterNV pname, float[] parameters) =>
            glMapParameterfvNV.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, out nint points);
        private static GLGetMapControlPointsNV glGetMapControlPointsNV;


        [GLExtension("GL_NV_evaluators")]
        public static void GetMapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, bool packed, out nint points) =>
            glGetMapControlPointsNV.Invoke(target, index, type, ustride, vstride, packed, out points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, out int parameters);
        private static GLGetMapParameterivNV glGetMapParameterivNV;


        [GLExtension("GL_NV_evaluators")]
        public static void GetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, out int parameters) =>
            glGetMapParameterivNV.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, out float parameters);
        private static GLGetMapParameterfvNV glGetMapParameterfvNV;


        [GLExtension("GL_NV_evaluators")]
        public static void GetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, out float parameters) =>
            glGetMapParameterfvNV.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, out int parameters);
        private static GLGetMapAttribParameterivNV glGetMapAttribParameterivNV;


        [GLExtension("GL_NV_evaluators")]
        public static void GetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, out int parameters) =>
            glGetMapAttribParameterivNV.Invoke(target, index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, out float parameters);
        private static GLGetMapAttribParameterfvNV glGetMapAttribParameterfvNV;


        [GLExtension("GL_NV_evaluators")]
        public static void GetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, out float parameters) =>
            glGetMapAttribParameterfvNV.Invoke(target, index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalMapsNV(EvalTargetNV target, EvalMapsModeNV mode);
        private static GLEvalMapsNV glEvalMapsNV;


        [GLExtension("GL_NV_evaluators")]
        public static void EvalMapsNV(EvalTargetNV target, EvalMapsModeNV mode) =>
            glEvalMapsNV.Invoke(target, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, out float val);
        private static GLGetMultisamplefvNV glGetMultisamplefvNV;


        [GLExtension("GL_NV_explicit_multisample")]
        public static void GetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, out float val) =>
            glGetMultisamplefvNV.Invoke(pname, index, out val);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleMaskIndexedNV(uint index, SampleMaskNV mask);
        private static GLSampleMaskIndexedNV glSampleMaskIndexedNV;


        [GLExtension("GL_NV_explicit_multisample")]
        public static void SampleMaskIndexedNV(uint index, SampleMaskNV mask) =>
            glSampleMaskIndexedNV.Invoke(index, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexRenderbufferNV(TextureTarget target, uint renderbuffer);
        private static GLTexRenderbufferNV glTexRenderbufferNV;


        [GLExtension("GL_NV_explicit_multisample")]
        public static void TexRenderbufferNV(TextureTarget target, uint renderbuffer) =>
            glTexRenderbufferNV.Invoke(target, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteFencesNV(int n, uint[] fences);
        private static GLDeleteFencesNV glDeleteFencesNV;


        [GLExtension("GL_NV_fence")]
        public static void DeleteFencesNV(int n, uint[] fences) =>
            glDeleteFencesNV.Invoke(n, fences);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenFencesNV(int n, out uint fences);
        private static GLGenFencesNV glGenFencesNV;


        [GLExtension("GL_NV_fence")]
        public static void GenFencesNV(int n, out uint fences) =>
            glGenFencesNV.Invoke(n, out fences);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsFenceNV(uint fence);
        private static GLIsFenceNV glIsFenceNV;


        [GLExtension("GL_NV_fence")]
        public static bool IsFenceNV(uint fence) =>
            glIsFenceNV.Invoke(fence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLTestFenceNV(uint fence);
        private static GLTestFenceNV glTestFenceNV;


        [GLExtension("GL_NV_fence")]
        public static bool TestFenceNV(uint fence) =>
            glTestFenceNV.Invoke(fence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFenceivNV(uint fence, FenceParameterNameNV pname, out int parameters);
        private static GLGetFenceivNV glGetFenceivNV;


        [GLExtension("GL_NV_fence")]
        public static void GetFenceivNV(uint fence, FenceParameterNameNV pname, out int parameters) =>
            glGetFenceivNV.Invoke(fence, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFinishFenceNV(uint fence);
        private static GLFinishFenceNV glFinishFenceNV;


        [GLExtension("GL_NV_fence")]
        public static void FinishFenceNV(uint fence) =>
            glFinishFenceNV.Invoke(fence);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSetFenceNV(uint fence, FenceConditionNV condition);
        private static GLSetFenceNV glSetFenceNV;


        [GLExtension("GL_NV_fence")]
        public static void SetFenceNV(uint fence, FenceConditionNV condition) =>
            glSetFenceNV.Invoke(fence, condition);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentCoverageColorNV(uint color);
        private static GLFragmentCoverageColorNV glFragmentCoverageColorNV;


        [GLExtension("GL_NV_fragment_coverage_to_color")]
        public static void FragmentCoverageColorNV(uint color) =>
            glFragmentCoverageColorNV.Invoke(color);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramNamedParameter4fNV(uint id, int len, byte[] name, float x, float y, float z, float w);
        private static GLProgramNamedParameter4fNV glProgramNamedParameter4fNV;


        [GLExtension("GL_NV_fragment_program")]
        public static void ProgramNamedParameter4fNV(uint id, int len, byte[] name, float x, float y, float z, float w) =>
            glProgramNamedParameter4fNV.Invoke(id, len, name, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramNamedParameter4fvNV(uint id, int len, byte[] name, float[] v);
        private static GLProgramNamedParameter4fvNV glProgramNamedParameter4fvNV;


        [GLExtension("GL_NV_fragment_program")]
        public static void ProgramNamedParameter4fvNV(uint id, int len, byte[] name, float[] v) =>
            glProgramNamedParameter4fvNV.Invoke(id, len, name, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramNamedParameter4dNV(uint id, int len, byte[] name, double x, double y, double z, double w);
        private static GLProgramNamedParameter4dNV glProgramNamedParameter4dNV;


        [GLExtension("GL_NV_fragment_program")]
        public static void ProgramNamedParameter4dNV(uint id, int len, byte[] name, double x, double y, double z, double w) =>
            glProgramNamedParameter4dNV.Invoke(id, len, name, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramNamedParameter4dvNV(uint id, int len, byte[] name, double[] v);
        private static GLProgramNamedParameter4dvNV glProgramNamedParameter4dvNV;


        [GLExtension("GL_NV_fragment_program")]
        public static void ProgramNamedParameter4dvNV(uint id, int len, byte[] name, double[] v) =>
            glProgramNamedParameter4dvNV.Invoke(id, len, name, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramNamedParameterfvNV(uint id, int len, byte[] name, out float parameters);
        private static GLGetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV;


        [GLExtension("GL_NV_fragment_program")]
        public static void GetProgramNamedParameterfvNV(uint id, int len, byte[] name, out float parameters) =>
            glGetProgramNamedParameterfvNV.Invoke(id, len, name, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramNamedParameterdvNV(uint id, int len, byte[] name, out double parameters);
        private static GLGetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV;


        [GLExtension("GL_NV_fragment_program")]
        public static void GetProgramNamedParameterdvNV(uint id, int len, byte[] name, out double parameters) =>
            glGetProgramNamedParameterdvNV.Invoke(id, len, name, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter);
        private static GLBlitFramebufferNV glBlitFramebufferNV;


        [GLExtension("GL_NV_framebuffer_blit")]
        public static void BlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, BlitFramebufferFilter filter) =>
            glBlitFramebufferNV.Invoke(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverageModulationTableNV(int n, float[] v);
        private static GLCoverageModulationTableNV glCoverageModulationTableNV;


        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        public static void CoverageModulationTableNV(int n, float[] v) =>
            glCoverageModulationTableNV.Invoke(n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCoverageModulationTableNV(int bufSize, out float v);
        private static GLGetCoverageModulationTableNV glGetCoverageModulationTableNV;


        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        public static void GetCoverageModulationTableNV(int bufSize, out float v) =>
            glGetCoverageModulationTableNV.Invoke(bufSize, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverageModulationNV(int components);
        private static GLCoverageModulationNV glCoverageModulationNV;


        [GLExtension("GL_NV_framebuffer_mixed_samples")]
        public static void CoverageModulationNV(int components) =>
            glCoverageModulationNV.Invoke(components);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisampleNV(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisampleNV glRenderbufferStorageMultisampleNV;


        [GLExtension("GL_NV_framebuffer_multisample")]
        public static void RenderbufferStorageMultisampleNV(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisampleNV.Invoke(target, samples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV;


        [GLExtension("GL_NV_framebuffer_multisample_coverage")]
        public static void RenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageMultisampleCoverageNV.Invoke(target, coverageSamples, colorSamples, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramVertexLimitNV(ProgramTarget target, int limit);
        private static GLProgramVertexLimitNV glProgramVertexLimitNV;


        [GLExtension("GL_NV_geometry_program4")]
        public static void ProgramVertexLimitNV(ProgramTarget target, int limit) =>
            glProgramVertexLimitNV.Invoke(target, limit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureFaceEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face);
        private static GLFramebufferTextureFaceEXT glFramebufferTextureFaceEXT;


        [GLExtension("GL_NV_geometry_program4")]
        public static void FramebufferTextureFaceEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face) =>
            glFramebufferTextureFaceEXT.Invoke(target, attachment, texture, level, face);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameterI4iNV(ProgramTarget target, uint index, int x, int y, int z, int w);
        private static GLProgramLocalParameterI4iNV glProgramLocalParameterI4iNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramLocalParameterI4iNV(ProgramTarget target, uint index, int x, int y, int z, int w) =>
            glProgramLocalParameterI4iNV.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameterI4ivNV(ProgramTarget target, uint index, int[] parameters);
        private static GLProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramLocalParameterI4ivNV(ProgramTarget target, uint index, int[] parameters) =>
            glProgramLocalParameterI4ivNV.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int count, int[] parameters);
        private static GLProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int count, int[] parameters) =>
            glProgramLocalParametersI4ivNV.Invoke(target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w);
        private static GLProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramLocalParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w) =>
            glProgramLocalParameterI4uiNV.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters);
        private static GLProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramLocalParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters) =>
            glProgramLocalParameterI4uivNV.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramLocalParametersI4uivNV(ProgramTarget target, uint index, int count, uint[] parameters);
        private static GLProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramLocalParametersI4uivNV(ProgramTarget target, uint index, int count, uint[] parameters) =>
            glProgramLocalParametersI4uivNV.Invoke(target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameterI4iNV(ProgramTarget target, uint index, int x, int y, int z, int w);
        private static GLProgramEnvParameterI4iNV glProgramEnvParameterI4iNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramEnvParameterI4iNV(ProgramTarget target, uint index, int x, int y, int z, int w) =>
            glProgramEnvParameterI4iNV.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameterI4ivNV(ProgramTarget target, uint index, int[] parameters);
        private static GLProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramEnvParameterI4ivNV(ProgramTarget target, uint index, int[] parameters) =>
            glProgramEnvParameterI4ivNV.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int count, int[] parameters);
        private static GLProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int count, int[] parameters) =>
            glProgramEnvParametersI4ivNV.Invoke(target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w);
        private static GLProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramEnvParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w) =>
            glProgramEnvParameterI4uiNV.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters);
        private static GLProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramEnvParameterI4uivNV(ProgramTarget target, uint index, uint[] parameters) =>
            glProgramEnvParameterI4uivNV.Invoke(target, index, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramEnvParametersI4uivNV(ProgramTarget target, uint index, int count, uint[] parameters);
        private static GLProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void ProgramEnvParametersI4uivNV(ProgramTarget target, uint index, int count, uint[] parameters) =>
            glProgramEnvParametersI4uivNV.Invoke(target, index, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramLocalParameterIivNV(ProgramTarget target, uint index, out int parameters);
        private static GLGetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void GetProgramLocalParameterIivNV(ProgramTarget target, uint index, out int parameters) =>
            glGetProgramLocalParameterIivNV.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramLocalParameterIuivNV(ProgramTarget target, uint index, out uint parameters);
        private static GLGetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void GetProgramLocalParameterIuivNV(ProgramTarget target, uint index, out uint parameters) =>
            glGetProgramLocalParameterIuivNV.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramEnvParameterIivNV(ProgramTarget target, uint index, out int parameters);
        private static GLGetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void GetProgramEnvParameterIivNV(ProgramTarget target, uint index, out int parameters) =>
            glGetProgramEnvParameterIivNV.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramEnvParameterIuivNV(ProgramTarget target, uint index, out uint parameters);
        private static GLGetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV;


        [GLExtension("GL_NV_gpu_program4")]
        public static void GetProgramEnvParameterIuivNV(ProgramTarget target, uint index, out uint parameters) =>
            glGetProgramEnvParameterIuivNV.Invoke(target, index, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramSubroutineParametersuivNV(int target, int count, uint[] parameters);
        private static GLProgramSubroutineParametersuivNV glProgramSubroutineParametersuivNV;


        [GLExtension("GL_NV_gpu_program5")]
        public static void ProgramSubroutineParametersuivNV(int target, int count, uint[] parameters) =>
            glProgramSubroutineParametersuivNV.Invoke(target, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramSubroutineParameteruivNV(int target, uint index, out uint param);
        private static GLGetProgramSubroutineParameteruivNV glGetProgramSubroutineParameteruivNV;


        [GLExtension("GL_NV_gpu_program5")]
        public static void GetProgramSubroutineParameteruivNV(int target, uint index, out uint param) =>
            glGetProgramSubroutineParameteruivNV.Invoke(target, index, out param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2hNV(ushort x, ushort y);
        private static GLVertex2hNV glVertex2hNV;


        [GLExtension("GL_NV_half_float")]
        public static void Vertex2hNV(ushort x, ushort y) =>
            glVertex2hNV.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2hvNV(ushort[] v);
        private static GLVertex2hvNV glVertex2hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void Vertex2hvNV(ushort[] v) =>
            glVertex2hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3hNV(ushort x, ushort y, ushort z);
        private static GLVertex3hNV glVertex3hNV;


        [GLExtension("GL_NV_half_float")]
        public static void Vertex3hNV(ushort x, ushort y, ushort z) =>
            glVertex3hNV.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3hvNV(ushort[] v);
        private static GLVertex3hvNV glVertex3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void Vertex3hvNV(ushort[] v) =>
            glVertex3hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4hNV(ushort x, ushort y, ushort z, ushort w);
        private static GLVertex4hNV glVertex4hNV;


        [GLExtension("GL_NV_half_float")]
        public static void Vertex4hNV(ushort x, ushort y, ushort z, ushort w) =>
            glVertex4hNV.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4hvNV(ushort[] v);
        private static GLVertex4hvNV glVertex4hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void Vertex4hvNV(ushort[] v) =>
            glVertex4hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3hNV(ushort nx, ushort ny, ushort nz);
        private static GLNormal3hNV glNormal3hNV;


        [GLExtension("GL_NV_half_float")]
        public static void Normal3hNV(ushort nx, ushort ny, ushort nz) =>
            glNormal3hNV.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3hvNV(ushort[] v);
        private static GLNormal3hvNV glNormal3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void Normal3hvNV(ushort[] v) =>
            glNormal3hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3hNV(ushort red, ushort green, ushort blue);
        private static GLColor3hNV glColor3hNV;


        [GLExtension("GL_NV_half_float")]
        public static void Color3hNV(ushort red, ushort green, ushort blue) =>
            glColor3hNV.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3hvNV(ushort[] v);
        private static GLColor3hvNV glColor3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void Color3hvNV(ushort[] v) =>
            glColor3hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4hNV(ushort red, ushort green, ushort blue, ushort alpha);
        private static GLColor4hNV glColor4hNV;


        [GLExtension("GL_NV_half_float")]
        public static void Color4hNV(ushort red, ushort green, ushort blue, ushort alpha) =>
            glColor4hNV.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4hvNV(ushort[] v);
        private static GLColor4hvNV glColor4hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void Color4hvNV(ushort[] v) =>
            glColor4hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1hNV(ushort s);
        private static GLTexCoord1hNV glTexCoord1hNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord1hNV(ushort s) =>
            glTexCoord1hNV.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1hvNV(ushort[] v);
        private static GLTexCoord1hvNV glTexCoord1hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord1hvNV(ushort[] v) =>
            glTexCoord1hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2hNV(ushort s, ushort t);
        private static GLTexCoord2hNV glTexCoord2hNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord2hNV(ushort s, ushort t) =>
            glTexCoord2hNV.Invoke(s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2hvNV(ushort[] v);
        private static GLTexCoord2hvNV glTexCoord2hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord2hvNV(ushort[] v) =>
            glTexCoord2hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3hNV(ushort s, ushort t, ushort r);
        private static GLTexCoord3hNV glTexCoord3hNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord3hNV(ushort s, ushort t, ushort r) =>
            glTexCoord3hNV.Invoke(s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3hvNV(ushort[] v);
        private static GLTexCoord3hvNV glTexCoord3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord3hvNV(ushort[] v) =>
            glTexCoord3hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4hNV(ushort s, ushort t, ushort r, ushort q);
        private static GLTexCoord4hNV glTexCoord4hNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord4hNV(ushort s, ushort t, ushort r, ushort q) =>
            glTexCoord4hNV.Invoke(s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4hvNV(ushort[] v);
        private static GLTexCoord4hvNV glTexCoord4hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void TexCoord4hvNV(ushort[] v) =>
            glTexCoord4hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1hNV(TextureUnit target, ushort s);
        private static GLMultiTexCoord1hNV glMultiTexCoord1hNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord1hNV(TextureUnit target, ushort s) =>
            glMultiTexCoord1hNV.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1hvNV(TextureUnit target, ushort[] v);
        private static GLMultiTexCoord1hvNV glMultiTexCoord1hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord1hvNV(TextureUnit target, ushort[] v) =>
            glMultiTexCoord1hvNV.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2hNV(TextureUnit target, ushort s, ushort t);
        private static GLMultiTexCoord2hNV glMultiTexCoord2hNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord2hNV(TextureUnit target, ushort s, ushort t) =>
            glMultiTexCoord2hNV.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2hvNV(TextureUnit target, ushort[] v);
        private static GLMultiTexCoord2hvNV glMultiTexCoord2hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord2hvNV(TextureUnit target, ushort[] v) =>
            glMultiTexCoord2hvNV.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3hNV(TextureUnit target, ushort s, ushort t, ushort r);
        private static GLMultiTexCoord3hNV glMultiTexCoord3hNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord3hNV(TextureUnit target, ushort s, ushort t, ushort r) =>
            glMultiTexCoord3hNV.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3hvNV(TextureUnit target, ushort[] v);
        private static GLMultiTexCoord3hvNV glMultiTexCoord3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord3hvNV(TextureUnit target, ushort[] v) =>
            glMultiTexCoord3hvNV.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4hNV(TextureUnit target, ushort s, ushort t, ushort r, ushort q);
        private static GLMultiTexCoord4hNV glMultiTexCoord4hNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord4hNV(TextureUnit target, ushort s, ushort t, ushort r, ushort q) =>
            glMultiTexCoord4hNV.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4hvNV(TextureUnit target, ushort[] v);
        private static GLMultiTexCoord4hvNV glMultiTexCoord4hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void MultiTexCoord4hvNV(TextureUnit target, ushort[] v) =>
            glMultiTexCoord4hvNV.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordhNV(ushort fog);
        private static GLFogCoordhNV glFogCoordhNV;


        [GLExtension("GL_NV_half_float")]
        public static void FogCoordhNV(ushort fog) =>
            glFogCoordhNV.Invoke(fog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordhvNV(ushort[] fog);
        private static GLFogCoordhvNV glFogCoordhvNV;


        [GLExtension("GL_NV_half_float")]
        public static void FogCoordhvNV(ushort[] fog) =>
            glFogCoordhvNV.Invoke(fog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3hNV(ushort red, ushort green, ushort blue);
        private static GLSecondaryColor3hNV glSecondaryColor3hNV;


        [GLExtension("GL_NV_half_float")]
        public static void SecondaryColor3hNV(ushort red, ushort green, ushort blue) =>
            glSecondaryColor3hNV.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3hvNV(ushort[] v);
        private static GLSecondaryColor3hvNV glSecondaryColor3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void SecondaryColor3hvNV(ushort[] v) =>
            glSecondaryColor3hvNV.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexWeighthNV(ushort weight);
        private static GLVertexWeighthNV glVertexWeighthNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexWeighthNV(ushort weight) =>
            glVertexWeighthNV.Invoke(weight);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexWeighthvNV(ushort[] weight);
        private static GLVertexWeighthvNV glVertexWeighthvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexWeighthvNV(ushort[] weight) =>
            glVertexWeighthvNV.Invoke(weight);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1hNV(uint index, ushort x);
        private static GLVertexAttrib1hNV glVertexAttrib1hNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib1hNV(uint index, ushort x) =>
            glVertexAttrib1hNV.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1hvNV(uint index, ushort[] v);
        private static GLVertexAttrib1hvNV glVertexAttrib1hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib1hvNV(uint index, ushort[] v) =>
            glVertexAttrib1hvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2hNV(uint index, ushort x, ushort y);
        private static GLVertexAttrib2hNV glVertexAttrib2hNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib2hNV(uint index, ushort x, ushort y) =>
            glVertexAttrib2hNV.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2hvNV(uint index, ushort[] v);
        private static GLVertexAttrib2hvNV glVertexAttrib2hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib2hvNV(uint index, ushort[] v) =>
            glVertexAttrib2hvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3hNV(uint index, ushort x, ushort y, ushort z);
        private static GLVertexAttrib3hNV glVertexAttrib3hNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib3hNV(uint index, ushort x, ushort y, ushort z) =>
            glVertexAttrib3hNV.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3hvNV(uint index, ushort[] v);
        private static GLVertexAttrib3hvNV glVertexAttrib3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib3hvNV(uint index, ushort[] v) =>
            glVertexAttrib3hvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4hNV(uint index, ushort x, ushort y, ushort z, ushort w);
        private static GLVertexAttrib4hNV glVertexAttrib4hNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib4hNV(uint index, ushort x, ushort y, ushort z, ushort w) =>
            glVertexAttrib4hNV.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4hvNV(uint index, ushort[] v);
        private static GLVertexAttrib4hvNV glVertexAttrib4hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttrib4hvNV(uint index, ushort[] v) =>
            glVertexAttrib4hvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs1hvNV(uint index, int n, ushort[] v);
        private static GLVertexAttribs1hvNV glVertexAttribs1hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttribs1hvNV(uint index, int n, ushort[] v) =>
            glVertexAttribs1hvNV.Invoke(index, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs2hvNV(uint index, int n, ushort[] v);
        private static GLVertexAttribs2hvNV glVertexAttribs2hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttribs2hvNV(uint index, int n, ushort[] v) =>
            glVertexAttribs2hvNV.Invoke(index, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs3hvNV(uint index, int n, ushort[] v);
        private static GLVertexAttribs3hvNV glVertexAttribs3hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttribs3hvNV(uint index, int n, ushort[] v) =>
            glVertexAttribs3hvNV.Invoke(index, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs4hvNV(uint index, int n, ushort[] v);
        private static GLVertexAttribs4hvNV glVertexAttribs4hvNV;


        [GLExtension("GL_NV_half_float")]
        public static void VertexAttribs4hvNV(uint index, int n, ushort[] v) =>
            glVertexAttribs4hvNV.Invoke(index, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribDivisorNV(uint index, uint divisor);
        private static GLVertexAttribDivisorNV glVertexAttribDivisorNV;


        [GLExtension("GL_NV_instanced_arrays")]
        public static void VertexAttribDivisorNV(uint index, uint divisor) =>
            glVertexAttribDivisorNV.Invoke(index, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, out int parameters);
        private static GLGetInternalformatSampleivNV glGetInternalformatSampleivNV;


        [GLExtension("GL_NV_internalformat_sample_query")]
        public static void GetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, out int parameters) =>
            glGetInternalformatSampleivNV.Invoke(target, internalformat, samples, pname, count, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderGpuMaskNV(uint mask);
        private static GLRenderGpuMaskNV glRenderGpuMaskNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void RenderGpuMaskNV(uint mask) =>
            glRenderGpuMaskNV.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastBufferSubDataNV(uint gpuMask, uint buffer, nint offset, nint size, nint data);
        private static GLMulticastBufferSubDataNV glMulticastBufferSubDataNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastBufferSubDataNV(uint gpuMask, uint buffer, nint offset, nint size, nint data) =>
            glMulticastBufferSubDataNV.Invoke(gpuMask, buffer, offset, size, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size);
        private static GLMulticastCopyBufferSubDataNV glMulticastCopyBufferSubDataNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size) =>
            glMulticastCopyBufferSubDataNV.Invoke(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        private static GLMulticastCopyImageSubDataNV glMulticastCopyImageSubDataNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) =>
            glMulticastCopyImageSubDataNV.Invoke(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, int filter);
        private static GLMulticastBlitFramebufferNV glMulticastBlitFramebufferNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, int filter) =>
            glMulticastBlitFramebufferNV.Invoke(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float[] v);
        private static GLMulticastFramebufferSampleLocationsfvNV glMulticastFramebufferSampleLocationsfvNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, float[] v) =>
            glMulticastFramebufferSampleLocationsfvNV.Invoke(gpu, framebuffer, start, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastBarrierNV();
        private static GLMulticastBarrierNV glMulticastBarrierNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastBarrierNV() =>
            glMulticastBarrierNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask);
        private static GLMulticastWaitSyncNV glMulticastWaitSyncNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastWaitSyncNV(uint signalGpu, uint waitGpuMask) =>
            glMulticastWaitSyncNV.Invoke(signalGpu, waitGpuMask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastGetQueryObjectivNV(uint gpu, uint id, int pname, out int parameters);
        private static GLMulticastGetQueryObjectivNV glMulticastGetQueryObjectivNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastGetQueryObjectivNV(uint gpu, uint id, int pname, out int parameters) =>
            glMulticastGetQueryObjectivNV.Invoke(gpu, id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, out uint parameters);
        private static GLMulticastGetQueryObjectuivNV glMulticastGetQueryObjectuivNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastGetQueryObjectuivNV(uint gpu, uint id, int pname, out uint parameters) =>
            glMulticastGetQueryObjectuivNV.Invoke(gpu, id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, out long parameters);
        private static GLMulticastGetQueryObjecti64vNV glMulticastGetQueryObjecti64vNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastGetQueryObjecti64vNV(uint gpu, uint id, int pname, out long parameters) =>
            glMulticastGetQueryObjecti64vNV.Invoke(gpu, id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, out ulong parameters);
        private static GLMulticastGetQueryObjectui64vNV glMulticastGetQueryObjectui64vNV;


        [GLExtension("GL_NV_gpu_multicast")]
        public static void MulticastGetQueryObjectui64vNV(uint gpu, uint id, int pname, out ulong parameters) =>
            glMulticastGetQueryObjectui64vNV.Invoke(gpu, id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUploadGpuMaskNVX(uint mask);
        private static GLUploadGpuMaskNVX glUploadGpuMaskNVX;


        [GLExtension("GL_NVX_gpu_multicast2")]
        public static void UploadGpuMaskNVX(uint mask) =>
            glUploadGpuMaskNVX.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastViewportArrayvNVX(uint gpu, uint first, int count, float[] v);
        private static GLMulticastViewportArrayvNVX glMulticastViewportArrayvNVX;


        [GLExtension("GL_NVX_gpu_multicast2")]
        public static void MulticastViewportArrayvNVX(uint gpu, uint first, int count, float[] v) =>
            glMulticastViewportArrayvNVX.Invoke(gpu, first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastViewportPositionWScaleNVX(uint gpu, uint index, float xcoeff, float ycoeff);
        private static GLMulticastViewportPositionWScaleNVX glMulticastViewportPositionWScaleNVX;


        [GLExtension("GL_NVX_gpu_multicast2")]
        public static void MulticastViewportPositionWScaleNVX(uint gpu, uint index, float xcoeff, float ycoeff) =>
            glMulticastViewportPositionWScaleNVX.Invoke(gpu, index, xcoeff, ycoeff);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMulticastScissorArrayvNVX(uint gpu, uint first, int count, int[] v);
        private static GLMulticastScissorArrayvNVX glMulticastScissorArrayvNVX;


        [GLExtension("GL_NVX_gpu_multicast2")]
        public static void MulticastScissorArrayvNVX(uint gpu, uint first, int count, int[] v) =>
            glMulticastScissorArrayvNVX.Invoke(gpu, first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLAsyncCopyBufferSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] fenceValueArray, uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray);
        private static GLAsyncCopyBufferSubDataNVX glAsyncCopyBufferSubDataNVX;


        [GLExtension("GL_NVX_gpu_multicast2")]
        public static uint AsyncCopyBufferSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] fenceValueArray, uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray) =>
            glAsyncCopyBufferSubDataNVX.Invoke(waitSemaphoreCount, waitSemaphoreArray, fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLAsyncCopyImageSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray);
        private static GLAsyncCopyImageSubDataNVX glAsyncCopyImageSubDataNVX;


        [GLExtension("GL_NVX_gpu_multicast2")]
        public static uint AsyncCopyImageSubDataNVX(int waitSemaphoreCount, uint[] waitSemaphoreArray, ulong[] waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, uint[] signalSemaphoreArray, ulong[] signalValueArray) =>
            glAsyncCopyImageSubDataNVX.Invoke(waitSemaphoreCount, waitSemaphoreArray, waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, signalSemaphoreArray, signalValueArray);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLCreateProgressFenceNVX();
        private static GLCreateProgressFenceNVX glCreateProgressFenceNVX;


        [GLExtension("GL_NVX_progress_fence")]
        public static uint CreateProgressFenceNVX() =>
            glCreateProgressFenceNVX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray);
        private static GLSignalSemaphoreui64NVX glSignalSemaphoreui64NVX;


        [GLExtension("GL_NVX_progress_fence")]
        public static void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray) =>
            glSignalSemaphoreui64NVX.Invoke(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray);
        private static GLWaitSemaphoreui64NVX glWaitSemaphoreui64NVX;


        [GLExtension("GL_NVX_progress_fence")]
        public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray) =>
            glWaitSemaphoreui64NVX.Invoke(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClientWaitSemaphoreui64NVX(int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray);
        private static GLClientWaitSemaphoreui64NVX glClientWaitSemaphoreui64NVX;


        [GLExtension("GL_NVX_progress_fence")]
        public static void ClientWaitSemaphoreui64NVX(int fenceObjectCount, uint[] semaphoreArray, ulong[] fenceValueArray) =>
            glClientWaitSemaphoreui64NVX.Invoke(fenceObjectCount, semaphoreArray, fenceValueArray);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMemoryObjectDetachedResourcesuivNV(uint memory, int pname, int first, int count, out uint parameters);
        private static GLGetMemoryObjectDetachedResourcesuivNV glGetMemoryObjectDetachedResourcesuivNV;


        [GLExtension("GL_NV_memory_attachment")]
        public static void GetMemoryObjectDetachedResourcesuivNV(uint memory, int pname, int first, int count, out uint parameters) =>
            glGetMemoryObjectDetachedResourcesuivNV.Invoke(memory, pname, first, count, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResetMemoryObjectParameterNV(uint memory, int pname);
        private static GLResetMemoryObjectParameterNV glResetMemoryObjectParameterNV;


        [GLExtension("GL_NV_memory_attachment")]
        public static void ResetMemoryObjectParameterNV(uint memory, int pname) =>
            glResetMemoryObjectParameterNV.Invoke(memory, pname);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexAttachMemoryNV(TextureTarget target, uint memory, ulong offset);
        private static GLTexAttachMemoryNV glTexAttachMemoryNV;


        [GLExtension("GL_NV_memory_attachment")]
        public static void TexAttachMemoryNV(TextureTarget target, uint memory, ulong offset) =>
            glTexAttachMemoryNV.Invoke(target, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferAttachMemoryNV(BufferTargetARB target, uint memory, ulong offset);
        private static GLBufferAttachMemoryNV glBufferAttachMemoryNV;


        [GLExtension("GL_NV_memory_attachment")]
        public static void BufferAttachMemoryNV(BufferTargetARB target, uint memory, ulong offset) =>
            glBufferAttachMemoryNV.Invoke(target, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureAttachMemoryNV(uint texture, uint memory, ulong offset);
        private static GLTextureAttachMemoryNV glTextureAttachMemoryNV;


        [GLExtension("GL_NV_memory_attachment")]
        public static void TextureAttachMemoryNV(uint texture, uint memory, ulong offset) =>
            glTextureAttachMemoryNV.Invoke(texture, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset);
        private static GLNamedBufferAttachMemoryNV glNamedBufferAttachMemoryNV;


        [GLExtension("GL_NV_memory_attachment")]
        public static void NamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset) =>
            glNamedBufferAttachMemoryNV.Invoke(buffer, memory, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferPageCommitmentMemNV(BufferStorageTarget target, nint offset, nint size, uint memory, ulong memOffset, bool commit);
        private static GLBufferPageCommitmentMemNV glBufferPageCommitmentMemNV;


        [GLExtension("GL_NV_memory_object_sparse")]
        public static void BufferPageCommitmentMemNV(BufferStorageTarget target, nint offset, nint size, uint memory, ulong memOffset, bool commit) =>
            glBufferPageCommitmentMemNV.Invoke(target, offset, size, memory, memOffset, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexPageCommitmentMemNV(TextureTarget target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit);
        private static GLTexPageCommitmentMemNV glTexPageCommitmentMemNV;


        [GLExtension("GL_NV_memory_object_sparse")]
        public static void TexPageCommitmentMemNV(TextureTarget target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit) =>
            glTexPageCommitmentMemNV.Invoke(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedBufferPageCommitmentMemNV(uint buffer, nint offset, nint size, uint memory, ulong memOffset, bool commit);
        private static GLNamedBufferPageCommitmentMemNV glNamedBufferPageCommitmentMemNV;


        [GLExtension("GL_NV_memory_object_sparse")]
        public static void NamedBufferPageCommitmentMemNV(uint buffer, nint offset, nint size, uint memory, ulong memOffset, bool commit) =>
            glNamedBufferPageCommitmentMemNV.Invoke(buffer, offset, size, memory, memOffset, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit);
        private static GLTexturePageCommitmentMemNV glTexturePageCommitmentMemNV;


        [GLExtension("GL_NV_memory_object_sparse")]
        public static void TexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, bool commit) =>
            glTexturePageCommitmentMemNV.Invoke(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawMeshTasksNV(uint first, uint count);
        private static GLDrawMeshTasksNV glDrawMeshTasksNV;


        [GLExtension("GL_NV_mesh_shader")]
        public static void DrawMeshTasksNV(uint first, uint count) =>
            glDrawMeshTasksNV.Invoke(first, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawMeshTasksIndirectNV(nint indirect);
        private static GLDrawMeshTasksIndirectNV glDrawMeshTasksIndirectNV;


        [GLExtension("GL_NV_mesh_shader")]
        public static void DrawMeshTasksIndirectNV(nint indirect) =>
            glDrawMeshTasksIndirectNV.Invoke(indirect);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawMeshTasksIndirectNV(nint indirect, int drawcount, int stride);
        private static GLMultiDrawMeshTasksIndirectNV glMultiDrawMeshTasksIndirectNV;


        [GLExtension("GL_NV_mesh_shader")]
        public static void MultiDrawMeshTasksIndirectNV(nint indirect, int drawcount, int stride) =>
            glMultiDrawMeshTasksIndirectNV.Invoke(indirect, drawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawMeshTasksIndirectCountNV(nint indirect, nint drawcount, int maxdrawcount, int stride);
        private static GLMultiDrawMeshTasksIndirectCountNV glMultiDrawMeshTasksIndirectCountNV;


        [GLExtension("GL_NV_mesh_shader")]
        public static void MultiDrawMeshTasksIndirectCountNV(nint indirect, nint drawcount, int maxdrawcount, int stride) =>
            glMultiDrawMeshTasksIndirectCountNV.Invoke(indirect, drawcount, maxdrawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2x3fvNV(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix2x3fvNV glUniformMatrix2x3fvNV;


        [GLExtension("GL_NV_non_square_matrices")]
        public static void UniformMatrix2x3fvNV(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix2x3fvNV.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3x2fvNV(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix3x2fvNV glUniformMatrix3x2fvNV;


        [GLExtension("GL_NV_non_square_matrices")]
        public static void UniformMatrix3x2fvNV(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix3x2fvNV.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2x4fvNV(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix2x4fvNV glUniformMatrix2x4fvNV;


        [GLExtension("GL_NV_non_square_matrices")]
        public static void UniformMatrix2x4fvNV(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix2x4fvNV.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4x2fvNV(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix4x2fvNV glUniformMatrix4x2fvNV;


        [GLExtension("GL_NV_non_square_matrices")]
        public static void UniformMatrix4x2fvNV(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix4x2fvNV.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3x4fvNV(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix3x4fvNV glUniformMatrix3x4fvNV;


        [GLExtension("GL_NV_non_square_matrices")]
        public static void UniformMatrix3x4fvNV(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix3x4fvNV.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4x3fvNV(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix4x3fvNV glUniformMatrix4x3fvNV;


        [GLExtension("GL_NV_non_square_matrices")]
        public static void UniformMatrix4x3fvNV(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix4x3fvNV.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenOcclusionQueriesNV(int n, out uint ids);
        private static GLGenOcclusionQueriesNV glGenOcclusionQueriesNV;


        [GLExtension("GL_NV_occlusion_query")]
        public static void GenOcclusionQueriesNV(int n, out uint ids) =>
            glGenOcclusionQueriesNV.Invoke(n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteOcclusionQueriesNV(int n, uint[] ids);
        private static GLDeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV;


        [GLExtension("GL_NV_occlusion_query")]
        public static void DeleteOcclusionQueriesNV(int n, uint[] ids) =>
            glDeleteOcclusionQueriesNV.Invoke(n, ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsOcclusionQueryNV(uint id);
        private static GLIsOcclusionQueryNV glIsOcclusionQueryNV;


        [GLExtension("GL_NV_occlusion_query")]
        public static bool IsOcclusionQueryNV(uint id) =>
            glIsOcclusionQueryNV.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginOcclusionQueryNV(uint id);
        private static GLBeginOcclusionQueryNV glBeginOcclusionQueryNV;


        [GLExtension("GL_NV_occlusion_query")]
        public static void BeginOcclusionQueryNV(uint id) =>
            glBeginOcclusionQueryNV.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndOcclusionQueryNV();
        private static GLEndOcclusionQueryNV glEndOcclusionQueryNV;


        [GLExtension("GL_NV_occlusion_query")]
        public static void EndOcclusionQueryNV() =>
            glEndOcclusionQueryNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, out int parameters);
        private static GLGetOcclusionQueryivNV glGetOcclusionQueryivNV;


        [GLExtension("GL_NV_occlusion_query")]
        public static void GetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, out int parameters) =>
            glGetOcclusionQueryivNV.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, out uint parameters);
        private static GLGetOcclusionQueryuivNV glGetOcclusionQueryuivNV;


        [GLExtension("GL_NV_occlusion_query")]
        public static void GetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, out uint parameters) =>
            glGetOcclusionQueryuivNV.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, float[] parameters);
        private static GLProgramBufferParametersfvNV glProgramBufferParametersfvNV;


        [GLExtension("GL_NV_parameter_buffer_object")]
        public static void ProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, float[] parameters) =>
            glProgramBufferParametersfvNV.Invoke(target, bindingIndex, wordIndex, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, int[] parameters);
        private static GLProgramBufferParametersIivNV glProgramBufferParametersIivNV;


        [GLExtension("GL_NV_parameter_buffer_object")]
        public static void ProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, int[] parameters) =>
            glProgramBufferParametersIivNV.Invoke(target, bindingIndex, wordIndex, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, uint[] parameters);
        private static GLProgramBufferParametersIuivNV glProgramBufferParametersIuivNV;


        [GLExtension("GL_NV_parameter_buffer_object")]
        public static void ProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, uint[] parameters) =>
            glProgramBufferParametersIuivNV.Invoke(target, bindingIndex, wordIndex, count, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGenPathsNV(int range);
        private static GLGenPathsNV glGenPathsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static uint GenPathsNV(int range) =>
            glGenPathsNV.Invoke(range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeletePathsNV(uint path, int range);
        private static GLDeletePathsNV glDeletePathsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void DeletePathsNV(uint path, int range) =>
            glDeletePathsNV.Invoke(path, range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsPathNV(uint path);
        private static GLIsPathNV glIsPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static bool IsPathNV(uint path) =>
            glIsPathNV.Invoke(path);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, nint coords);
        private static GLPathCommandsNV glPathCommandsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathCommandsNV(uint path, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, nint coords) =>
            glPathCommandsNV.Invoke(path, numCommands, commands, numCoords, coordType, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathCoordsNV(uint path, int numCoords, PathCoordType coordType, nint coords);
        private static GLPathCoordsNV glPathCoordsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathCoordsNV(uint path, int numCoords, PathCoordType coordType, nint coords) =>
            glPathCoordsNV.Invoke(path, numCoords, coordType, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, nint coords);
        private static GLPathSubCommandsNV glPathSubCommandsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, byte[] commands, int numCoords, PathCoordType coordType, nint coords) =>
            glPathSubCommandsNV.Invoke(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathSubCoordsNV(uint path, int coordStart, int numCoords, PathCoordType coordType, nint coords);
        private static GLPathSubCoordsNV glPathSubCoordsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathSubCoordsNV(uint path, int coordStart, int numCoords, PathCoordType coordType, nint coords) =>
            glPathSubCoordsNV.Invoke(path, coordStart, numCoords, coordType, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathStringNV(uint path, PathStringFormat format, int length, nint pathString);
        private static GLPathStringNV glPathStringNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathStringNV(uint path, PathStringFormat format, int length, nint pathString) =>
            glPathStringNV.Invoke(path, format, length, pathString);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, nint fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, nint charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale);
        private static GLPathGlyphsNV glPathGlyphsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, nint fontName, PathFontStyle fontStyle, int numGlyphs, PathElementType type, nint charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale) =>
            glPathGlyphsNV.Invoke(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, nint fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale);
        private static GLPathGlyphRangeNV glPathGlyphRangeNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, nint fontName, PathFontStyle fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale) =>
            glPathGlyphRangeNV.Invoke(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightPathsNV(uint resultPath, int numPaths, uint[] paths, float[] weights);
        private static GLWeightPathsNV glWeightPathsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void WeightPathsNV(uint resultPath, int numPaths, uint[] paths, float[] weights) =>
            glWeightPathsNV.Invoke(resultPath, numPaths, paths, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyPathNV(uint resultPath, uint srcPath);
        private static GLCopyPathNV glCopyPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void CopyPathNV(uint resultPath, uint srcPath) =>
            glCopyPathNV.Invoke(resultPath, srcPath);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight);
        private static GLInterpolatePathsNV glInterpolatePathsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void InterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight) =>
            glInterpolatePathsNV.Invoke(resultPath, pathA, pathB, weight);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues);
        private static GLTransformPathNV glTransformPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void TransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, float[] transformValues) =>
            glTransformPathNV.Invoke(resultPath, srcPath, transformType, transformValues);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathParameterivNV(uint path, PathParameter pname, int[] value);
        private static GLPathParameterivNV glPathParameterivNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathParameterivNV(uint path, PathParameter pname, int[] value) =>
            glPathParameterivNV.Invoke(path, pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathParameteriNV(uint path, PathParameter pname, int value);
        private static GLPathParameteriNV glPathParameteriNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathParameteriNV(uint path, PathParameter pname, int value) =>
            glPathParameteriNV.Invoke(path, pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathParameterfvNV(uint path, PathParameter pname, float[] value);
        private static GLPathParameterfvNV glPathParameterfvNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathParameterfvNV(uint path, PathParameter pname, float[] value) =>
            glPathParameterfvNV.Invoke(path, pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathParameterfNV(uint path, PathParameter pname, float value);
        private static GLPathParameterfNV glPathParameterfNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathParameterfNV(uint path, PathParameter pname, float value) =>
            glPathParameterfNV.Invoke(path, pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathDashArrayNV(uint path, int dashCount, float[] dashArray);
        private static GLPathDashArrayNV glPathDashArrayNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathDashArrayNV(uint path, int dashCount, float[] dashArray) =>
            glPathDashArrayNV.Invoke(path, dashCount, dashArray);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathStencilFuncNV(StencilFunction func, int reference, uint mask);
        private static GLPathStencilFuncNV glPathStencilFuncNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathStencilFuncNV(StencilFunction func, int reference, uint mask) =>
            glPathStencilFuncNV.Invoke(func, reference, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathStencilDepthOffsetNV(float factor, float units);
        private static GLPathStencilDepthOffsetNV glPathStencilDepthOffsetNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathStencilDepthOffsetNV(float factor, float units) =>
            glPathStencilDepthOffsetNV.Invoke(factor, units);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilFillPathNV(uint path, PathFillMode fillMode, uint mask);
        private static GLStencilFillPathNV glStencilFillPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilFillPathNV(uint path, PathFillMode fillMode, uint mask) =>
            glStencilFillPathNV.Invoke(path, fillMode, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilStrokePathNV(uint path, int reference, uint mask);
        private static GLStencilStrokePathNV glStencilStrokePathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilStrokePathNV(uint path, int reference, uint mask) =>
            glStencilStrokePathNV.Invoke(path, reference, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues);
        private static GLStencilFillPathInstancedNV glStencilFillPathInstancedNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, float[] transformValues) =>
            glStencilFillPathInstancedNV.Invoke(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues);
        private static GLStencilStrokePathInstancedNV glStencilStrokePathInstancedNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, int reference, uint mask, PathTransformType transformType, float[] transformValues) =>
            glStencilStrokePathInstancedNV.Invoke(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathCoverDepthFuncNV(DepthFunction func);
        private static GLPathCoverDepthFuncNV glPathCoverDepthFuncNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathCoverDepthFuncNV(DepthFunction func) =>
            glPathCoverDepthFuncNV.Invoke(func);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverFillPathNV(uint path, PathCoverMode coverMode);
        private static GLCoverFillPathNV glCoverFillPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void CoverFillPathNV(uint path, PathCoverMode coverMode) =>
            glCoverFillPathNV.Invoke(path, coverMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverStrokePathNV(uint path, PathCoverMode coverMode);
        private static GLCoverStrokePathNV glCoverStrokePathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void CoverStrokePathNV(uint path, PathCoverMode coverMode) =>
            glCoverStrokePathNV.Invoke(path, coverMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues);
        private static GLCoverFillPathInstancedNV glCoverFillPathInstancedNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void CoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues) =>
            glCoverFillPathInstancedNV.Invoke(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues);
        private static GLCoverStrokePathInstancedNV glCoverStrokePathInstancedNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void CoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, nint paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, float[] transformValues) =>
            glCoverStrokePathInstancedNV.Invoke(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathParameterivNV(uint path, PathParameter pname, out int value);
        private static GLGetPathParameterivNV glGetPathParameterivNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathParameterivNV(uint path, PathParameter pname, out int value) =>
            glGetPathParameterivNV.Invoke(path, pname, out value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathParameterfvNV(uint path, PathParameter pname, out float value);
        private static GLGetPathParameterfvNV glGetPathParameterfvNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathParameterfvNV(uint path, PathParameter pname, out float value) =>
            glGetPathParameterfvNV.Invoke(path, pname, out value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathCommandsNV(uint path, out byte commands);
        private static GLGetPathCommandsNV glGetPathCommandsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathCommandsNV(uint path, out byte commands) =>
            glGetPathCommandsNV.Invoke(path, out commands);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathCoordsNV(uint path, out float coords);
        private static GLGetPathCoordsNV glGetPathCoordsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathCoordsNV(uint path, out float coords) =>
            glGetPathCoordsNV.Invoke(path, out coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathDashArrayNV(uint path, out float dashArray);
        private static GLGetPathDashArrayNV glGetPathDashArrayNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathDashArrayNV(uint path, out float dashArray) =>
            glGetPathDashArrayNV.Invoke(path, out dashArray);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, nint paths, uint pathBase, int stride, out float metrics);
        private static GLGetPathMetricsNV glGetPathMetricsNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathMetricsNV(PathMetricMask metricQueryMask, int numPaths, PathElementType pathNameType, nint paths, uint pathBase, int stride, out float metrics) =>
            glGetPathMetricsNV.Invoke(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, out metrics);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, out float metrics);
        private static GLGetPathMetricRangeNV glGetPathMetricRangeNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathMetricRangeNV(PathMetricMask metricQueryMask, uint firstPathName, int numPaths, int stride, out float metrics) =>
            glGetPathMetricRangeNV.Invoke(metricQueryMask, firstPathName, numPaths, stride, out metrics);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, nint paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, out float returnedSpacing);
        private static GLGetPathSpacingNV glGetPathSpacingNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, nint paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, out float returnedSpacing) =>
            glGetPathSpacingNV.Invoke(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, out returnedSpacing);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsPointInFillPathNV(uint path, uint mask, float x, float y);
        private static GLIsPointInFillPathNV glIsPointInFillPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static bool IsPointInFillPathNV(uint path, uint mask, float x, float y) =>
            glIsPointInFillPathNV.Invoke(path, mask, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsPointInStrokePathNV(uint path, float x, float y);
        private static GLIsPointInStrokePathNV glIsPointInStrokePathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static bool IsPointInStrokePathNV(uint path, float x, float y) =>
            glIsPointInStrokePathNV.Invoke(path, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate float GLGetPathLengthNV(uint path, int startSegment, int numSegments);
        private static GLGetPathLengthNV glGetPathLengthNV;


        [GLExtension("GL_NV_path_rendering")]
        public static float GetPathLengthNV(uint path, int startSegment, int numSegments) =>
            glGetPathLengthNV.Invoke(path, startSegment, numSegments);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, out float y, out float tangentX, out float tangentY);
        private static GLPointAlongPathNV glPointAlongPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static bool PointAlongPathNV(uint path, int startSegment, int numSegments, float distance, out float x, out float y, out float tangentX, out float tangentY) =>
            glPointAlongPathNV.Invoke(path, startSegment, numSegments, distance, out x, out y, out tangentX, out tangentY);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoad3x2fNV(int matrixMode, float[] m);
        private static GLMatrixLoad3x2fNV glMatrixLoad3x2fNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void MatrixLoad3x2fNV(int matrixMode, float[] m) =>
            glMatrixLoad3x2fNV.Invoke(matrixMode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoad3x3fNV(int matrixMode, float[] m);
        private static GLMatrixLoad3x3fNV glMatrixLoad3x3fNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void MatrixLoad3x3fNV(int matrixMode, float[] m) =>
            glMatrixLoad3x3fNV.Invoke(matrixMode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixLoadTranspose3x3fNV(int matrixMode, float[] m);
        private static GLMatrixLoadTranspose3x3fNV glMatrixLoadTranspose3x3fNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void MatrixLoadTranspose3x3fNV(int matrixMode, float[] m) =>
            glMatrixLoadTranspose3x3fNV.Invoke(matrixMode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMult3x2fNV(int matrixMode, float[] m);
        private static GLMatrixMult3x2fNV glMatrixMult3x2fNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void MatrixMult3x2fNV(int matrixMode, float[] m) =>
            glMatrixMult3x2fNV.Invoke(matrixMode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMult3x3fNV(int matrixMode, float[] m);
        private static GLMatrixMult3x3fNV glMatrixMult3x3fNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void MatrixMult3x3fNV(int matrixMode, float[] m) =>
            glMatrixMult3x3fNV.Invoke(matrixMode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMultTranspose3x3fNV(int matrixMode, float[] m);
        private static GLMatrixMultTranspose3x3fNV glMatrixMultTranspose3x3fNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void MatrixMultTranspose3x3fNV(int matrixMode, float[] m) =>
            glMatrixMultTranspose3x3fNV.Invoke(matrixMode, m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode);
        private static GLStencilThenCoverFillPathNV glStencilThenCoverFillPathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilThenCoverFillPathNV(uint path, int fillMode, uint mask, int coverMode) =>
            glStencilThenCoverFillPathNV.Invoke(path, fillMode, mask, coverMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode);
        private static GLStencilThenCoverStrokePathNV glStencilThenCoverStrokePathNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilThenCoverStrokePathNV(uint path, int reference, uint mask, int coverMode) =>
            glStencilThenCoverStrokePathNV.Invoke(path, reference, mask, coverMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float[] transformValues);
        private static GLStencilThenCoverFillPathInstancedNV glStencilThenCoverFillPathInstancedNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilThenCoverFillPathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int fillMode, uint mask, int coverMode, int transformType, float[] transformValues) =>
            glStencilThenCoverFillPathInstancedNV.Invoke(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float[] transformValues);
        private static GLStencilThenCoverStrokePathInstancedNV glStencilThenCoverStrokePathInstancedNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void StencilThenCoverStrokePathInstancedNV(int numPaths, int pathNameType, nint paths, uint pathBase, int reference, uint mask, int coverMode, int transformType, float[] transformValues) =>
            glStencilThenCoverStrokePathInstancedNV.Invoke(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLPathGlyphIndexRangeNV(int fontTarget, nint fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, out uint baseAndCount);
        private static GLPathGlyphIndexRangeNV glPathGlyphIndexRangeNV;


        [GLExtension("GL_NV_path_rendering")]
        public static int PathGlyphIndexRangeNV(int fontTarget, nint fontName, PathFontStyle fontStyle, uint pathParameterTemplate, float emScale, out uint baseAndCount) =>
            glPathGlyphIndexRangeNV.Invoke(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, out baseAndCount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLPathGlyphIndexArrayNV(uint firstPathName, int fontTarget, nint fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
        private static GLPathGlyphIndexArrayNV glPathGlyphIndexArrayNV;


        [GLExtension("GL_NV_path_rendering")]
        public static int PathGlyphIndexArrayNV(uint firstPathName, int fontTarget, nint fontName, PathFontStyle fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) =>
            glPathGlyphIndexArrayNV.Invoke(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLPathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, nint fontSize, nint fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale);
        private static GLPathMemoryGlyphIndexArrayNV glPathMemoryGlyphIndexArrayNV;


        [GLExtension("GL_NV_path_rendering")]
        public static int PathMemoryGlyphIndexArrayNV(uint firstPathName, int fontTarget, nint fontSize, nint fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale) =>
            glPathMemoryGlyphIndexArrayNV.Invoke(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float[] coeffs);
        private static GLProgramPathFragmentInputGenNV glProgramPathFragmentInputGenNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void ProgramPathFragmentInputGenNV(uint program, int location, int genMode, int components, float[] coeffs) =>
            glProgramPathFragmentInputGenNV.Invoke(program, location, genMode, components, coeffs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramResourcefvNV(uint program, ProgramInterface programInterface, uint index, int propCount, int[] props, int count, out int length, out float parameters);
        private static GLGetProgramResourcefvNV glGetProgramResourcefvNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetProgramResourcefvNV(uint program, ProgramInterface programInterface, uint index, int propCount, int[] props, int count, out int length, out float parameters) =>
            glGetProgramResourcefvNV.Invoke(program, programInterface, index, propCount, props, count, out length, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float[] coeffs);
        private static GLPathColorGenNV glPathColorGenNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, float[] coeffs) =>
            glPathColorGenNV.Invoke(color, genMode, colorFormat, coeffs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs);
        private static GLPathTexGenNV glPathTexGenNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, float[] coeffs) =>
            glPathTexGenNV.Invoke(texCoordSet, genMode, components, coeffs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPathFogGenNV(PathGenMode genMode);
        private static GLPathFogGenNV glPathFogGenNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void PathFogGenNV(PathGenMode genMode) =>
            glPathFogGenNV.Invoke(genMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathColorGenivNV(PathColor color, PathGenMode pname, out int value);
        private static GLGetPathColorGenivNV glGetPathColorGenivNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathColorGenivNV(PathColor color, PathGenMode pname, out int value) =>
            glGetPathColorGenivNV.Invoke(color, pname, out value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathColorGenfvNV(PathColor color, PathGenMode pname, out float value);
        private static GLGetPathColorGenfvNV glGetPathColorGenfvNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathColorGenfvNV(PathColor color, PathGenMode pname, out float value) =>
            glGetPathColorGenfvNV.Invoke(color, pname, out value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, out int value);
        private static GLGetPathTexGenivNV glGetPathTexGenivNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, out int value) =>
            glGetPathTexGenivNV.Invoke(texCoordSet, pname, out value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, out float value);
        private static GLGetPathTexGenfvNV glGetPathTexGenfvNV;


        [GLExtension("GL_NV_path_rendering")]
        public static void GetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, out float value) =>
            glGetPathTexGenfvNV.Invoke(texCoordSet, pname, out value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelDataRangeNV(PixelDataRangeTargetNV target, int length, nint pointer);
        private static GLPixelDataRangeNV glPixelDataRangeNV;


        [GLExtension("GL_NV_pixel_data_range")]
        public static void PixelDataRangeNV(PixelDataRangeTargetNV target, int length, nint pointer) =>
            glPixelDataRangeNV.Invoke(target, length, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushPixelDataRangeNV(PixelDataRangeTargetNV target);
        private static GLFlushPixelDataRangeNV glFlushPixelDataRangeNV;


        [GLExtension("GL_NV_pixel_data_range")]
        public static void FlushPixelDataRangeNV(PixelDataRangeTargetNV target) =>
            glFlushPixelDataRangeNV.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameteriNV(PointParameterNameARB pname, int param);
        private static GLPointParameteriNV glPointParameteriNV;


        [GLExtension("GL_NV_point_sprite")]
        public static void PointParameteriNV(PointParameterNameARB pname, int param) =>
            glPointParameteriNV.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterivNV(PointParameterNameARB pname, int[] parameters);
        private static GLPointParameterivNV glPointParameterivNV;


        [GLExtension("GL_NV_point_sprite")]
        public static void PointParameterivNV(PointParameterNameARB pname, int[] parameters) =>
            glPointParameterivNV.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonModeNV(TriangleFace face, PolygonMode mode);
        private static GLPolygonModeNV glPolygonModeNV;


        [GLExtension("GL_NV_polygon_mode")]
        public static void PolygonModeNV(TriangleFace face, PolygonMode mode) =>
            glPolygonModeNV.Invoke(face, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, uint key0, int target1, uint fill1, uint key1);
        private static GLPresentFrameKeyedNV glPresentFrameKeyedNV;


        [GLExtension("GL_NV_present_video")]
        public static void PresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, uint key0, int target1, uint fill1, uint key1) =>
            glPresentFrameKeyedNV.Invoke(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, int target1, uint fill1, int target2, uint fill2, int target3, uint fill3);
        private static GLPresentFrameDualFillNV glPresentFrameDualFillNV;


        [GLExtension("GL_NV_present_video")]
        public static void PresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, int type, int target0, uint fill0, int target1, uint fill1, int target2, uint fill2, int target3, uint fill3) =>
            glPresentFrameDualFillNV.Invoke(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideoivNV(uint video_slot, int pname, out int parameters);
        private static GLGetVideoivNV glGetVideoivNV;


        [GLExtension("GL_NV_present_video")]
        public static void GetVideoivNV(uint video_slot, int pname, out int parameters) =>
            glGetVideoivNV.Invoke(video_slot, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideouivNV(uint video_slot, int pname, out uint parameters);
        private static GLGetVideouivNV glGetVideouivNV;


        [GLExtension("GL_NV_present_video")]
        public static void GetVideouivNV(uint video_slot, int pname, out uint parameters) =>
            glGetVideouivNV.Invoke(video_slot, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideoi64vNV(uint video_slot, int pname, out long parameters);
        private static GLGetVideoi64vNV glGetVideoi64vNV;


        [GLExtension("GL_NV_present_video")]
        public static void GetVideoi64vNV(uint video_slot, int pname, out long parameters) =>
            glGetVideoi64vNV.Invoke(video_slot, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideoui64vNV(uint video_slot, int pname, out ulong parameters);
        private static GLGetVideoui64vNV glGetVideoui64vNV;


        [GLExtension("GL_NV_present_video")]
        public static void GetVideoui64vNV(uint video_slot, int pname, out ulong parameters) =>
            glGetVideoui64vNV.Invoke(video_slot, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrimitiveRestartNV();
        private static GLPrimitiveRestartNV glPrimitiveRestartNV;


        [GLExtension("GL_NV_primitive_restart")]
        public static void PrimitiveRestartNV() =>
            glPrimitiveRestartNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrimitiveRestartIndexNV(uint index);
        private static GLPrimitiveRestartIndexNV glPrimitiveRestartIndexNV;


        [GLExtension("GL_NV_primitive_restart")]
        public static void PrimitiveRestartIndexNV(uint index) =>
            glPrimitiveRestartIndexNV.Invoke(index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLQueryResourceNV(int queryType, int tagId, uint count, out int buffer);
        private static GLQueryResourceNV glQueryResourceNV;


        [GLExtension("GL_NV_query_resource")]
        public static int QueryResourceNV(int queryType, int tagId, uint count, out int buffer) =>
            glQueryResourceNV.Invoke(queryType, tagId, count, out buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenQueryResourceTagNV(int n, out int tagIds);
        private static GLGenQueryResourceTagNV glGenQueryResourceTagNV;


        [GLExtension("GL_NV_query_resource_tag")]
        public static void GenQueryResourceTagNV(int n, out int tagIds) =>
            glGenQueryResourceTagNV.Invoke(n, out tagIds);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteQueryResourceTagNV(int n, int[] tagIds);
        private static GLDeleteQueryResourceTagNV glDeleteQueryResourceTagNV;


        [GLExtension("GL_NV_query_resource_tag")]
        public static void DeleteQueryResourceTagNV(int n, int[] tagIds) =>
            glDeleteQueryResourceTagNV.Invoke(n, tagIds);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLQueryResourceTagNV(int tagId, sbyte[] tagString);
        private static GLQueryResourceTagNV glQueryResourceTagNV;


        [GLExtension("GL_NV_query_resource_tag")]
        public static void QueryResourceTagNV(int tagId, sbyte[] tagString) =>
            glQueryResourceTagNV.Invoke(tagId, tagString);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadBufferNV(int mode);
        private static GLReadBufferNV glReadBufferNV;


        [GLExtension("GL_NV_read_buffer")]
        public static void ReadBufferNV(int mode) =>
            glReadBufferNV.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCombinerParameterfvNV(CombinerParameterNV pname, float[] parameters);
        private static GLCombinerParameterfvNV glCombinerParameterfvNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void CombinerParameterfvNV(CombinerParameterNV pname, float[] parameters) =>
            glCombinerParameterfvNV.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCombinerParameterfNV(CombinerParameterNV pname, float param);
        private static GLCombinerParameterfNV glCombinerParameterfNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void CombinerParameterfNV(CombinerParameterNV pname, float param) =>
            glCombinerParameterfNV.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCombinerParameterivNV(CombinerParameterNV pname, int[] parameters);
        private static GLCombinerParameterivNV glCombinerParameterivNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void CombinerParameterivNV(CombinerParameterNV pname, int[] parameters) =>
            glCombinerParameterivNV.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCombinerParameteriNV(CombinerParameterNV pname, int param);
        private static GLCombinerParameteriNV glCombinerParameteriNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void CombinerParameteriNV(CombinerParameterNV pname, int param) =>
            glCombinerParameteriNV.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCombinerInputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage);
        private static GLCombinerInputNV glCombinerInputNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void CombinerInputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage) =>
            glCombinerInputNV.Invoke(stage, portion, variable, input, mapping, componentUsage);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCombinerOutputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerRegisterNV abOutput, CombinerRegisterNV cdOutput, CombinerRegisterNV sumOutput, CombinerScaleNV scale, CombinerBiasNV bias, bool abDotProduct, bool cdDotProduct, bool muxSum);
        private static GLCombinerOutputNV glCombinerOutputNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void CombinerOutputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerRegisterNV abOutput, CombinerRegisterNV cdOutput, CombinerRegisterNV sumOutput, CombinerScaleNV scale, CombinerBiasNV bias, bool abDotProduct, bool cdDotProduct, bool muxSum) =>
            glCombinerOutputNV.Invoke(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFinalCombinerInputNV(CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage);
        private static GLFinalCombinerInputNV glFinalCombinerInputNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void FinalCombinerInputNV(CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage) =>
            glFinalCombinerInputNV.Invoke(variable, input, mapping, componentUsage);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, out float parameters);
        private static GLGetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void GetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, out float parameters) =>
            glGetCombinerInputParameterfvNV.Invoke(stage, portion, variable, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, out int parameters);
        private static GLGetCombinerInputParameterivNV glGetCombinerInputParameterivNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void GetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, out int parameters) =>
            glGetCombinerInputParameterivNV.Invoke(stage, portion, variable, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, out float parameters);
        private static GLGetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void GetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, out float parameters) =>
            glGetCombinerOutputParameterfvNV.Invoke(stage, portion, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, out int parameters);
        private static GLGetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void GetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, out int parameters) =>
            glGetCombinerOutputParameterivNV.Invoke(stage, portion, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, out float parameters);
        private static GLGetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void GetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, out float parameters) =>
            glGetFinalCombinerInputParameterfvNV.Invoke(variable, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, out int parameters);
        private static GLGetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV;


        [GLExtension("GL_NV_register_combiners")]
        public static void GetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, out int parameters) =>
            glGetFinalCombinerInputParameterivNV.Invoke(variable, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters);
        private static GLCombinerStageParameterfvNV glCombinerStageParameterfvNV;


        [GLExtension("GL_NV_register_combiners2")]
        public static void CombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, float[] parameters) =>
            glCombinerStageParameterfvNV.Invoke(stage, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, out float parameters);
        private static GLGetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV;


        [GLExtension("GL_NV_register_combiners2")]
        public static void GetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, out float parameters) =>
            glGetCombinerStageParameterfvNV.Invoke(stage, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, float[] v);
        private static GLFramebufferSampleLocationsfvNV glFramebufferSampleLocationsfvNV;


        [GLExtension("GL_NV_sample_locations")]
        public static void FramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, float[] v) =>
            glFramebufferSampleLocationsfvNV.Invoke(target, start, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float[] v);
        private static GLNamedFramebufferSampleLocationsfvNV glNamedFramebufferSampleLocationsfvNV;


        [GLExtension("GL_NV_sample_locations")]
        public static void NamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, float[] v) =>
            glNamedFramebufferSampleLocationsfvNV.Invoke(framebuffer, start, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResolveDepthValuesNV();
        private static GLResolveDepthValuesNV glResolveDepthValuesNV;


        [GLExtension("GL_NV_sample_locations")]
        public static void ResolveDepthValuesNV() =>
            glResolveDepthValuesNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorExclusiveNV(int x, int y, int width, int height);
        private static GLScissorExclusiveNV glScissorExclusiveNV;


        [GLExtension("GL_NV_scissor_exclusive")]
        public static void ScissorExclusiveNV(int x, int y, int width, int height) =>
            glScissorExclusiveNV.Invoke(x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorExclusiveArrayvNV(uint first, int count, int[] v);
        private static GLScissorExclusiveArrayvNV glScissorExclusiveArrayvNV;


        [GLExtension("GL_NV_scissor_exclusive")]
        public static void ScissorExclusiveArrayvNV(uint first, int count, int[] v) =>
            glScissorExclusiveArrayvNV.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeBufferResidentNV(int target, int access);
        private static GLMakeBufferResidentNV glMakeBufferResidentNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void MakeBufferResidentNV(int target, int access) =>
            glMakeBufferResidentNV.Invoke(target, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeBufferNonResidentNV(int target);
        private static GLMakeBufferNonResidentNV glMakeBufferNonResidentNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void MakeBufferNonResidentNV(int target) =>
            glMakeBufferNonResidentNV.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsBufferResidentNV(int target);
        private static GLIsBufferResidentNV glIsBufferResidentNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static bool IsBufferResidentNV(int target) =>
            glIsBufferResidentNV.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeNamedBufferResidentNV(uint buffer, int access);
        private static GLMakeNamedBufferResidentNV glMakeNamedBufferResidentNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void MakeNamedBufferResidentNV(uint buffer, int access) =>
            glMakeNamedBufferResidentNV.Invoke(buffer, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMakeNamedBufferNonResidentNV(uint buffer);
        private static GLMakeNamedBufferNonResidentNV glMakeNamedBufferNonResidentNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void MakeNamedBufferNonResidentNV(uint buffer) =>
            glMakeNamedBufferNonResidentNV.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsNamedBufferResidentNV(uint buffer);
        private static GLIsNamedBufferResidentNV glIsNamedBufferResidentNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static bool IsNamedBufferResidentNV(uint buffer) =>
            glIsNamedBufferResidentNV.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferParameterui64vNV(BufferTargetARB target, int pname, out ulong parameters);
        private static GLGetBufferParameterui64vNV glGetBufferParameterui64vNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void GetBufferParameterui64vNV(BufferTargetARB target, int pname, out ulong parameters) =>
            glGetBufferParameterui64vNV.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetNamedBufferParameterui64vNV(uint buffer, BufferPNameARB pname, out ulong parameters);
        private static GLGetNamedBufferParameterui64vNV glGetNamedBufferParameterui64vNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void GetNamedBufferParameterui64vNV(uint buffer, BufferPNameARB pname, out ulong parameters) =>
            glGetNamedBufferParameterui64vNV.Invoke(buffer, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetIntegerui64vNV(int value, out ulong result);
        private static GLGetIntegerui64vNV glGetIntegerui64vNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void GetIntegerui64vNV(int value, out ulong result) =>
            glGetIntegerui64vNV.Invoke(value, out result);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformui64NV(int location, ulong value);
        private static GLUniformui64NV glUniformui64NV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void Uniformui64NV(int location, ulong value) =>
            glUniformui64NV.Invoke(location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformui64vNV(int location, int count, ulong[] value);
        private static GLUniformui64vNV glUniformui64vNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void Uniformui64vNV(int location, int count, ulong[] value) =>
            glUniformui64vNV.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformui64NV(uint program, int location, ulong value);
        private static GLProgramUniformui64NV glProgramUniformui64NV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void ProgramUniformui64NV(uint program, int location, ulong value) =>
            glProgramUniformui64NV.Invoke(program, location, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramUniformui64vNV(uint program, int location, int count, ulong[] value);
        private static GLProgramUniformui64vNV glProgramUniformui64vNV;


        [GLExtension("GL_NV_shader_buffer_load")]
        public static void ProgramUniformui64vNV(uint program, int location, int count, ulong[] value) =>
            glProgramUniformui64vNV.Invoke(program, location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindShadingRateImageNV(uint texture);
        private static GLBindShadingRateImageNV glBindShadingRateImageNV;


        [GLExtension("GL_NV_shading_rate_image")]
        public static void BindShadingRateImageNV(uint texture) =>
            glBindShadingRateImageNV.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetShadingRateImagePaletteNV(uint viewport, uint entry, out int rate);
        private static GLGetShadingRateImagePaletteNV glGetShadingRateImagePaletteNV;


        [GLExtension("GL_NV_shading_rate_image")]
        public static void GetShadingRateImagePaletteNV(uint viewport, uint entry, out int rate) =>
            glGetShadingRateImagePaletteNV.Invoke(viewport, entry, out rate);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetShadingRateSampleLocationivNV(int rate, uint samples, uint index, out int location);
        private static GLGetShadingRateSampleLocationivNV glGetShadingRateSampleLocationivNV;


        [GLExtension("GL_NV_shading_rate_image")]
        public static void GetShadingRateSampleLocationivNV(int rate, uint samples, uint index, out int location) =>
            glGetShadingRateSampleLocationivNV.Invoke(rate, samples, index, out location);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadingRateImageBarrierNV(bool synchronize);
        private static GLShadingRateImageBarrierNV glShadingRateImageBarrierNV;


        [GLExtension("GL_NV_shading_rate_image")]
        public static void ShadingRateImageBarrierNV(bool synchronize) =>
            glShadingRateImageBarrierNV.Invoke(synchronize);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadingRateImagePaletteNV(uint viewport, uint first, int count, int[] rates);
        private static GLShadingRateImagePaletteNV glShadingRateImagePaletteNV;


        [GLExtension("GL_NV_shading_rate_image")]
        public static void ShadingRateImagePaletteNV(uint viewport, uint first, int count, int[] rates) =>
            glShadingRateImagePaletteNV.Invoke(viewport, first, count, rates);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadingRateSampleOrderNV(int order);
        private static GLShadingRateSampleOrderNV glShadingRateSampleOrderNV;


        [GLExtension("GL_NV_shading_rate_image")]
        public static void ShadingRateSampleOrderNV(int order) =>
            glShadingRateSampleOrderNV.Invoke(order);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadingRateSampleOrderCustomNV(int rate, uint samples, int[] locations);
        private static GLShadingRateSampleOrderCustomNV glShadingRateSampleOrderCustomNV;


        [GLExtension("GL_NV_shading_rate_image")]
        public static void ShadingRateSampleOrderCustomNV(int rate, uint samples, int[] locations) =>
            glShadingRateSampleOrderCustomNV.Invoke(rate, samples, locations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureBarrierNV();
        private static GLTextureBarrierNV glTextureBarrierNV;


        [GLExtension("GL_NV_texture_barrier")]
        public static void TextureBarrierNV() =>
            glTextureBarrierNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage2DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);
        private static GLTexImage2DMultisampleCoverageNV glTexImage2DMultisampleCoverageNV;


        [GLExtension("GL_NV_texture_multisample")]
        public static void TexImage2DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations) =>
            glTexImage2DMultisampleCoverageNV.Invoke(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage3DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);
        private static GLTexImage3DMultisampleCoverageNV glTexImage3DMultisampleCoverageNV;


        [GLExtension("GL_NV_texture_multisample")]
        public static void TexImage3DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations) =>
            glTexImage3DMultisampleCoverageNV.Invoke(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureImage2DMultisampleNV(uint texture, TextureTarget target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations);
        private static GLTextureImage2DMultisampleNV glTextureImage2DMultisampleNV;


        [GLExtension("GL_NV_texture_multisample")]
        public static void TextureImage2DMultisampleNV(uint texture, TextureTarget target, int samples, int internalFormat, int width, int height, bool fixedSampleLocations) =>
            glTextureImage2DMultisampleNV.Invoke(texture, target, samples, internalFormat, width, height, fixedSampleLocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureImage3DMultisampleNV(uint texture, TextureTarget target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);
        private static GLTextureImage3DMultisampleNV glTextureImage3DMultisampleNV;


        [GLExtension("GL_NV_texture_multisample")]
        public static void TextureImage3DMultisampleNV(uint texture, TextureTarget target, int samples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations) =>
            glTextureImage3DMultisampleNV.Invoke(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureImage2DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations);
        private static GLTextureImage2DMultisampleCoverageNV glTextureImage2DMultisampleCoverageNV;


        [GLExtension("GL_NV_texture_multisample")]
        public static void TextureImage2DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, bool fixedSampleLocations) =>
            glTextureImage2DMultisampleCoverageNV.Invoke(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureImage3DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations);
        private static GLTextureImage3DMultisampleCoverageNV glTextureImage3DMultisampleCoverageNV;


        [GLExtension("GL_NV_texture_multisample")]
        public static void TextureImage3DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, bool fixedSampleLocations) =>
            glTextureImage3DMultisampleCoverageNV.Invoke(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginTransformFeedbackNV(PrimitiveType primitiveMode);
        private static GLBeginTransformFeedbackNV glBeginTransformFeedbackNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void BeginTransformFeedbackNV(PrimitiveType primitiveMode) =>
            glBeginTransformFeedbackNV.Invoke(primitiveMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndTransformFeedbackNV();
        private static GLEndTransformFeedbackNV glEndTransformFeedbackNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void EndTransformFeedbackNV() =>
            glEndTransformFeedbackNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformFeedbackAttribsNV(int count, int[] attribs, int bufferMode);
        private static GLTransformFeedbackAttribsNV glTransformFeedbackAttribsNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void TransformFeedbackAttribsNV(int count, int[] attribs, int bufferMode) =>
            glTransformFeedbackAttribsNV.Invoke(count, attribs, bufferMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferRangeNV(BufferTargetARB target, uint index, uint buffer, nint offset, nint size);
        private static GLBindBufferRangeNV glBindBufferRangeNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void BindBufferRangeNV(BufferTargetARB target, uint index, uint buffer, nint offset, nint size) =>
            glBindBufferRangeNV.Invoke(target, index, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferOffsetNV(BufferTargetARB target, uint index, uint buffer, nint offset);
        private static GLBindBufferOffsetNV glBindBufferOffsetNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void BindBufferOffsetNV(BufferTargetARB target, uint index, uint buffer, nint offset) =>
            glBindBufferOffsetNV.Invoke(target, index, buffer, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBufferBaseNV(BufferTargetARB target, uint index, uint buffer);
        private static GLBindBufferBaseNV glBindBufferBaseNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void BindBufferBaseNV(BufferTargetARB target, uint index, uint buffer) =>
            glBindBufferBaseNV.Invoke(target, index, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformFeedbackVaryingsNV(uint program, int count, int[] locations, TransformFeedbackBufferMode bufferMode);
        private static GLTransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void TransformFeedbackVaryingsNV(uint program, int count, int[] locations, TransformFeedbackBufferMode bufferMode) =>
            glTransformFeedbackVaryingsNV.Invoke(program, count, locations, bufferMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLActiveVaryingNV(uint program, sbyte[] name);
        private static GLActiveVaryingNV glActiveVaryingNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void ActiveVaryingNV(uint program, sbyte[] name) =>
            glActiveVaryingNV.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetVaryingLocationNV(uint program, sbyte[] name);
        private static GLGetVaryingLocationNV glGetVaryingLocationNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static int GetVaryingLocationNV(uint program, sbyte[] name) =>
            glGetVaryingLocationNV.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveVaryingNV(uint program, uint index, int bufSize, out int length, out int size, out int type, out sbyte name);
        private static GLGetActiveVaryingNV glGetActiveVaryingNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void GetActiveVaryingNV(uint program, uint index, int bufSize, out int length, out int size, out int type, out sbyte name) =>
            glGetActiveVaryingNV.Invoke(program, index, bufSize, out length, out size, out type, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTransformFeedbackVaryingNV(uint program, uint index, out int location);
        private static GLGetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void GetTransformFeedbackVaryingNV(uint program, uint index, out int location) =>
            glGetTransformFeedbackVaryingNV.Invoke(program, index, out location);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformFeedbackStreamAttribsNV(int count, int[] attribs, int nbuffers, int[] bufstreams, int bufferMode);
        private static GLTransformFeedbackStreamAttribsNV glTransformFeedbackStreamAttribsNV;


        [GLExtension("GL_NV_transform_feedback")]
        public static void TransformFeedbackStreamAttribsNV(int count, int[] attribs, int nbuffers, int[] bufstreams, int bufferMode) =>
            glTransformFeedbackStreamAttribsNV.Invoke(count, attribs, nbuffers, bufstreams, bufferMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindTransformFeedbackNV(BufferTargetARB target, uint id);
        private static GLBindTransformFeedbackNV glBindTransformFeedbackNV;


        [GLExtension("GL_NV_transform_feedback2")]
        public static void BindTransformFeedbackNV(BufferTargetARB target, uint id) =>
            glBindTransformFeedbackNV.Invoke(target, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteTransformFeedbacksNV(int n, uint[] ids);
        private static GLDeleteTransformFeedbacksNV glDeleteTransformFeedbacksNV;


        [GLExtension("GL_NV_transform_feedback2")]
        public static void DeleteTransformFeedbacksNV(int n, uint[] ids) =>
            glDeleteTransformFeedbacksNV.Invoke(n, ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenTransformFeedbacksNV(int n, out uint ids);
        private static GLGenTransformFeedbacksNV glGenTransformFeedbacksNV;


        [GLExtension("GL_NV_transform_feedback2")]
        public static void GenTransformFeedbacksNV(int n, out uint ids) =>
            glGenTransformFeedbacksNV.Invoke(n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsTransformFeedbackNV(uint id);
        private static GLIsTransformFeedbackNV glIsTransformFeedbackNV;


        [GLExtension("GL_NV_transform_feedback2")]
        public static bool IsTransformFeedbackNV(uint id) =>
            glIsTransformFeedbackNV.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPauseTransformFeedbackNV();
        private static GLPauseTransformFeedbackNV glPauseTransformFeedbackNV;


        [GLExtension("GL_NV_transform_feedback2")]
        public static void PauseTransformFeedbackNV() =>
            glPauseTransformFeedbackNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLResumeTransformFeedbackNV();
        private static GLResumeTransformFeedbackNV glResumeTransformFeedbackNV;


        [GLExtension("GL_NV_transform_feedback2")]
        public static void ResumeTransformFeedbackNV() =>
            glResumeTransformFeedbackNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTransformFeedbackNV(PrimitiveType mode, uint id);
        private static GLDrawTransformFeedbackNV glDrawTransformFeedbackNV;


        [GLExtension("GL_NV_transform_feedback2")]
        public static void DrawTransformFeedbackNV(PrimitiveType mode, uint id) =>
            glDrawTransformFeedbackNV.Invoke(mode, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVDPAUInitNV(nint vdpDevice, nint getProcAddress);
        private static GLVDPAUInitNV glVDPAUInitNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static void VDPAUInitNV(nint vdpDevice, nint getProcAddress) =>
            glVDPAUInitNV.Invoke(vdpDevice, getProcAddress);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVDPAUFiniNV();
        private static GLVDPAUFiniNV glVDPAUFiniNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static void VDPAUFiniNV() =>
            glVDPAUFiniNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLVDPAURegisterVideoSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames);
        private static GLVDPAURegisterVideoSurfaceNV glVDPAURegisterVideoSurfaceNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static nint VDPAURegisterVideoSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames) =>
            glVDPAURegisterVideoSurfaceNV.Invoke(vdpSurface, target, numTextureNames, textureNames);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLVDPAURegisterOutputSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames);
        private static GLVDPAURegisterOutputSurfaceNV glVDPAURegisterOutputSurfaceNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static nint VDPAURegisterOutputSurfaceNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames) =>
            glVDPAURegisterOutputSurfaceNV.Invoke(vdpSurface, target, numTextureNames, textureNames);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLVDPAUIsSurfaceNV(nint surface);
        private static GLVDPAUIsSurfaceNV glVDPAUIsSurfaceNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static bool VDPAUIsSurfaceNV(nint surface) =>
            glVDPAUIsSurfaceNV.Invoke(surface);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVDPAUUnregisterSurfaceNV(nint surface);
        private static GLVDPAUUnregisterSurfaceNV glVDPAUUnregisterSurfaceNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static void VDPAUUnregisterSurfaceNV(nint surface) =>
            glVDPAUUnregisterSurfaceNV.Invoke(surface);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVDPAUGetSurfaceivNV(nint surface, int pname, int count, out int length, out int values);
        private static GLVDPAUGetSurfaceivNV glVDPAUGetSurfaceivNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static void VDPAUGetSurfaceivNV(nint surface, int pname, int count, out int length, out int values) =>
            glVDPAUGetSurfaceivNV.Invoke(surface, pname, count, out length, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVDPAUSurfaceAccessNV(nint surface, int access);
        private static GLVDPAUSurfaceAccessNV glVDPAUSurfaceAccessNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static void VDPAUSurfaceAccessNV(nint surface, int access) =>
            glVDPAUSurfaceAccessNV.Invoke(surface, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVDPAUMapSurfacesNV(int numSurfaces, nint[] surfaces);
        private static GLVDPAUMapSurfacesNV glVDPAUMapSurfacesNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static void VDPAUMapSurfacesNV(int numSurfaces, nint[] surfaces) =>
            glVDPAUMapSurfacesNV.Invoke(numSurfaces, surfaces);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVDPAUUnmapSurfacesNV(int numSurface, nint[] surfaces);
        private static GLVDPAUUnmapSurfacesNV glVDPAUUnmapSurfacesNV;


        [GLExtension("GL_NV_vdpau_interop")]
        public static void VDPAUUnmapSurfacesNV(int numSurface, nint[] surfaces) =>
            glVDPAUUnmapSurfacesNV.Invoke(numSurface, surfaces);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLVDPAURegisterVideoSurfaceWithPictureStructureNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames, bool isFrameStructure);
        private static GLVDPAURegisterVideoSurfaceWithPictureStructureNV glVDPAURegisterVideoSurfaceWithPictureStructureNV;


        [GLExtension("GL_NV_vdpau_interop2")]
        public static nint VDPAURegisterVideoSurfaceWithPictureStructureNV(nint vdpSurface, int target, int numTextureNames, uint[] textureNames, bool isFrameStructure) =>
            glVDPAURegisterVideoSurfaceWithPictureStructureNV.Invoke(vdpSurface, target, numTextureNames, textureNames, isFrameStructure);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushVertexArrayRangeNV();
        private static GLFlushVertexArrayRangeNV glFlushVertexArrayRangeNV;


        [GLExtension("GL_NV_vertex_array_range")]
        public static void FlushVertexArrayRangeNV() =>
            glFlushVertexArrayRangeNV.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexArrayRangeNV(int length, nint pointer);
        private static GLVertexArrayRangeNV glVertexArrayRangeNV;


        [GLExtension("GL_NV_vertex_array_range")]
        public static void VertexArrayRangeNV(int length, nint pointer) =>
            glVertexArrayRangeNV.Invoke(length, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1i64NV(uint index, long x);
        private static GLVertexAttribL1i64NV glVertexAttribL1i64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL1i64NV(uint index, long x) =>
            glVertexAttribL1i64NV.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2i64NV(uint index, long x, long y);
        private static GLVertexAttribL2i64NV glVertexAttribL2i64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL2i64NV(uint index, long x, long y) =>
            glVertexAttribL2i64NV.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3i64NV(uint index, long x, long y, long z);
        private static GLVertexAttribL3i64NV glVertexAttribL3i64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL3i64NV(uint index, long x, long y, long z) =>
            glVertexAttribL3i64NV.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4i64NV(uint index, long x, long y, long z, long w);
        private static GLVertexAttribL4i64NV glVertexAttribL4i64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL4i64NV(uint index, long x, long y, long z, long w) =>
            glVertexAttribL4i64NV.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1i64vNV(uint index, long[] v);
        private static GLVertexAttribL1i64vNV glVertexAttribL1i64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL1i64vNV(uint index, long[] v) =>
            glVertexAttribL1i64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2i64vNV(uint index, long[] v);
        private static GLVertexAttribL2i64vNV glVertexAttribL2i64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL2i64vNV(uint index, long[] v) =>
            glVertexAttribL2i64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3i64vNV(uint index, long[] v);
        private static GLVertexAttribL3i64vNV glVertexAttribL3i64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL3i64vNV(uint index, long[] v) =>
            glVertexAttribL3i64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4i64vNV(uint index, long[] v);
        private static GLVertexAttribL4i64vNV glVertexAttribL4i64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL4i64vNV(uint index, long[] v) =>
            glVertexAttribL4i64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1ui64NV(uint index, ulong x);
        private static GLVertexAttribL1ui64NV glVertexAttribL1ui64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL1ui64NV(uint index, ulong x) =>
            glVertexAttribL1ui64NV.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2ui64NV(uint index, ulong x, ulong y);
        private static GLVertexAttribL2ui64NV glVertexAttribL2ui64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL2ui64NV(uint index, ulong x, ulong y) =>
            glVertexAttribL2ui64NV.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z);
        private static GLVertexAttribL3ui64NV glVertexAttribL3ui64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z) =>
            glVertexAttribL3ui64NV.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w);
        private static GLVertexAttribL4ui64NV glVertexAttribL4ui64NV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w) =>
            glVertexAttribL4ui64NV.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL1ui64vNV(uint index, ulong[] v);
        private static GLVertexAttribL1ui64vNV glVertexAttribL1ui64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL1ui64vNV(uint index, ulong[] v) =>
            glVertexAttribL1ui64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL2ui64vNV(uint index, ulong[] v);
        private static GLVertexAttribL2ui64vNV glVertexAttribL2ui64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL2ui64vNV(uint index, ulong[] v) =>
            glVertexAttribL2ui64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL3ui64vNV(uint index, ulong[] v);
        private static GLVertexAttribL3ui64vNV glVertexAttribL3ui64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL3ui64vNV(uint index, ulong[] v) =>
            glVertexAttribL3ui64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribL4ui64vNV(uint index, ulong[] v);
        private static GLVertexAttribL4ui64vNV glVertexAttribL4ui64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribL4ui64vNV(uint index, ulong[] v) =>
            glVertexAttribL4ui64vNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, out long parameters);
        private static GLGetVertexAttribLi64vNV glGetVertexAttribLi64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void GetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, out long parameters) =>
            glGetVertexAttribLi64vNV.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, out ulong parameters);
        private static GLGetVertexAttribLui64vNV glGetVertexAttribLui64vNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void GetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, out ulong parameters) =>
            glGetVertexAttribLui64vNV.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribLFormatNV(uint index, int size, VertexAttribLType type, int stride);
        private static GLVertexAttribLFormatNV glVertexAttribLFormatNV;


        [GLExtension("GL_NV_vertex_attrib_integer_64bit")]
        public static void VertexAttribLFormatNV(uint index, int size, VertexAttribLType type, int stride) =>
            glVertexAttribLFormatNV.Invoke(index, size, type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferAddressRangeNV(int pname, uint index, ulong address, nint length);
        private static GLBufferAddressRangeNV glBufferAddressRangeNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void BufferAddressRangeNV(int pname, uint index, ulong address, nint length) =>
            glBufferAddressRangeNV.Invoke(pname, index, address, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexFormatNV(int size, VertexPointerType type, int stride);
        private static GLVertexFormatNV glVertexFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void VertexFormatNV(int size, VertexPointerType type, int stride) =>
            glVertexFormatNV.Invoke(size, type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalFormatNV(int type, int stride);
        private static GLNormalFormatNV glNormalFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void NormalFormatNV(int type, int stride) =>
            glNormalFormatNV.Invoke(type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorFormatNV(int size, int type, int stride);
        private static GLColorFormatNV glColorFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void ColorFormatNV(int size, int type, int stride) =>
            glColorFormatNV.Invoke(size, type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexFormatNV(int type, int stride);
        private static GLIndexFormatNV glIndexFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void IndexFormatNV(int type, int stride) =>
            glIndexFormatNV.Invoke(type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordFormatNV(int size, int type, int stride);
        private static GLTexCoordFormatNV glTexCoordFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void TexCoordFormatNV(int size, int type, int stride) =>
            glTexCoordFormatNV.Invoke(size, type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEdgeFlagFormatNV(int stride);
        private static GLEdgeFlagFormatNV glEdgeFlagFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void EdgeFlagFormatNV(int stride) =>
            glEdgeFlagFormatNV.Invoke(stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColorFormatNV(int size, ColorPointerType type, int stride);
        private static GLSecondaryColorFormatNV glSecondaryColorFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void SecondaryColorFormatNV(int size, ColorPointerType type, int stride) =>
            glSecondaryColorFormatNV.Invoke(size, type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordFormatNV(int type, int stride);
        private static GLFogCoordFormatNV glFogCoordFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void FogCoordFormatNV(int type, int stride) =>
            glFogCoordFormatNV.Invoke(type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribFormatNV(uint index, int size, VertexAttribType type, bool normalized, int stride);
        private static GLVertexAttribFormatNV glVertexAttribFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void VertexAttribFormatNV(uint index, int size, VertexAttribType type, bool normalized, int stride) =>
            glVertexAttribFormatNV.Invoke(index, size, type, normalized, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribIFormatNV(uint index, int size, VertexAttribIType type, int stride);
        private static GLVertexAttribIFormatNV glVertexAttribIFormatNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void VertexAttribIFormatNV(uint index, int size, VertexAttribIType type, int stride) =>
            glVertexAttribIFormatNV.Invoke(index, size, type, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetIntegerui64i_vNV(int value, uint index, out ulong result);
        private static GLGetIntegerui64i_vNV glGetIntegerui64i_vNV;


        [GLExtension("GL_NV_vertex_buffer_unified_memory")]
        public static void GetIntegerui64i_vNV(int value, uint index, out ulong result) =>
            glGetIntegerui64i_vNV.Invoke(value, index, out result);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLAreProgramsResidentNV(int n, uint[] programs, out bool residences);
        private static GLAreProgramsResidentNV glAreProgramsResidentNV;


        [GLExtension("GL_NV_vertex_program")]
        public static bool AreProgramsResidentNV(int n, uint[] programs, out bool residences) =>
            glAreProgramsResidentNV.Invoke(n, programs, out residences);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindProgramNV(VertexAttribEnumNV target, uint id);
        private static GLBindProgramNV glBindProgramNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void BindProgramNV(VertexAttribEnumNV target, uint id) =>
            glBindProgramNV.Invoke(target, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteProgramsNV(int n, uint[] programs);
        private static GLDeleteProgramsNV glDeleteProgramsNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void DeleteProgramsNV(int n, uint[] programs) =>
            glDeleteProgramsNV.Invoke(n, programs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExecuteProgramNV(VertexAttribEnumNV target, uint id, float[] parameters);
        private static GLExecuteProgramNV glExecuteProgramNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void ExecuteProgramNV(VertexAttribEnumNV target, uint id, float[] parameters) =>
            glExecuteProgramNV.Invoke(target, id, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenProgramsNV(int n, out uint programs);
        private static GLGenProgramsNV glGenProgramsNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GenProgramsNV(int n, out uint programs) =>
            glGenProgramsNV.Invoke(n, out programs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, out double parameters);
        private static GLGetProgramParameterdvNV glGetProgramParameterdvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, out double parameters) =>
            glGetProgramParameterdvNV.Invoke(target, index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, out float parameters);
        private static GLGetProgramParameterfvNV glGetProgramParameterfvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, out float parameters) =>
            glGetProgramParameterfvNV.Invoke(target, index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramivNV(uint id, VertexAttribEnumNV pname, out int parameters);
        private static GLGetProgramivNV glGetProgramivNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetProgramivNV(uint id, VertexAttribEnumNV pname, out int parameters) =>
            glGetProgramivNV.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramStringNV(uint id, VertexAttribEnumNV pname, out byte program);
        private static GLGetProgramStringNV glGetProgramStringNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetProgramStringNV(uint id, VertexAttribEnumNV pname, out byte program) =>
            glGetProgramStringNV.Invoke(id, pname, out program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, out int parameters);
        private static GLGetTrackMatrixivNV glGetTrackMatrixivNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, out int parameters) =>
            glGetTrackMatrixivNV.Invoke(target, address, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribdvNV(uint index, VertexAttribEnumNV pname, out double parameters);
        private static GLGetVertexAttribdvNV glGetVertexAttribdvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetVertexAttribdvNV(uint index, VertexAttribEnumNV pname, out double parameters) =>
            glGetVertexAttribdvNV.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribfvNV(uint index, VertexAttribEnumNV pname, out float parameters);
        private static GLGetVertexAttribfvNV glGetVertexAttribfvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetVertexAttribfvNV(uint index, VertexAttribEnumNV pname, out float parameters) =>
            glGetVertexAttribfvNV.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribivNV(uint index, VertexAttribEnumNV pname, out int parameters);
        private static GLGetVertexAttribivNV glGetVertexAttribivNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetVertexAttribivNV(uint index, VertexAttribEnumNV pname, out int parameters) =>
            glGetVertexAttribivNV.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribPointervNV(uint index, VertexAttribEnumNV pname, out nint pointer);
        private static GLGetVertexAttribPointervNV glGetVertexAttribPointervNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void GetVertexAttribPointervNV(uint index, VertexAttribEnumNV pname, out nint pointer) =>
            glGetVertexAttribPointervNV.Invoke(index, pname, out pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsProgramNV(uint id);
        private static GLIsProgramNV glIsProgramNV;


        [GLExtension("GL_NV_vertex_program")]
        public static bool IsProgramNV(uint id) =>
            glIsProgramNV.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadProgramNV(VertexAttribEnumNV target, uint id, int len, byte[] program);
        private static GLLoadProgramNV glLoadProgramNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void LoadProgramNV(VertexAttribEnumNV target, uint id, int len, byte[] program) =>
            glLoadProgramNV.Invoke(target, id, len, program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameter4dNV(VertexAttribEnumNV target, uint index, double x, double y, double z, double w);
        private static GLProgramParameter4dNV glProgramParameter4dNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void ProgramParameter4dNV(VertexAttribEnumNV target, uint index, double x, double y, double z, double w) =>
            glProgramParameter4dNV.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameter4dvNV(VertexAttribEnumNV target, uint index, double[] v);
        private static GLProgramParameter4dvNV glProgramParameter4dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void ProgramParameter4dvNV(VertexAttribEnumNV target, uint index, double[] v) =>
            glProgramParameter4dvNV.Invoke(target, index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameter4fNV(VertexAttribEnumNV target, uint index, float x, float y, float z, float w);
        private static GLProgramParameter4fNV glProgramParameter4fNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void ProgramParameter4fNV(VertexAttribEnumNV target, uint index, float x, float y, float z, float w) =>
            glProgramParameter4fNV.Invoke(target, index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameter4fvNV(VertexAttribEnumNV target, uint index, float[] v);
        private static GLProgramParameter4fvNV glProgramParameter4fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void ProgramParameter4fvNV(VertexAttribEnumNV target, uint index, float[] v) =>
            glProgramParameter4fvNV.Invoke(target, index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameters4dvNV(VertexAttribEnumNV target, uint index, int count, double[] v);
        private static GLProgramParameters4dvNV glProgramParameters4dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void ProgramParameters4dvNV(VertexAttribEnumNV target, uint index, int count, double[] v) =>
            glProgramParameters4dvNV.Invoke(target, index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramParameters4fvNV(VertexAttribEnumNV target, uint index, int count, float[] v);
        private static GLProgramParameters4fvNV glProgramParameters4fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void ProgramParameters4fvNV(VertexAttribEnumNV target, uint index, int count, float[] v) =>
            glProgramParameters4fvNV.Invoke(target, index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRequestResidentProgramsNV(int n, uint[] programs);
        private static GLRequestResidentProgramsNV glRequestResidentProgramsNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void RequestResidentProgramsNV(int n, uint[] programs) =>
            glRequestResidentProgramsNV.Invoke(n, programs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTrackMatrixNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV matrix, VertexAttribEnumNV transform);
        private static GLTrackMatrixNV glTrackMatrixNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void TrackMatrixNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV matrix, VertexAttribEnumNV transform) =>
            glTrackMatrixNV.Invoke(target, address, matrix, transform);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribPointerNV(uint index, int fsize, VertexAttribEnumNV type, int stride, nint pointer);
        private static GLVertexAttribPointerNV glVertexAttribPointerNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribPointerNV(uint index, int fsize, VertexAttribEnumNV type, int stride, nint pointer) =>
            glVertexAttribPointerNV.Invoke(index, fsize, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1dNV(uint index, double x);
        private static GLVertexAttrib1dNV glVertexAttrib1dNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib1dNV(uint index, double x) =>
            glVertexAttrib1dNV.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1dvNV(uint index, double[] v);
        private static GLVertexAttrib1dvNV glVertexAttrib1dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib1dvNV(uint index, double[] v) =>
            glVertexAttrib1dvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1fNV(uint index, float x);
        private static GLVertexAttrib1fNV glVertexAttrib1fNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib1fNV(uint index, float x) =>
            glVertexAttrib1fNV.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1fvNV(uint index, float[] v);
        private static GLVertexAttrib1fvNV glVertexAttrib1fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib1fvNV(uint index, float[] v) =>
            glVertexAttrib1fvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1sNV(uint index, short x);
        private static GLVertexAttrib1sNV glVertexAttrib1sNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib1sNV(uint index, short x) =>
            glVertexAttrib1sNV.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1svNV(uint index, short[] v);
        private static GLVertexAttrib1svNV glVertexAttrib1svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib1svNV(uint index, short[] v) =>
            glVertexAttrib1svNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2dNV(uint index, double x, double y);
        private static GLVertexAttrib2dNV glVertexAttrib2dNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib2dNV(uint index, double x, double y) =>
            glVertexAttrib2dNV.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2dvNV(uint index, double[] v);
        private static GLVertexAttrib2dvNV glVertexAttrib2dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib2dvNV(uint index, double[] v) =>
            glVertexAttrib2dvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2fNV(uint index, float x, float y);
        private static GLVertexAttrib2fNV glVertexAttrib2fNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib2fNV(uint index, float x, float y) =>
            glVertexAttrib2fNV.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2fvNV(uint index, float[] v);
        private static GLVertexAttrib2fvNV glVertexAttrib2fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib2fvNV(uint index, float[] v) =>
            glVertexAttrib2fvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2sNV(uint index, short x, short y);
        private static GLVertexAttrib2sNV glVertexAttrib2sNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib2sNV(uint index, short x, short y) =>
            glVertexAttrib2sNV.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2svNV(uint index, short[] v);
        private static GLVertexAttrib2svNV glVertexAttrib2svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib2svNV(uint index, short[] v) =>
            glVertexAttrib2svNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3dNV(uint index, double x, double y, double z);
        private static GLVertexAttrib3dNV glVertexAttrib3dNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib3dNV(uint index, double x, double y, double z) =>
            glVertexAttrib3dNV.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3dvNV(uint index, double[] v);
        private static GLVertexAttrib3dvNV glVertexAttrib3dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib3dvNV(uint index, double[] v) =>
            glVertexAttrib3dvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3fNV(uint index, float x, float y, float z);
        private static GLVertexAttrib3fNV glVertexAttrib3fNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib3fNV(uint index, float x, float y, float z) =>
            glVertexAttrib3fNV.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3fvNV(uint index, float[] v);
        private static GLVertexAttrib3fvNV glVertexAttrib3fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib3fvNV(uint index, float[] v) =>
            glVertexAttrib3fvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3sNV(uint index, short x, short y, short z);
        private static GLVertexAttrib3sNV glVertexAttrib3sNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib3sNV(uint index, short x, short y, short z) =>
            glVertexAttrib3sNV.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3svNV(uint index, short[] v);
        private static GLVertexAttrib3svNV glVertexAttrib3svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib3svNV(uint index, short[] v) =>
            glVertexAttrib3svNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4dNV(uint index, double x, double y, double z, double w);
        private static GLVertexAttrib4dNV glVertexAttrib4dNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4dNV(uint index, double x, double y, double z, double w) =>
            glVertexAttrib4dNV.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4dvNV(uint index, double[] v);
        private static GLVertexAttrib4dvNV glVertexAttrib4dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4dvNV(uint index, double[] v) =>
            glVertexAttrib4dvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4fNV(uint index, float x, float y, float z, float w);
        private static GLVertexAttrib4fNV glVertexAttrib4fNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4fNV(uint index, float x, float y, float z, float w) =>
            glVertexAttrib4fNV.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4fvNV(uint index, float[] v);
        private static GLVertexAttrib4fvNV glVertexAttrib4fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4fvNV(uint index, float[] v) =>
            glVertexAttrib4fvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4sNV(uint index, short x, short y, short z, short w);
        private static GLVertexAttrib4sNV glVertexAttrib4sNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4sNV(uint index, short x, short y, short z, short w) =>
            glVertexAttrib4sNV.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4svNV(uint index, short[] v);
        private static GLVertexAttrib4svNV glVertexAttrib4svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4svNV(uint index, short[] v) =>
            glVertexAttrib4svNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w);
        private static GLVertexAttrib4ubNV glVertexAttrib4ubNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w) =>
            glVertexAttrib4ubNV.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4ubvNV(uint index, byte[] v);
        private static GLVertexAttrib4ubvNV glVertexAttrib4ubvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttrib4ubvNV(uint index, byte[] v) =>
            glVertexAttrib4ubvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs1dvNV(uint index, int count, double[] v);
        private static GLVertexAttribs1dvNV glVertexAttribs1dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs1dvNV(uint index, int count, double[] v) =>
            glVertexAttribs1dvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs1fvNV(uint index, int count, float[] v);
        private static GLVertexAttribs1fvNV glVertexAttribs1fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs1fvNV(uint index, int count, float[] v) =>
            glVertexAttribs1fvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs1svNV(uint index, int count, short[] v);
        private static GLVertexAttribs1svNV glVertexAttribs1svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs1svNV(uint index, int count, short[] v) =>
            glVertexAttribs1svNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs2dvNV(uint index, int count, double[] v);
        private static GLVertexAttribs2dvNV glVertexAttribs2dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs2dvNV(uint index, int count, double[] v) =>
            glVertexAttribs2dvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs2fvNV(uint index, int count, float[] v);
        private static GLVertexAttribs2fvNV glVertexAttribs2fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs2fvNV(uint index, int count, float[] v) =>
            glVertexAttribs2fvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs2svNV(uint index, int count, short[] v);
        private static GLVertexAttribs2svNV glVertexAttribs2svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs2svNV(uint index, int count, short[] v) =>
            glVertexAttribs2svNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs3dvNV(uint index, int count, double[] v);
        private static GLVertexAttribs3dvNV glVertexAttribs3dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs3dvNV(uint index, int count, double[] v) =>
            glVertexAttribs3dvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs3fvNV(uint index, int count, float[] v);
        private static GLVertexAttribs3fvNV glVertexAttribs3fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs3fvNV(uint index, int count, float[] v) =>
            glVertexAttribs3fvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs3svNV(uint index, int count, short[] v);
        private static GLVertexAttribs3svNV glVertexAttribs3svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs3svNV(uint index, int count, short[] v) =>
            glVertexAttribs3svNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs4dvNV(uint index, int count, double[] v);
        private static GLVertexAttribs4dvNV glVertexAttribs4dvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs4dvNV(uint index, int count, double[] v) =>
            glVertexAttribs4dvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs4fvNV(uint index, int count, float[] v);
        private static GLVertexAttribs4fvNV glVertexAttribs4fvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs4fvNV(uint index, int count, float[] v) =>
            glVertexAttribs4fvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs4svNV(uint index, int count, short[] v);
        private static GLVertexAttribs4svNV glVertexAttribs4svNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs4svNV(uint index, int count, short[] v) =>
            glVertexAttribs4svNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribs4ubvNV(uint index, int count, byte[] v);
        private static GLVertexAttribs4ubvNV glVertexAttribs4ubvNV;


        [GLExtension("GL_NV_vertex_program")]
        public static void VertexAttribs4ubvNV(uint index, int count, byte[] v) =>
            glVertexAttribs4ubvNV.Invoke(index, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginVideoCaptureNV(uint video_capture_slot);
        private static GLBeginVideoCaptureNV glBeginVideoCaptureNV;


        [GLExtension("GL_NV_video_capture")]
        public static void BeginVideoCaptureNV(uint video_capture_slot) =>
            glBeginVideoCaptureNV.Invoke(video_capture_slot);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, int frame_region, nint offset);
        private static GLBindVideoCaptureStreamBufferNV glBindVideoCaptureStreamBufferNV;


        [GLExtension("GL_NV_video_capture")]
        public static void BindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, int frame_region, nint offset) =>
            glBindVideoCaptureStreamBufferNV.Invoke(video_capture_slot, stream, frame_region, offset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, int frame_region, int target, uint texture);
        private static GLBindVideoCaptureStreamTextureNV glBindVideoCaptureStreamTextureNV;


        [GLExtension("GL_NV_video_capture")]
        public static void BindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, int frame_region, int target, uint texture) =>
            glBindVideoCaptureStreamTextureNV.Invoke(video_capture_slot, stream, frame_region, target, texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndVideoCaptureNV(uint video_capture_slot);
        private static GLEndVideoCaptureNV glEndVideoCaptureNV;


        [GLExtension("GL_NV_video_capture")]
        public static void EndVideoCaptureNV(uint video_capture_slot) =>
            glEndVideoCaptureNV.Invoke(video_capture_slot);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideoCaptureivNV(uint video_capture_slot, int pname, out int parameters);
        private static GLGetVideoCaptureivNV glGetVideoCaptureivNV;


        [GLExtension("GL_NV_video_capture")]
        public static void GetVideoCaptureivNV(uint video_capture_slot, int pname, out int parameters) =>
            glGetVideoCaptureivNV.Invoke(video_capture_slot, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, int pname, out int parameters);
        private static GLGetVideoCaptureStreamivNV glGetVideoCaptureStreamivNV;


        [GLExtension("GL_NV_video_capture")]
        public static void GetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, int pname, out int parameters) =>
            glGetVideoCaptureStreamivNV.Invoke(video_capture_slot, stream, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, int pname, out float parameters);
        private static GLGetVideoCaptureStreamfvNV glGetVideoCaptureStreamfvNV;


        [GLExtension("GL_NV_video_capture")]
        public static void GetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, int pname, out float parameters) =>
            glGetVideoCaptureStreamfvNV.Invoke(video_capture_slot, stream, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, int pname, out double parameters);
        private static GLGetVideoCaptureStreamdvNV glGetVideoCaptureStreamdvNV;


        [GLExtension("GL_NV_video_capture")]
        public static void GetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, int pname, out double parameters) =>
            glGetVideoCaptureStreamdvNV.Invoke(video_capture_slot, stream, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLVideoCaptureNV(uint video_capture_slot, out uint sequence_num, out ulong capture_time);
        private static GLVideoCaptureNV glVideoCaptureNV;


        [GLExtension("GL_NV_video_capture")]
        public static int VideoCaptureNV(uint video_capture_slot, out uint sequence_num, out ulong capture_time) =>
            glVideoCaptureNV.Invoke(video_capture_slot, out sequence_num, out capture_time);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, int pname, int[] parameters);
        private static GLVideoCaptureStreamParameterivNV glVideoCaptureStreamParameterivNV;


        [GLExtension("GL_NV_video_capture")]
        public static void VideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, int pname, int[] parameters) =>
            glVideoCaptureStreamParameterivNV.Invoke(video_capture_slot, stream, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, int pname, float[] parameters);
        private static GLVideoCaptureStreamParameterfvNV glVideoCaptureStreamParameterfvNV;


        [GLExtension("GL_NV_video_capture")]
        public static void VideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, int pname, float[] parameters) =>
            glVideoCaptureStreamParameterfvNV.Invoke(video_capture_slot, stream, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, int pname, double[] parameters);
        private static GLVideoCaptureStreamParameterdvNV glVideoCaptureStreamParameterdvNV;


        [GLExtension("GL_NV_video_capture")]
        public static void VideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, int pname, double[] parameters) =>
            glVideoCaptureStreamParameterdvNV.Invoke(video_capture_slot, stream, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportArrayvNV(uint first, int count, float[] v);
        private static GLViewportArrayvNV glViewportArrayvNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void ViewportArrayvNV(uint first, int count, float[] v) =>
            glViewportArrayvNV.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportIndexedfNV(uint index, float x, float y, float w, float h);
        private static GLViewportIndexedfNV glViewportIndexedfNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void ViewportIndexedfNV(uint index, float x, float y, float w, float h) =>
            glViewportIndexedfNV.Invoke(index, x, y, w, h);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportIndexedfvNV(uint index, float[] v);
        private static GLViewportIndexedfvNV glViewportIndexedfvNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void ViewportIndexedfvNV(uint index, float[] v) =>
            glViewportIndexedfvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorArrayvNV(uint first, int count, int[] v);
        private static GLScissorArrayvNV glScissorArrayvNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void ScissorArrayvNV(uint first, int count, int[] v) =>
            glScissorArrayvNV.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorIndexedNV(uint index, int left, int bottom, int width, int height);
        private static GLScissorIndexedNV glScissorIndexedNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void ScissorIndexedNV(uint index, int left, int bottom, int width, int height) =>
            glScissorIndexedNV.Invoke(index, left, bottom, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorIndexedvNV(uint index, int[] v);
        private static GLScissorIndexedvNV glScissorIndexedvNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void ScissorIndexedvNV(uint index, int[] v) =>
            glScissorIndexedvNV.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeArrayfvNV(uint first, int count, float[] v);
        private static GLDepthRangeArrayfvNV glDepthRangeArrayfvNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void DepthRangeArrayfvNV(uint first, int count, float[] v) =>
            glDepthRangeArrayfvNV.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeIndexedfNV(uint index, float n, float f);
        private static GLDepthRangeIndexedfNV glDepthRangeIndexedfNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void DepthRangeIndexedfNV(uint index, float n, float f) =>
            glDepthRangeIndexedfNV.Invoke(index, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFloati_vNV(GetPName target, uint index, out float data);
        private static GLGetFloati_vNV glGetFloati_vNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void GetFloati_vNV(GetPName target, uint index, out float data) =>
            glGetFloati_vNV.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableiNV(EnableCap target, uint index);
        private static GLEnableiNV glEnableiNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void EnableiNV(EnableCap target, uint index) =>
            glEnableiNV.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableiNV(EnableCap target, uint index);
        private static GLDisableiNV glDisableiNV;


        [GLExtension("GL_NV_viewport_array")]
        public static void DisableiNV(EnableCap target, uint index) =>
            glDisableiNV.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsEnablediNV(EnableCap target, uint index);
        private static GLIsEnablediNV glIsEnablediNV;


        [GLExtension("GL_NV_viewport_array")]
        public static bool IsEnablediNV(EnableCap target, uint index) =>
            glIsEnablediNV.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportSwizzleNV(uint index, int swizzlex, int swizzley, int swizzlez, int swizzlew);
        private static GLViewportSwizzleNV glViewportSwizzleNV;


        [GLExtension("GL_NV_viewport_swizzle")]
        public static void ViewportSwizzleNV(uint index, int swizzlex, int swizzley, int swizzlez, int swizzlew) =>
            glViewportSwizzleNV.Invoke(index, swizzlex, swizzley, swizzlez, swizzlew);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEGLImageTargetTexture2DOES(int target, nint image);
        private static GLEGLImageTargetTexture2DOES glEGLImageTargetTexture2DOES;


        [GLExtension("GL_OES_EGL_image")]
        public static void EGLImageTargetTexture2DOES(int target, nint image) =>
            glEGLImageTargetTexture2DOES.Invoke(target, image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEGLImageTargetRenderbufferStorageOES(int target, nint image);
        private static GLEGLImageTargetRenderbufferStorageOES glEGLImageTargetRenderbufferStorageOES;


        [GLExtension("GL_OES_EGL_image")]
        public static void EGLImageTargetRenderbufferStorageOES(int target, nint image) =>
            glEGLImageTargetRenderbufferStorageOES.Invoke(target, image);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparateOES(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparateOES glBlendEquationSeparateOES;


        [GLExtension("GL_OES_blend_equation_separate")]
        public static void BlendEquationSeparateOES(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparateOES.Invoke(modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparateOES(BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
        private static GLBlendFuncSeparateOES glBlendFuncSeparateOES;


        [GLExtension("GL_OES_blend_func_separate")]
        public static void BlendFuncSeparateOES(BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) =>
            glBlendFuncSeparateOES.Invoke(srcRGB, dstRGB, srcAlpha, dstAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationOES(BlendEquationModeEXT mode);
        private static GLBlendEquationOES glBlendEquationOES;


        [GLExtension("GL_OES_blend_subtract")]
        public static void BlendEquationOES(BlendEquationModeEXT mode) =>
            glBlendEquationOES.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1bOES(TextureUnit texture, sbyte s);
        private static GLMultiTexCoord1bOES glMultiTexCoord1bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord1bOES(TextureUnit texture, sbyte s) =>
            glMultiTexCoord1bOES.Invoke(texture, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1bvOES(TextureUnit texture, sbyte[] coords);
        private static GLMultiTexCoord1bvOES glMultiTexCoord1bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord1bvOES(TextureUnit texture, sbyte[] coords) =>
            glMultiTexCoord1bvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2bOES(TextureUnit texture, sbyte s, sbyte t);
        private static GLMultiTexCoord2bOES glMultiTexCoord2bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord2bOES(TextureUnit texture, sbyte s, sbyte t) =>
            glMultiTexCoord2bOES.Invoke(texture, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2bvOES(TextureUnit texture, sbyte[] coords);
        private static GLMultiTexCoord2bvOES glMultiTexCoord2bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord2bvOES(TextureUnit texture, sbyte[] coords) =>
            glMultiTexCoord2bvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3bOES(TextureUnit texture, sbyte s, sbyte t, sbyte r);
        private static GLMultiTexCoord3bOES glMultiTexCoord3bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord3bOES(TextureUnit texture, sbyte s, sbyte t, sbyte r) =>
            glMultiTexCoord3bOES.Invoke(texture, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3bvOES(TextureUnit texture, sbyte[] coords);
        private static GLMultiTexCoord3bvOES glMultiTexCoord3bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord3bvOES(TextureUnit texture, sbyte[] coords) =>
            glMultiTexCoord3bvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4bOES(TextureUnit texture, sbyte s, sbyte t, sbyte r, sbyte q);
        private static GLMultiTexCoord4bOES glMultiTexCoord4bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord4bOES(TextureUnit texture, sbyte s, sbyte t, sbyte r, sbyte q) =>
            glMultiTexCoord4bOES.Invoke(texture, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4bvOES(TextureUnit texture, sbyte[] coords);
        private static GLMultiTexCoord4bvOES glMultiTexCoord4bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void MultiTexCoord4bvOES(TextureUnit texture, sbyte[] coords) =>
            glMultiTexCoord4bvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1bOES(sbyte s);
        private static GLTexCoord1bOES glTexCoord1bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord1bOES(sbyte s) =>
            glTexCoord1bOES.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1bvOES(sbyte[] coords);
        private static GLTexCoord1bvOES glTexCoord1bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord1bvOES(sbyte[] coords) =>
            glTexCoord1bvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2bOES(sbyte s, sbyte t);
        private static GLTexCoord2bOES glTexCoord2bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord2bOES(sbyte s, sbyte t) =>
            glTexCoord2bOES.Invoke(s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2bvOES(sbyte[] coords);
        private static GLTexCoord2bvOES glTexCoord2bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord2bvOES(sbyte[] coords) =>
            glTexCoord2bvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3bOES(sbyte s, sbyte t, sbyte r);
        private static GLTexCoord3bOES glTexCoord3bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord3bOES(sbyte s, sbyte t, sbyte r) =>
            glTexCoord3bOES.Invoke(s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3bvOES(sbyte[] coords);
        private static GLTexCoord3bvOES glTexCoord3bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord3bvOES(sbyte[] coords) =>
            glTexCoord3bvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q);
        private static GLTexCoord4bOES glTexCoord4bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q) =>
            glTexCoord4bOES.Invoke(s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4bvOES(sbyte[] coords);
        private static GLTexCoord4bvOES glTexCoord4bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void TexCoord4bvOES(sbyte[] coords) =>
            glTexCoord4bvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2bOES(sbyte x, sbyte y);
        private static GLVertex2bOES glVertex2bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void Vertex2bOES(sbyte x, sbyte y) =>
            glVertex2bOES.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2bvOES(sbyte[] coords);
        private static GLVertex2bvOES glVertex2bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void Vertex2bvOES(sbyte[] coords) =>
            glVertex2bvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3bOES(sbyte x, sbyte y, sbyte z);
        private static GLVertex3bOES glVertex3bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void Vertex3bOES(sbyte x, sbyte y, sbyte z) =>
            glVertex3bOES.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3bvOES(sbyte[] coords);
        private static GLVertex3bvOES glVertex3bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void Vertex3bvOES(sbyte[] coords) =>
            glVertex3bvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w);
        private static GLVertex4bOES glVertex4bOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void Vertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w) =>
            glVertex4bOES.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4bvOES(sbyte[] coords);
        private static GLVertex4bvOES glVertex4bvOES;


        [GLExtension("GL_OES_byte_coordinates")]
        public static void Vertex4bvOES(sbyte[] coords) =>
            glVertex4bvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyImageSubDataOES(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth);
        private static GLCopyImageSubDataOES glCopyImageSubDataOES;


        [GLExtension("GL_OES_copy_image")]
        public static void CopyImageSubDataOES(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) =>
            glCopyImageSubDataOES.Invoke(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableiOES(EnableCap target, uint index);
        private static GLEnableiOES glEnableiOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static void EnableiOES(EnableCap target, uint index) =>
            glEnableiOES.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableiOES(EnableCap target, uint index);
        private static GLDisableiOES glDisableiOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static void DisableiOES(EnableCap target, uint index) =>
            glDisableiOES.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationiOES(uint buf, BlendEquationModeEXT mode);
        private static GLBlendEquationiOES glBlendEquationiOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static void BlendEquationiOES(uint buf, BlendEquationModeEXT mode) =>
            glBlendEquationiOES.Invoke(buf, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparateiOES(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparateiOES glBlendEquationSeparateiOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static void BlendEquationSeparateiOES(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparateiOES.Invoke(buf, modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFunciOES(uint buf, BlendingFactor src, BlendingFactor dst);
        private static GLBlendFunciOES glBlendFunciOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static void BlendFunciOES(uint buf, BlendingFactor src, BlendingFactor dst) =>
            glBlendFunciOES.Invoke(buf, src, dst);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparateiOES(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
        private static GLBlendFuncSeparateiOES glBlendFuncSeparateiOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static void BlendFuncSeparateiOES(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) =>
            glBlendFuncSeparateiOES.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorMaskiOES(uint index, bool r, bool g, bool b, bool a);
        private static GLColorMaskiOES glColorMaskiOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static void ColorMaskiOES(uint index, bool r, bool g, bool b, bool a) =>
            glColorMaskiOES.Invoke(index, r, g, b, a);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsEnablediOES(EnableCap target, uint index);
        private static GLIsEnablediOES glIsEnablediOES;


        [GLExtension("GL_OES_draw_buffers_indexed")]
        public static bool IsEnablediOES(EnableCap target, uint index) =>
            glIsEnablediOES.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsBaseVertexOES(PrimitiveType mode, int count, DrawElementsType type, nint indices, int basevertex);
        private static GLDrawElementsBaseVertexOES glDrawElementsBaseVertexOES;


        [GLExtension("GL_OES_draw_elements_base_vertex")]
        public static void DrawElementsBaseVertexOES(PrimitiveType mode, int count, DrawElementsType type, nint indices, int basevertex) =>
            glDrawElementsBaseVertexOES.Invoke(mode, count, type, indices, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawRangeElementsBaseVertexOES(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices, int basevertex);
        private static GLDrawRangeElementsBaseVertexOES glDrawRangeElementsBaseVertexOES;


        [GLExtension("GL_OES_draw_elements_base_vertex")]
        public static void DrawRangeElementsBaseVertexOES(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices, int basevertex) =>
            glDrawRangeElementsBaseVertexOES.Invoke(mode, start, end, count, type, indices, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstancedBaseVertexOES(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex);
        private static GLDrawElementsInstancedBaseVertexOES glDrawElementsInstancedBaseVertexOES;


        [GLExtension("GL_OES_draw_elements_base_vertex")]
        public static void DrawElementsInstancedBaseVertexOES(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount, int basevertex) =>
            glDrawElementsInstancedBaseVertexOES.Invoke(mode, count, type, indices, instancecount, basevertex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexsOES(short x, short y, short z, short width, short height);
        private static GLDrawTexsOES glDrawTexsOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexsOES(short x, short y, short z, short width, short height) =>
            glDrawTexsOES.Invoke(x, y, z, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexiOES(int x, int y, int z, int width, int height);
        private static GLDrawTexiOES glDrawTexiOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexiOES(int x, int y, int z, int width, int height) =>
            glDrawTexiOES.Invoke(x, y, z, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexxOES(int x, int y, int z, int width, int height);
        private static GLDrawTexxOES glDrawTexxOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexxOES(int x, int y, int z, int width, int height) =>
            glDrawTexxOES.Invoke(x, y, z, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexsvOES(short[] coords);
        private static GLDrawTexsvOES glDrawTexsvOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexsvOES(short[] coords) =>
            glDrawTexsvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexivOES(int[] coords);
        private static GLDrawTexivOES glDrawTexivOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexivOES(int[] coords) =>
            glDrawTexivOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexxvOES(int[] coords);
        private static GLDrawTexxvOES glDrawTexxvOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexxvOES(int[] coords) =>
            glDrawTexxvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexfOES(float x, float y, float z, float width, float height);
        private static GLDrawTexfOES glDrawTexfOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexfOES(float x, float y, float z, float width, float height) =>
            glDrawTexfOES.Invoke(x, y, z, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawTexfvOES(float[] coords);
        private static GLDrawTexfvOES glDrawTexfvOES;


        [GLExtension("GL_OES_draw_texture")]
        public static void DrawTexfvOES(float[] coords) =>
            glDrawTexfvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaFuncxOES(AlphaFunction func, int reference);
        private static GLAlphaFuncxOES glAlphaFuncxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void AlphaFuncxOES(AlphaFunction func, int reference) =>
            glAlphaFuncxOES.Invoke(func, reference);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearColorxOES(int red, int green, int blue, int alpha);
        private static GLClearColorxOES glClearColorxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void ClearColorxOES(int red, int green, int blue, int alpha) =>
            glClearColorxOES.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearDepthxOES(int depth);
        private static GLClearDepthxOES glClearDepthxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void ClearDepthxOES(int depth) =>
            glClearDepthxOES.Invoke(depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipPlanexOES(ClipPlaneName plane, int[] equation);
        private static GLClipPlanexOES glClipPlanexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void ClipPlanexOES(ClipPlaneName plane, int[] equation) =>
            glClipPlanexOES.Invoke(plane, equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4xOES(int red, int green, int blue, int alpha);
        private static GLColor4xOES glColor4xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Color4xOES(int red, int green, int blue, int alpha) =>
            glColor4xOES.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangexOES(int n, int f);
        private static GLDepthRangexOES glDepthRangexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void DepthRangexOES(int n, int f) =>
            glDepthRangexOES.Invoke(n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogxOES(FogPName pname, int param);
        private static GLFogxOES glFogxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void FogxOES(FogPName pname, int param) =>
            glFogxOES.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogxvOES(FogPName pname, int[] param);
        private static GLFogxvOES glFogxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void FogxvOES(FogPName pname, int[] param) =>
            glFogxvOES.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFrustumxOES(int l, int r, int b, int t, int n, int f);
        private static GLFrustumxOES glFrustumxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void FrustumxOES(int l, int r, int b, int t, int n, int f) =>
            glFrustumxOES.Invoke(l, r, b, t, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetClipPlanexOES(ClipPlaneName plane, out int equation);
        private static GLGetClipPlanexOES glGetClipPlanexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetClipPlanexOES(ClipPlaneName plane, out int equation) =>
            glGetClipPlanexOES.Invoke(plane, out equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFixedvOES(GetPName pname, out int parameters);
        private static GLGetFixedvOES glGetFixedvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetFixedvOES(GetPName pname, out int parameters) =>
            glGetFixedvOES.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, out int parameters);
        private static GLGetTexEnvxvOES glGetTexEnvxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, out int parameters) =>
            glGetTexEnvxvOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTexParameterxvOES glGetTexParameterxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTexParameterxvOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModelxOES(LightModelParameter pname, int param);
        private static GLLightModelxOES glLightModelxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void LightModelxOES(LightModelParameter pname, int param) =>
            glLightModelxOES.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModelxvOES(LightModelParameter pname, int[] param);
        private static GLLightModelxvOES glLightModelxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void LightModelxvOES(LightModelParameter pname, int[] param) =>
            glLightModelxvOES.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightxOES(LightName light, LightParameter pname, int param);
        private static GLLightxOES glLightxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void LightxOES(LightName light, LightParameter pname, int param) =>
            glLightxOES.Invoke(light, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightxvOES(LightName light, LightParameter pname, int[] parameters);
        private static GLLightxvOES glLightxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void LightxvOES(LightName light, LightParameter pname, int[] parameters) =>
            glLightxvOES.Invoke(light, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLineWidthxOES(int width);
        private static GLLineWidthxOES glLineWidthxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void LineWidthxOES(int width) =>
            glLineWidthxOES.Invoke(width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadMatrixxOES(int[] m);
        private static GLLoadMatrixxOES glLoadMatrixxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void LoadMatrixxOES(int[] m) =>
            glLoadMatrixxOES.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaterialxOES(TriangleFace face, MaterialParameter pname, int param);
        private static GLMaterialxOES glMaterialxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MaterialxOES(TriangleFace face, MaterialParameter pname, int param) =>
            glMaterialxOES.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaterialxvOES(TriangleFace face, MaterialParameter pname, int[] param);
        private static GLMaterialxvOES glMaterialxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MaterialxvOES(TriangleFace face, MaterialParameter pname, int[] param) =>
            glMaterialxvOES.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultMatrixxOES(int[] m);
        private static GLMultMatrixxOES glMultMatrixxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultMatrixxOES(int[] m) =>
            glMultMatrixxOES.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4xOES(TextureUnit texture, int s, int t, int r, int q);
        private static GLMultiTexCoord4xOES glMultiTexCoord4xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord4xOES(TextureUnit texture, int s, int t, int r, int q) =>
            glMultiTexCoord4xOES.Invoke(texture, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3xOES(int nx, int ny, int nz);
        private static GLNormal3xOES glNormal3xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Normal3xOES(int nx, int ny, int nz) =>
            glNormal3xOES.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLOrthoxOES(int l, int r, int b, int t, int n, int f);
        private static GLOrthoxOES glOrthoxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void OrthoxOES(int l, int r, int b, int t, int n, int f) =>
            glOrthoxOES.Invoke(l, r, b, t, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterxvOES(PointParameterNameARB pname, int[] parameters);
        private static GLPointParameterxvOES glPointParameterxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PointParameterxvOES(PointParameterNameARB pname, int[] parameters) =>
            glPointParameterxvOES.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointSizexOES(int size);
        private static GLPointSizexOES glPointSizexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PointSizexOES(int size) =>
            glPointSizexOES.Invoke(size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonOffsetxOES(int factor, int units);
        private static GLPolygonOffsetxOES glPolygonOffsetxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PolygonOffsetxOES(int factor, int units) =>
            glPolygonOffsetxOES.Invoke(factor, units);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRotatexOES(int angle, int x, int y, int z);
        private static GLRotatexOES glRotatexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RotatexOES(int angle, int x, int y, int z) =>
            glRotatexOES.Invoke(angle, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScalexOES(int x, int y, int z);
        private static GLScalexOES glScalexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void ScalexOES(int x, int y, int z) =>
            glScalexOES.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnvxOES(TextureEnvTarget target, TextureEnvParameter pname, int param);
        private static GLTexEnvxOES glTexEnvxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexEnvxOES(TextureEnvTarget target, TextureEnvParameter pname, int param) =>
            glTexEnvxOES.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters);
        private static GLTexEnvxvOES glTexEnvxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters) =>
            glTexEnvxvOES.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterxOES(TextureTarget target, GetTextureParameter pname, int param);
        private static GLTexParameterxOES glTexParameterxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexParameterxOES(TextureTarget target, GetTextureParameter pname, int param) =>
            glTexParameterxOES.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterxvOES(TextureTarget target, GetTextureParameter pname, int[] parameters);
        private static GLTexParameterxvOES glTexParameterxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexParameterxvOES(TextureTarget target, GetTextureParameter pname, int[] parameters) =>
            glTexParameterxvOES.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTranslatexOES(int x, int y, int z);
        private static GLTranslatexOES glTranslatexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TranslatexOES(int x, int y, int z) =>
            glTranslatexOES.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLightxvOES(LightName light, LightParameter pname, out int parameters);
        private static GLGetLightxvOES glGetLightxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetLightxvOES(LightName light, LightParameter pname, out int parameters) =>
            glGetLightxvOES.Invoke(light, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMaterialxvOES(TriangleFace face, MaterialParameter pname, out int parameters);
        private static GLGetMaterialxvOES glGetMaterialxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetMaterialxvOES(TriangleFace face, MaterialParameter pname, out int parameters) =>
            glGetMaterialxvOES.Invoke(face, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterxOES(PointParameterNameARB pname, int param);
        private static GLPointParameterxOES glPointParameterxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PointParameterxOES(PointParameterNameARB pname, int param) =>
            glPointParameterxOES.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleCoveragexOES(int value, bool invert);
        private static GLSampleCoveragexOES glSampleCoveragexOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void SampleCoveragexOES(int value, bool invert) =>
            glSampleCoveragexOES.Invoke(value, invert);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAccumxOES(int op, int value);
        private static GLAccumxOES glAccumxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void AccumxOES(int op, int value) =>
            glAccumxOES.Invoke(op, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, byte[] bitmap);
        private static GLBitmapxOES glBitmapxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, byte[] bitmap) =>
            glBitmapxOES.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendColorxOES(int red, int green, int blue, int alpha);
        private static GLBlendColorxOES glBlendColorxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void BlendColorxOES(int red, int green, int blue, int alpha) =>
            glBlendColorxOES.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearAccumxOES(int red, int green, int blue, int alpha);
        private static GLClearAccumxOES glClearAccumxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void ClearAccumxOES(int red, int green, int blue, int alpha) =>
            glClearAccumxOES.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3xOES(int red, int green, int blue);
        private static GLColor3xOES glColor3xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Color3xOES(int red, int green, int blue) =>
            glColor3xOES.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3xvOES(int[] components);
        private static GLColor3xvOES glColor3xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Color3xvOES(int[] components) =>
            glColor3xvOES.Invoke(components);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4xvOES(int[] components);
        private static GLColor4xvOES glColor4xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Color4xvOES(int[] components) =>
            glColor4xvOES.Invoke(components);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameterxOES(ConvolutionTargetEXT target, ConvolutionParameter pname, int param);
        private static GLConvolutionParameterxOES glConvolutionParameterxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void ConvolutionParameterxOES(ConvolutionTargetEXT target, ConvolutionParameter pname, int param) =>
            glConvolutionParameterxOES.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters);
        private static GLConvolutionParameterxvOES glConvolutionParameterxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void ConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameter pname, int[] parameters) =>
            glConvolutionParameterxvOES.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord1xOES(int u);
        private static GLEvalCoord1xOES glEvalCoord1xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void EvalCoord1xOES(int u) =>
            glEvalCoord1xOES.Invoke(u);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord1xvOES(int[] coords);
        private static GLEvalCoord1xvOES glEvalCoord1xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void EvalCoord1xvOES(int[] coords) =>
            glEvalCoord1xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord2xOES(int u, int v);
        private static GLEvalCoord2xOES glEvalCoord2xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void EvalCoord2xOES(int u, int v) =>
            glEvalCoord2xOES.Invoke(u, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord2xvOES(int[] coords);
        private static GLEvalCoord2xvOES glEvalCoord2xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void EvalCoord2xvOES(int[] coords) =>
            glEvalCoord2xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFeedbackBufferxOES(int n, int type, int[] buffer);
        private static GLFeedbackBufferxOES glFeedbackBufferxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void FeedbackBufferxOES(int n, int type, int[] buffer) =>
            glFeedbackBufferxOES.Invoke(n, type, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetConvolutionParameterxvOES(int target, int pname, out int parameters);
        private static GLGetConvolutionParameterxvOES glGetConvolutionParameterxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetConvolutionParameterxvOES(int target, int pname, out int parameters) =>
            glGetConvolutionParameterxvOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters);
        private static GLGetHistogramParameterxvOES glGetHistogramParameterxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, out int parameters) =>
            glGetHistogramParameterxvOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLightxOES(LightName light, LightParameter pname, out int parameters);
        private static GLGetLightxOES glGetLightxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetLightxOES(LightName light, LightParameter pname, out int parameters) =>
            glGetLightxOES.Invoke(light, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapxvOES(MapTarget target, GetMapQuery query, out int v);
        private static GLGetMapxvOES glGetMapxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetMapxvOES(MapTarget target, GetMapQuery query, out int v) =>
            glGetMapxvOES.Invoke(target, query, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMaterialxOES(TriangleFace face, MaterialParameter pname, int param);
        private static GLGetMaterialxOES glGetMaterialxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetMaterialxOES(TriangleFace face, MaterialParameter pname, int param) =>
            glGetMaterialxOES.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelMapxv(PixelMap map, int size, out int values);
        private static GLGetPixelMapxv glGetPixelMapxv;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetPixelMapxv(PixelMap map, int size, out int values) =>
            glGetPixelMapxv.Invoke(map, size, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, out int parameters);
        private static GLGetTexGenxvOES glGetTexGenxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, out int parameters) =>
            glGetTexGenxvOES.Invoke(coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, out int parameters);
        private static GLGetTexLevelParameterxvOES glGetTexLevelParameterxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void GetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, out int parameters) =>
            glGetTexLevelParameterxvOES.Invoke(target, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexxOES(int component);
        private static GLIndexxOES glIndexxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void IndexxOES(int component) =>
            glIndexxOES.Invoke(component);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexxvOES(int[] component);
        private static GLIndexxvOES glIndexxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void IndexxvOES(int[] component) =>
            glIndexxvOES.Invoke(component);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadTransposeMatrixxOES(int[] m);
        private static GLLoadTransposeMatrixxOES glLoadTransposeMatrixxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void LoadTransposeMatrixxOES(int[] m) =>
            glLoadTransposeMatrixxOES.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMap1xOES(MapTarget target, int u1, int u2, int stride, int order, int points);
        private static GLMap1xOES glMap1xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Map1xOES(MapTarget target, int u1, int u2, int stride, int order, int points) =>
            glMap1xOES.Invoke(target, u1, u2, stride, order, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMap2xOES(MapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points);
        private static GLMap2xOES glMap2xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Map2xOES(MapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points) =>
            glMap2xOES.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapGrid1xOES(int n, int u1, int u2);
        private static GLMapGrid1xOES glMapGrid1xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MapGrid1xOES(int n, int u1, int u2) =>
            glMapGrid1xOES.Invoke(n, u1, u2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapGrid2xOES(int n, int u1, int u2, int v1, int v2);
        private static GLMapGrid2xOES glMapGrid2xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MapGrid2xOES(int n, int u1, int u2, int v1, int v2) =>
            glMapGrid2xOES.Invoke(n, u1, u2, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultTransposeMatrixxOES(int[] m);
        private static GLMultTransposeMatrixxOES glMultTransposeMatrixxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultTransposeMatrixxOES(int[] m) =>
            glMultTransposeMatrixxOES.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1xOES(TextureUnit texture, int s);
        private static GLMultiTexCoord1xOES glMultiTexCoord1xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord1xOES(TextureUnit texture, int s) =>
            glMultiTexCoord1xOES.Invoke(texture, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1xvOES(TextureUnit texture, int[] coords);
        private static GLMultiTexCoord1xvOES glMultiTexCoord1xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord1xvOES(TextureUnit texture, int[] coords) =>
            glMultiTexCoord1xvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2xOES(TextureUnit texture, int s, int t);
        private static GLMultiTexCoord2xOES glMultiTexCoord2xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord2xOES(TextureUnit texture, int s, int t) =>
            glMultiTexCoord2xOES.Invoke(texture, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2xvOES(TextureUnit texture, int[] coords);
        private static GLMultiTexCoord2xvOES glMultiTexCoord2xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord2xvOES(TextureUnit texture, int[] coords) =>
            glMultiTexCoord2xvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3xOES(TextureUnit texture, int s, int t, int r);
        private static GLMultiTexCoord3xOES glMultiTexCoord3xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord3xOES(TextureUnit texture, int s, int t, int r) =>
            glMultiTexCoord3xOES.Invoke(texture, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3xvOES(TextureUnit texture, int[] coords);
        private static GLMultiTexCoord3xvOES glMultiTexCoord3xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord3xvOES(TextureUnit texture, int[] coords) =>
            glMultiTexCoord3xvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4xvOES(TextureUnit texture, int[] coords);
        private static GLMultiTexCoord4xvOES glMultiTexCoord4xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void MultiTexCoord4xvOES(TextureUnit texture, int[] coords) =>
            glMultiTexCoord4xvOES.Invoke(texture, coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3xvOES(int[] coords);
        private static GLNormal3xvOES glNormal3xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Normal3xvOES(int[] coords) =>
            glNormal3xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPassThroughxOES(int token);
        private static GLPassThroughxOES glPassThroughxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PassThroughxOES(int token) =>
            glPassThroughxOES.Invoke(token);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelMapx(PixelMap map, int size, int[] values);
        private static GLPixelMapx glPixelMapx;


        [GLExtension("GL_OES_fixed_point")]
        public static void PixelMapx(PixelMap map, int size, int[] values) =>
            glPixelMapx.Invoke(map, size, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelStorex(PixelStoreParameter pname, int param);
        private static GLPixelStorex glPixelStorex;


        [GLExtension("GL_OES_fixed_point")]
        public static void PixelStorex(PixelStoreParameter pname, int param) =>
            glPixelStorex.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTransferxOES(PixelTransferParameter pname, int param);
        private static GLPixelTransferxOES glPixelTransferxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PixelTransferxOES(PixelTransferParameter pname, int param) =>
            glPixelTransferxOES.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelZoomxOES(int xfactor, int yfactor);
        private static GLPixelZoomxOES glPixelZoomxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PixelZoomxOES(int xfactor, int yfactor) =>
            glPixelZoomxOES.Invoke(xfactor, yfactor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrioritizeTexturesxOES(int n, uint[] textures, int[] priorities);
        private static GLPrioritizeTexturesxOES glPrioritizeTexturesxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void PrioritizeTexturesxOES(int n, uint[] textures, int[] priorities) =>
            glPrioritizeTexturesxOES.Invoke(n, textures, priorities);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2xOES(int x, int y);
        private static GLRasterPos2xOES glRasterPos2xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RasterPos2xOES(int x, int y) =>
            glRasterPos2xOES.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2xvOES(int[] coords);
        private static GLRasterPos2xvOES glRasterPos2xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RasterPos2xvOES(int[] coords) =>
            glRasterPos2xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3xOES(int x, int y, int z);
        private static GLRasterPos3xOES glRasterPos3xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RasterPos3xOES(int x, int y, int z) =>
            glRasterPos3xOES.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3xvOES(int[] coords);
        private static GLRasterPos3xvOES glRasterPos3xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RasterPos3xvOES(int[] coords) =>
            glRasterPos3xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4xOES(int x, int y, int z, int w);
        private static GLRasterPos4xOES glRasterPos4xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RasterPos4xOES(int x, int y, int z, int w) =>
            glRasterPos4xOES.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4xvOES(int[] coords);
        private static GLRasterPos4xvOES glRasterPos4xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RasterPos4xvOES(int[] coords) =>
            glRasterPos4xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectxOES(int x1, int y1, int x2, int y2);
        private static GLRectxOES glRectxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RectxOES(int x1, int y1, int x2, int y2) =>
            glRectxOES.Invoke(x1, y1, x2, y2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectxvOES(int[] v1, int[] v2);
        private static GLRectxvOES glRectxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void RectxvOES(int[] v1, int[] v2) =>
            glRectxvOES.Invoke(v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1xOES(int s);
        private static GLTexCoord1xOES glTexCoord1xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord1xOES(int s) =>
            glTexCoord1xOES.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1xvOES(int[] coords);
        private static GLTexCoord1xvOES glTexCoord1xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord1xvOES(int[] coords) =>
            glTexCoord1xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2xOES(int s, int t);
        private static GLTexCoord2xOES glTexCoord2xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord2xOES(int s, int t) =>
            glTexCoord2xOES.Invoke(s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2xvOES(int[] coords);
        private static GLTexCoord2xvOES glTexCoord2xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord2xvOES(int[] coords) =>
            glTexCoord2xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3xOES(int s, int t, int r);
        private static GLTexCoord3xOES glTexCoord3xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord3xOES(int s, int t, int r) =>
            glTexCoord3xOES.Invoke(s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3xvOES(int[] coords);
        private static GLTexCoord3xvOES glTexCoord3xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord3xvOES(int[] coords) =>
            glTexCoord3xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4xOES(int s, int t, int r, int q);
        private static GLTexCoord4xOES glTexCoord4xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord4xOES(int s, int t, int r, int q) =>
            glTexCoord4xOES.Invoke(s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4xvOES(int[] coords);
        private static GLTexCoord4xvOES glTexCoord4xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexCoord4xvOES(int[] coords) =>
            glTexCoord4xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGenxOES(TextureCoordName coord, TextureGenParameter pname, int param);
        private static GLTexGenxOES glTexGenxOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexGenxOES(TextureCoordName coord, TextureGenParameter pname, int param) =>
            glTexGenxOES.Invoke(coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters);
        private static GLTexGenxvOES glTexGenxvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void TexGenxvOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters) =>
            glTexGenxvOES.Invoke(coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2xOES(int x);
        private static GLVertex2xOES glVertex2xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Vertex2xOES(int x) =>
            glVertex2xOES.Invoke(x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2xvOES(int[] coords);
        private static GLVertex2xvOES glVertex2xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Vertex2xvOES(int[] coords) =>
            glVertex2xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3xOES(int x, int y);
        private static GLVertex3xOES glVertex3xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Vertex3xOES(int x, int y) =>
            glVertex3xOES.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3xvOES(int[] coords);
        private static GLVertex3xvOES glVertex3xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Vertex3xvOES(int[] coords) =>
            glVertex3xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4xOES(int x, int y, int z);
        private static GLVertex4xOES glVertex4xOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Vertex4xOES(int x, int y, int z) =>
            glVertex4xOES.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4xvOES(int[] coords);
        private static GLVertex4xvOES glVertex4xvOES;


        [GLExtension("GL_OES_fixed_point")]
        public static void Vertex4xvOES(int[] coords) =>
            glVertex4xvOES.Invoke(coords);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsRenderbufferOES(uint renderbuffer);
        private static GLIsRenderbufferOES glIsRenderbufferOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static bool IsRenderbufferOES(uint renderbuffer) =>
            glIsRenderbufferOES.Invoke(renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindRenderbufferOES(RenderbufferTarget target, uint renderbuffer);
        private static GLBindRenderbufferOES glBindRenderbufferOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void BindRenderbufferOES(RenderbufferTarget target, uint renderbuffer) =>
            glBindRenderbufferOES.Invoke(target, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteRenderbuffersOES(int n, uint[] renderbuffers);
        private static GLDeleteRenderbuffersOES glDeleteRenderbuffersOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void DeleteRenderbuffersOES(int n, uint[] renderbuffers) =>
            glDeleteRenderbuffersOES.Invoke(n, renderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenRenderbuffersOES(int n, out uint renderbuffers);
        private static GLGenRenderbuffersOES glGenRenderbuffersOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void GenRenderbuffersOES(int n, out uint renderbuffers) =>
            glGenRenderbuffersOES.Invoke(n, out renderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRenderbufferStorageOES(RenderbufferTarget target, InternalFormat internalformat, int width, int height);
        private static GLRenderbufferStorageOES glRenderbufferStorageOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void RenderbufferStorageOES(RenderbufferTarget target, InternalFormat internalformat, int width, int height) =>
            glRenderbufferStorageOES.Invoke(target, internalformat, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetRenderbufferParameterivOES(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters);
        private static GLGetRenderbufferParameterivOES glGetRenderbufferParameterivOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void GetRenderbufferParameterivOES(RenderbufferTarget target, RenderbufferParameterName pname, out int parameters) =>
            glGetRenderbufferParameterivOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsFramebufferOES(uint framebuffer);
        private static GLIsFramebufferOES glIsFramebufferOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static bool IsFramebufferOES(uint framebuffer) =>
            glIsFramebufferOES.Invoke(framebuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFramebufferOES(FramebufferTarget target, uint framebuffer);
        private static GLBindFramebufferOES glBindFramebufferOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void BindFramebufferOES(FramebufferTarget target, uint framebuffer) =>
            glBindFramebufferOES.Invoke(target, framebuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteFramebuffersOES(int n, uint[] framebuffers);
        private static GLDeleteFramebuffersOES glDeleteFramebuffersOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void DeleteFramebuffersOES(int n, uint[] framebuffers) =>
            glDeleteFramebuffersOES.Invoke(n, framebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenFramebuffersOES(int n, out uint framebuffers);
        private static GLGenFramebuffersOES glGenFramebuffersOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void GenFramebuffersOES(int n, out uint framebuffers) =>
            glGenFramebuffersOES.Invoke(n, out framebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate FramebufferStatus GLCheckFramebufferStatusOES(FramebufferTarget target);
        private static GLCheckFramebufferStatusOES glCheckFramebufferStatusOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static FramebufferStatus CheckFramebufferStatusOES(FramebufferTarget target) =>
            glCheckFramebufferStatusOES.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferRenderbufferOES(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer);
        private static GLFramebufferRenderbufferOES glFramebufferRenderbufferOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void FramebufferRenderbufferOES(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer) =>
            glFramebufferRenderbufferOES.Invoke(target, attachment, renderbuffertarget, renderbuffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture2DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level);
        private static GLFramebufferTexture2DOES glFramebufferTexture2DOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void FramebufferTexture2DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level) =>
            glFramebufferTexture2DOES.Invoke(target, attachment, textarget, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFramebufferAttachmentParameterivOES(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters);
        private static GLGetFramebufferAttachmentParameterivOES glGetFramebufferAttachmentParameterivOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void GetFramebufferAttachmentParameterivOES(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, out int parameters) =>
            glGetFramebufferAttachmentParameterivOES.Invoke(target, attachment, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenerateMipmapOES(TextureTarget target);
        private static GLGenerateMipmapOES glGenerateMipmapOES;


        [GLExtension("GL_OES_framebuffer_object")]
        public static void GenerateMipmapOES(TextureTarget target) =>
            glGenerateMipmapOES.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureOES(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);
        private static GLFramebufferTextureOES glFramebufferTextureOES;


        [GLExtension("GL_OES_geometry_shader")]
        public static void FramebufferTextureOES(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level) =>
            glFramebufferTextureOES.Invoke(target, attachment, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramBinaryOES(uint program, int bufSize, out int length, out int binaryFormat, out nint binary);
        private static GLGetProgramBinaryOES glGetProgramBinaryOES;


        [GLExtension("GL_OES_get_program_binary")]
        public static void GetProgramBinaryOES(uint program, int bufSize, out int length, out int binaryFormat, out nint binary) =>
            glGetProgramBinaryOES.Invoke(program, bufSize, out length, out binaryFormat, out binary);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLProgramBinaryOES(uint program, int binaryFormat, nint binary, int length);
        private static GLProgramBinaryOES glProgramBinaryOES;


        [GLExtension("GL_OES_get_program_binary")]
        public static void ProgramBinaryOES(uint program, int binaryFormat, nint binary, int length) =>
            glProgramBinaryOES.Invoke(program, binaryFormat, binary, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapBufferOES(BufferTargetARB target, BufferAccessARB access);
        private static GLMapBufferOES glMapBufferOES;


        [GLExtension("GL_OES_mapbuffer")]
        public static nint MapBufferOES(BufferTargetARB target, BufferAccessARB access) =>
            glMapBufferOES.Invoke(target, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLUnmapBufferOES(int target);
        private static GLUnmapBufferOES glUnmapBufferOES;


        [GLExtension("GL_OES_mapbuffer")]
        public static bool UnmapBufferOES(int target) =>
            glUnmapBufferOES.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferPointervOES(BufferTargetARB target, BufferPointerNameARB pname, out nint parameters);
        private static GLGetBufferPointervOES glGetBufferPointervOES;


        [GLExtension("GL_OES_mapbuffer")]
        public static void GetBufferPointervOES(BufferTargetARB target, BufferPointerNameARB pname, out nint parameters) =>
            glGetBufferPointervOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCurrentPaletteMatrixOES(uint matrixpaletteindex);
        private static GLCurrentPaletteMatrixOES glCurrentPaletteMatrixOES;


        [GLExtension("GL_OES_matrix_palette")]
        public static void CurrentPaletteMatrixOES(uint matrixpaletteindex) =>
            glCurrentPaletteMatrixOES.Invoke(matrixpaletteindex);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadPaletteFromModelViewMatrixOES();
        private static GLLoadPaletteFromModelViewMatrixOES glLoadPaletteFromModelViewMatrixOES;


        [GLExtension("GL_OES_matrix_palette")]
        public static void LoadPaletteFromModelViewMatrixOES() =>
            glLoadPaletteFromModelViewMatrixOES.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixIndexPointerOES(int size, MatrixIndexPointerTypeARB type, int stride, nint pointer);
        private static GLMatrixIndexPointerOES glMatrixIndexPointerOES;


        [GLExtension("GL_OES_matrix_palette")]
        public static void MatrixIndexPointerOES(int size, MatrixIndexPointerTypeARB type, int stride, nint pointer) =>
            glMatrixIndexPointerOES.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWeightPointerOES(int size, int type, int stride, nint pointer);
        private static GLWeightPointerOES glWeightPointerOES;


        [GLExtension("GL_OES_matrix_palette")]
        public static void WeightPointerOES(int size, int type, int stride, nint pointer) =>
            glWeightPointerOES.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointSizePointerOES(int type, int stride, nint pointer);
        private static GLPointSizePointerOES glPointSizePointerOES;


        [GLExtension("GL_OES_point_size_array")]
        public static void PointSizePointerOES(int type, int stride, nint pointer) =>
            glPointSizePointerOES.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        private static GLPrimitiveBoundingBoxOES glPrimitiveBoundingBoxOES;


        [GLExtension("GL_OES_primitive_bounding_box")]
        public static void PrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) =>
            glPrimitiveBoundingBoxOES.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLQueryMatrixxOES(out int mantissa, out int exponent);
        private static GLQueryMatrixxOES glQueryMatrixxOES;


        [GLExtension("GL_OES_query_matrix")]
        public static int QueryMatrixxOES(out int mantissa, out int exponent) =>
            glQueryMatrixxOES.Invoke(out mantissa, out exponent);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMinSampleShadingOES(float value);
        private static GLMinSampleShadingOES glMinSampleShadingOES;


        [GLExtension("GL_OES_sample_shading")]
        public static void MinSampleShadingOES(float value) =>
            glMinSampleShadingOES.Invoke(value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearDepthfOES(float depth);
        private static GLClearDepthfOES glClearDepthfOES;


        [GLExtension("GL_OES_single_precision")]
        public static void ClearDepthfOES(float depth) =>
            glClearDepthfOES.Invoke(depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipPlanefOES(ClipPlaneName plane, float[] equation);
        private static GLClipPlanefOES glClipPlanefOES;


        [GLExtension("GL_OES_single_precision")]
        public static void ClipPlanefOES(ClipPlaneName plane, float[] equation) =>
            glClipPlanefOES.Invoke(plane, equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangefOES(float n, float f);
        private static GLDepthRangefOES glDepthRangefOES;


        [GLExtension("GL_OES_single_precision")]
        public static void DepthRangefOES(float n, float f) =>
            glDepthRangefOES.Invoke(n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFrustumfOES(float l, float r, float b, float t, float n, float f);
        private static GLFrustumfOES glFrustumfOES;


        [GLExtension("GL_OES_single_precision")]
        public static void FrustumfOES(float l, float r, float b, float t, float n, float f) =>
            glFrustumfOES.Invoke(l, r, b, t, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetClipPlanefOES(ClipPlaneName plane, out float equation);
        private static GLGetClipPlanefOES glGetClipPlanefOES;


        [GLExtension("GL_OES_single_precision")]
        public static void GetClipPlanefOES(ClipPlaneName plane, out float equation) =>
            glGetClipPlanefOES.Invoke(plane, out equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLOrthofOES(float l, float r, float b, float t, float n, float f);
        private static GLOrthofOES glOrthofOES;


        [GLExtension("GL_OES_single_precision")]
        public static void OrthofOES(float l, float r, float b, float t, float n, float f) =>
            glOrthofOES.Invoke(l, r, b, t, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPatchParameteriOES(PatchParameterName pname, int value);
        private static GLPatchParameteriOES glPatchParameteriOES;


        [GLExtension("GL_OES_tessellation_shader")]
        public static void PatchParameteriOES(PatchParameterName pname, int value) =>
            glPatchParameteriOES.Invoke(pname, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTexImage3DOES glTexImage3DOES;


        [GLExtension("GL_OES_texture_3D")]
        public static void TexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTexImage3DOES.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage3DOES glTexSubImage3DOES;


        [GLExtension("GL_OES_texture_3D")]
        public static void TexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage3DOES.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static GLCopyTexSubImage3DOES glCopyTexSubImage3DOES;


        [GLExtension("GL_OES_texture_3D")]
        public static void CopyTexSubImage3DOES(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
            glCopyTexSubImage3DOES.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data);
        private static GLCompressedTexImage3DOES glCompressedTexImage3DOES;


        [GLExtension("GL_OES_texture_3D")]
        public static void CompressedTexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data) =>
            glCompressedTexImage3DOES.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTexSubImage3DOES glCompressedTexSubImage3DOES;


        [GLExtension("GL_OES_texture_3D")]
        public static void CompressedTexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data) =>
            glCompressedTexSubImage3DOES.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture3DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset);
        private static GLFramebufferTexture3DOES glFramebufferTexture3DOES;


        [GLExtension("GL_OES_texture_3D")]
        public static void FramebufferTexture3DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset) =>
            glFramebufferTexture3DOES.Invoke(target, attachment, textarget, texture, level, zoffset);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterIivOES(TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLTexParameterIivOES glTexParameterIivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void TexParameterIivOES(TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glTexParameterIivOES.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterIuivOES(TextureTarget target, TextureParameterName pname, uint[] parameters);
        private static GLTexParameterIuivOES glTexParameterIuivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void TexParameterIuivOES(TextureTarget target, TextureParameterName pname, uint[] parameters) =>
            glTexParameterIuivOES.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterIivOES(TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTexParameterIivOES glGetTexParameterIivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void GetTexParameterIivOES(TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTexParameterIivOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterIuivOES(TextureTarget target, GetTextureParameter pname, out uint parameters);
        private static GLGetTexParameterIuivOES glGetTexParameterIuivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void GetTexParameterIuivOES(TextureTarget target, GetTextureParameter pname, out uint parameters) =>
            glGetTexParameterIuivOES.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterIivOES(uint sampler, SamplerParameterI pname, int[] param);
        private static GLSamplerParameterIivOES glSamplerParameterIivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void SamplerParameterIivOES(uint sampler, SamplerParameterI pname, int[] param) =>
            glSamplerParameterIivOES.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplerParameterIuivOES(uint sampler, SamplerParameterI pname, uint[] param);
        private static GLSamplerParameterIuivOES glSamplerParameterIuivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void SamplerParameterIuivOES(uint sampler, SamplerParameterI pname, uint[] param) =>
            glSamplerParameterIuivOES.Invoke(sampler, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameterIivOES(uint sampler, SamplerParameterI pname, out int parameters);
        private static GLGetSamplerParameterIivOES glGetSamplerParameterIivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void GetSamplerParameterIivOES(uint sampler, SamplerParameterI pname, out int parameters) =>
            glGetSamplerParameterIivOES.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSamplerParameterIuivOES(uint sampler, SamplerParameterI pname, out uint parameters);
        private static GLGetSamplerParameterIuivOES glGetSamplerParameterIuivOES;


        [GLExtension("GL_OES_texture_border_clamp")]
        public static void GetSamplerParameterIuivOES(uint sampler, SamplerParameterI pname, out uint parameters) =>
            glGetSamplerParameterIuivOES.Invoke(sampler, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBufferOES(TextureTarget target, SizedInternalFormat internalformat, uint buffer);
        private static GLTexBufferOES glTexBufferOES;


        [GLExtension("GL_OES_texture_buffer")]
        public static void TexBufferOES(TextureTarget target, SizedInternalFormat internalformat, uint buffer) =>
            glTexBufferOES.Invoke(target, internalformat, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBufferRangeOES(TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size);
        private static GLTexBufferRangeOES glTexBufferRangeOES;


        [GLExtension("GL_OES_texture_buffer")]
        public static void TexBufferRangeOES(TextureTarget target, SizedInternalFormat internalformat, uint buffer, nint offset, nint size) =>
            glTexBufferRangeOES.Invoke(target, internalformat, buffer, offset, size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGenfOES(TextureCoordName coord, TextureGenParameter pname, float param);
        private static GLTexGenfOES glTexGenfOES;


        [GLExtension("GL_OES_texture_cube_map")]
        public static void TexGenfOES(TextureCoordName coord, TextureGenParameter pname, float param) =>
            glTexGenfOES.Invoke(coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGenfvOES(TextureCoordName coord, TextureGenParameter pname, float[] parameters);
        private static GLTexGenfvOES glTexGenfvOES;


        [GLExtension("GL_OES_texture_cube_map")]
        public static void TexGenfvOES(TextureCoordName coord, TextureGenParameter pname, float[] parameters) =>
            glTexGenfvOES.Invoke(coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGeniOES(TextureCoordName coord, TextureGenParameter pname, int param);
        private static GLTexGeniOES glTexGeniOES;


        [GLExtension("GL_OES_texture_cube_map")]
        public static void TexGeniOES(TextureCoordName coord, TextureGenParameter pname, int param) =>
            glTexGeniOES.Invoke(coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGenivOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters);
        private static GLTexGenivOES glTexGenivOES;


        [GLExtension("GL_OES_texture_cube_map")]
        public static void TexGenivOES(TextureCoordName coord, TextureGenParameter pname, int[] parameters) =>
            glTexGenivOES.Invoke(coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexGenfvOES(TextureCoordName coord, TextureGenParameter pname, out float parameters);
        private static GLGetTexGenfvOES glGetTexGenfvOES;


        [GLExtension("GL_OES_texture_cube_map")]
        public static void GetTexGenfvOES(TextureCoordName coord, TextureGenParameter pname, out float parameters) =>
            glGetTexGenfvOES.Invoke(coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexGenivOES(TextureCoordName coord, TextureGenParameter pname, out int parameters);
        private static GLGetTexGenivOES glGetTexGenivOES;


        [GLExtension("GL_OES_texture_cube_map")]
        public static void GetTexGenivOES(TextureCoordName coord, TextureGenParameter pname, out int parameters) =>
            glGetTexGenivOES.Invoke(coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexStorage3DMultisampleOES(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations);
        private static GLTexStorage3DMultisampleOES glTexStorage3DMultisampleOES;


        [GLExtension("GL_OES_texture_storage_multisample_2d_array")]
        public static void TexStorage3DMultisampleOES(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, bool fixedsamplelocations) =>
            glTexStorage3DMultisampleOES.Invoke(target, samples, internalformat, width, height, depth, fixedsamplelocations);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureViewOES(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers);
        private static GLTextureViewOES glTextureViewOES;


        [GLExtension("GL_OES_texture_view")]
        public static void TextureViewOES(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) =>
            glTextureViewOES.Invoke(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindVertexArrayOES(uint array);
        private static GLBindVertexArrayOES glBindVertexArrayOES;


        [GLExtension("GL_OES_vertex_array_object")]
        public static void BindVertexArrayOES(uint array) =>
            glBindVertexArrayOES.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteVertexArraysOES(int n, uint[] arrays);
        private static GLDeleteVertexArraysOES glDeleteVertexArraysOES;


        [GLExtension("GL_OES_vertex_array_object")]
        public static void DeleteVertexArraysOES(int n, uint[] arrays) =>
            glDeleteVertexArraysOES.Invoke(n, arrays);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenVertexArraysOES(int n, out uint arrays);
        private static GLGenVertexArraysOES glGenVertexArraysOES;


        [GLExtension("GL_OES_vertex_array_object")]
        public static void GenVertexArraysOES(int n, out uint arrays) =>
            glGenVertexArraysOES.Invoke(n, out arrays);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsVertexArrayOES(uint array);
        private static GLIsVertexArrayOES glIsVertexArrayOES;


        [GLExtension("GL_OES_vertex_array_object")]
        public static bool IsVertexArrayOES(uint array) =>
            glIsVertexArrayOES.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportArrayvOES(uint first, int count, float[] v);
        private static GLViewportArrayvOES glViewportArrayvOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void ViewportArrayvOES(uint first, int count, float[] v) =>
            glViewportArrayvOES.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportIndexedfOES(uint index, float x, float y, float w, float h);
        private static GLViewportIndexedfOES glViewportIndexedfOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void ViewportIndexedfOES(uint index, float x, float y, float w, float h) =>
            glViewportIndexedfOES.Invoke(index, x, y, w, h);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewportIndexedfvOES(uint index, float[] v);
        private static GLViewportIndexedfvOES glViewportIndexedfvOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void ViewportIndexedfvOES(uint index, float[] v) =>
            glViewportIndexedfvOES.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorArrayvOES(uint first, int count, int[] v);
        private static GLScissorArrayvOES glScissorArrayvOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void ScissorArrayvOES(uint first, int count, int[] v) =>
            glScissorArrayvOES.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorIndexedOES(uint index, int left, int bottom, int width, int height);
        private static GLScissorIndexedOES glScissorIndexedOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void ScissorIndexedOES(uint index, int left, int bottom, int width, int height) =>
            glScissorIndexedOES.Invoke(index, left, bottom, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissorIndexedvOES(uint index, int[] v);
        private static GLScissorIndexedvOES glScissorIndexedvOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void ScissorIndexedvOES(uint index, int[] v) =>
            glScissorIndexedvOES.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeArrayfvOES(uint first, int count, float[] v);
        private static GLDepthRangeArrayfvOES glDepthRangeArrayfvOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void DepthRangeArrayfvOES(uint first, int count, float[] v) =>
            glDepthRangeArrayfvOES.Invoke(first, count, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangeIndexedfOES(uint index, float n, float f);
        private static GLDepthRangeIndexedfOES glDepthRangeIndexedfOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void DepthRangeIndexedfOES(uint index, float n, float f) =>
            glDepthRangeIndexedfOES.Invoke(index, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFloati_vOES(GetPName target, uint index, out float data);
        private static GLGetFloati_vOES glGetFloati_vOES;


        [GLExtension("GL_OES_viewport_array")]
        public static void GetFloati_vOES(GetPName target, uint index, out float data) =>
            glGetFloati_vOES.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int baseViewIndex, int numViews);
        private static GLFramebufferTextureMultiviewOVR glFramebufferTextureMultiviewOVR;


        [GLExtension("GL_OVR_multiview")]
        public static void FramebufferTextureMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int baseViewIndex, int numViews) =>
            glFramebufferTextureMultiviewOVR.Invoke(target, attachment, texture, level, baseViewIndex, numViews);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTextureMultisampleMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int samples, int baseViewIndex, int numViews);
        private static GLFramebufferTextureMultisampleMultiviewOVR glFramebufferTextureMultisampleMultiviewOVR;


        [GLExtension("GL_OVR_multiview_multisampled_render_to_texture")]
        public static void FramebufferTextureMultisampleMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int samples, int baseViewIndex, int numViews) =>
            glFramebufferTextureMultisampleMultiviewOVR.Invoke(target, attachment, texture, level, samples, baseViewIndex, numViews);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLHintPGI(HintTargetPGI target, int mode);
        private static GLHintPGI glHintPGI;


        [GLExtension("GL_PGI_misc_hints")]
        public static void HintPGI(HintTargetPGI target, int mode) =>
            glHintPGI.Invoke(target, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaFuncQCOM(int func, float reference);
        private static GLAlphaFuncQCOM glAlphaFuncQCOM;


        [GLExtension("GL_QCOM_alpha_test")]
        public static void AlphaFuncQCOM(int func, float reference) =>
            glAlphaFuncQCOM.Invoke(func, reference);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetDriverControlsQCOM(out int num, int size, out uint driverControls);
        private static GLGetDriverControlsQCOM glGetDriverControlsQCOM;


        [GLExtension("GL_QCOM_driver_control")]
        public static void GetDriverControlsQCOM(out int num, int size, out uint driverControls) =>
            glGetDriverControlsQCOM.Invoke(out num, size, out driverControls);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetDriverControlStringQCOM(uint driverControl, int bufSize, out int length, out sbyte driverControlString);
        private static GLGetDriverControlStringQCOM glGetDriverControlStringQCOM;


        [GLExtension("GL_QCOM_driver_control")]
        public static void GetDriverControlStringQCOM(uint driverControl, int bufSize, out int length, out sbyte driverControlString) =>
            glGetDriverControlStringQCOM.Invoke(driverControl, bufSize, out length, out driverControlString);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableDriverControlQCOM(uint driverControl);
        private static GLEnableDriverControlQCOM glEnableDriverControlQCOM;


        [GLExtension("GL_QCOM_driver_control")]
        public static void EnableDriverControlQCOM(uint driverControl) =>
            glEnableDriverControlQCOM.Invoke(driverControl);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableDriverControlQCOM(uint driverControl);
        private static GLDisableDriverControlQCOM glDisableDriverControlQCOM;


        [GLExtension("GL_QCOM_driver_control")]
        public static void DisableDriverControlQCOM(uint driverControl) =>
            glDisableDriverControlQCOM.Invoke(driverControl);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetTexturesQCOM(out uint textures, int maxTextures, out int numTextures);
        private static GLExtGetTexturesQCOM glExtGetTexturesQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtGetTexturesQCOM(out uint textures, int maxTextures, out int numTextures) =>
            glExtGetTexturesQCOM.Invoke(out textures, maxTextures, out numTextures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetBuffersQCOM(out uint buffers, int maxBuffers, out int numBuffers);
        private static GLExtGetBuffersQCOM glExtGetBuffersQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtGetBuffersQCOM(out uint buffers, int maxBuffers, out int numBuffers) =>
            glExtGetBuffersQCOM.Invoke(out buffers, maxBuffers, out numBuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetRenderbuffersQCOM(out uint renderbuffers, int maxRenderbuffers, out int numRenderbuffers);
        private static GLExtGetRenderbuffersQCOM glExtGetRenderbuffersQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtGetRenderbuffersQCOM(out uint renderbuffers, int maxRenderbuffers, out int numRenderbuffers) =>
            glExtGetRenderbuffersQCOM.Invoke(out renderbuffers, maxRenderbuffers, out numRenderbuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetFramebuffersQCOM(out uint framebuffers, int maxFramebuffers, out int numFramebuffers);
        private static GLExtGetFramebuffersQCOM glExtGetFramebuffersQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtGetFramebuffersQCOM(out uint framebuffers, int maxFramebuffers, out int numFramebuffers) =>
            glExtGetFramebuffersQCOM.Invoke(out framebuffers, maxFramebuffers, out numFramebuffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, out int parameters);
        private static GLExtGetTexLevelParameterivQCOM glExtGetTexLevelParameterivQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtGetTexLevelParameterivQCOM(uint texture, int face, int level, int pname, out int parameters) =>
            glExtGetTexLevelParameterivQCOM.Invoke(texture, face, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtTexObjectStateOverrideiQCOM(int target, int pname, int param);
        private static GLExtTexObjectStateOverrideiQCOM glExtTexObjectStateOverrideiQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtTexObjectStateOverrideiQCOM(int target, int pname, int param) =>
            glExtTexObjectStateOverrideiQCOM.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, out nint texels);
        private static GLExtGetTexSubImageQCOM glExtGetTexSubImageQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtGetTexSubImageQCOM(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, out nint texels) =>
            glExtGetTexSubImageQCOM.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, out texels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetBufferPointervQCOM(int target, out nint parameters);
        private static GLExtGetBufferPointervQCOM glExtGetBufferPointervQCOM;


        [GLExtension("GL_QCOM_extended_get")]
        public static void ExtGetBufferPointervQCOM(int target, out nint parameters) =>
            glExtGetBufferPointervQCOM.Invoke(target, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetShadersQCOM(out uint shaders, int maxShaders, out int numShaders);
        private static GLExtGetShadersQCOM glExtGetShadersQCOM;


        [GLExtension("GL_QCOM_extended_get2")]
        public static void ExtGetShadersQCOM(out uint shaders, int maxShaders, out int numShaders) =>
            glExtGetShadersQCOM.Invoke(out shaders, maxShaders, out numShaders);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetProgramsQCOM(out uint programs, int maxPrograms, out int numPrograms);
        private static GLExtGetProgramsQCOM glExtGetProgramsQCOM;


        [GLExtension("GL_QCOM_extended_get2")]
        public static void ExtGetProgramsQCOM(out uint programs, int maxPrograms, out int numPrograms) =>
            glExtGetProgramsQCOM.Invoke(out programs, maxPrograms, out numPrograms);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLExtIsProgramBinaryQCOM(uint program);
        private static GLExtIsProgramBinaryQCOM glExtIsProgramBinaryQCOM;


        [GLExtension("GL_QCOM_extended_get2")]
        public static bool ExtIsProgramBinaryQCOM(uint program) =>
            glExtIsProgramBinaryQCOM.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtGetProgramBinarySourceQCOM(uint program, ShaderType shadertype, out sbyte source, out int length);
        private static GLExtGetProgramBinarySourceQCOM glExtGetProgramBinarySourceQCOM;


        [GLExtension("GL_QCOM_extended_get2")]
        public static void ExtGetProgramBinarySourceQCOM(uint program, ShaderType shadertype, out sbyte source, out int length) =>
            glExtGetProgramBinarySourceQCOM.Invoke(program, shadertype, out source, out length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, out uint providedFeatures);
        private static GLFramebufferFoveationConfigQCOM glFramebufferFoveationConfigQCOM;


        [GLExtension("GL_QCOM_framebuffer_foveated")]
        public static void FramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, out uint providedFeatures) =>
            glFramebufferFoveationConfigQCOM.Invoke(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, out providedFeatures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
        private static GLFramebufferFoveationParametersQCOM glFramebufferFoveationParametersQCOM;


        [GLExtension("GL_QCOM_framebuffer_foveated")]
        public static void FramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) =>
            glFramebufferFoveationParametersQCOM.Invoke(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEstimateMotionQCOM(uint reference, uint target, uint output);
        private static GLTexEstimateMotionQCOM glTexEstimateMotionQCOM;


        [GLExtension("GL_QCOM_motion_estimation")]
        public static void TexEstimateMotionQCOM(uint reference, uint target, uint output) =>
            glTexEstimateMotionQCOM.Invoke(reference, target, output);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEstimateMotionRegionsQCOM(uint reference, uint target, uint output, uint mask);
        private static GLTexEstimateMotionRegionsQCOM glTexEstimateMotionRegionsQCOM;


        [GLExtension("GL_QCOM_motion_estimation")]
        public static void TexEstimateMotionRegionsQCOM(uint reference, uint target, uint output, uint mask) =>
            glTexEstimateMotionRegionsQCOM.Invoke(reference, target, output, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLExtrapolateTex2DQCOM(uint src1, uint src2, uint output, float scaleFactor);
        private static GLExtrapolateTex2DQCOM glExtrapolateTex2DQCOM;


        [GLExtension("GL_QCOM_frame_extrapolation")]
        public static void ExtrapolateTex2DQCOM(uint src1, uint src2, uint output, float scaleFactor) =>
            glExtrapolateTex2DQCOM.Invoke(src1, src2, output, scaleFactor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea);
        private static GLTextureFoveationParametersQCOM glTextureFoveationParametersQCOM;


        [GLExtension("GL_QCOM_texture_foveated")]
        public static void TextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea) =>
            glTextureFoveationParametersQCOM.Invoke(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferFetchBarrierQCOM();
        private static GLFramebufferFetchBarrierQCOM glFramebufferFetchBarrierQCOM;


        [GLExtension("GL_QCOM_shader_framebuffer_fetch_noncoherent")]
        public static void FramebufferFetchBarrierQCOM() =>
            glFramebufferFetchBarrierQCOM.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadingRateQCOM(ShadingRateQCOM rate);
        private static GLShadingRateQCOM glShadingRateQCOM;


        [GLExtension("GL_QCOM_shading_rate")]
        public static void ShadingRateQCOM(ShadingRateQCOM rate) =>
            glShadingRateQCOM.Invoke(rate);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStartTilingQCOM(uint x, uint y, uint width, uint height, BufferBitQCOM preserveMask);
        private static GLStartTilingQCOM glStartTilingQCOM;


        [GLExtension("GL_QCOM_tiled_rendering")]
        public static void StartTilingQCOM(uint x, uint y, uint width, uint height, BufferBitQCOM preserveMask) =>
            glStartTilingQCOM.Invoke(x, y, width, height, preserveMask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndTilingQCOM(BufferBitQCOM preserveMask);
        private static GLEndTilingQCOM glEndTilingQCOM;


        [GLExtension("GL_QCOM_tiled_rendering")]
        public static void EndTilingQCOM(BufferBitQCOM preserveMask) =>
            glEndTilingQCOM.Invoke(preserveMask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDetailTexFuncSGIS(TextureTarget target, int n, float[] points);
        private static GLDetailTexFuncSGIS glDetailTexFuncSGIS;


        [GLExtension("GL_SGIS_detail_texture")]
        public static void DetailTexFuncSGIS(TextureTarget target, int n, float[] points) =>
            glDetailTexFuncSGIS.Invoke(target, n, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetDetailTexFuncSGIS(TextureTarget target, out float points);
        private static GLGetDetailTexFuncSGIS glGetDetailTexFuncSGIS;


        [GLExtension("GL_SGIS_detail_texture")]
        public static void GetDetailTexFuncSGIS(TextureTarget target, out float points) =>
            glGetDetailTexFuncSGIS.Invoke(target, out points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogFuncSGIS(int n, float[] points);
        private static GLFogFuncSGIS glFogFuncSGIS;


        [GLExtension("GL_SGIS_fog_function")]
        public static void FogFuncSGIS(int n, float[] points) =>
            glFogFuncSGIS.Invoke(n, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFogFuncSGIS(out float points);
        private static GLGetFogFuncSGIS glGetFogFuncSGIS;


        [GLExtension("GL_SGIS_fog_function")]
        public static void GetFogFuncSGIS(out float points) =>
            glGetFogFuncSGIS.Invoke(out points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleMaskSGIS(float value, bool invert);
        private static GLSampleMaskSGIS glSampleMaskSGIS;


        [GLExtension("GL_SGIS_multisample")]
        public static void SampleMaskSGIS(float value, bool invert) =>
            glSampleMaskSGIS.Invoke(value, invert);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSamplePatternSGIS(SamplePatternSGIS pattern);
        private static GLSamplePatternSGIS glSamplePatternSGIS;


        [GLExtension("GL_SGIS_multisample")]
        public static void SamplePatternSGIS(SamplePatternSGIS pattern) =>
            glSamplePatternSGIS.Invoke(pattern);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTexGenParameteriSGIS(PixelTexGenParameterNameSGIS pname, int param);
        private static GLPixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS;


        [GLExtension("GL_SGIS_pixel_texture")]
        public static void PixelTexGenParameteriSGIS(PixelTexGenParameterNameSGIS pname, int param) =>
            glPixelTexGenParameteriSGIS.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int[] parameters);
        private static GLPixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS;


        [GLExtension("GL_SGIS_pixel_texture")]
        public static void PixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, int[] parameters) =>
            glPixelTexGenParameterivSGIS.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTexGenParameterfSGIS(PixelTexGenParameterNameSGIS pname, float param);
        private static GLPixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS;


        [GLExtension("GL_SGIS_pixel_texture")]
        public static void PixelTexGenParameterfSGIS(PixelTexGenParameterNameSGIS pname, float param) =>
            glPixelTexGenParameterfSGIS.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float[] parameters);
        private static GLPixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS;


        [GLExtension("GL_SGIS_pixel_texture")]
        public static void PixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, float[] parameters) =>
            glPixelTexGenParameterfvSGIS.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, out int parameters);
        private static GLGetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS;


        [GLExtension("GL_SGIS_pixel_texture")]
        public static void GetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, out int parameters) =>
            glGetPixelTexGenParameterivSGIS.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, out float parameters);
        private static GLGetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS;


        [GLExtension("GL_SGIS_pixel_texture")]
        public static void GetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, out float parameters) =>
            glGetPixelTexGenParameterfvSGIS.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterfSGIS(PointParameterNameARB pname, float param);
        private static GLPointParameterfSGIS glPointParameterfSGIS;


        [GLExtension("GL_SGIS_point_parameters")]
        public static void PointParameterfSGIS(PointParameterNameARB pname, float param) =>
            glPointParameterfSGIS.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterfvSGIS(PointParameterNameARB pname, float[] parameters);
        private static GLPointParameterfvSGIS glPointParameterfvSGIS;


        [GLExtension("GL_SGIS_point_parameters")]
        public static void PointParameterfvSGIS(PointParameterNameARB pname, float[] parameters) =>
            glPointParameterfvSGIS.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSharpenTexFuncSGIS(TextureTarget target, int n, float[] points);
        private static GLSharpenTexFuncSGIS glSharpenTexFuncSGIS;


        [GLExtension("GL_SGIS_sharpen_texture")]
        public static void SharpenTexFuncSGIS(TextureTarget target, int n, float[] points) =>
            glSharpenTexFuncSGIS.Invoke(target, n, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetSharpenTexFuncSGIS(TextureTarget target, out float points);
        private static GLGetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS;


        [GLExtension("GL_SGIS_sharpen_texture")]
        public static void GetSharpenTexFuncSGIS(TextureTarget target, out float points) =>
            glGetSharpenTexFuncSGIS.Invoke(target, out points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage4DSGIS(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTexImage4DSGIS glTexImage4DSGIS;


        [GLExtension("GL_SGIS_texture4D")]
        public static void TexImage4DSGIS(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTexImage4DSGIS.Invoke(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage4DSGIS glTexSubImage4DSGIS;


        [GLExtension("GL_SGIS_texture4D")]
        public static void TexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage4DSGIS.Invoke(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha);
        private static GLTextureColorMaskSGIS glTextureColorMaskSGIS;


        [GLExtension("GL_SGIS_texture_color_mask")]
        public static void TextureColorMaskSGIS(bool red, bool green, bool blue, bool alpha) =>
            glTextureColorMaskSGIS.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, out float weights);
        private static GLGetTexFilterFuncSGIS glGetTexFilterFuncSGIS;


        [GLExtension("GL_SGIS_texture_filter4")]
        public static void GetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, out float weights) =>
            glGetTexFilterFuncSGIS.Invoke(target, filter, out weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, float[] weights);
        private static GLTexFilterFuncSGIS glTexFilterFuncSGIS;


        [GLExtension("GL_SGIS_texture_filter4")]
        public static void TexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, float[] weights) =>
            glTexFilterFuncSGIS.Invoke(target, filter, n, weights);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAsyncMarkerSGIX(uint marker);
        private static GLAsyncMarkerSGIX glAsyncMarkerSGIX;


        [GLExtension("GL_SGIX_async")]
        public static void AsyncMarkerSGIX(uint marker) =>
            glAsyncMarkerSGIX.Invoke(marker);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLFinishAsyncSGIX(out uint markerp);
        private static GLFinishAsyncSGIX glFinishAsyncSGIX;


        [GLExtension("GL_SGIX_async")]
        public static int FinishAsyncSGIX(out uint markerp) =>
            glFinishAsyncSGIX.Invoke(out markerp);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLPollAsyncSGIX(out uint markerp);
        private static GLPollAsyncSGIX glPollAsyncSGIX;


        [GLExtension("GL_SGIX_async")]
        public static int PollAsyncSGIX(out uint markerp) =>
            glPollAsyncSGIX.Invoke(out markerp);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGenAsyncMarkersSGIX(int range);
        private static GLGenAsyncMarkersSGIX glGenAsyncMarkersSGIX;


        [GLExtension("GL_SGIX_async")]
        public static uint GenAsyncMarkersSGIX(int range) =>
            glGenAsyncMarkersSGIX.Invoke(range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteAsyncMarkersSGIX(uint marker, int range);
        private static GLDeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX;


        [GLExtension("GL_SGIX_async")]
        public static void DeleteAsyncMarkersSGIX(uint marker, int range) =>
            glDeleteAsyncMarkersSGIX.Invoke(marker, range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsAsyncMarkerSGIX(uint marker);
        private static GLIsAsyncMarkerSGIX glIsAsyncMarkerSGIX;


        [GLExtension("GL_SGIX_async")]
        public static bool IsAsyncMarkerSGIX(uint marker) =>
            glIsAsyncMarkerSGIX.Invoke(marker);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlushRasterSGIX();
        private static GLFlushRasterSGIX glFlushRasterSGIX;


        [GLExtension("GL_SGIX_flush_raster")]
        public static void FlushRasterSGIX() =>
            glFlushRasterSGIX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentColorMaterialSGIX(TriangleFace face, MaterialParameter mode);
        private static GLFragmentColorMaterialSGIX glFragmentColorMaterialSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentColorMaterialSGIX(TriangleFace face, MaterialParameter mode) =>
            glFragmentColorMaterialSGIX.Invoke(face, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightfSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float param);
        private static GLFragmentLightfSGIX glFragmentLightfSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightfSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float param) =>
            glFragmentLightfSGIX.Invoke(light, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters);
        private static GLFragmentLightfvSGIX glFragmentLightfvSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float[] parameters) =>
            glFragmentLightfvSGIX.Invoke(light, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightiSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int param);
        private static GLFragmentLightiSGIX glFragmentLightiSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightiSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int param) =>
            glFragmentLightiSGIX.Invoke(light, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters);
        private static GLFragmentLightivSGIX glFragmentLightivSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int[] parameters) =>
            glFragmentLightivSGIX.Invoke(light, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightModelfSGIX(FragmentLightModelParameterSGIX pname, float param);
        private static GLFragmentLightModelfSGIX glFragmentLightModelfSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightModelfSGIX(FragmentLightModelParameterSGIX pname, float param) =>
            glFragmentLightModelfSGIX.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, float[] parameters);
        private static GLFragmentLightModelfvSGIX glFragmentLightModelfvSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, float[] parameters) =>
            glFragmentLightModelfvSGIX.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightModeliSGIX(FragmentLightModelParameterSGIX pname, int param);
        private static GLFragmentLightModeliSGIX glFragmentLightModeliSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightModeliSGIX(FragmentLightModelParameterSGIX pname, int param) =>
            glFragmentLightModeliSGIX.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, int[] parameters);
        private static GLFragmentLightModelivSGIX glFragmentLightModelivSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, int[] parameters) =>
            glFragmentLightModelivSGIX.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentMaterialfSGIX(TriangleFace face, MaterialParameter pname, float param);
        private static GLFragmentMaterialfSGIX glFragmentMaterialfSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentMaterialfSGIX(TriangleFace face, MaterialParameter pname, float param) =>
            glFragmentMaterialfSGIX.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, float[] parameters);
        private static GLFragmentMaterialfvSGIX glFragmentMaterialfvSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, float[] parameters) =>
            glFragmentMaterialfvSGIX.Invoke(face, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentMaterialiSGIX(TriangleFace face, MaterialParameter pname, int param);
        private static GLFragmentMaterialiSGIX glFragmentMaterialiSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentMaterialiSGIX(TriangleFace face, MaterialParameter pname, int param) =>
            glFragmentMaterialiSGIX.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, int[] parameters);
        private static GLFragmentMaterialivSGIX glFragmentMaterialivSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void FragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, int[] parameters) =>
            glFragmentMaterialivSGIX.Invoke(face, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, out float parameters);
        private static GLGetFragmentLightfvSGIX glGetFragmentLightfvSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void GetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, out float parameters) =>
            glGetFragmentLightfvSGIX.Invoke(light, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, out int parameters);
        private static GLGetFragmentLightivSGIX glGetFragmentLightivSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void GetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, out int parameters) =>
            glGetFragmentLightivSGIX.Invoke(light, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, out float parameters);
        private static GLGetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void GetFragmentMaterialfvSGIX(TriangleFace face, MaterialParameter pname, out float parameters) =>
            glGetFragmentMaterialfvSGIX.Invoke(face, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, out int parameters);
        private static GLGetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void GetFragmentMaterialivSGIX(TriangleFace face, MaterialParameter pname, out int parameters) =>
            glGetFragmentMaterialivSGIX.Invoke(face, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightEnviSGIX(LightEnvParameterSGIX pname, int param);
        private static GLLightEnviSGIX glLightEnviSGIX;


        [GLExtension("GL_SGIX_fragment_lighting")]
        public static void LightEnviSGIX(LightEnvParameterSGIX pname, int param) =>
            glLightEnviSGIX.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFrameZoomSGIX(int factor);
        private static GLFrameZoomSGIX glFrameZoomSGIX;


        [GLExtension("GL_SGIX_framezoom")]
        public static void FrameZoomSGIX(int factor) =>
            glFrameZoomSGIX.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIglooInterfaceSGIX(int pname, nint parameters);
        private static GLIglooInterfaceSGIX glIglooInterfaceSGIX;


        [GLExtension("GL_SGIX_igloo_interface")]
        public static void IglooInterfaceSGIX(int pname, nint parameters) =>
            glIglooInterfaceSGIX.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetInstrumentsSGIX();
        private static GLGetInstrumentsSGIX glGetInstrumentsSGIX;


        [GLExtension("GL_SGIX_instruments")]
        public static int GetInstrumentsSGIX() =>
            glGetInstrumentsSGIX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInstrumentsBufferSGIX(int size, out int buffer);
        private static GLInstrumentsBufferSGIX glInstrumentsBufferSGIX;


        [GLExtension("GL_SGIX_instruments")]
        public static void InstrumentsBufferSGIX(int size, out int buffer) =>
            glInstrumentsBufferSGIX.Invoke(size, out buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLPollInstrumentsSGIX(out int marker_p);
        private static GLPollInstrumentsSGIX glPollInstrumentsSGIX;


        [GLExtension("GL_SGIX_instruments")]
        public static int PollInstrumentsSGIX(out int marker_p) =>
            glPollInstrumentsSGIX.Invoke(out marker_p);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadInstrumentsSGIX(int marker);
        private static GLReadInstrumentsSGIX glReadInstrumentsSGIX;


        [GLExtension("GL_SGIX_instruments")]
        public static void ReadInstrumentsSGIX(int marker) =>
            glReadInstrumentsSGIX.Invoke(marker);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStartInstrumentsSGIX();
        private static GLStartInstrumentsSGIX glStartInstrumentsSGIX;


        [GLExtension("GL_SGIX_instruments")]
        public static void StartInstrumentsSGIX() =>
            glStartInstrumentsSGIX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStopInstrumentsSGIX(int marker);
        private static GLStopInstrumentsSGIX glStopInstrumentsSGIX;


        [GLExtension("GL_SGIX_instruments")]
        public static void StopInstrumentsSGIX(int marker) =>
            glStopInstrumentsSGIX.Invoke(marker);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetListParameterfvSGIX(uint list, ListParameterName pname, out float parameters);
        private static GLGetListParameterfvSGIX glGetListParameterfvSGIX;


        [GLExtension("GL_SGIX_list_priority")]
        public static void GetListParameterfvSGIX(uint list, ListParameterName pname, out float parameters) =>
            glGetListParameterfvSGIX.Invoke(list, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetListParameterivSGIX(uint list, ListParameterName pname, out int parameters);
        private static GLGetListParameterivSGIX glGetListParameterivSGIX;


        [GLExtension("GL_SGIX_list_priority")]
        public static void GetListParameterivSGIX(uint list, ListParameterName pname, out int parameters) =>
            glGetListParameterivSGIX.Invoke(list, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLListParameterfSGIX(uint list, ListParameterName pname, float param);
        private static GLListParameterfSGIX glListParameterfSGIX;


        [GLExtension("GL_SGIX_list_priority")]
        public static void ListParameterfSGIX(uint list, ListParameterName pname, float param) =>
            glListParameterfSGIX.Invoke(list, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLListParameterfvSGIX(uint list, ListParameterName pname, float[] parameters);
        private static GLListParameterfvSGIX glListParameterfvSGIX;


        [GLExtension("GL_SGIX_list_priority")]
        public static void ListParameterfvSGIX(uint list, ListParameterName pname, float[] parameters) =>
            glListParameterfvSGIX.Invoke(list, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLListParameteriSGIX(uint list, ListParameterName pname, int param);
        private static GLListParameteriSGIX glListParameteriSGIX;


        [GLExtension("GL_SGIX_list_priority")]
        public static void ListParameteriSGIX(uint list, ListParameterName pname, int param) =>
            glListParameteriSGIX.Invoke(list, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLListParameterivSGIX(uint list, ListParameterName pname, int[] parameters);
        private static GLListParameterivSGIX glListParameterivSGIX;


        [GLExtension("GL_SGIX_list_priority")]
        public static void ListParameterivSGIX(uint list, ListParameterName pname, int[] parameters) =>
            glListParameterivSGIX.Invoke(list, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTexGenSGIX(PixelTexGenModeSGIX mode);
        private static GLPixelTexGenSGIX glPixelTexGenSGIX;


        [GLExtension("GL_SGIX_pixel_texture")]
        public static void PixelTexGenSGIX(PixelTexGenModeSGIX mode) =>
            glPixelTexGenSGIX.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points);
        private static GLDeformationMap3dSGIX glDeformationMap3dSGIX;


        [GLExtension("GL_SGIX_polynomial_ffd")]
        public static void DeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points) =>
            glDeformationMap3dSGIX.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points);
        private static GLDeformationMap3fSGIX glDeformationMap3fSGIX;


        [GLExtension("GL_SGIX_polynomial_ffd")]
        public static void DeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points) =>
            glDeformationMap3fSGIX.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeformSGIX(FfdMaskSGIX mask);
        private static GLDeformSGIX glDeformSGIX;


        [GLExtension("GL_SGIX_polynomial_ffd")]
        public static void DeformSGIX(FfdMaskSGIX mask) =>
            glDeformSGIX.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadIdentityDeformationMapSGIX(FfdMaskSGIX mask);
        private static GLLoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX;


        [GLExtension("GL_SGIX_polynomial_ffd")]
        public static void LoadIdentityDeformationMapSGIX(FfdMaskSGIX mask) =>
            glLoadIdentityDeformationMapSGIX.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReferencePlaneSGIX(double[] equation);
        private static GLReferencePlaneSGIX glReferencePlaneSGIX;


        [GLExtension("GL_SGIX_reference_plane")]
        public static void ReferencePlaneSGIX(double[] equation) =>
            glReferencePlaneSGIX.Invoke(equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSpriteParameterfSGIX(SpriteParameterNameSGIX pname, float param);
        private static GLSpriteParameterfSGIX glSpriteParameterfSGIX;


        [GLExtension("GL_SGIX_sprite")]
        public static void SpriteParameterfSGIX(SpriteParameterNameSGIX pname, float param) =>
            glSpriteParameterfSGIX.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSpriteParameterfvSGIX(SpriteParameterNameSGIX pname, float[] parameters);
        private static GLSpriteParameterfvSGIX glSpriteParameterfvSGIX;


        [GLExtension("GL_SGIX_sprite")]
        public static void SpriteParameterfvSGIX(SpriteParameterNameSGIX pname, float[] parameters) =>
            glSpriteParameterfvSGIX.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSpriteParameteriSGIX(SpriteParameterNameSGIX pname, int param);
        private static GLSpriteParameteriSGIX glSpriteParameteriSGIX;


        [GLExtension("GL_SGIX_sprite")]
        public static void SpriteParameteriSGIX(SpriteParameterNameSGIX pname, int param) =>
            glSpriteParameteriSGIX.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSpriteParameterivSGIX(SpriteParameterNameSGIX pname, int[] parameters);
        private static GLSpriteParameterivSGIX glSpriteParameterivSGIX;


        [GLExtension("GL_SGIX_sprite")]
        public static void SpriteParameterivSGIX(SpriteParameterNameSGIX pname, int[] parameters) =>
            glSpriteParameterivSGIX.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTagSampleBufferSGIX();
        private static GLTagSampleBufferSGIX glTagSampleBufferSGIX;


        [GLExtension("GL_SGIX_tag_sample_buffer")]
        public static void TagSampleBufferSGIX() =>
            glTagSampleBufferSGIX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint table);
        private static GLColorTableSGI glColorTableSGI;


        [GLExtension("GL_SGI_color_table")]
        public static void ColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, nint table) =>
            glColorTableSGI.Invoke(target, internalformat, width, format, type, table);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, float[] parameters);
        private static GLColorTableParameterfvSGI glColorTableParameterfvSGI;


        [GLExtension("GL_SGI_color_table")]
        public static void ColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, float[] parameters) =>
            glColorTableParameterfvSGI.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters);
        private static GLColorTableParameterivSGI glColorTableParameterivSGI;


        [GLExtension("GL_SGI_color_table")]
        public static void ColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, int[] parameters) =>
            glColorTableParameterivSGI.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int x, int y, int width);
        private static GLCopyColorTableSGI glCopyColorTableSGI;


        [GLExtension("GL_SGI_color_table")]
        public static void CopyColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int x, int y, int width) =>
            glCopyColorTableSGI.Invoke(target, internalformat, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, out nint table);
        private static GLGetColorTableSGI glGetColorTableSGI;


        [GLExtension("GL_SGI_color_table")]
        public static void GetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, out nint table) =>
            glGetColorTableSGI.Invoke(target, format, type, out table);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, out float parameters);
        private static GLGetColorTableParameterfvSGI glGetColorTableParameterfvSGI;


        [GLExtension("GL_SGI_color_table")]
        public static void GetColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, out float parameters) =>
            glGetColorTableParameterfvSGI.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, out int parameters);
        private static GLGetColorTableParameterivSGI glGetColorTableParameterivSGI;


        [GLExtension("GL_SGI_color_table")]
        public static void GetColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPName pname, out int parameters) =>
            glGetColorTableParameterivSGI.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFinishTextureSUNX();
        private static GLFinishTextureSUNX glFinishTextureSUNX;


        [GLExtension("GL_SUNX_constant_data")]
        public static void FinishTextureSUNX() =>
            glFinishTextureSUNX.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactorbSUN(sbyte factor);
        private static GLGlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactorbSUN(sbyte factor) =>
            glGlobalAlphaFactorbSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactorsSUN(short factor);
        private static GLGlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactorsSUN(short factor) =>
            glGlobalAlphaFactorsSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactoriSUN(int factor);
        private static GLGlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactoriSUN(int factor) =>
            glGlobalAlphaFactoriSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactorfSUN(float factor);
        private static GLGlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactorfSUN(float factor) =>
            glGlobalAlphaFactorfSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactordSUN(double factor);
        private static GLGlobalAlphaFactordSUN glGlobalAlphaFactordSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactordSUN(double factor) =>
            glGlobalAlphaFactordSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactorubSUN(byte factor);
        private static GLGlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactorubSUN(byte factor) =>
            glGlobalAlphaFactorubSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactorusSUN(ushort factor);
        private static GLGlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactorusSUN(ushort factor) =>
            glGlobalAlphaFactorusSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGlobalAlphaFactoruiSUN(uint factor);
        private static GLGlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN;


        [GLExtension("GL_SUN_global_alpha")]
        public static void GlobalAlphaFactoruiSUN(uint factor) =>
            glGlobalAlphaFactoruiSUN.Invoke(factor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawMeshArraysSUN(PrimitiveType mode, int first, int count, int width);
        private static GLDrawMeshArraysSUN glDrawMeshArraysSUN;


        [GLExtension("GL_SUN_mesh_array")]
        public static void DrawMeshArraysSUN(PrimitiveType mode, int first, int count, int width) =>
            glDrawMeshArraysSUN.Invoke(mode, first, count, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiSUN(uint code);
        private static GLReplacementCodeuiSUN glReplacementCodeuiSUN;


        [GLExtension("GL_SUN_triangle_list")]
        public static void ReplacementCodeuiSUN(uint code) =>
            glReplacementCodeuiSUN.Invoke(code);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeusSUN(ushort code);
        private static GLReplacementCodeusSUN glReplacementCodeusSUN;


        [GLExtension("GL_SUN_triangle_list")]
        public static void ReplacementCodeusSUN(ushort code) =>
            glReplacementCodeusSUN.Invoke(code);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeubSUN(byte code);
        private static GLReplacementCodeubSUN glReplacementCodeubSUN;


        [GLExtension("GL_SUN_triangle_list")]
        public static void ReplacementCodeubSUN(byte code) =>
            glReplacementCodeubSUN.Invoke(code);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuivSUN(uint[] code);
        private static GLReplacementCodeuivSUN glReplacementCodeuivSUN;


        [GLExtension("GL_SUN_triangle_list")]
        public static void ReplacementCodeuivSUN(uint[] code) =>
            glReplacementCodeuivSUN.Invoke(code);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeusvSUN(ushort[] code);
        private static GLReplacementCodeusvSUN glReplacementCodeusvSUN;


        [GLExtension("GL_SUN_triangle_list")]
        public static void ReplacementCodeusvSUN(ushort[] code) =>
            glReplacementCodeusvSUN.Invoke(code);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeubvSUN(byte[] code);
        private static GLReplacementCodeubvSUN glReplacementCodeubvSUN;


        [GLExtension("GL_SUN_triangle_list")]
        public static void ReplacementCodeubvSUN(byte[] code) =>
            glReplacementCodeubvSUN.Invoke(code);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodePointerSUN(ReplacementCodeTypeSUN type, int stride, nint pointer);
        private static GLReplacementCodePointerSUN glReplacementCodePointerSUN;


        [GLExtension("GL_SUN_triangle_list")]
        public static void ReplacementCodePointerSUN(ReplacementCodeTypeSUN type, int stride, nint pointer) =>
            glReplacementCodePointerSUN.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y);
        private static GLColor4ubVertex2fSUN glColor4ubVertex2fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y) =>
            glColor4ubVertex2fSUN.Invoke(r, g, b, a, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4ubVertex2fvSUN(byte[] c, float[] v);
        private static GLColor4ubVertex2fvSUN glColor4ubVertex2fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color4ubVertex2fvSUN(byte[] c, float[] v) =>
            glColor4ubVertex2fvSUN.Invoke(c, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z);
        private static GLColor4ubVertex3fSUN glColor4ubVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z) =>
            glColor4ubVertex3fSUN.Invoke(r, g, b, a, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4ubVertex3fvSUN(byte[] c, float[] v);
        private static GLColor4ubVertex3fvSUN glColor4ubVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color4ubVertex3fvSUN(byte[] c, float[] v) =>
            glColor4ubVertex3fvSUN.Invoke(c, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z);
        private static GLColor3fVertex3fSUN glColor3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color3fVertex3fSUN(float r, float g, float b, float x, float y, float z) =>
            glColor3fVertex3fSUN.Invoke(r, g, b, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3fVertex3fvSUN(float[] c, float[] v);
        private static GLColor3fVertex3fvSUN glColor3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color3fVertex3fvSUN(float[] c, float[] v) =>
            glColor3fVertex3fvSUN.Invoke(c, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z);
        private static GLNormal3fVertex3fSUN glNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Normal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z) =>
            glNormal3fVertex3fSUN.Invoke(nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3fVertex3fvSUN(float[] n, float[] v);
        private static GLNormal3fVertex3fvSUN glNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Normal3fVertex3fvSUN(float[] n, float[] v) =>
            glNormal3fVertex3fvSUN.Invoke(n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        private static GLColor4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) =>
            glColor4fNormal3fVertex3fSUN.Invoke(r, g, b, a, nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4fNormal3fVertex3fvSUN(float[] c, float[] n, float[] v);
        private static GLColor4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void Color4fNormal3fVertex3fvSUN(float[] c, float[] n, float[] v) =>
            glColor4fNormal3fVertex3fvSUN.Invoke(c, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z);
        private static GLTexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fVertex3fSUN(float s, float t, float x, float y, float z) =>
            glTexCoord2fVertex3fSUN.Invoke(s, t, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fVertex3fvSUN(float[] tc, float[] v);
        private static GLTexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fVertex3fvSUN(float[] tc, float[] v) =>
            glTexCoord2fVertex3fvSUN.Invoke(tc, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w);
        private static GLTexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w) =>
            glTexCoord4fVertex4fSUN.Invoke(s, t, p, q, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4fVertex4fvSUN(float[] tc, float[] v);
        private static GLTexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord4fVertex4fvSUN(float[] tc, float[] v) =>
            glTexCoord4fVertex4fvSUN.Invoke(tc, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);
        private static GLTexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z) =>
            glTexCoord2fColor4ubVertex3fSUN.Invoke(s, t, r, g, b, a, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float[] v);
        private static GLTexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fColor4ubVertex3fvSUN(float[] tc, byte[] c, float[] v) =>
            glTexCoord2fColor4ubVertex3fvSUN.Invoke(tc, c, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z);
        private static GLTexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z) =>
            glTexCoord2fColor3fVertex3fSUN.Invoke(s, t, r, g, b, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fColor3fVertex3fvSUN(float[] tc, float[] c, float[] v);
        private static GLTexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fColor3fVertex3fvSUN(float[] tc, float[] c, float[] v) =>
            glTexCoord2fColor3fVertex3fvSUN.Invoke(tc, c, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z);
        private static GLTexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z) =>
            glTexCoord2fNormal3fVertex3fSUN.Invoke(s, t, nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float[] v);
        private static GLTexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fNormal3fVertex3fvSUN(float[] tc, float[] n, float[] v) =>
            glTexCoord2fNormal3fVertex3fvSUN.Invoke(tc, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        private static GLTexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) =>
            glTexCoord2fColor4fNormal3fVertex3fSUN.Invoke(s, t, r, g, b, a, nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float[] n, float[] v);
        private static GLTexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, float[] c, float[] n, float[] v) =>
            glTexCoord2fColor4fNormal3fVertex3fvSUN.Invoke(tc, c, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);
        private static GLTexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w) =>
            glTexCoord4fColor4fNormal3fVertex4fSUN.Invoke(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float[] n, float[] v);
        private static GLTexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void TexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, float[] c, float[] n, float[] v) =>
            glTexCoord4fColor4fNormal3fVertex4fvSUN.Invoke(tc, c, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z);
        private static GLReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z) =>
            glReplacementCodeuiVertex3fSUN.Invoke(rc, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiVertex3fvSUN(uint[] rc, float[] v);
        private static GLReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiVertex3fvSUN(uint[] rc, float[] v) =>
            glReplacementCodeuiVertex3fvSUN.Invoke(rc, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z);
        private static GLReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z) =>
            glReplacementCodeuiColor4ubVertex3fSUN.Invoke(rc, r, g, b, a, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiColor4ubVertex3fvSUN(uint[] rc, byte[] c, float[] v);
        private static GLReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiColor4ubVertex3fvSUN(uint[] rc, byte[] c, float[] v) =>
            glReplacementCodeuiColor4ubVertex3fvSUN.Invoke(rc, c, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z);
        private static GLReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z) =>
            glReplacementCodeuiColor3fVertex3fSUN.Invoke(rc, r, g, b, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiColor3fVertex3fvSUN(uint[] rc, float[] c, float[] v);
        private static GLReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiColor3fVertex3fvSUN(uint[] rc, float[] c, float[] v) =>
            glReplacementCodeuiColor3fVertex3fvSUN.Invoke(rc, c, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z);
        private static GLReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z) =>
            glReplacementCodeuiNormal3fVertex3fSUN.Invoke(rc, nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiNormal3fVertex3fvSUN(uint[] rc, float[] n, float[] v);
        private static GLReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiNormal3fVertex3fvSUN(uint[] rc, float[] n, float[] v) =>
            glReplacementCodeuiNormal3fVertex3fvSUN.Invoke(rc, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        private static GLReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) =>
            glReplacementCodeuiColor4fNormal3fVertex3fSUN.Invoke(rc, r, g, b, a, nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, float[] c, float[] n, float[] v);
        private static GLReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(uint[] rc, float[] c, float[] n, float[] v) =>
            glReplacementCodeuiColor4fNormal3fVertex3fvSUN.Invoke(rc, c, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z);
        private static GLReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z) =>
            glReplacementCodeuiTexCoord2fVertex3fSUN.Invoke(rc, s, t, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] rc, float[] tc, float[] v);
        private static GLReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiTexCoord2fVertex3fvSUN(uint[] rc, float[] tc, float[] v) =>
            glReplacementCodeuiTexCoord2fVertex3fvSUN.Invoke(rc, tc, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);
        private static GLReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z) =>
            glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.Invoke(rc, s, t, nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] n, float[] v);
        private static GLReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] n, float[] v) =>
            glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.Invoke(rc, tc, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);
        private static GLReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z) =>
            glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.Invoke(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] c, float[] n, float[] v);
        private static GLReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;


        [GLExtension("GL_SUN_vertex")]
        public static void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(uint[] rc, float[] tc, float[] c, float[] n, float[] v) =>
            glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.Invoke(rc, tc, c, n, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCullFace(TriangleFace mode);
        private static GLCullFace glCullFace;

        public static void CullFace(TriangleFace mode) =>
            glCullFace.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFrontFace(FrontFaceDirection mode);
        private static GLFrontFace glFrontFace;

        public static void FrontFace(FrontFaceDirection mode) =>
            glFrontFace.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLHint(HintTarget target, HintMode mode);
        private static GLHint glHint;

        public static void Hint(HintTarget target, HintMode mode) =>
            glHint.Invoke(target, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLineWidth(float width);
        private static GLLineWidth glLineWidth;

        public static void LineWidth(float width) =>
            glLineWidth.Invoke(width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointSize(float size);
        private static GLPointSize glPointSize;

        public static void PointSize(float size) =>
            glPointSize.Invoke(size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonMode(TriangleFace face, PolygonMode mode);
        private static GLPolygonMode glPolygonMode;

        public static void PolygonMode(TriangleFace face, PolygonMode mode) =>
            glPolygonMode.Invoke(face, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScissor(int x, int y, int width, int height);
        private static GLScissor glScissor;

        public static void Scissor(int x, int y, int width, int height) =>
            glScissor.Invoke(x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterf(TextureTarget target, TextureParameterName pname, float param);
        private static GLTexParameterf glTexParameterf;

        public static void TexParameterf(TextureTarget target, TextureParameterName pname, float param) =>
            glTexParameterf.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterfv(TextureTarget target, TextureParameterName pname, float[] parameters);
        private static GLTexParameterfv glTexParameterfv;

        public static void TexParameterfv(TextureTarget target, TextureParameterName pname, float[] parameters) =>
            glTexParameterfv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameteri(TextureTarget target, TextureParameterName pname, int param);
        private static GLTexParameteri glTexParameteri;

        public static void TexParameteri(TextureTarget target, TextureParameterName pname, int param) =>
            glTexParameteri.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameteriv(TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLTexParameteriv glTexParameteriv;

        public static void TexParameteriv(TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glTexParameteriv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage1D(TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTexImage1D glTexImage1D;

        public static void TexImage1D(TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTexImage1D.Invoke(target, level, internalformat, width, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTexImage2D glTexImage2D;

        public static void TexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTexImage2D.Invoke(target, level, internalformat, width, height, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawBuffer(DrawBufferMode buf);
        private static GLDrawBuffer glDrawBuffer;

        public static void DrawBuffer(DrawBufferMode buf) =>
            glDrawBuffer.Invoke(buf);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClear(ClearBufferMask mask);
        private static GLClear glClear;

        public static void Clear(ClearBufferMask mask) =>
            glClear.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearColor(float red, float green, float blue, float alpha);
        private static GLClearColor glClearColor;

        public static void ClearColor(float red, float green, float blue, float alpha) =>
            glClearColor.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearStencil(int s);
        private static GLClearStencil glClearStencil;

        public static void ClearStencil(int s) =>
            glClearStencil.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearDepth(double depth);
        private static GLClearDepth glClearDepth;

        public static void ClearDepth(double depth) =>
            glClearDepth.Invoke(depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilMask(uint mask);
        private static GLStencilMask glStencilMask;

        public static void StencilMask(uint mask) =>
            glStencilMask.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorMask(bool red, bool green, bool blue, bool alpha);
        private static GLColorMask glColorMask;

        public static void ColorMask(bool red, bool green, bool blue, bool alpha) =>
            glColorMask.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthMask(bool flag);
        private static GLDepthMask glDepthMask;

        public static void DepthMask(bool flag) =>
            glDepthMask.Invoke(flag);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisable(EnableCap cap);
        private static GLDisable glDisable;

        public static void Disable(EnableCap cap) =>
            glDisable.Invoke(cap);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnable(EnableCap cap);
        private static GLEnable glEnable;

        public static void Enable(EnableCap cap) =>
            glEnable.Invoke(cap);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFinish();
        private static GLFinish glFinish;

        public static void Finish() =>
            glFinish.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFlush();
        private static GLFlush glFlush;

        public static void Flush() =>
            glFlush.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFunc(BlendingFactor sfactor, BlendingFactor dfactor);
        private static GLBlendFunc glBlendFunc;

        public static void BlendFunc(BlendingFactor sfactor, BlendingFactor dfactor) =>
            glBlendFunc.Invoke(sfactor, dfactor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLogicOp(LogicOp opcode);
        private static GLLogicOp glLogicOp;

        public static void LogicOp(LogicOp opcode) =>
            glLogicOp.Invoke(opcode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilFunc(StencilFunction func, int reference, uint mask);
        private static GLStencilFunc glStencilFunc;

        public static void StencilFunc(StencilFunction func, int reference, uint mask) =>
            glStencilFunc.Invoke(func, reference, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass);
        private static GLStencilOp glStencilOp;

        public static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass) =>
            glStencilOp.Invoke(fail, zfail, zpass);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthFunc(DepthFunction func);
        private static GLDepthFunc glDepthFunc;

        public static void DepthFunc(DepthFunction func) =>
            glDepthFunc.Invoke(func);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelStoref(PixelStoreParameter pname, float param);
        private static GLPixelStoref glPixelStoref;

        public static void PixelStoref(PixelStoreParameter pname, float param) =>
            glPixelStoref.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelStorei(PixelStoreParameter pname, int param);
        private static GLPixelStorei glPixelStorei;

        public static void PixelStorei(PixelStoreParameter pname, int param) =>
            glPixelStorei.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadBuffer(ReadBufferMode src);
        private static GLReadBuffer glReadBuffer;

        public static void ReadBuffer(ReadBufferMode src) =>
            glReadBuffer.Invoke(src);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, out nint pixels);
        private static GLReadPixels glReadPixels;

        public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, out nint pixels) =>
            glReadPixels.Invoke(x, y, width, height, format, type, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBooleanv(GetPName pname, out bool data);
        private static GLGetBooleanv glGetBooleanv;

        public static void GetBooleanv(GetPName pname, out bool data) =>
            glGetBooleanv.Invoke(pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetDoublev(GetPName pname, out double data);
        private static GLGetDoublev glGetDoublev;

        public static void GetDoublev(GetPName pname, out double data) =>
            glGetDoublev.Invoke(pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ErrorCode GLGetError();
        private static GLGetError glGetError;

        public static ErrorCode GetError() =>
            glGetError.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFloatv(GetPName pname, out float data);
        private static GLGetFloatv glGetFloatv;

        public static void GetFloatv(GetPName pname, out float data) =>
            glGetFloatv.Invoke(pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetIntegerv(GetPName pname, out int data);
        private static GLGetIntegerv glGetIntegerv;

        public static void GetIntegerv(GetPName pname, out int data) =>
            glGetIntegerv.Invoke(pname, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLGetString(StringName name);
        private static GLGetString glGetString;

        public static nint GetString(StringName name) =>
            glGetString.Invoke(name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, out nint pixels);
        private static GLGetTexImage glGetTexImage;

        public static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, out nint pixels) =>
            glGetTexImage.Invoke(target, level, format, type, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterfv(TextureTarget target, GetTextureParameter pname, out float parameters);
        private static GLGetTexParameterfv glGetTexParameterfv;

        public static void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, out float parameters) =>
            glGetTexParameterfv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameteriv(TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTexParameteriv glGetTexParameteriv;

        public static void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTexParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, out float parameters);
        private static GLGetTexLevelParameterfv glGetTexLevelParameterfv;

        public static void GetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, out float parameters) =>
            glGetTexLevelParameterfv.Invoke(target, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, out int parameters);
        private static GLGetTexLevelParameteriv glGetTexLevelParameteriv;

        public static void GetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, out int parameters) =>
            glGetTexLevelParameteriv.Invoke(target, level, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsEnabled(EnableCap cap);
        private static GLIsEnabled glIsEnabled;

        public static bool IsEnabled(EnableCap cap) =>
            glIsEnabled.Invoke(cap);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRange(double n, double f);
        private static GLDepthRange glDepthRange;

        public static void DepthRange(double n, double f) =>
            glDepthRange.Invoke(n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLViewport(int x, int y, int width, int height);
        private static GLViewport glViewport;

        public static void Viewport(int x, int y, int width, int height) =>
            glViewport.Invoke(x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNewList(uint list, ListMode mode);
        private static GLNewList glNewList;

        public static void NewList(uint list, ListMode mode) =>
            glNewList.Invoke(list, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndList();
        private static GLEndList glEndList;

        public static void EndList() =>
            glEndList.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCallList(uint list);
        private static GLCallList glCallList;

        public static void CallList(uint list) =>
            glCallList.Invoke(list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCallLists(int n, ListNameType type, nint lists);
        private static GLCallLists glCallLists;

        public static void CallLists(int n, ListNameType type, nint lists) =>
            glCallLists.Invoke(n, type, lists);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteLists(uint list, int range);
        private static GLDeleteLists glDeleteLists;

        public static void DeleteLists(uint list, int range) =>
            glDeleteLists.Invoke(list, range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLGenLists(int range);
        private static GLGenLists glGenLists;

        public static uint GenLists(int range) =>
            glGenLists.Invoke(range);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLListBase(uint base);
        private static GLListBase glListBase;

        public static void ListBase(uint base) =>
            glListBase.Invoke(base);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBegin(PrimitiveType mode);
        private static GLBegin glBegin;

        public static void Begin(PrimitiveType mode) =>
            glBegin.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap);
        private static GLBitmap glBitmap;

        public static void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap) =>
            glBitmap.Invoke(width, height, xorig, yorig, xmove, ymove, bitmap);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3b(sbyte red, sbyte green, sbyte blue);
        private static GLColor3b glColor3b;

        public static void Color3b(sbyte red, sbyte green, sbyte blue) =>
            glColor3b.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3bv(sbyte[] v);
        private static GLColor3bv glColor3bv;

        public static void Color3bv(sbyte[] v) =>
            glColor3bv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3d(double red, double green, double blue);
        private static GLColor3d glColor3d;

        public static void Color3d(double red, double green, double blue) =>
            glColor3d.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3dv(double[] v);
        private static GLColor3dv glColor3dv;

        public static void Color3dv(double[] v) =>
            glColor3dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3f(float red, float green, float blue);
        private static GLColor3f glColor3f;

        public static void Color3f(float red, float green, float blue) =>
            glColor3f.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3fv(float[] v);
        private static GLColor3fv glColor3fv;

        public static void Color3fv(float[] v) =>
            glColor3fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3i(int red, int green, int blue);
        private static GLColor3i glColor3i;

        public static void Color3i(int red, int green, int blue) =>
            glColor3i.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3iv(int[] v);
        private static GLColor3iv glColor3iv;

        public static void Color3iv(int[] v) =>
            glColor3iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3s(short red, short green, short blue);
        private static GLColor3s glColor3s;

        public static void Color3s(short red, short green, short blue) =>
            glColor3s.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3sv(short[] v);
        private static GLColor3sv glColor3sv;

        public static void Color3sv(short[] v) =>
            glColor3sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3ub(byte red, byte green, byte blue);
        private static GLColor3ub glColor3ub;

        public static void Color3ub(byte red, byte green, byte blue) =>
            glColor3ub.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3ubv(byte[] v);
        private static GLColor3ubv glColor3ubv;

        public static void Color3ubv(byte[] v) =>
            glColor3ubv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3ui(uint red, uint green, uint blue);
        private static GLColor3ui glColor3ui;

        public static void Color3ui(uint red, uint green, uint blue) =>
            glColor3ui.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3uiv(uint[] v);
        private static GLColor3uiv glColor3uiv;

        public static void Color3uiv(uint[] v) =>
            glColor3uiv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3us(ushort red, ushort green, ushort blue);
        private static GLColor3us glColor3us;

        public static void Color3us(ushort red, ushort green, ushort blue) =>
            glColor3us.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor3usv(ushort[] v);
        private static GLColor3usv glColor3usv;

        public static void Color3usv(ushort[] v) =>
            glColor3usv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha);
        private static GLColor4b glColor4b;

        public static void Color4b(sbyte red, sbyte green, sbyte blue, sbyte alpha) =>
            glColor4b.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4bv(sbyte[] v);
        private static GLColor4bv glColor4bv;

        public static void Color4bv(sbyte[] v) =>
            glColor4bv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4d(double red, double green, double blue, double alpha);
        private static GLColor4d glColor4d;

        public static void Color4d(double red, double green, double blue, double alpha) =>
            glColor4d.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4dv(double[] v);
        private static GLColor4dv glColor4dv;

        public static void Color4dv(double[] v) =>
            glColor4dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4f(float red, float green, float blue, float alpha);
        private static GLColor4f glColor4f;

        public static void Color4f(float red, float green, float blue, float alpha) =>
            glColor4f.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4fv(float[] v);
        private static GLColor4fv glColor4fv;

        public static void Color4fv(float[] v) =>
            glColor4fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4i(int red, int green, int blue, int alpha);
        private static GLColor4i glColor4i;

        public static void Color4i(int red, int green, int blue, int alpha) =>
            glColor4i.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4iv(int[] v);
        private static GLColor4iv glColor4iv;

        public static void Color4iv(int[] v) =>
            glColor4iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4s(short red, short green, short blue, short alpha);
        private static GLColor4s glColor4s;

        public static void Color4s(short red, short green, short blue, short alpha) =>
            glColor4s.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4sv(short[] v);
        private static GLColor4sv glColor4sv;

        public static void Color4sv(short[] v) =>
            glColor4sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4ub(byte red, byte green, byte blue, byte alpha);
        private static GLColor4ub glColor4ub;

        public static void Color4ub(byte red, byte green, byte blue, byte alpha) =>
            glColor4ub.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4ubv(byte[] v);
        private static GLColor4ubv glColor4ubv;

        public static void Color4ubv(byte[] v) =>
            glColor4ubv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4ui(uint red, uint green, uint blue, uint alpha);
        private static GLColor4ui glColor4ui;

        public static void Color4ui(uint red, uint green, uint blue, uint alpha) =>
            glColor4ui.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4uiv(uint[] v);
        private static GLColor4uiv glColor4uiv;

        public static void Color4uiv(uint[] v) =>
            glColor4uiv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4us(ushort red, ushort green, ushort blue, ushort alpha);
        private static GLColor4us glColor4us;

        public static void Color4us(ushort red, ushort green, ushort blue, ushort alpha) =>
            glColor4us.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4usv(ushort[] v);
        private static GLColor4usv glColor4usv;

        public static void Color4usv(ushort[] v) =>
            glColor4usv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEdgeFlag(bool flag);
        private static GLEdgeFlag glEdgeFlag;

        public static void EdgeFlag(bool flag) =>
            glEdgeFlag.Invoke(flag);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEdgeFlagv(bool[] flag);
        private static GLEdgeFlagv glEdgeFlagv;

        public static void EdgeFlagv(bool[] flag) =>
            glEdgeFlagv.Invoke(flag);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnd();
        private static GLEnd glEnd;

        public static void End() =>
            glEnd.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexd(double c);
        private static GLIndexd glIndexd;

        public static void Indexd(double c) =>
            glIndexd.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexdv(double[] c);
        private static GLIndexdv glIndexdv;

        public static void Indexdv(double[] c) =>
            glIndexdv.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexf(float c);
        private static GLIndexf glIndexf;

        public static void Indexf(float c) =>
            glIndexf.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexfv(float[] c);
        private static GLIndexfv glIndexfv;

        public static void Indexfv(float[] c) =>
            glIndexfv.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexi(int c);
        private static GLIndexi glIndexi;

        public static void Indexi(int c) =>
            glIndexi.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexiv(int[] c);
        private static GLIndexiv glIndexiv;

        public static void Indexiv(int[] c) =>
            glIndexiv.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexs(short c);
        private static GLIndexs glIndexs;

        public static void Indexs(short c) =>
            glIndexs.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexsv(short[] c);
        private static GLIndexsv glIndexsv;

        public static void Indexsv(short[] c) =>
            glIndexsv.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3b(sbyte nx, sbyte ny, sbyte nz);
        private static GLNormal3b glNormal3b;

        public static void Normal3b(sbyte nx, sbyte ny, sbyte nz) =>
            glNormal3b.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3bv(sbyte[] v);
        private static GLNormal3bv glNormal3bv;

        public static void Normal3bv(sbyte[] v) =>
            glNormal3bv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3d(double nx, double ny, double nz);
        private static GLNormal3d glNormal3d;

        public static void Normal3d(double nx, double ny, double nz) =>
            glNormal3d.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3dv(double[] v);
        private static GLNormal3dv glNormal3dv;

        public static void Normal3dv(double[] v) =>
            glNormal3dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3f(float nx, float ny, float nz);
        private static GLNormal3f glNormal3f;

        public static void Normal3f(float nx, float ny, float nz) =>
            glNormal3f.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3fv(float[] v);
        private static GLNormal3fv glNormal3fv;

        public static void Normal3fv(float[] v) =>
            glNormal3fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3i(int nx, int ny, int nz);
        private static GLNormal3i glNormal3i;

        public static void Normal3i(int nx, int ny, int nz) =>
            glNormal3i.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3iv(int[] v);
        private static GLNormal3iv glNormal3iv;

        public static void Normal3iv(int[] v) =>
            glNormal3iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3s(short nx, short ny, short nz);
        private static GLNormal3s glNormal3s;

        public static void Normal3s(short nx, short ny, short nz) =>
            glNormal3s.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3sv(short[] v);
        private static GLNormal3sv glNormal3sv;

        public static void Normal3sv(short[] v) =>
            glNormal3sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2d(double x, double y);
        private static GLRasterPos2d glRasterPos2d;

        public static void RasterPos2d(double x, double y) =>
            glRasterPos2d.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2dv(double[] v);
        private static GLRasterPos2dv glRasterPos2dv;

        public static void RasterPos2dv(double[] v) =>
            glRasterPos2dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2f(float x, float y);
        private static GLRasterPos2f glRasterPos2f;

        public static void RasterPos2f(float x, float y) =>
            glRasterPos2f.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2fv(float[] v);
        private static GLRasterPos2fv glRasterPos2fv;

        public static void RasterPos2fv(float[] v) =>
            glRasterPos2fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2i(int x, int y);
        private static GLRasterPos2i glRasterPos2i;

        public static void RasterPos2i(int x, int y) =>
            glRasterPos2i.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2iv(int[] v);
        private static GLRasterPos2iv glRasterPos2iv;

        public static void RasterPos2iv(int[] v) =>
            glRasterPos2iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2s(short x, short y);
        private static GLRasterPos2s glRasterPos2s;

        public static void RasterPos2s(short x, short y) =>
            glRasterPos2s.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos2sv(short[] v);
        private static GLRasterPos2sv glRasterPos2sv;

        public static void RasterPos2sv(short[] v) =>
            glRasterPos2sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3d(double x, double y, double z);
        private static GLRasterPos3d glRasterPos3d;

        public static void RasterPos3d(double x, double y, double z) =>
            glRasterPos3d.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3dv(double[] v);
        private static GLRasterPos3dv glRasterPos3dv;

        public static void RasterPos3dv(double[] v) =>
            glRasterPos3dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3f(float x, float y, float z);
        private static GLRasterPos3f glRasterPos3f;

        public static void RasterPos3f(float x, float y, float z) =>
            glRasterPos3f.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3fv(float[] v);
        private static GLRasterPos3fv glRasterPos3fv;

        public static void RasterPos3fv(float[] v) =>
            glRasterPos3fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3i(int x, int y, int z);
        private static GLRasterPos3i glRasterPos3i;

        public static void RasterPos3i(int x, int y, int z) =>
            glRasterPos3i.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3iv(int[] v);
        private static GLRasterPos3iv glRasterPos3iv;

        public static void RasterPos3iv(int[] v) =>
            glRasterPos3iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3s(short x, short y, short z);
        private static GLRasterPos3s glRasterPos3s;

        public static void RasterPos3s(short x, short y, short z) =>
            glRasterPos3s.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos3sv(short[] v);
        private static GLRasterPos3sv glRasterPos3sv;

        public static void RasterPos3sv(short[] v) =>
            glRasterPos3sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4d(double x, double y, double z, double w);
        private static GLRasterPos4d glRasterPos4d;

        public static void RasterPos4d(double x, double y, double z, double w) =>
            glRasterPos4d.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4dv(double[] v);
        private static GLRasterPos4dv glRasterPos4dv;

        public static void RasterPos4dv(double[] v) =>
            glRasterPos4dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4f(float x, float y, float z, float w);
        private static GLRasterPos4f glRasterPos4f;

        public static void RasterPos4f(float x, float y, float z, float w) =>
            glRasterPos4f.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4fv(float[] v);
        private static GLRasterPos4fv glRasterPos4fv;

        public static void RasterPos4fv(float[] v) =>
            glRasterPos4fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4i(int x, int y, int z, int w);
        private static GLRasterPos4i glRasterPos4i;

        public static void RasterPos4i(int x, int y, int z, int w) =>
            glRasterPos4i.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4iv(int[] v);
        private static GLRasterPos4iv glRasterPos4iv;

        public static void RasterPos4iv(int[] v) =>
            glRasterPos4iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4s(short x, short y, short z, short w);
        private static GLRasterPos4s glRasterPos4s;

        public static void RasterPos4s(short x, short y, short z, short w) =>
            glRasterPos4s.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRasterPos4sv(short[] v);
        private static GLRasterPos4sv glRasterPos4sv;

        public static void RasterPos4sv(short[] v) =>
            glRasterPos4sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectd(double x1, double y1, double x2, double y2);
        private static GLRectd glRectd;

        public static void Rectd(double x1, double y1, double x2, double y2) =>
            glRectd.Invoke(x1, y1, x2, y2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectdv(double[] v1, double[] v2);
        private static GLRectdv glRectdv;

        public static void Rectdv(double[] v1, double[] v2) =>
            glRectdv.Invoke(v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectf(float x1, float y1, float x2, float y2);
        private static GLRectf glRectf;

        public static void Rectf(float x1, float y1, float x2, float y2) =>
            glRectf.Invoke(x1, y1, x2, y2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectfv(float[] v1, float[] v2);
        private static GLRectfv glRectfv;

        public static void Rectfv(float[] v1, float[] v2) =>
            glRectfv.Invoke(v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRecti(int x1, int y1, int x2, int y2);
        private static GLRecti glRecti;

        public static void Recti(int x1, int y1, int x2, int y2) =>
            glRecti.Invoke(x1, y1, x2, y2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectiv(int[] v1, int[] v2);
        private static GLRectiv glRectiv;

        public static void Rectiv(int[] v1, int[] v2) =>
            glRectiv.Invoke(v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRects(short x1, short y1, short x2, short y2);
        private static GLRects glRects;

        public static void Rects(short x1, short y1, short x2, short y2) =>
            glRects.Invoke(x1, y1, x2, y2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRectsv(short[] v1, short[] v2);
        private static GLRectsv glRectsv;

        public static void Rectsv(short[] v1, short[] v2) =>
            glRectsv.Invoke(v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1d(double s);
        private static GLTexCoord1d glTexCoord1d;

        public static void TexCoord1d(double s) =>
            glTexCoord1d.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1dv(double[] v);
        private static GLTexCoord1dv glTexCoord1dv;

        public static void TexCoord1dv(double[] v) =>
            glTexCoord1dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1f(float s);
        private static GLTexCoord1f glTexCoord1f;

        public static void TexCoord1f(float s) =>
            glTexCoord1f.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1fv(float[] v);
        private static GLTexCoord1fv glTexCoord1fv;

        public static void TexCoord1fv(float[] v) =>
            glTexCoord1fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1i(int s);
        private static GLTexCoord1i glTexCoord1i;

        public static void TexCoord1i(int s) =>
            glTexCoord1i.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1iv(int[] v);
        private static GLTexCoord1iv glTexCoord1iv;

        public static void TexCoord1iv(int[] v) =>
            glTexCoord1iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1s(short s);
        private static GLTexCoord1s glTexCoord1s;

        public static void TexCoord1s(short s) =>
            glTexCoord1s.Invoke(s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord1sv(short[] v);
        private static GLTexCoord1sv glTexCoord1sv;

        public static void TexCoord1sv(short[] v) =>
            glTexCoord1sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2d(double s, double t);
        private static GLTexCoord2d glTexCoord2d;

        public static void TexCoord2d(double s, double t) =>
            glTexCoord2d.Invoke(s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2dv(double[] v);
        private static GLTexCoord2dv glTexCoord2dv;

        public static void TexCoord2dv(double[] v) =>
            glTexCoord2dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2f(float s, float t);
        private static GLTexCoord2f glTexCoord2f;

        public static void TexCoord2f(float s, float t) =>
            glTexCoord2f.Invoke(s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2fv(float[] v);
        private static GLTexCoord2fv glTexCoord2fv;

        public static void TexCoord2fv(float[] v) =>
            glTexCoord2fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2i(int s, int t);
        private static GLTexCoord2i glTexCoord2i;

        public static void TexCoord2i(int s, int t) =>
            glTexCoord2i.Invoke(s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2iv(int[] v);
        private static GLTexCoord2iv glTexCoord2iv;

        public static void TexCoord2iv(int[] v) =>
            glTexCoord2iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2s(short s, short t);
        private static GLTexCoord2s glTexCoord2s;

        public static void TexCoord2s(short s, short t) =>
            glTexCoord2s.Invoke(s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord2sv(short[] v);
        private static GLTexCoord2sv glTexCoord2sv;

        public static void TexCoord2sv(short[] v) =>
            glTexCoord2sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3d(double s, double t, double r);
        private static GLTexCoord3d glTexCoord3d;

        public static void TexCoord3d(double s, double t, double r) =>
            glTexCoord3d.Invoke(s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3dv(double[] v);
        private static GLTexCoord3dv glTexCoord3dv;

        public static void TexCoord3dv(double[] v) =>
            glTexCoord3dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3f(float s, float t, float r);
        private static GLTexCoord3f glTexCoord3f;

        public static void TexCoord3f(float s, float t, float r) =>
            glTexCoord3f.Invoke(s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3fv(float[] v);
        private static GLTexCoord3fv glTexCoord3fv;

        public static void TexCoord3fv(float[] v) =>
            glTexCoord3fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3i(int s, int t, int r);
        private static GLTexCoord3i glTexCoord3i;

        public static void TexCoord3i(int s, int t, int r) =>
            glTexCoord3i.Invoke(s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3iv(int[] v);
        private static GLTexCoord3iv glTexCoord3iv;

        public static void TexCoord3iv(int[] v) =>
            glTexCoord3iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3s(short s, short t, short r);
        private static GLTexCoord3s glTexCoord3s;

        public static void TexCoord3s(short s, short t, short r) =>
            glTexCoord3s.Invoke(s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord3sv(short[] v);
        private static GLTexCoord3sv glTexCoord3sv;

        public static void TexCoord3sv(short[] v) =>
            glTexCoord3sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4d(double s, double t, double r, double q);
        private static GLTexCoord4d glTexCoord4d;

        public static void TexCoord4d(double s, double t, double r, double q) =>
            glTexCoord4d.Invoke(s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4dv(double[] v);
        private static GLTexCoord4dv glTexCoord4dv;

        public static void TexCoord4dv(double[] v) =>
            glTexCoord4dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4f(float s, float t, float r, float q);
        private static GLTexCoord4f glTexCoord4f;

        public static void TexCoord4f(float s, float t, float r, float q) =>
            glTexCoord4f.Invoke(s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4fv(float[] v);
        private static GLTexCoord4fv glTexCoord4fv;

        public static void TexCoord4fv(float[] v) =>
            glTexCoord4fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4i(int s, int t, int r, int q);
        private static GLTexCoord4i glTexCoord4i;

        public static void TexCoord4i(int s, int t, int r, int q) =>
            glTexCoord4i.Invoke(s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4iv(int[] v);
        private static GLTexCoord4iv glTexCoord4iv;

        public static void TexCoord4iv(int[] v) =>
            glTexCoord4iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4s(short s, short t, short r, short q);
        private static GLTexCoord4s glTexCoord4s;

        public static void TexCoord4s(short s, short t, short r, short q) =>
            glTexCoord4s.Invoke(s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoord4sv(short[] v);
        private static GLTexCoord4sv glTexCoord4sv;

        public static void TexCoord4sv(short[] v) =>
            glTexCoord4sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2d(double x, double y);
        private static GLVertex2d glVertex2d;

        public static void Vertex2d(double x, double y) =>
            glVertex2d.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2dv(double[] v);
        private static GLVertex2dv glVertex2dv;

        public static void Vertex2dv(double[] v) =>
            glVertex2dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2f(float x, float y);
        private static GLVertex2f glVertex2f;

        public static void Vertex2f(float x, float y) =>
            glVertex2f.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2fv(float[] v);
        private static GLVertex2fv glVertex2fv;

        public static void Vertex2fv(float[] v) =>
            glVertex2fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2i(int x, int y);
        private static GLVertex2i glVertex2i;

        public static void Vertex2i(int x, int y) =>
            glVertex2i.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2iv(int[] v);
        private static GLVertex2iv glVertex2iv;

        public static void Vertex2iv(int[] v) =>
            glVertex2iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2s(short x, short y);
        private static GLVertex2s glVertex2s;

        public static void Vertex2s(short x, short y) =>
            glVertex2s.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex2sv(short[] v);
        private static GLVertex2sv glVertex2sv;

        public static void Vertex2sv(short[] v) =>
            glVertex2sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3d(double x, double y, double z);
        private static GLVertex3d glVertex3d;

        public static void Vertex3d(double x, double y, double z) =>
            glVertex3d.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3dv(double[] v);
        private static GLVertex3dv glVertex3dv;

        public static void Vertex3dv(double[] v) =>
            glVertex3dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3f(float x, float y, float z);
        private static GLVertex3f glVertex3f;

        public static void Vertex3f(float x, float y, float z) =>
            glVertex3f.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3fv(float[] v);
        private static GLVertex3fv glVertex3fv;

        public static void Vertex3fv(float[] v) =>
            glVertex3fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3i(int x, int y, int z);
        private static GLVertex3i glVertex3i;

        public static void Vertex3i(int x, int y, int z) =>
            glVertex3i.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3iv(int[] v);
        private static GLVertex3iv glVertex3iv;

        public static void Vertex3iv(int[] v) =>
            glVertex3iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3s(short x, short y, short z);
        private static GLVertex3s glVertex3s;

        public static void Vertex3s(short x, short y, short z) =>
            glVertex3s.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex3sv(short[] v);
        private static GLVertex3sv glVertex3sv;

        public static void Vertex3sv(short[] v) =>
            glVertex3sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4d(double x, double y, double z, double w);
        private static GLVertex4d glVertex4d;

        public static void Vertex4d(double x, double y, double z, double w) =>
            glVertex4d.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4dv(double[] v);
        private static GLVertex4dv glVertex4dv;

        public static void Vertex4dv(double[] v) =>
            glVertex4dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4f(float x, float y, float z, float w);
        private static GLVertex4f glVertex4f;

        public static void Vertex4f(float x, float y, float z, float w) =>
            glVertex4f.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4fv(float[] v);
        private static GLVertex4fv glVertex4fv;

        public static void Vertex4fv(float[] v) =>
            glVertex4fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4i(int x, int y, int z, int w);
        private static GLVertex4i glVertex4i;

        public static void Vertex4i(int x, int y, int z, int w) =>
            glVertex4i.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4iv(int[] v);
        private static GLVertex4iv glVertex4iv;

        public static void Vertex4iv(int[] v) =>
            glVertex4iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4s(short x, short y, short z, short w);
        private static GLVertex4s glVertex4s;

        public static void Vertex4s(short x, short y, short z, short w) =>
            glVertex4s.Invoke(x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertex4sv(short[] v);
        private static GLVertex4sv glVertex4sv;

        public static void Vertex4sv(short[] v) =>
            glVertex4sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipPlane(ClipPlaneName plane, double[] equation);
        private static GLClipPlane glClipPlane;

        public static void ClipPlane(ClipPlaneName plane, double[] equation) =>
            glClipPlane.Invoke(plane, equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorMaterial(TriangleFace face, ColorMaterialParameter mode);
        private static GLColorMaterial glColorMaterial;

        public static void ColorMaterial(TriangleFace face, ColorMaterialParameter mode) =>
            glColorMaterial.Invoke(face, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogf(FogParameter pname, float param);
        private static GLFogf glFogf;

        public static void Fogf(FogParameter pname, float param) =>
            glFogf.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogfv(FogParameter pname, float[] parameters);
        private static GLFogfv glFogfv;

        public static void Fogfv(FogParameter pname, float[] parameters) =>
            glFogfv.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogi(FogParameter pname, int param);
        private static GLFogi glFogi;

        public static void Fogi(FogParameter pname, int param) =>
            glFogi.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogiv(FogParameter pname, int[] parameters);
        private static GLFogiv glFogiv;

        public static void Fogiv(FogParameter pname, int[] parameters) =>
            glFogiv.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightf(LightName light, LightParameter pname, float param);
        private static GLLightf glLightf;

        public static void Lightf(LightName light, LightParameter pname, float param) =>
            glLightf.Invoke(light, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightfv(LightName light, LightParameter pname, float[] parameters);
        private static GLLightfv glLightfv;

        public static void Lightfv(LightName light, LightParameter pname, float[] parameters) =>
            glLightfv.Invoke(light, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLighti(LightName light, LightParameter pname, int param);
        private static GLLighti glLighti;

        public static void Lighti(LightName light, LightParameter pname, int param) =>
            glLighti.Invoke(light, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightiv(LightName light, LightParameter pname, int[] parameters);
        private static GLLightiv glLightiv;

        public static void Lightiv(LightName light, LightParameter pname, int[] parameters) =>
            glLightiv.Invoke(light, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModelf(LightModelParameter pname, float param);
        private static GLLightModelf glLightModelf;

        public static void LightModelf(LightModelParameter pname, float param) =>
            glLightModelf.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModelfv(LightModelParameter pname, float[] parameters);
        private static GLLightModelfv glLightModelfv;

        public static void LightModelfv(LightModelParameter pname, float[] parameters) =>
            glLightModelfv.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModeli(LightModelParameter pname, int param);
        private static GLLightModeli glLightModeli;

        public static void LightModeli(LightModelParameter pname, int param) =>
            glLightModeli.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModeliv(LightModelParameter pname, int[] parameters);
        private static GLLightModeliv glLightModeliv;

        public static void LightModeliv(LightModelParameter pname, int[] parameters) =>
            glLightModeliv.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLineStipple(int factor, ushort pattern);
        private static GLLineStipple glLineStipple;

        public static void LineStipple(int factor, ushort pattern) =>
            glLineStipple.Invoke(factor, pattern);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaterialf(TriangleFace face, MaterialParameter pname, float param);
        private static GLMaterialf glMaterialf;

        public static void Materialf(TriangleFace face, MaterialParameter pname, float param) =>
            glMaterialf.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaterialfv(TriangleFace face, MaterialParameter pname, float[] parameters);
        private static GLMaterialfv glMaterialfv;

        public static void Materialfv(TriangleFace face, MaterialParameter pname, float[] parameters) =>
            glMaterialfv.Invoke(face, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMateriali(TriangleFace face, MaterialParameter pname, int param);
        private static GLMateriali glMateriali;

        public static void Materiali(TriangleFace face, MaterialParameter pname, int param) =>
            glMateriali.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaterialiv(TriangleFace face, MaterialParameter pname, int[] parameters);
        private static GLMaterialiv glMaterialiv;

        public static void Materialiv(TriangleFace face, MaterialParameter pname, int[] parameters) =>
            glMaterialiv.Invoke(face, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonStipple(byte[] mask);
        private static GLPolygonStipple glPolygonStipple;

        public static void PolygonStipple(byte[] mask) =>
            glPolygonStipple.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShadeModel(ShadingModel mode);
        private static GLShadeModel glShadeModel;

        public static void ShadeModel(ShadingModel mode) =>
            glShadeModel.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float param);
        private static GLTexEnvf glTexEnvf;

        public static void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float param) =>
            glTexEnvf.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, float[] parameters);
        private static GLTexEnvfv glTexEnvfv;

        public static void TexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, float[] parameters) =>
            glTexEnvfv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int param);
        private static GLTexEnvi glTexEnvi;

        public static void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int param) =>
            glTexEnvi.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters);
        private static GLTexEnviv glTexEnviv;

        public static void TexEnviv(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters) =>
            glTexEnviv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGend(TextureCoordName coord, TextureGenParameter pname, double param);
        private static GLTexGend glTexGend;

        public static void TexGend(TextureCoordName coord, TextureGenParameter pname, double param) =>
            glTexGend.Invoke(coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGendv(TextureCoordName coord, TextureGenParameter pname, double[] parameters);
        private static GLTexGendv glTexGendv;

        public static void TexGendv(TextureCoordName coord, TextureGenParameter pname, double[] parameters) =>
            glTexGendv.Invoke(coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGenf(TextureCoordName coord, TextureGenParameter pname, float param);
        private static GLTexGenf glTexGenf;

        public static void TexGenf(TextureCoordName coord, TextureGenParameter pname, float param) =>
            glTexGenf.Invoke(coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGenfv(TextureCoordName coord, TextureGenParameter pname, float[] parameters);
        private static GLTexGenfv glTexGenfv;

        public static void TexGenfv(TextureCoordName coord, TextureGenParameter pname, float[] parameters) =>
            glTexGenfv.Invoke(coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGeni(TextureCoordName coord, TextureGenParameter pname, int param);
        private static GLTexGeni glTexGeni;

        public static void TexGeni(TextureCoordName coord, TextureGenParameter pname, int param) =>
            glTexGeni.Invoke(coord, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexGeniv(TextureCoordName coord, TextureGenParameter pname, int[] parameters);
        private static GLTexGeniv glTexGeniv;

        public static void TexGeniv(TextureCoordName coord, TextureGenParameter pname, int[] parameters) =>
            glTexGeniv.Invoke(coord, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFeedbackBuffer(int size, FeedbackType type, out float buffer);
        private static GLFeedbackBuffer glFeedbackBuffer;

        public static void FeedbackBuffer(int size, FeedbackType type, out float buffer) =>
            glFeedbackBuffer.Invoke(size, type, out buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSelectBuffer(int size, out uint buffer);
        private static GLSelectBuffer glSelectBuffer;

        public static void SelectBuffer(int size, out uint buffer) =>
            glSelectBuffer.Invoke(size, out buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLRenderMode(RenderingMode mode);
        private static GLRenderMode glRenderMode;

        public static int RenderMode(RenderingMode mode) =>
            glRenderMode.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInitNames();
        private static GLInitNames glInitNames;

        public static void InitNames() =>
            glInitNames.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadName(uint name);
        private static GLLoadName glLoadName;

        public static void LoadName(uint name) =>
            glLoadName.Invoke(name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPassThrough(float token);
        private static GLPassThrough glPassThrough;

        public static void PassThrough(float token) =>
            glPassThrough.Invoke(token);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPopName();
        private static GLPopName glPopName;

        public static void PopName() =>
            glPopName.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushName(uint name);
        private static GLPushName glPushName;

        public static void PushName(uint name) =>
            glPushName.Invoke(name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearAccum(float red, float green, float blue, float alpha);
        private static GLClearAccum glClearAccum;

        public static void ClearAccum(float red, float green, float blue, float alpha) =>
            glClearAccum.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearIndex(float c);
        private static GLClearIndex glClearIndex;

        public static void ClearIndex(float c) =>
            glClearIndex.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexMask(uint mask);
        private static GLIndexMask glIndexMask;

        public static void IndexMask(uint mask) =>
            glIndexMask.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAccum(AccumOp op, float value);
        private static GLAccum glAccum;

        public static void Accum(AccumOp op, float value) =>
            glAccum.Invoke(op, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPopAttrib();
        private static GLPopAttrib glPopAttrib;

        public static void PopAttrib() =>
            glPopAttrib.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushAttrib(AttribMask mask);
        private static GLPushAttrib glPushAttrib;

        public static void PushAttrib(AttribMask mask) =>
            glPushAttrib.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMap1d(MapTarget target, double u1, double u2, int stride, int order, double[] points);
        private static GLMap1d glMap1d;

        public static void Map1d(MapTarget target, double u1, double u2, int stride, int order, double[] points) =>
            glMap1d.Invoke(target, u1, u2, stride, order, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMap1f(MapTarget target, float u1, float u2, int stride, int order, float[] points);
        private static GLMap1f glMap1f;

        public static void Map1f(MapTarget target, float u1, float u2, int stride, int order, float[] points) =>
            glMap1f.Invoke(target, u1, u2, stride, order, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMap2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points);
        private static GLMap2d glMap2d;

        public static void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points) =>
            glMap2d.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMap2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points);
        private static GLMap2f glMap2f;

        public static void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points) =>
            glMap2f.Invoke(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapGrid1d(int un, double u1, double u2);
        private static GLMapGrid1d glMapGrid1d;

        public static void MapGrid1d(int un, double u1, double u2) =>
            glMapGrid1d.Invoke(un, u1, u2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapGrid1f(int un, float u1, float u2);
        private static GLMapGrid1f glMapGrid1f;

        public static void MapGrid1f(int un, float u1, float u2) =>
            glMapGrid1f.Invoke(un, u1, u2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);
        private static GLMapGrid2d glMapGrid2d;

        public static void MapGrid2d(int un, double u1, double u2, int vn, double v1, double v2) =>
            glMapGrid2d.Invoke(un, u1, u2, vn, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);
        private static GLMapGrid2f glMapGrid2f;

        public static void MapGrid2f(int un, float u1, float u2, int vn, float v1, float v2) =>
            glMapGrid2f.Invoke(un, u1, u2, vn, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord1d(double u);
        private static GLEvalCoord1d glEvalCoord1d;

        public static void EvalCoord1d(double u) =>
            glEvalCoord1d.Invoke(u);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord1dv(double[] u);
        private static GLEvalCoord1dv glEvalCoord1dv;

        public static void EvalCoord1dv(double[] u) =>
            glEvalCoord1dv.Invoke(u);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord1f(float u);
        private static GLEvalCoord1f glEvalCoord1f;

        public static void EvalCoord1f(float u) =>
            glEvalCoord1f.Invoke(u);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord1fv(float[] u);
        private static GLEvalCoord1fv glEvalCoord1fv;

        public static void EvalCoord1fv(float[] u) =>
            glEvalCoord1fv.Invoke(u);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord2d(double u, double v);
        private static GLEvalCoord2d glEvalCoord2d;

        public static void EvalCoord2d(double u, double v) =>
            glEvalCoord2d.Invoke(u, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord2dv(double[] u);
        private static GLEvalCoord2dv glEvalCoord2dv;

        public static void EvalCoord2dv(double[] u) =>
            glEvalCoord2dv.Invoke(u);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord2f(float u, float v);
        private static GLEvalCoord2f glEvalCoord2f;

        public static void EvalCoord2f(float u, float v) =>
            glEvalCoord2f.Invoke(u, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalCoord2fv(float[] u);
        private static GLEvalCoord2fv glEvalCoord2fv;

        public static void EvalCoord2fv(float[] u) =>
            glEvalCoord2fv.Invoke(u);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalMesh1(MeshMode1 mode, int i1, int i2);
        private static GLEvalMesh1 glEvalMesh1;

        public static void EvalMesh1(MeshMode1 mode, int i1, int i2) =>
            glEvalMesh1.Invoke(mode, i1, i2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalPoint1(int i);
        private static GLEvalPoint1 glEvalPoint1;

        public static void EvalPoint1(int i) =>
            glEvalPoint1.Invoke(i);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2);
        private static GLEvalMesh2 glEvalMesh2;

        public static void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2) =>
            glEvalMesh2.Invoke(mode, i1, i2, j1, j2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEvalPoint2(int i, int j);
        private static GLEvalPoint2 glEvalPoint2;

        public static void EvalPoint2(int i, int j) =>
            glEvalPoint2.Invoke(i, j);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaFunc(AlphaFunction func, float reference);
        private static GLAlphaFunc glAlphaFunc;

        public static void AlphaFunc(AlphaFunction func, float reference) =>
            glAlphaFunc.Invoke(func, reference);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelZoom(float xfactor, float yfactor);
        private static GLPixelZoom glPixelZoom;

        public static void PixelZoom(float xfactor, float yfactor) =>
            glPixelZoom.Invoke(xfactor, yfactor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTransferf(PixelTransferParameter pname, float param);
        private static GLPixelTransferf glPixelTransferf;

        public static void PixelTransferf(PixelTransferParameter pname, float param) =>
            glPixelTransferf.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelTransferi(PixelTransferParameter pname, int param);
        private static GLPixelTransferi glPixelTransferi;

        public static void PixelTransferi(PixelTransferParameter pname, int param) =>
            glPixelTransferi.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelMapfv(PixelMap map, int mapsize, float[] values);
        private static GLPixelMapfv glPixelMapfv;

        public static void PixelMapfv(PixelMap map, int mapsize, float[] values) =>
            glPixelMapfv.Invoke(map, mapsize, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelMapuiv(PixelMap map, int mapsize, uint[] values);
        private static GLPixelMapuiv glPixelMapuiv;

        public static void PixelMapuiv(PixelMap map, int mapsize, uint[] values) =>
            glPixelMapuiv.Invoke(map, mapsize, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPixelMapusv(PixelMap map, int mapsize, ushort[] values);
        private static GLPixelMapusv glPixelMapusv;

        public static void PixelMapusv(PixelMap map, int mapsize, ushort[] values) =>
            glPixelMapusv.Invoke(map, mapsize, values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyPixels(int x, int y, int width, int height, PixelCopyType type);
        private static GLCopyPixels glCopyPixels;

        public static void CopyPixels(int x, int y, int width, int height, PixelCopyType type) =>
            glCopyPixels.Invoke(x, y, width, height, type);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawPixels(int width, int height, PixelFormat format, PixelType type, nint pixels);
        private static GLDrawPixels glDrawPixels;

        public static void DrawPixels(int width, int height, PixelFormat format, PixelType type, nint pixels) =>
            glDrawPixels.Invoke(width, height, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetClipPlane(ClipPlaneName plane, out double equation);
        private static GLGetClipPlane glGetClipPlane;

        public static void GetClipPlane(ClipPlaneName plane, out double equation) =>
            glGetClipPlane.Invoke(plane, out equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLightfv(LightName light, LightParameter pname, out float parameters);
        private static GLGetLightfv glGetLightfv;

        public static void GetLightfv(LightName light, LightParameter pname, out float parameters) =>
            glGetLightfv.Invoke(light, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLightiv(LightName light, LightParameter pname, out int parameters);
        private static GLGetLightiv glGetLightiv;

        public static void GetLightiv(LightName light, LightParameter pname, out int parameters) =>
            glGetLightiv.Invoke(light, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapdv(MapTarget target, GetMapQuery query, out double v);
        private static GLGetMapdv glGetMapdv;

        public static void GetMapdv(MapTarget target, GetMapQuery query, out double v) =>
            glGetMapdv.Invoke(target, query, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapfv(MapTarget target, GetMapQuery query, out float v);
        private static GLGetMapfv glGetMapfv;

        public static void GetMapfv(MapTarget target, GetMapQuery query, out float v) =>
            glGetMapfv.Invoke(target, query, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMapiv(MapTarget target, GetMapQuery query, out int v);
        private static GLGetMapiv glGetMapiv;

        public static void GetMapiv(MapTarget target, GetMapQuery query, out int v) =>
            glGetMapiv.Invoke(target, query, out v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMaterialfv(TriangleFace face, MaterialParameter pname, out float parameters);
        private static GLGetMaterialfv glGetMaterialfv;

        public static void GetMaterialfv(TriangleFace face, MaterialParameter pname, out float parameters) =>
            glGetMaterialfv.Invoke(face, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMaterialiv(TriangleFace face, MaterialParameter pname, out int parameters);
        private static GLGetMaterialiv glGetMaterialiv;

        public static void GetMaterialiv(TriangleFace face, MaterialParameter pname, out int parameters) =>
            glGetMaterialiv.Invoke(face, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelMapfv(PixelMap map, out float values);
        private static GLGetPixelMapfv glGetPixelMapfv;

        public static void GetPixelMapfv(PixelMap map, out float values) =>
            glGetPixelMapfv.Invoke(map, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelMapuiv(PixelMap map, out uint values);
        private static GLGetPixelMapuiv glGetPixelMapuiv;

        public static void GetPixelMapuiv(PixelMap map, out uint values) =>
            glGetPixelMapuiv.Invoke(map, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPixelMapusv(PixelMap map, out ushort values);
        private static GLGetPixelMapusv glGetPixelMapusv;

        public static void GetPixelMapusv(PixelMap map, out ushort values) =>
            glGetPixelMapusv.Invoke(map, out values);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetPolygonStipple(out byte mask);
        private static GLGetPolygonStipple glGetPolygonStipple;

        public static void GetPolygonStipple(out byte mask) =>
            glGetPolygonStipple.Invoke(out mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, out float parameters);
        private static GLGetTexEnvfv glGetTexEnvfv;

        public static void GetTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, out float parameters) =>
            glGetTexEnvfv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, out int parameters);
        private static GLGetTexEnviv glGetTexEnviv;

        public static void GetTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, out int parameters) =>
            glGetTexEnviv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexGendv(TextureCoordName coord, TextureGenParameter pname, out double parameters);
        private static GLGetTexGendv glGetTexGendv;

        public static void GetTexGendv(TextureCoordName coord, TextureGenParameter pname, out double parameters) =>
            glGetTexGendv.Invoke(coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexGenfv(TextureCoordName coord, TextureGenParameter pname, out float parameters);
        private static GLGetTexGenfv glGetTexGenfv;

        public static void GetTexGenfv(TextureCoordName coord, TextureGenParameter pname, out float parameters) =>
            glGetTexGenfv.Invoke(coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexGeniv(TextureCoordName coord, TextureGenParameter pname, out int parameters);
        private static GLGetTexGeniv glGetTexGeniv;

        public static void GetTexGeniv(TextureCoordName coord, TextureGenParameter pname, out int parameters) =>
            glGetTexGeniv.Invoke(coord, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsList(uint list);
        private static GLIsList glIsList;

        public static bool IsList(uint list) =>
            glIsList.Invoke(list);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFrustum(double left, double right, double bottom, double top, double zNear, double zFar);
        private static GLFrustum glFrustum;

        public static void Frustum(double left, double right, double bottom, double top, double zNear, double zFar) =>
            glFrustum.Invoke(left, right, bottom, top, zNear, zFar);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadIdentity();
        private static GLLoadIdentity glLoadIdentity;

        public static void LoadIdentity() =>
            glLoadIdentity.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadMatrixf(float[] m);
        private static GLLoadMatrixf glLoadMatrixf;

        public static void LoadMatrixf(float[] m) =>
            glLoadMatrixf.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadMatrixd(double[] m);
        private static GLLoadMatrixd glLoadMatrixd;

        public static void LoadMatrixd(double[] m) =>
            glLoadMatrixd.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMatrixMode(MatrixMode mode);
        private static GLMatrixMode glMatrixMode;

        public static void MatrixMode(MatrixMode mode) =>
            glMatrixMode.Invoke(mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultMatrixf(float[] m);
        private static GLMultMatrixf glMultMatrixf;

        public static void MultMatrixf(float[] m) =>
            glMultMatrixf.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultMatrixd(double[] m);
        private static GLMultMatrixd glMultMatrixd;

        public static void MultMatrixd(double[] m) =>
            glMultMatrixd.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLOrtho(double left, double right, double bottom, double top, double zNear, double zFar);
        private static GLOrtho glOrtho;

        public static void Ortho(double left, double right, double bottom, double top, double zNear, double zFar) =>
            glOrtho.Invoke(left, right, bottom, top, zNear, zFar);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPopMatrix();
        private static GLPopMatrix glPopMatrix;

        public static void PopMatrix() =>
            glPopMatrix.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushMatrix();
        private static GLPushMatrix glPushMatrix;

        public static void PushMatrix() =>
            glPushMatrix.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRotated(double angle, double x, double y, double z);
        private static GLRotated glRotated;

        public static void Rotated(double angle, double x, double y, double z) =>
            glRotated.Invoke(angle, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRotatef(float angle, float x, float y, float z);
        private static GLRotatef glRotatef;

        public static void Rotatef(float angle, float x, float y, float z) =>
            glRotatef.Invoke(angle, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScaled(double x, double y, double z);
        private static GLScaled glScaled;

        public static void Scaled(double x, double y, double z) =>
            glScaled.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScalef(float x, float y, float z);
        private static GLScalef glScalef;

        public static void Scalef(float x, float y, float z) =>
            glScalef.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTranslated(double x, double y, double z);
        private static GLTranslated glTranslated;

        public static void Translated(double x, double y, double z) =>
            glTranslated.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTranslatef(float x, float y, float z);
        private static GLTranslatef glTranslatef;

        public static void Translatef(float x, float y, float z) =>
            glTranslatef.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArrays(PrimitiveType mode, int first, int count);
        private static GLDrawArrays glDrawArrays;

        public static void DrawArrays(PrimitiveType mode, int first, int count) =>
            glDrawArrays.Invoke(mode, first, count);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElements(PrimitiveType mode, int count, DrawElementsType type, nint indices);
        private static GLDrawElements glDrawElements;

        public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, nint indices) =>
            glDrawElements.Invoke(mode, count, type, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonOffset(float factor, float units);
        private static GLPolygonOffset glPolygonOffset;

        public static void PolygonOffset(float factor, float units) =>
            glPolygonOffset.Invoke(factor, units);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border);
        private static GLCopyTexImage1D glCopyTexImage1D;

        public static void CopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border) =>
            glCopyTexImage1D.Invoke(target, level, internalformat, x, y, width, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border);
        private static GLCopyTexImage2D glCopyTexImage2D;

        public static void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border) =>
            glCopyTexImage2D.Invoke(target, level, internalformat, x, y, width, height, border);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width);
        private static GLCopyTexSubImage1D glCopyTexSubImage1D;

        public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width) =>
            glCopyTexSubImage1D.Invoke(target, level, xoffset, x, y, width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height);
        private static GLCopyTexSubImage2D glCopyTexSubImage2D;

        public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height) =>
            glCopyTexSubImage2D.Invoke(target, level, xoffset, yoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage1D glTexSubImage1D;

        public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage1D.Invoke(target, level, xoffset, width, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage2D glTexSubImage2D;

        public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage2D.Invoke(target, level, xoffset, yoffset, width, height, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindTexture(TextureTarget target, uint texture);
        private static GLBindTexture glBindTexture;

        public static void BindTexture(TextureTarget target, uint texture) =>
            glBindTexture.Invoke(target, texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteTextures(int n, uint[] textures);
        private static GLDeleteTextures glDeleteTextures;

        public static void DeleteTextures(int n, uint[] textures) =>
            glDeleteTextures.Invoke(n, textures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenTextures(int n, out uint textures);
        private static GLGenTextures glGenTextures;

        public static void GenTextures(int n, out uint textures) =>
            glGenTextures.Invoke(n, out textures);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsTexture(uint texture);
        private static GLIsTexture glIsTexture;

        public static bool IsTexture(uint texture) =>
            glIsTexture.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLArrayElement(int i);
        private static GLArrayElement glArrayElement;

        public static void ArrayElement(int i) =>
            glArrayElement.Invoke(i);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorPointer(int size, ColorPointerType type, int stride, nint pointer);
        private static GLColorPointer glColorPointer;

        public static void ColorPointer(int size, ColorPointerType type, int stride, nint pointer) =>
            glColorPointer.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableClientState(EnableCap array);
        private static GLDisableClientState glDisableClientState;

        public static void DisableClientState(EnableCap array) =>
            glDisableClientState.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEdgeFlagPointer(int stride, nint pointer);
        private static GLEdgeFlagPointer glEdgeFlagPointer;

        public static void EdgeFlagPointer(int stride, nint pointer) =>
            glEdgeFlagPointer.Invoke(stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableClientState(EnableCap array);
        private static GLEnableClientState glEnableClientState;

        public static void EnableClientState(EnableCap array) =>
            glEnableClientState.Invoke(array);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexPointer(IndexPointerType type, int stride, nint pointer);
        private static GLIndexPointer glIndexPointer;

        public static void IndexPointer(IndexPointerType type, int stride, nint pointer) =>
            glIndexPointer.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLInterleavedArrays(InterleavedArrayFormat format, int stride, nint pointer);
        private static GLInterleavedArrays glInterleavedArrays;

        public static void InterleavedArrays(InterleavedArrayFormat format, int stride, nint pointer) =>
            glInterleavedArrays.Invoke(format, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormalPointer(NormalPointerType type, int stride, nint pointer);
        private static GLNormalPointer glNormalPointer;

        public static void NormalPointer(NormalPointerType type, int stride, nint pointer) =>
            glNormalPointer.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexCoordPointer(int size, TexCoordPointerType type, int stride, nint pointer);
        private static GLTexCoordPointer glTexCoordPointer;

        public static void TexCoordPointer(int size, TexCoordPointerType type, int stride, nint pointer) =>
            glTexCoordPointer.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexPointer(int size, VertexPointerType type, int stride, nint pointer);
        private static GLVertexPointer glVertexPointer;

        public static void VertexPointer(int size, VertexPointerType type, int stride, nint pointer) =>
            glVertexPointer.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLAreTexturesResident(int n, uint[] textures, out bool residences);
        private static GLAreTexturesResident glAreTexturesResident;

        public static bool AreTexturesResident(int n, uint[] textures, out bool residences) =>
            glAreTexturesResident.Invoke(n, textures, out residences);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrioritizeTextures(int n, uint[] textures, float[] priorities);
        private static GLPrioritizeTextures glPrioritizeTextures;

        public static void PrioritizeTextures(int n, uint[] textures, float[] priorities) =>
            glPrioritizeTextures.Invoke(n, textures, priorities);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexub(byte c);
        private static GLIndexub glIndexub;

        public static void Indexub(byte c) =>
            glIndexub.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLIndexubv(byte[] c);
        private static GLIndexubv glIndexubv;

        public static void Indexubv(byte[] c) =>
            glIndexubv.Invoke(c);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPopClientAttrib();
        private static GLPopClientAttrib glPopClientAttrib;

        public static void PopClientAttrib() =>
            glPopClientAttrib.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPushClientAttrib(ClientAttribMask mask);
        private static GLPushClientAttrib glPushClientAttrib;

        public static void PushClientAttrib(ClientAttribMask mask) =>
            glPushClientAttrib.Invoke(mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices);
        private static GLDrawRangeElements glDrawRangeElements;

        public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, nint indices) =>
            glDrawRangeElements.Invoke(mode, start, end, count, type, indices);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels);
        private static GLTexImage3D glTexImage3D;

        public static void TexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, nint pixels) =>
            glTexImage3D.Invoke(target, level, internalformat, width, height, depth, border, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels);
        private static GLTexSubImage3D glTexSubImage3D;

        public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, nint pixels) =>
            glTexSubImage3D.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);
        private static GLCopyTexSubImage3D glCopyTexSubImage3D;

        public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) =>
            glCopyTexSubImage3D.Invoke(target, level, xoffset, yoffset, zoffset, x, y, width, height);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLActiveTexture(TextureUnit texture);
        private static GLActiveTexture glActiveTexture;

        public static void ActiveTexture(TextureUnit texture) =>
            glActiveTexture.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleCoverage(float value, bool invert);
        private static GLSampleCoverage glSampleCoverage;

        public static void SampleCoverage(float value, bool invert) =>
            glSampleCoverage.Invoke(value, invert);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data);
        private static GLCompressedTexImage3D glCompressedTexImage3D;

        public static void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, nint data) =>
            glCompressedTexImage3D.Invoke(target, level, internalformat, width, height, depth, border, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint data);
        private static GLCompressedTexImage2D glCompressedTexImage2D;

        public static void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, nint data) =>
            glCompressedTexImage2D.Invoke(target, level, internalformat, width, height, border, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint data);
        private static GLCompressedTexImage1D glCompressedTexImage1D;

        public static void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, nint data) =>
            glCompressedTexImage1D.Invoke(target, level, internalformat, width, border, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTexSubImage3D glCompressedTexSubImage3D;

        public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, nint data) =>
            glCompressedTexSubImage3D.Invoke(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTexSubImage2D glCompressedTexSubImage2D;

        public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, nint data) =>
            glCompressedTexSubImage2D.Invoke(target, level, xoffset, yoffset, width, height, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data);
        private static GLCompressedTexSubImage1D glCompressedTexSubImage1D;

        public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, nint data) =>
            glCompressedTexSubImage1D.Invoke(target, level, xoffset, width, format, imageSize, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetCompressedTexImage(TextureTarget target, int level, out nint img);
        private static GLGetCompressedTexImage glGetCompressedTexImage;

        public static void GetCompressedTexImage(TextureTarget target, int level, out nint img) =>
            glGetCompressedTexImage.Invoke(target, level, out img);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClientActiveTexture(TextureUnit texture);
        private static GLClientActiveTexture glClientActiveTexture;

        public static void ClientActiveTexture(TextureUnit texture) =>
            glClientActiveTexture.Invoke(texture);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1d(TextureUnit target, double s);
        private static GLMultiTexCoord1d glMultiTexCoord1d;

        public static void MultiTexCoord1d(TextureUnit target, double s) =>
            glMultiTexCoord1d.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1dv(TextureUnit target, double[] v);
        private static GLMultiTexCoord1dv glMultiTexCoord1dv;

        public static void MultiTexCoord1dv(TextureUnit target, double[] v) =>
            glMultiTexCoord1dv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1f(TextureUnit target, float s);
        private static GLMultiTexCoord1f glMultiTexCoord1f;

        public static void MultiTexCoord1f(TextureUnit target, float s) =>
            glMultiTexCoord1f.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1fv(TextureUnit target, float[] v);
        private static GLMultiTexCoord1fv glMultiTexCoord1fv;

        public static void MultiTexCoord1fv(TextureUnit target, float[] v) =>
            glMultiTexCoord1fv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1i(TextureUnit target, int s);
        private static GLMultiTexCoord1i glMultiTexCoord1i;

        public static void MultiTexCoord1i(TextureUnit target, int s) =>
            glMultiTexCoord1i.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1iv(TextureUnit target, int[] v);
        private static GLMultiTexCoord1iv glMultiTexCoord1iv;

        public static void MultiTexCoord1iv(TextureUnit target, int[] v) =>
            glMultiTexCoord1iv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1s(TextureUnit target, short s);
        private static GLMultiTexCoord1s glMultiTexCoord1s;

        public static void MultiTexCoord1s(TextureUnit target, short s) =>
            glMultiTexCoord1s.Invoke(target, s);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord1sv(TextureUnit target, short[] v);
        private static GLMultiTexCoord1sv glMultiTexCoord1sv;

        public static void MultiTexCoord1sv(TextureUnit target, short[] v) =>
            glMultiTexCoord1sv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2d(TextureUnit target, double s, double t);
        private static GLMultiTexCoord2d glMultiTexCoord2d;

        public static void MultiTexCoord2d(TextureUnit target, double s, double t) =>
            glMultiTexCoord2d.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2dv(TextureUnit target, double[] v);
        private static GLMultiTexCoord2dv glMultiTexCoord2dv;

        public static void MultiTexCoord2dv(TextureUnit target, double[] v) =>
            glMultiTexCoord2dv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2f(TextureUnit target, float s, float t);
        private static GLMultiTexCoord2f glMultiTexCoord2f;

        public static void MultiTexCoord2f(TextureUnit target, float s, float t) =>
            glMultiTexCoord2f.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2fv(TextureUnit target, float[] v);
        private static GLMultiTexCoord2fv glMultiTexCoord2fv;

        public static void MultiTexCoord2fv(TextureUnit target, float[] v) =>
            glMultiTexCoord2fv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2i(TextureUnit target, int s, int t);
        private static GLMultiTexCoord2i glMultiTexCoord2i;

        public static void MultiTexCoord2i(TextureUnit target, int s, int t) =>
            glMultiTexCoord2i.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2iv(TextureUnit target, int[] v);
        private static GLMultiTexCoord2iv glMultiTexCoord2iv;

        public static void MultiTexCoord2iv(TextureUnit target, int[] v) =>
            glMultiTexCoord2iv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2s(TextureUnit target, short s, short t);
        private static GLMultiTexCoord2s glMultiTexCoord2s;

        public static void MultiTexCoord2s(TextureUnit target, short s, short t) =>
            glMultiTexCoord2s.Invoke(target, s, t);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord2sv(TextureUnit target, short[] v);
        private static GLMultiTexCoord2sv glMultiTexCoord2sv;

        public static void MultiTexCoord2sv(TextureUnit target, short[] v) =>
            glMultiTexCoord2sv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3d(TextureUnit target, double s, double t, double r);
        private static GLMultiTexCoord3d glMultiTexCoord3d;

        public static void MultiTexCoord3d(TextureUnit target, double s, double t, double r) =>
            glMultiTexCoord3d.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3dv(TextureUnit target, double[] v);
        private static GLMultiTexCoord3dv glMultiTexCoord3dv;

        public static void MultiTexCoord3dv(TextureUnit target, double[] v) =>
            glMultiTexCoord3dv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3f(TextureUnit target, float s, float t, float r);
        private static GLMultiTexCoord3f glMultiTexCoord3f;

        public static void MultiTexCoord3f(TextureUnit target, float s, float t, float r) =>
            glMultiTexCoord3f.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3fv(TextureUnit target, float[] v);
        private static GLMultiTexCoord3fv glMultiTexCoord3fv;

        public static void MultiTexCoord3fv(TextureUnit target, float[] v) =>
            glMultiTexCoord3fv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3i(TextureUnit target, int s, int t, int r);
        private static GLMultiTexCoord3i glMultiTexCoord3i;

        public static void MultiTexCoord3i(TextureUnit target, int s, int t, int r) =>
            glMultiTexCoord3i.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3iv(TextureUnit target, int[] v);
        private static GLMultiTexCoord3iv glMultiTexCoord3iv;

        public static void MultiTexCoord3iv(TextureUnit target, int[] v) =>
            glMultiTexCoord3iv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3s(TextureUnit target, short s, short t, short r);
        private static GLMultiTexCoord3s glMultiTexCoord3s;

        public static void MultiTexCoord3s(TextureUnit target, short s, short t, short r) =>
            glMultiTexCoord3s.Invoke(target, s, t, r);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord3sv(TextureUnit target, short[] v);
        private static GLMultiTexCoord3sv glMultiTexCoord3sv;

        public static void MultiTexCoord3sv(TextureUnit target, short[] v) =>
            glMultiTexCoord3sv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4d(TextureUnit target, double s, double t, double r, double q);
        private static GLMultiTexCoord4d glMultiTexCoord4d;

        public static void MultiTexCoord4d(TextureUnit target, double s, double t, double r, double q) =>
            glMultiTexCoord4d.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4dv(TextureUnit target, double[] v);
        private static GLMultiTexCoord4dv glMultiTexCoord4dv;

        public static void MultiTexCoord4dv(TextureUnit target, double[] v) =>
            glMultiTexCoord4dv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4f(TextureUnit target, float s, float t, float r, float q);
        private static GLMultiTexCoord4f glMultiTexCoord4f;

        public static void MultiTexCoord4f(TextureUnit target, float s, float t, float r, float q) =>
            glMultiTexCoord4f.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4fv(TextureUnit target, float[] v);
        private static GLMultiTexCoord4fv glMultiTexCoord4fv;

        public static void MultiTexCoord4fv(TextureUnit target, float[] v) =>
            glMultiTexCoord4fv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4i(TextureUnit target, int s, int t, int r, int q);
        private static GLMultiTexCoord4i glMultiTexCoord4i;

        public static void MultiTexCoord4i(TextureUnit target, int s, int t, int r, int q) =>
            glMultiTexCoord4i.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4iv(TextureUnit target, int[] v);
        private static GLMultiTexCoord4iv glMultiTexCoord4iv;

        public static void MultiTexCoord4iv(TextureUnit target, int[] v) =>
            glMultiTexCoord4iv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4s(TextureUnit target, short s, short t, short r, short q);
        private static GLMultiTexCoord4s glMultiTexCoord4s;

        public static void MultiTexCoord4s(TextureUnit target, short s, short t, short r, short q) =>
            glMultiTexCoord4s.Invoke(target, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4sv(TextureUnit target, short[] v);
        private static GLMultiTexCoord4sv glMultiTexCoord4sv;

        public static void MultiTexCoord4sv(TextureUnit target, short[] v) =>
            glMultiTexCoord4sv.Invoke(target, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadTransposeMatrixf(float[] m);
        private static GLLoadTransposeMatrixf glLoadTransposeMatrixf;

        public static void LoadTransposeMatrixf(float[] m) =>
            glLoadTransposeMatrixf.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadTransposeMatrixd(double[] m);
        private static GLLoadTransposeMatrixd glLoadTransposeMatrixd;

        public static void LoadTransposeMatrixd(double[] m) =>
            glLoadTransposeMatrixd.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultTransposeMatrixf(float[] m);
        private static GLMultTransposeMatrixf glMultTransposeMatrixf;

        public static void MultTransposeMatrixf(float[] m) =>
            glMultTransposeMatrixf.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultTransposeMatrixd(double[] m);
        private static GLMultTransposeMatrixd glMultTransposeMatrixd;

        public static void MultTransposeMatrixd(double[] m) =>
            glMultTransposeMatrixd.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha);
        private static GLBlendFuncSeparate glBlendFuncSeparate;

        public static void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) =>
            glBlendFuncSeparate.Invoke(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount);
        private static GLMultiDrawArrays glMultiDrawArrays;

        public static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount) =>
            glMultiDrawArrays.Invoke(mode, first, count, drawcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int drawcount);
        private static GLMultiDrawElements glMultiDrawElements;

        public static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, nint indices, int drawcount) =>
            glMultiDrawElements.Invoke(mode, count, type, indices, drawcount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterf(PointParameterNameARB pname, float param);
        private static GLPointParameterf glPointParameterf;

        public static void PointParameterf(PointParameterNameARB pname, float param) =>
            glPointParameterf.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterfv(PointParameterNameARB pname, float[] parameters);
        private static GLPointParameterfv glPointParameterfv;

        public static void PointParameterfv(PointParameterNameARB pname, float[] parameters) =>
            glPointParameterfv.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameteri(PointParameterNameARB pname, int param);
        private static GLPointParameteri glPointParameteri;

        public static void PointParameteri(PointParameterNameARB pname, int param) =>
            glPointParameteri.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameteriv(PointParameterNameARB pname, int[] parameters);
        private static GLPointParameteriv glPointParameteriv;

        public static void PointParameteriv(PointParameterNameARB pname, int[] parameters) =>
            glPointParameteriv.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordf(float coord);
        private static GLFogCoordf glFogCoordf;

        public static void FogCoordf(float coord) =>
            glFogCoordf.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordfv(float[] coord);
        private static GLFogCoordfv glFogCoordfv;

        public static void FogCoordfv(float[] coord) =>
            glFogCoordfv.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordd(double coord);
        private static GLFogCoordd glFogCoordd;

        public static void FogCoordd(double coord) =>
            glFogCoordd.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoorddv(double[] coord);
        private static GLFogCoorddv glFogCoorddv;

        public static void FogCoorddv(double[] coord) =>
            glFogCoorddv.Invoke(coord);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogCoordPointer(FogPointerTypeEXT type, int stride, nint pointer);
        private static GLFogCoordPointer glFogCoordPointer;

        public static void FogCoordPointer(FogPointerTypeEXT type, int stride, nint pointer) =>
            glFogCoordPointer.Invoke(type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3b(sbyte red, sbyte green, sbyte blue);
        private static GLSecondaryColor3b glSecondaryColor3b;

        public static void SecondaryColor3b(sbyte red, sbyte green, sbyte blue) =>
            glSecondaryColor3b.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3bv(sbyte[] v);
        private static GLSecondaryColor3bv glSecondaryColor3bv;

        public static void SecondaryColor3bv(sbyte[] v) =>
            glSecondaryColor3bv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3d(double red, double green, double blue);
        private static GLSecondaryColor3d glSecondaryColor3d;

        public static void SecondaryColor3d(double red, double green, double blue) =>
            glSecondaryColor3d.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3dv(double[] v);
        private static GLSecondaryColor3dv glSecondaryColor3dv;

        public static void SecondaryColor3dv(double[] v) =>
            glSecondaryColor3dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3f(float red, float green, float blue);
        private static GLSecondaryColor3f glSecondaryColor3f;

        public static void SecondaryColor3f(float red, float green, float blue) =>
            glSecondaryColor3f.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3fv(float[] v);
        private static GLSecondaryColor3fv glSecondaryColor3fv;

        public static void SecondaryColor3fv(float[] v) =>
            glSecondaryColor3fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3i(int red, int green, int blue);
        private static GLSecondaryColor3i glSecondaryColor3i;

        public static void SecondaryColor3i(int red, int green, int blue) =>
            glSecondaryColor3i.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3iv(int[] v);
        private static GLSecondaryColor3iv glSecondaryColor3iv;

        public static void SecondaryColor3iv(int[] v) =>
            glSecondaryColor3iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3s(short red, short green, short blue);
        private static GLSecondaryColor3s glSecondaryColor3s;

        public static void SecondaryColor3s(short red, short green, short blue) =>
            glSecondaryColor3s.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3sv(short[] v);
        private static GLSecondaryColor3sv glSecondaryColor3sv;

        public static void SecondaryColor3sv(short[] v) =>
            glSecondaryColor3sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3ub(byte red, byte green, byte blue);
        private static GLSecondaryColor3ub glSecondaryColor3ub;

        public static void SecondaryColor3ub(byte red, byte green, byte blue) =>
            glSecondaryColor3ub.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3ubv(byte[] v);
        private static GLSecondaryColor3ubv glSecondaryColor3ubv;

        public static void SecondaryColor3ubv(byte[] v) =>
            glSecondaryColor3ubv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3ui(uint red, uint green, uint blue);
        private static GLSecondaryColor3ui glSecondaryColor3ui;

        public static void SecondaryColor3ui(uint red, uint green, uint blue) =>
            glSecondaryColor3ui.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3uiv(uint[] v);
        private static GLSecondaryColor3uiv glSecondaryColor3uiv;

        public static void SecondaryColor3uiv(uint[] v) =>
            glSecondaryColor3uiv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3us(ushort red, ushort green, ushort blue);
        private static GLSecondaryColor3us glSecondaryColor3us;

        public static void SecondaryColor3us(ushort red, ushort green, ushort blue) =>
            glSecondaryColor3us.Invoke(red, green, blue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColor3usv(ushort[] v);
        private static GLSecondaryColor3usv glSecondaryColor3usv;

        public static void SecondaryColor3usv(ushort[] v) =>
            glSecondaryColor3usv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSecondaryColorPointer(int size, ColorPointerType type, int stride, nint pointer);
        private static GLSecondaryColorPointer glSecondaryColorPointer;

        public static void SecondaryColorPointer(int size, ColorPointerType type, int stride, nint pointer) =>
            glSecondaryColorPointer.Invoke(size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2d(double x, double y);
        private static GLWindowPos2d glWindowPos2d;

        public static void WindowPos2d(double x, double y) =>
            glWindowPos2d.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2dv(double[] v);
        private static GLWindowPos2dv glWindowPos2dv;

        public static void WindowPos2dv(double[] v) =>
            glWindowPos2dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2f(float x, float y);
        private static GLWindowPos2f glWindowPos2f;

        public static void WindowPos2f(float x, float y) =>
            glWindowPos2f.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2fv(float[] v);
        private static GLWindowPos2fv glWindowPos2fv;

        public static void WindowPos2fv(float[] v) =>
            glWindowPos2fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2i(int x, int y);
        private static GLWindowPos2i glWindowPos2i;

        public static void WindowPos2i(int x, int y) =>
            glWindowPos2i.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2iv(int[] v);
        private static GLWindowPos2iv glWindowPos2iv;

        public static void WindowPos2iv(int[] v) =>
            glWindowPos2iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2s(short x, short y);
        private static GLWindowPos2s glWindowPos2s;

        public static void WindowPos2s(short x, short y) =>
            glWindowPos2s.Invoke(x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos2sv(short[] v);
        private static GLWindowPos2sv glWindowPos2sv;

        public static void WindowPos2sv(short[] v) =>
            glWindowPos2sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3d(double x, double y, double z);
        private static GLWindowPos3d glWindowPos3d;

        public static void WindowPos3d(double x, double y, double z) =>
            glWindowPos3d.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3dv(double[] v);
        private static GLWindowPos3dv glWindowPos3dv;

        public static void WindowPos3dv(double[] v) =>
            glWindowPos3dv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3f(float x, float y, float z);
        private static GLWindowPos3f glWindowPos3f;

        public static void WindowPos3f(float x, float y, float z) =>
            glWindowPos3f.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3fv(float[] v);
        private static GLWindowPos3fv glWindowPos3fv;

        public static void WindowPos3fv(float[] v) =>
            glWindowPos3fv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3i(int x, int y, int z);
        private static GLWindowPos3i glWindowPos3i;

        public static void WindowPos3i(int x, int y, int z) =>
            glWindowPos3i.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3iv(int[] v);
        private static GLWindowPos3iv glWindowPos3iv;

        public static void WindowPos3iv(int[] v) =>
            glWindowPos3iv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3s(short x, short y, short z);
        private static GLWindowPos3s glWindowPos3s;

        public static void WindowPos3s(short x, short y, short z) =>
            glWindowPos3s.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLWindowPos3sv(short[] v);
        private static GLWindowPos3sv glWindowPos3sv;

        public static void WindowPos3sv(short[] v) =>
            glWindowPos3sv.Invoke(v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenQueries(int n, out uint ids);
        private static GLGenQueries glGenQueries;

        public static void GenQueries(int n, out uint ids) =>
            glGenQueries.Invoke(n, out ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteQueries(int n, uint[] ids);
        private static GLDeleteQueries glDeleteQueries;

        public static void DeleteQueries(int n, uint[] ids) =>
            glDeleteQueries.Invoke(n, ids);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsQuery(uint id);
        private static GLIsQuery glIsQuery;

        public static bool IsQuery(uint id) =>
            glIsQuery.Invoke(id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginQuery(QueryTarget target, uint id);
        private static GLBeginQuery glBeginQuery;

        public static void BeginQuery(QueryTarget target, uint id) =>
            glBeginQuery.Invoke(target, id);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndQuery(QueryTarget target);
        private static GLEndQuery glEndQuery;

        public static void EndQuery(QueryTarget target) =>
            glEndQuery.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryiv(QueryTarget target, QueryParameterName pname, out int parameters);
        private static GLGetQueryiv glGetQueryiv;

        public static void GetQueryiv(QueryTarget target, QueryParameterName pname, out int parameters) =>
            glGetQueryiv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectiv(uint id, QueryObjectParameterName pname, out int parameters);
        private static GLGetQueryObjectiv glGetQueryObjectiv;

        public static void GetQueryObjectiv(uint id, QueryObjectParameterName pname, out int parameters) =>
            glGetQueryObjectiv.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetQueryObjectuiv(uint id, QueryObjectParameterName pname, out uint parameters);
        private static GLGetQueryObjectuiv glGetQueryObjectuiv;

        public static void GetQueryObjectuiv(uint id, QueryObjectParameterName pname, out uint parameters) =>
            glGetQueryObjectuiv.Invoke(id, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindBuffer(BufferTargetARB target, uint buffer);
        private static GLBindBuffer glBindBuffer;

        public static void BindBuffer(BufferTargetARB target, uint buffer) =>
            glBindBuffer.Invoke(target, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteBuffers(int n, uint[] buffers);
        private static GLDeleteBuffers glDeleteBuffers;

        public static void DeleteBuffers(int n, uint[] buffers) =>
            glDeleteBuffers.Invoke(n, buffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGenBuffers(int n, out uint buffers);
        private static GLGenBuffers glGenBuffers;

        public static void GenBuffers(int n, out uint buffers) =>
            glGenBuffers.Invoke(n, out buffers);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsBuffer(uint buffer);
        private static GLIsBuffer glIsBuffer;

        public static bool IsBuffer(uint buffer) =>
            glIsBuffer.Invoke(buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferData(BufferTargetARB target, nint size, nint data, BufferUsageARB usage);
        private static GLBufferData glBufferData;

        public static void BufferData(BufferTargetARB target, nint size, nint data, BufferUsageARB usage) =>
            glBufferData.Invoke(target, size, data, usage);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBufferSubData(BufferTargetARB target, nint offset, nint size, nint data);
        private static GLBufferSubData glBufferSubData;

        public static void BufferSubData(BufferTargetARB target, nint offset, nint size, nint data) =>
            glBufferSubData.Invoke(target, offset, size, data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferSubData(BufferTargetARB target, nint offset, nint size, out nint data);
        private static GLGetBufferSubData glGetBufferSubData;

        public static void GetBufferSubData(BufferTargetARB target, nint offset, nint size, out nint data) =>
            glGetBufferSubData.Invoke(target, offset, size, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLMapBuffer(BufferTargetARB target, BufferAccessARB access);
        private static GLMapBuffer glMapBuffer;

        public static nint MapBuffer(BufferTargetARB target, BufferAccessARB access) =>
            glMapBuffer.Invoke(target, access);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLUnmapBuffer(BufferTargetARB target);
        private static GLUnmapBuffer glUnmapBuffer;

        public static bool UnmapBuffer(BufferTargetARB target) =>
            glUnmapBuffer.Invoke(target);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, out int parameters);
        private static GLGetBufferParameteriv glGetBufferParameteriv;

        public static void GetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, out int parameters) =>
            glGetBufferParameteriv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferPointerv(BufferTargetARB target, BufferPointerNameARB pname, out nint parameters);
        private static GLGetBufferPointerv glGetBufferPointerv;

        public static void GetBufferPointerv(BufferTargetARB target, BufferPointerNameARB pname, out nint parameters) =>
            glGetBufferPointerv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparate glBlendEquationSeparate;

        public static void BlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparate.Invoke(modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawBuffers(int n, DrawBufferMode[] bufs);
        private static GLDrawBuffers glDrawBuffers;

        public static void DrawBuffers(int n, DrawBufferMode[] bufs) =>
            glDrawBuffers.Invoke(n, bufs);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilOpSeparate(TriangleFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass);
        private static GLStencilOpSeparate glStencilOpSeparate;

        public static void StencilOpSeparate(TriangleFace face, StencilOp sfail, StencilOp dpfail, StencilOp dppass) =>
            glStencilOpSeparate.Invoke(face, sfail, dpfail, dppass);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilFuncSeparate(TriangleFace face, StencilFunction func, int reference, uint mask);
        private static GLStencilFuncSeparate glStencilFuncSeparate;

        public static void StencilFuncSeparate(TriangleFace face, StencilFunction func, int reference, uint mask) =>
            glStencilFuncSeparate.Invoke(face, func, reference, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLStencilMaskSeparate(TriangleFace face, uint mask);
        private static GLStencilMaskSeparate glStencilMaskSeparate;

        public static void StencilMaskSeparate(TriangleFace face, uint mask) =>
            glStencilMaskSeparate.Invoke(face, mask);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAttachShader(uint program, uint shader);
        private static GLAttachShader glAttachShader;

        public static void AttachShader(uint program, uint shader) =>
            glAttachShader.Invoke(program, shader);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindAttribLocation(uint program, uint index, sbyte[] name);
        private static GLBindAttribLocation glBindAttribLocation;

        public static void BindAttribLocation(uint program, uint index, sbyte[] name) =>
            glBindAttribLocation.Invoke(program, index, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLCompileShader(uint shader);
        private static GLCompileShader glCompileShader;

        public static void CompileShader(uint shader) =>
            glCompileShader.Invoke(shader);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLCreateProgram();
        private static GLCreateProgram glCreateProgram;

        public static uint CreateProgram() =>
            glCreateProgram.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate uint GLCreateShader(ShaderType type);
        private static GLCreateShader glCreateShader;

        public static uint CreateShader(ShaderType type) =>
            glCreateShader.Invoke(type);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteProgram(uint program);
        private static GLDeleteProgram glDeleteProgram;

        public static void DeleteProgram(uint program) =>
            glDeleteProgram.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDeleteShader(uint shader);
        private static GLDeleteShader glDeleteShader;

        public static void DeleteShader(uint shader) =>
            glDeleteShader.Invoke(shader);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDetachShader(uint program, uint shader);
        private static GLDetachShader glDetachShader;

        public static void DetachShader(uint program, uint shader) =>
            glDetachShader.Invoke(program, shader);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisableVertexAttribArray(uint index);
        private static GLDisableVertexAttribArray glDisableVertexAttribArray;

        public static void DisableVertexAttribArray(uint index) =>
            glDisableVertexAttribArray.Invoke(index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnableVertexAttribArray(uint index);
        private static GLEnableVertexAttribArray glEnableVertexAttribArray;

        public static void EnableVertexAttribArray(uint index) =>
            glEnableVertexAttribArray.Invoke(index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out AttributeType type, out sbyte name);
        private static GLGetActiveAttrib glGetActiveAttrib;

        public static void GetActiveAttrib(uint program, uint index, int bufSize, out int length, out int size, out AttributeType type, out sbyte name) =>
            glGetActiveAttrib.Invoke(program, index, bufSize, out length, out size, out type, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out UniformType type, out sbyte name);
        private static GLGetActiveUniform glGetActiveUniform;

        public static void GetActiveUniform(uint program, uint index, int bufSize, out int length, out int size, out UniformType type, out sbyte name) =>
            glGetActiveUniform.Invoke(program, index, bufSize, out length, out size, out type, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetAttachedShaders(uint program, int maxCount, out int count, out uint shaders);
        private static GLGetAttachedShaders glGetAttachedShaders;

        public static void GetAttachedShaders(uint program, int maxCount, out int count, out uint shaders) =>
            glGetAttachedShaders.Invoke(program, maxCount, out count, out shaders);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetAttribLocation(uint program, sbyte[] name);
        private static GLGetAttribLocation glGetAttribLocation;

        public static int GetAttribLocation(uint program, sbyte[] name) =>
            glGetAttribLocation.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramiv(uint program, ProgramPropertyARB pname, out int parameters);
        private static GLGetProgramiv glGetProgramiv;

        public static void GetProgramiv(uint program, ProgramPropertyARB pname, out int parameters) =>
            glGetProgramiv.Invoke(program, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetProgramInfoLog(uint program, int bufSize, out int length, out sbyte infoLog);
        private static GLGetProgramInfoLog glGetProgramInfoLog;

        public static void GetProgramInfoLog(uint program, int bufSize, out int length, out sbyte infoLog) =>
            glGetProgramInfoLog.Invoke(program, bufSize, out length, out infoLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetShaderiv(uint shader, ShaderParameterName pname, out int parameters);
        private static GLGetShaderiv glGetShaderiv;

        public static void GetShaderiv(uint shader, ShaderParameterName pname, out int parameters) =>
            glGetShaderiv.Invoke(shader, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetShaderInfoLog(uint shader, int bufSize, out int length, out sbyte infoLog);
        private static GLGetShaderInfoLog glGetShaderInfoLog;

        public static void GetShaderInfoLog(uint shader, int bufSize, out int length, out sbyte infoLog) =>
            glGetShaderInfoLog.Invoke(shader, bufSize, out length, out infoLog);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetShaderSource(uint shader, int bufSize, out int length, out sbyte source);
        private static GLGetShaderSource glGetShaderSource;

        public static void GetShaderSource(uint shader, int bufSize, out int length, out sbyte source) =>
            glGetShaderSource.Invoke(shader, bufSize, out length, out source);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetUniformLocation(uint program, sbyte[] name);
        private static GLGetUniformLocation glGetUniformLocation;

        public static int GetUniformLocation(uint program, sbyte[] name) =>
            glGetUniformLocation.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformfv(uint program, int location, out float parameters);
        private static GLGetUniformfv glGetUniformfv;

        public static void GetUniformfv(uint program, int location, out float parameters) =>
            glGetUniformfv.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformiv(uint program, int location, out int parameters);
        private static GLGetUniformiv glGetUniformiv;

        public static void GetUniformiv(uint program, int location, out int parameters) =>
            glGetUniformiv.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribdv(uint index, VertexAttribPropertyARB pname, out double parameters);
        private static GLGetVertexAttribdv glGetVertexAttribdv;

        public static void GetVertexAttribdv(uint index, VertexAttribPropertyARB pname, out double parameters) =>
            glGetVertexAttribdv.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribfv(uint index, VertexAttribPropertyARB pname, out float parameters);
        private static GLGetVertexAttribfv glGetVertexAttribfv;

        public static void GetVertexAttribfv(uint index, VertexAttribPropertyARB pname, out float parameters) =>
            glGetVertexAttribfv.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribiv(uint index, VertexAttribPropertyARB pname, out int parameters);
        private static GLGetVertexAttribiv glGetVertexAttribiv;

        public static void GetVertexAttribiv(uint index, VertexAttribPropertyARB pname, out int parameters) =>
            glGetVertexAttribiv.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribPointerv(uint index, VertexAttribPointerPropertyARB pname, out nint pointer);
        private static GLGetVertexAttribPointerv glGetVertexAttribPointerv;

        public static void GetVertexAttribPointerv(uint index, VertexAttribPointerPropertyARB pname, out nint pointer) =>
            glGetVertexAttribPointerv.Invoke(index, pname, out pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsProgram(uint program);
        private static GLIsProgram glIsProgram;

        public static bool IsProgram(uint program) =>
            glIsProgram.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsShader(uint shader);
        private static GLIsShader glIsShader;

        public static bool IsShader(uint shader) =>
            glIsShader.Invoke(shader);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLinkProgram(uint program);
        private static GLLinkProgram glLinkProgram;

        public static void LinkProgram(uint program) =>
            glLinkProgram.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLShaderSource(uint shader, int count, sbyte str, int[] length);
        private static GLShaderSource glShaderSource;

        public static void ShaderSource(uint shader, int count, sbyte str, int[] length) =>
            glShaderSource.Invoke(shader, count, str, length);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUseProgram(uint program);
        private static GLUseProgram glUseProgram;

        public static void UseProgram(uint program) =>
            glUseProgram.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1f(int location, float v0);
        private static GLUniform1f glUniform1f;

        public static void Uniform1f(int location, float v0) =>
            glUniform1f.Invoke(location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2f(int location, float v0, float v1);
        private static GLUniform2f glUniform2f;

        public static void Uniform2f(int location, float v0, float v1) =>
            glUniform2f.Invoke(location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3f(int location, float v0, float v1, float v2);
        private static GLUniform3f glUniform3f;

        public static void Uniform3f(int location, float v0, float v1, float v2) =>
            glUniform3f.Invoke(location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4f(int location, float v0, float v1, float v2, float v3);
        private static GLUniform4f glUniform4f;

        public static void Uniform4f(int location, float v0, float v1, float v2, float v3) =>
            glUniform4f.Invoke(location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1i(int location, int v0);
        private static GLUniform1i glUniform1i;

        public static void Uniform1i(int location, int v0) =>
            glUniform1i.Invoke(location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2i(int location, int v0, int v1);
        private static GLUniform2i glUniform2i;

        public static void Uniform2i(int location, int v0, int v1) =>
            glUniform2i.Invoke(location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3i(int location, int v0, int v1, int v2);
        private static GLUniform3i glUniform3i;

        public static void Uniform3i(int location, int v0, int v1, int v2) =>
            glUniform3i.Invoke(location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4i(int location, int v0, int v1, int v2, int v3);
        private static GLUniform4i glUniform4i;

        public static void Uniform4i(int location, int v0, int v1, int v2, int v3) =>
            glUniform4i.Invoke(location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1fv(int location, int count, float[] value);
        private static GLUniform1fv glUniform1fv;

        public static void Uniform1fv(int location, int count, float[] value) =>
            glUniform1fv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2fv(int location, int count, float[] value);
        private static GLUniform2fv glUniform2fv;

        public static void Uniform2fv(int location, int count, float[] value) =>
            glUniform2fv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3fv(int location, int count, float[] value);
        private static GLUniform3fv glUniform3fv;

        public static void Uniform3fv(int location, int count, float[] value) =>
            glUniform3fv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4fv(int location, int count, float[] value);
        private static GLUniform4fv glUniform4fv;

        public static void Uniform4fv(int location, int count, float[] value) =>
            glUniform4fv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1iv(int location, int count, int[] value);
        private static GLUniform1iv glUniform1iv;

        public static void Uniform1iv(int location, int count, int[] value) =>
            glUniform1iv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2iv(int location, int count, int[] value);
        private static GLUniform2iv glUniform2iv;

        public static void Uniform2iv(int location, int count, int[] value) =>
            glUniform2iv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3iv(int location, int count, int[] value);
        private static GLUniform3iv glUniform3iv;

        public static void Uniform3iv(int location, int count, int[] value) =>
            glUniform3iv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4iv(int location, int count, int[] value);
        private static GLUniform4iv glUniform4iv;

        public static void Uniform4iv(int location, int count, int[] value) =>
            glUniform4iv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix2fv glUniformMatrix2fv;

        public static void UniformMatrix2fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix2fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix3fv glUniformMatrix3fv;

        public static void UniformMatrix3fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix3fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix4fv glUniformMatrix4fv;

        public static void UniformMatrix4fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix4fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLValidateProgram(uint program);
        private static GLValidateProgram glValidateProgram;

        public static void ValidateProgram(uint program) =>
            glValidateProgram.Invoke(program);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1d(uint index, double x);
        private static GLVertexAttrib1d glVertexAttrib1d;

        public static void VertexAttrib1d(uint index, double x) =>
            glVertexAttrib1d.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1dv(uint index, double[] v);
        private static GLVertexAttrib1dv glVertexAttrib1dv;

        public static void VertexAttrib1dv(uint index, double[] v) =>
            glVertexAttrib1dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1f(uint index, float x);
        private static GLVertexAttrib1f glVertexAttrib1f;

        public static void VertexAttrib1f(uint index, float x) =>
            glVertexAttrib1f.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1fv(uint index, float[] v);
        private static GLVertexAttrib1fv glVertexAttrib1fv;

        public static void VertexAttrib1fv(uint index, float[] v) =>
            glVertexAttrib1fv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1s(uint index, short x);
        private static GLVertexAttrib1s glVertexAttrib1s;

        public static void VertexAttrib1s(uint index, short x) =>
            glVertexAttrib1s.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib1sv(uint index, short[] v);
        private static GLVertexAttrib1sv glVertexAttrib1sv;

        public static void VertexAttrib1sv(uint index, short[] v) =>
            glVertexAttrib1sv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2d(uint index, double x, double y);
        private static GLVertexAttrib2d glVertexAttrib2d;

        public static void VertexAttrib2d(uint index, double x, double y) =>
            glVertexAttrib2d.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2dv(uint index, double[] v);
        private static GLVertexAttrib2dv glVertexAttrib2dv;

        public static void VertexAttrib2dv(uint index, double[] v) =>
            glVertexAttrib2dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2f(uint index, float x, float y);
        private static GLVertexAttrib2f glVertexAttrib2f;

        public static void VertexAttrib2f(uint index, float x, float y) =>
            glVertexAttrib2f.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2fv(uint index, float[] v);
        private static GLVertexAttrib2fv glVertexAttrib2fv;

        public static void VertexAttrib2fv(uint index, float[] v) =>
            glVertexAttrib2fv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2s(uint index, short x, short y);
        private static GLVertexAttrib2s glVertexAttrib2s;

        public static void VertexAttrib2s(uint index, short x, short y) =>
            glVertexAttrib2s.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib2sv(uint index, short[] v);
        private static GLVertexAttrib2sv glVertexAttrib2sv;

        public static void VertexAttrib2sv(uint index, short[] v) =>
            glVertexAttrib2sv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3d(uint index, double x, double y, double z);
        private static GLVertexAttrib3d glVertexAttrib3d;

        public static void VertexAttrib3d(uint index, double x, double y, double z) =>
            glVertexAttrib3d.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3dv(uint index, double[] v);
        private static GLVertexAttrib3dv glVertexAttrib3dv;

        public static void VertexAttrib3dv(uint index, double[] v) =>
            glVertexAttrib3dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3f(uint index, float x, float y, float z);
        private static GLVertexAttrib3f glVertexAttrib3f;

        public static void VertexAttrib3f(uint index, float x, float y, float z) =>
            glVertexAttrib3f.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3fv(uint index, float[] v);
        private static GLVertexAttrib3fv glVertexAttrib3fv;

        public static void VertexAttrib3fv(uint index, float[] v) =>
            glVertexAttrib3fv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3s(uint index, short x, short y, short z);
        private static GLVertexAttrib3s glVertexAttrib3s;

        public static void VertexAttrib3s(uint index, short x, short y, short z) =>
            glVertexAttrib3s.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib3sv(uint index, short[] v);
        private static GLVertexAttrib3sv glVertexAttrib3sv;

        public static void VertexAttrib3sv(uint index, short[] v) =>
            glVertexAttrib3sv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4Nbv(uint index, sbyte[] v);
        private static GLVertexAttrib4Nbv glVertexAttrib4Nbv;

        public static void VertexAttrib4Nbv(uint index, sbyte[] v) =>
            glVertexAttrib4Nbv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4Niv(uint index, int[] v);
        private static GLVertexAttrib4Niv glVertexAttrib4Niv;

        public static void VertexAttrib4Niv(uint index, int[] v) =>
            glVertexAttrib4Niv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4Nsv(uint index, short[] v);
        private static GLVertexAttrib4Nsv glVertexAttrib4Nsv;

        public static void VertexAttrib4Nsv(uint index, short[] v) =>
            glVertexAttrib4Nsv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w);
        private static GLVertexAttrib4Nub glVertexAttrib4Nub;

        public static void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w) =>
            glVertexAttrib4Nub.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4Nubv(uint index, byte[] v);
        private static GLVertexAttrib4Nubv glVertexAttrib4Nubv;

        public static void VertexAttrib4Nubv(uint index, byte[] v) =>
            glVertexAttrib4Nubv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4Nuiv(uint index, uint[] v);
        private static GLVertexAttrib4Nuiv glVertexAttrib4Nuiv;

        public static void VertexAttrib4Nuiv(uint index, uint[] v) =>
            glVertexAttrib4Nuiv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4Nusv(uint index, ushort[] v);
        private static GLVertexAttrib4Nusv glVertexAttrib4Nusv;

        public static void VertexAttrib4Nusv(uint index, ushort[] v) =>
            glVertexAttrib4Nusv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4bv(uint index, sbyte[] v);
        private static GLVertexAttrib4bv glVertexAttrib4bv;

        public static void VertexAttrib4bv(uint index, sbyte[] v) =>
            glVertexAttrib4bv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4d(uint index, double x, double y, double z, double w);
        private static GLVertexAttrib4d glVertexAttrib4d;

        public static void VertexAttrib4d(uint index, double x, double y, double z, double w) =>
            glVertexAttrib4d.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4dv(uint index, double[] v);
        private static GLVertexAttrib4dv glVertexAttrib4dv;

        public static void VertexAttrib4dv(uint index, double[] v) =>
            glVertexAttrib4dv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4f(uint index, float x, float y, float z, float w);
        private static GLVertexAttrib4f glVertexAttrib4f;

        public static void VertexAttrib4f(uint index, float x, float y, float z, float w) =>
            glVertexAttrib4f.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4fv(uint index, float[] v);
        private static GLVertexAttrib4fv glVertexAttrib4fv;

        public static void VertexAttrib4fv(uint index, float[] v) =>
            glVertexAttrib4fv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4iv(uint index, int[] v);
        private static GLVertexAttrib4iv glVertexAttrib4iv;

        public static void VertexAttrib4iv(uint index, int[] v) =>
            glVertexAttrib4iv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4s(uint index, short x, short y, short z, short w);
        private static GLVertexAttrib4s glVertexAttrib4s;

        public static void VertexAttrib4s(uint index, short x, short y, short z, short w) =>
            glVertexAttrib4s.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4sv(uint index, short[] v);
        private static GLVertexAttrib4sv glVertexAttrib4sv;

        public static void VertexAttrib4sv(uint index, short[] v) =>
            glVertexAttrib4sv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4ubv(uint index, byte[] v);
        private static GLVertexAttrib4ubv glVertexAttrib4ubv;

        public static void VertexAttrib4ubv(uint index, byte[] v) =>
            glVertexAttrib4ubv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4uiv(uint index, uint[] v);
        private static GLVertexAttrib4uiv glVertexAttrib4uiv;

        public static void VertexAttrib4uiv(uint index, uint[] v) =>
            glVertexAttrib4uiv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttrib4usv(uint index, ushort[] v);
        private static GLVertexAttrib4usv glVertexAttrib4usv;

        public static void VertexAttrib4usv(uint index, ushort[] v) =>
            glVertexAttrib4usv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint pointer);
        private static GLVertexAttribPointer glVertexAttribPointer;

        public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, nint pointer) =>
            glVertexAttribPointer.Invoke(index, size, type, normalized, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2x3fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix2x3fv glUniformMatrix2x3fv;

        public static void UniformMatrix2x3fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix2x3fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3x2fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix3x2fv glUniformMatrix3x2fv;

        public static void UniformMatrix3x2fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix3x2fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix2x4fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix2x4fv glUniformMatrix2x4fv;

        public static void UniformMatrix2x4fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix2x4fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4x2fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix4x2fv glUniformMatrix4x2fv;

        public static void UniformMatrix4x2fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix4x2fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix3x4fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix3x4fv glUniformMatrix3x4fv;

        public static void UniformMatrix3x4fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix3x4fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniformMatrix4x3fv(int location, int count, bool transpose, float[] value);
        private static GLUniformMatrix4x3fv glUniformMatrix4x3fv;

        public static void UniformMatrix4x3fv(int location, int count, bool transpose, float[] value) =>
            glUniformMatrix4x3fv.Invoke(location, count, transpose, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColorMaski(uint index, bool r, bool g, bool b, bool a);
        private static GLColorMaski glColorMaski;

        public static void ColorMaski(uint index, bool r, bool g, bool b, bool a) =>
            glColorMaski.Invoke(index, r, g, b, a);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBooleani_v(BufferTargetARB target, uint index, out bool data);
        private static GLGetBooleani_v glGetBooleani_v;

        public static void GetBooleani_v(BufferTargetARB target, uint index, out bool data) =>
            glGetBooleani_v.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEnablei(EnableCap target, uint index);
        private static GLEnablei glEnablei;

        public static void Enablei(EnableCap target, uint index) =>
            glEnablei.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDisablei(EnableCap target, uint index);
        private static GLDisablei glDisablei;

        public static void Disablei(EnableCap target, uint index) =>
            glDisablei.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate bool GLIsEnabledi(EnableCap target, uint index);
        private static GLIsEnabledi glIsEnabledi;

        public static bool IsEnabledi(EnableCap target, uint index) =>
            glIsEnabledi.Invoke(target, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginTransformFeedback(PrimitiveType primitiveMode);
        private static GLBeginTransformFeedback glBeginTransformFeedback;

        public static void BeginTransformFeedback(PrimitiveType primitiveMode) =>
            glBeginTransformFeedback.Invoke(primitiveMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndTransformFeedback();
        private static GLEndTransformFeedback glEndTransformFeedback;

        public static void EndTransformFeedback() =>
            glEndTransformFeedback.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTransformFeedbackVaryings(uint program, int count, sbyte varyings, TransformFeedbackBufferMode bufferMode);
        private static GLTransformFeedbackVaryings glTransformFeedbackVaryings;

        public static void TransformFeedbackVaryings(uint program, int count, sbyte varyings, TransformFeedbackBufferMode bufferMode) =>
            glTransformFeedbackVaryings.Invoke(program, count, varyings, bufferMode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out AttributeType type, out sbyte name);
        private static GLGetTransformFeedbackVarying glGetTransformFeedbackVarying;

        public static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, out int length, out int size, out AttributeType type, out sbyte name) =>
            glGetTransformFeedbackVarying.Invoke(program, index, bufSize, out length, out size, out type, out name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClampColor(ClampColorTargetARB target, ClampColorModeARB clamp);
        private static GLClampColor glClampColor;

        public static void ClampColor(ClampColorTargetARB target, ClampColorModeARB clamp) =>
            glClampColor.Invoke(target, clamp);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBeginConditionalRender(uint id, ConditionalRenderMode mode);
        private static GLBeginConditionalRender glBeginConditionalRender;

        public static void BeginConditionalRender(uint id, ConditionalRenderMode mode) =>
            glBeginConditionalRender.Invoke(id, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLEndConditionalRender();
        private static GLEndConditionalRender glEndConditionalRender;

        public static void EndConditionalRender() =>
            glEndConditionalRender.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, nint pointer);
        private static GLVertexAttribIPointer glVertexAttribIPointer;

        public static void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, nint pointer) =>
            glVertexAttribIPointer.Invoke(index, size, type, stride, pointer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribIiv(uint index, VertexAttribEnum pname, out int parameters);
        private static GLGetVertexAttribIiv glGetVertexAttribIiv;

        public static void GetVertexAttribIiv(uint index, VertexAttribEnum pname, out int parameters) =>
            glGetVertexAttribIiv.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetVertexAttribIuiv(uint index, VertexAttribEnum pname, out uint parameters);
        private static GLGetVertexAttribIuiv glGetVertexAttribIuiv;

        public static void GetVertexAttribIuiv(uint index, VertexAttribEnum pname, out uint parameters) =>
            glGetVertexAttribIuiv.Invoke(index, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1i(uint index, int x);
        private static GLVertexAttribI1i glVertexAttribI1i;

        public static void VertexAttribI1i(uint index, int x) =>
            glVertexAttribI1i.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2i(uint index, int x, int y);
        private static GLVertexAttribI2i glVertexAttribI2i;

        public static void VertexAttribI2i(uint index, int x, int y) =>
            glVertexAttribI2i.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3i(uint index, int x, int y, int z);
        private static GLVertexAttribI3i glVertexAttribI3i;

        public static void VertexAttribI3i(uint index, int x, int y, int z) =>
            glVertexAttribI3i.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4i(uint index, int x, int y, int z, int w);
        private static GLVertexAttribI4i glVertexAttribI4i;

        public static void VertexAttribI4i(uint index, int x, int y, int z, int w) =>
            glVertexAttribI4i.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1ui(uint index, uint x);
        private static GLVertexAttribI1ui glVertexAttribI1ui;

        public static void VertexAttribI1ui(uint index, uint x) =>
            glVertexAttribI1ui.Invoke(index, x);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2ui(uint index, uint x, uint y);
        private static GLVertexAttribI2ui glVertexAttribI2ui;

        public static void VertexAttribI2ui(uint index, uint x, uint y) =>
            glVertexAttribI2ui.Invoke(index, x, y);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3ui(uint index, uint x, uint y, uint z);
        private static GLVertexAttribI3ui glVertexAttribI3ui;

        public static void VertexAttribI3ui(uint index, uint x, uint y, uint z) =>
            glVertexAttribI3ui.Invoke(index, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w);
        private static GLVertexAttribI4ui glVertexAttribI4ui;

        public static void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w) =>
            glVertexAttribI4ui.Invoke(index, x, y, z, w);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1iv(uint index, int[] v);
        private static GLVertexAttribI1iv glVertexAttribI1iv;

        public static void VertexAttribI1iv(uint index, int[] v) =>
            glVertexAttribI1iv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2iv(uint index, int[] v);
        private static GLVertexAttribI2iv glVertexAttribI2iv;

        public static void VertexAttribI2iv(uint index, int[] v) =>
            glVertexAttribI2iv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3iv(uint index, int[] v);
        private static GLVertexAttribI3iv glVertexAttribI3iv;

        public static void VertexAttribI3iv(uint index, int[] v) =>
            glVertexAttribI3iv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4iv(uint index, int[] v);
        private static GLVertexAttribI4iv glVertexAttribI4iv;

        public static void VertexAttribI4iv(uint index, int[] v) =>
            glVertexAttribI4iv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI1uiv(uint index, uint[] v);
        private static GLVertexAttribI1uiv glVertexAttribI1uiv;

        public static void VertexAttribI1uiv(uint index, uint[] v) =>
            glVertexAttribI1uiv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI2uiv(uint index, uint[] v);
        private static GLVertexAttribI2uiv glVertexAttribI2uiv;

        public static void VertexAttribI2uiv(uint index, uint[] v) =>
            glVertexAttribI2uiv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI3uiv(uint index, uint[] v);
        private static GLVertexAttribI3uiv glVertexAttribI3uiv;

        public static void VertexAttribI3uiv(uint index, uint[] v) =>
            glVertexAttribI3uiv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4uiv(uint index, uint[] v);
        private static GLVertexAttribI4uiv glVertexAttribI4uiv;

        public static void VertexAttribI4uiv(uint index, uint[] v) =>
            glVertexAttribI4uiv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4bv(uint index, sbyte[] v);
        private static GLVertexAttribI4bv glVertexAttribI4bv;

        public static void VertexAttribI4bv(uint index, sbyte[] v) =>
            glVertexAttribI4bv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4sv(uint index, short[] v);
        private static GLVertexAttribI4sv glVertexAttribI4sv;

        public static void VertexAttribI4sv(uint index, short[] v) =>
            glVertexAttribI4sv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4ubv(uint index, byte[] v);
        private static GLVertexAttribI4ubv glVertexAttribI4ubv;

        public static void VertexAttribI4ubv(uint index, byte[] v) =>
            glVertexAttribI4ubv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribI4usv(uint index, ushort[] v);
        private static GLVertexAttribI4usv glVertexAttribI4usv;

        public static void VertexAttribI4usv(uint index, ushort[] v) =>
            glVertexAttribI4usv.Invoke(index, v);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetUniformuiv(uint program, int location, out uint parameters);
        private static GLGetUniformuiv glGetUniformuiv;

        public static void GetUniformuiv(uint program, int location, out uint parameters) =>
            glGetUniformuiv.Invoke(program, location, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBindFragDataLocation(uint program, uint color, sbyte[] name);
        private static GLBindFragDataLocation glBindFragDataLocation;

        public static void BindFragDataLocation(uint program, uint color, sbyte[] name) =>
            glBindFragDataLocation.Invoke(program, color, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int GLGetFragDataLocation(uint program, sbyte[] name);
        private static GLGetFragDataLocation glGetFragDataLocation;

        public static int GetFragDataLocation(uint program, sbyte[] name) =>
            glGetFragDataLocation.Invoke(program, name);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1ui(int location, uint v0);
        private static GLUniform1ui glUniform1ui;

        public static void Uniform1ui(int location, uint v0) =>
            glUniform1ui.Invoke(location, v0);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2ui(int location, uint v0, uint v1);
        private static GLUniform2ui glUniform2ui;

        public static void Uniform2ui(int location, uint v0, uint v1) =>
            glUniform2ui.Invoke(location, v0, v1);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3ui(int location, uint v0, uint v1, uint v2);
        private static GLUniform3ui glUniform3ui;

        public static void Uniform3ui(int location, uint v0, uint v1, uint v2) =>
            glUniform3ui.Invoke(location, v0, v1, v2);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4ui(int location, uint v0, uint v1, uint v2, uint v3);
        private static GLUniform4ui glUniform4ui;

        public static void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3) =>
            glUniform4ui.Invoke(location, v0, v1, v2, v3);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform1uiv(int location, int count, uint[] value);
        private static GLUniform1uiv glUniform1uiv;

        public static void Uniform1uiv(int location, int count, uint[] value) =>
            glUniform1uiv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform2uiv(int location, int count, uint[] value);
        private static GLUniform2uiv glUniform2uiv;

        public static void Uniform2uiv(int location, int count, uint[] value) =>
            glUniform2uiv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform3uiv(int location, int count, uint[] value);
        private static GLUniform3uiv glUniform3uiv;

        public static void Uniform3uiv(int location, int count, uint[] value) =>
            glUniform3uiv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLUniform4uiv(int location, int count, uint[] value);
        private static GLUniform4uiv glUniform4uiv;

        public static void Uniform4uiv(int location, int count, uint[] value) =>
            glUniform4uiv.Invoke(location, count, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterIiv(TextureTarget target, TextureParameterName pname, int[] parameters);
        private static GLTexParameterIiv glTexParameterIiv;

        public static void TexParameterIiv(TextureTarget target, TextureParameterName pname, int[] parameters) =>
            glTexParameterIiv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterIuiv(TextureTarget target, TextureParameterName pname, uint[] parameters);
        private static GLTexParameterIuiv glTexParameterIuiv;

        public static void TexParameterIuiv(TextureTarget target, TextureParameterName pname, uint[] parameters) =>
            glTexParameterIuiv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterIiv(TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTexParameterIiv glGetTexParameterIiv;

        public static void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTexParameterIiv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, out uint parameters);
        private static GLGetTexParameterIuiv glGetTexParameterIuiv;

        public static void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, out uint parameters) =>
            glGetTexParameterIuiv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearBufferiv(Buffer buffer, int drawbuffer, int[] value);
        private static GLClearBufferiv glClearBufferiv;

        public static void ClearBufferiv(Buffer buffer, int drawbuffer, int[] value) =>
            glClearBufferiv.Invoke(buffer, drawbuffer, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearBufferuiv(Buffer buffer, int drawbuffer, uint[] value);
        private static GLClearBufferuiv glClearBufferuiv;

        public static void ClearBufferuiv(Buffer buffer, int drawbuffer, uint[] value) =>
            glClearBufferuiv.Invoke(buffer, drawbuffer, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearBufferfv(Buffer buffer, int drawbuffer, float[] value);
        private static GLClearBufferfv glClearBufferfv;

        public static void ClearBufferfv(Buffer buffer, int drawbuffer, float[] value) =>
            glClearBufferfv.Invoke(buffer, drawbuffer, value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearBufferfi(Buffer buffer, int drawbuffer, float depth, int stencil);
        private static GLClearBufferfi glClearBufferfi;

        public static void ClearBufferfi(Buffer buffer, int drawbuffer, float depth, int stencil) =>
            glClearBufferfi.Invoke(buffer, drawbuffer, depth, stencil);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate nint GLGetStringi(StringName name, uint index);
        private static GLGetStringi glGetStringi;

        public static nint GetStringi(StringName name, uint index) =>
            glGetStringi.Invoke(name, index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount);
        private static GLDrawArraysInstanced glDrawArraysInstanced;

        public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount) =>
            glDrawArraysInstanced.Invoke(mode, first, count, instancecount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount);
        private static GLDrawElementsInstanced glDrawElementsInstanced;

        public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, nint indices, int instancecount) =>
            glDrawElementsInstanced.Invoke(mode, count, type, indices, instancecount);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexBuffer(TextureTarget target, SizedInternalFormat internalformat, uint buffer);
        private static GLTexBuffer glTexBuffer;

        public static void TexBuffer(TextureTarget target, SizedInternalFormat internalformat, uint buffer) =>
            glTexBuffer.Invoke(target, internalformat, buffer);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrimitiveRestartIndex(uint index);
        private static GLPrimitiveRestartIndex glPrimitiveRestartIndex;

        public static void PrimitiveRestartIndex(uint index) =>
            glPrimitiveRestartIndex.Invoke(index);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetInteger64i_v(GetPName target, uint index, out long data);
        private static GLGetInteger64i_v glGetInteger64i_v;

        public static void GetInteger64i_v(GetPName target, uint index, out long data) =>
            glGetInteger64i_v.Invoke(target, index, out data);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetBufferParameteri64v(BufferTargetARB target, BufferPNameARB pname, out long parameters);
        private static GLGetBufferParameteri64v glGetBufferParameteri64v;

        public static void GetBufferParameteri64v(BufferTargetARB target, BufferPNameARB pname, out long parameters) =>
            glGetBufferParameteri64v.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level);
        private static GLFramebufferTexture glFramebufferTexture;

        public static void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level) =>
            glFramebufferTexture.Invoke(target, attachment, texture, level);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLVertexAttribDivisor(uint index, uint divisor);
        private static GLVertexAttribDivisor glVertexAttribDivisor;

        public static void VertexAttribDivisor(uint index, uint divisor) =>
            glVertexAttribDivisor.Invoke(index, divisor);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMinSampleShading(float value);
        private static GLMinSampleShading glMinSampleShading;

        public static void MinSampleShading(float value) =>
            glMinSampleShading.Invoke(value);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationi(uint buf, BlendEquationModeEXT mode);
        private static GLBlendEquationi glBlendEquationi;

        public static void BlendEquationi(uint buf, BlendEquationModeEXT mode) =>
            glBlendEquationi.Invoke(buf, mode);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendEquationSeparatei(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha);
        private static GLBlendEquationSeparatei glBlendEquationSeparatei;

        public static void BlendEquationSeparatei(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha) =>
            glBlendEquationSeparatei.Invoke(buf, modeRGB, modeAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFunci(uint buf, BlendingFactor src, BlendingFactor dst);
        private static GLBlendFunci glBlendFunci;

        public static void BlendFunci(uint buf, BlendingFactor src, BlendingFactor dst) =>
            glBlendFunci.Invoke(buf, src, dst);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendFuncSeparatei(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha);
        private static GLBlendFuncSeparatei glBlendFuncSeparatei;

        public static void BlendFuncSeparatei(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha) =>
            glBlendFuncSeparatei.Invoke(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnCompressedTexImage(TextureTarget target, int lod, int bufSize, out nint pixels);
        private static GLGetnCompressedTexImage glGetnCompressedTexImage;

        public static void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, out nint pixels) =>
            glGetnCompressedTexImage.Invoke(target, lod, bufSize, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, out nint pixels);
        private static GLGetnTexImage glGetnTexImage;

        public static void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, out nint pixels) =>
            glGetnTexImage.Invoke(target, level, format, type, bufSize, out pixels);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetnUniformdv(uint program, int location, int bufSize, out double parameters);
        private static GLGetnUniformdv glGetnUniformdv;

        public static void GetnUniformdv(uint program, int location, int bufSize, out double parameters) =>
            glGetnUniformdv.Invoke(program, location, bufSize, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSpecializeShader(uint shader, sbyte[] pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue);
        private static GLSpecializeShader glSpecializeShader;

        public static void SpecializeShader(uint shader, sbyte[] pEntryPoint, uint numSpecializationConstants, uint[] pConstantIndex, uint[] pConstantValue) =>
            glSpecializeShader.Invoke(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawArraysIndirectCount(PrimitiveType mode, nint indirect, nint drawcount, int maxdrawcount, int stride);
        private static GLMultiDrawArraysIndirectCount glMultiDrawArraysIndirectCount;

        public static void MultiDrawArraysIndirectCount(PrimitiveType mode, nint indirect, nint drawcount, int maxdrawcount, int stride) =>
            glMultiDrawArraysIndirectCount.Invoke(mode, indirect, drawcount, maxdrawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, nint indirect, nint drawcount, int maxdrawcount, int stride);
        private static GLMultiDrawElementsIndirectCount glMultiDrawElementsIndirectCount;

        public static void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, nint indirect, nint drawcount, int maxdrawcount, int stride) =>
            glMultiDrawElementsIndirectCount.Invoke(mode, type, indirect, drawcount, maxdrawcount, stride);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLAlphaFuncx(AlphaFunction func, int reference);
        private static GLAlphaFuncx glAlphaFuncx;

        public static void AlphaFuncx(AlphaFunction func, int reference) =>
            glAlphaFuncx.Invoke(func, reference);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearColorx(int red, int green, int blue, int alpha);
        private static GLClearColorx glClearColorx;

        public static void ClearColorx(int red, int green, int blue, int alpha) =>
            glClearColorx.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClearDepthx(int depth);
        private static GLClearDepthx glClearDepthx;

        public static void ClearDepthx(int depth) =>
            glClearDepthx.Invoke(depth);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLClipPlanex(ClipPlaneName plane, int[] equation);
        private static GLClipPlanex glClipPlanex;

        public static void ClipPlanex(ClipPlaneName plane, int[] equation) =>
            glClipPlanex.Invoke(plane, equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLColor4x(int red, int green, int blue, int alpha);
        private static GLColor4x glColor4x;

        public static void Color4x(int red, int green, int blue, int alpha) =>
            glColor4x.Invoke(red, green, blue, alpha);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLDepthRangex(int n, int f);
        private static GLDepthRangex glDepthRangex;

        public static void DepthRangex(int n, int f) =>
            glDepthRangex.Invoke(n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogx(FogPName pname, int param);
        private static GLFogx glFogx;

        public static void Fogx(FogPName pname, int param) =>
            glFogx.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFogxv(FogPName pname, int[] param);
        private static GLFogxv glFogxv;

        public static void Fogxv(FogPName pname, int[] param) =>
            glFogxv.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLFrustumx(int l, int r, int b, int t, int n, int f);
        private static GLFrustumx glFrustumx;

        public static void Frustumx(int l, int r, int b, int t, int n, int f) =>
            glFrustumx.Invoke(l, r, b, t, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetClipPlanex(ClipPlaneName plane, out int equation);
        private static GLGetClipPlanex glGetClipPlanex;

        public static void GetClipPlanex(ClipPlaneName plane, out int equation) =>
            glGetClipPlanex.Invoke(plane, out equation);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetFixedv(GetPName pname, out int parameters);
        private static GLGetFixedv glGetFixedv;

        public static void GetFixedv(GetPName pname, out int parameters) =>
            glGetFixedv.Invoke(pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetLightxv(LightName light, LightParameter pname, out int parameters);
        private static GLGetLightxv glGetLightxv;

        public static void GetLightxv(LightName light, LightParameter pname, out int parameters) =>
            glGetLightxv.Invoke(light, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetMaterialxv(TriangleFace face, MaterialParameter pname, out int parameters);
        private static GLGetMaterialxv glGetMaterialxv;

        public static void GetMaterialxv(TriangleFace face, MaterialParameter pname, out int parameters) =>
            glGetMaterialxv.Invoke(face, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, out int parameters);
        private static GLGetTexEnvxv glGetTexEnvxv;

        public static void GetTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, out int parameters) =>
            glGetTexEnvxv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLGetTexParameterxv(TextureTarget target, GetTextureParameter pname, out int parameters);
        private static GLGetTexParameterxv glGetTexParameterxv;

        public static void GetTexParameterxv(TextureTarget target, GetTextureParameter pname, out int parameters) =>
            glGetTexParameterxv.Invoke(target, pname, out parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModelx(LightModelParameter pname, int param);
        private static GLLightModelx glLightModelx;

        public static void LightModelx(LightModelParameter pname, int param) =>
            glLightModelx.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightModelxv(LightModelParameter pname, int[] param);
        private static GLLightModelxv glLightModelxv;

        public static void LightModelxv(LightModelParameter pname, int[] param) =>
            glLightModelxv.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightx(LightName light, LightParameter pname, int param);
        private static GLLightx glLightx;

        public static void Lightx(LightName light, LightParameter pname, int param) =>
            glLightx.Invoke(light, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLightxv(LightName light, LightParameter pname, int[] parameters);
        private static GLLightxv glLightxv;

        public static void Lightxv(LightName light, LightParameter pname, int[] parameters) =>
            glLightxv.Invoke(light, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLineWidthx(int width);
        private static GLLineWidthx glLineWidthx;

        public static void LineWidthx(int width) =>
            glLineWidthx.Invoke(width);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLLoadMatrixx(int[] m);
        private static GLLoadMatrixx glLoadMatrixx;

        public static void LoadMatrixx(int[] m) =>
            glLoadMatrixx.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaterialx(TriangleFace face, MaterialParameter pname, int param);
        private static GLMaterialx glMaterialx;

        public static void Materialx(TriangleFace face, MaterialParameter pname, int param) =>
            glMaterialx.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMaterialxv(TriangleFace face, MaterialParameter pname, int[] param);
        private static GLMaterialxv glMaterialxv;

        public static void Materialxv(TriangleFace face, MaterialParameter pname, int[] param) =>
            glMaterialxv.Invoke(face, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultMatrixx(int[] m);
        private static GLMultMatrixx glMultMatrixx;

        public static void MultMatrixx(int[] m) =>
            glMultMatrixx.Invoke(m);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLMultiTexCoord4x(TextureUnit texture, int s, int t, int r, int q);
        private static GLMultiTexCoord4x glMultiTexCoord4x;

        public static void MultiTexCoord4x(TextureUnit texture, int s, int t, int r, int q) =>
            glMultiTexCoord4x.Invoke(texture, s, t, r, q);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLNormal3x(int nx, int ny, int nz);
        private static GLNormal3x glNormal3x;

        public static void Normal3x(int nx, int ny, int nz) =>
            glNormal3x.Invoke(nx, ny, nz);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLOrthox(int l, int r, int b, int t, int n, int f);
        private static GLOrthox glOrthox;

        public static void Orthox(int l, int r, int b, int t, int n, int f) =>
            glOrthox.Invoke(l, r, b, t, n, f);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterx(PointParameterNameARB pname, int param);
        private static GLPointParameterx glPointParameterx;

        public static void PointParameterx(PointParameterNameARB pname, int param) =>
            glPointParameterx.Invoke(pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointParameterxv(PointParameterNameARB pname, int[] parameters);
        private static GLPointParameterxv glPointParameterxv;

        public static void PointParameterxv(PointParameterNameARB pname, int[] parameters) =>
            glPointParameterxv.Invoke(pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPointSizex(int size);
        private static GLPointSizex glPointSizex;

        public static void PointSizex(int size) =>
            glPointSizex.Invoke(size);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPolygonOffsetx(int factor, int units);
        private static GLPolygonOffsetx glPolygonOffsetx;

        public static void PolygonOffsetx(int factor, int units) =>
            glPolygonOffsetx.Invoke(factor, units);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLRotatex(int angle, int x, int y, int z);
        private static GLRotatex glRotatex;

        public static void Rotatex(int angle, int x, int y, int z) =>
            glRotatex.Invoke(angle, x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLSampleCoveragex(int value, bool invert);
        private static GLSampleCoveragex glSampleCoveragex;

        public static void SampleCoveragex(int value, bool invert) =>
            glSampleCoveragex.Invoke(value, invert);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLScalex(int x, int y, int z);
        private static GLScalex glScalex;

        public static void Scalex(int x, int y, int z) =>
            glScalex.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnvx(TextureEnvTarget target, TextureEnvParameter pname, int param);
        private static GLTexEnvx glTexEnvx;

        public static void TexEnvx(TextureEnvTarget target, TextureEnvParameter pname, int param) =>
            glTexEnvx.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters);
        private static GLTexEnvxv glTexEnvxv;

        public static void TexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, int[] parameters) =>
            glTexEnvxv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterx(TextureTarget target, GetTextureParameter pname, int param);
        private static GLTexParameterx glTexParameterx;

        public static void TexParameterx(TextureTarget target, GetTextureParameter pname, int param) =>
            glTexParameterx.Invoke(target, pname, param);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTexParameterxv(TextureTarget target, GetTextureParameter pname, int[] parameters);
        private static GLTexParameterxv glTexParameterxv;

        public static void TexParameterxv(TextureTarget target, GetTextureParameter pname, int[] parameters) =>
            glTexParameterxv.Invoke(target, pname, parameters);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLTranslatex(int x, int y, int z);
        private static GLTranslatex glTranslatex;

        public static void Translatex(int x, int y, int z) =>
            glTranslatex.Invoke(x, y, z);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLBlendBarrier();
        private static GLBlendBarrier glBlendBarrier;

        public static void BlendBarrier() =>
            glBlendBarrier.Invoke();

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void GLPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW);
        private static GLPrimitiveBoundingBox glPrimitiveBoundingBox;

        public static void PrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) =>
            glPrimitiveBoundingBox.Invoke(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);

        public static void Initialize(GetProcAddressHandler loader)
        {
            glTbufferMask3DFX = Marshal.GetDelegateForFunctionPointer<GLTbufferMask3DFX>(loader.Invoke("glTbufferMask3DFX"));
            glDebugMessageEnableAMD = Marshal.GetDelegateForFunctionPointer<GLDebugMessageEnableAMD>(loader.Invoke("glDebugMessageEnableAMD"));
            glDebugMessageInsertAMD = Marshal.GetDelegateForFunctionPointer<GLDebugMessageInsertAMD>(loader.Invoke("glDebugMessageInsertAMD"));
            glDebugMessageCallbackAMD = Marshal.GetDelegateForFunctionPointer<GLDebugMessageCallbackAMD>(loader.Invoke("glDebugMessageCallbackAMD"));
            glGetDebugMessageLogAMD = Marshal.GetDelegateForFunctionPointer<GLGetDebugMessageLogAMD>(loader.Invoke("glGetDebugMessageLogAMD"));
            glBlendFuncIndexedAMD = Marshal.GetDelegateForFunctionPointer<GLBlendFuncIndexedAMD>(loader.Invoke("glBlendFuncIndexedAMD"));
            glBlendFuncSeparateIndexedAMD = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparateIndexedAMD>(loader.Invoke("glBlendFuncSeparateIndexedAMD"));
            glBlendEquationIndexedAMD = Marshal.GetDelegateForFunctionPointer<GLBlendEquationIndexedAMD>(loader.Invoke("glBlendEquationIndexedAMD"));
            glBlendEquationSeparateIndexedAMD = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparateIndexedAMD>(loader.Invoke("glBlendEquationSeparateIndexedAMD"));
            glRenderbufferStorageMultisampleAdvancedAMD = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisampleAdvancedAMD>(loader.Invoke("glRenderbufferStorageMultisampleAdvancedAMD"));
            glNamedRenderbufferStorageMultisampleAdvancedAMD = Marshal.GetDelegateForFunctionPointer<GLNamedRenderbufferStorageMultisampleAdvancedAMD>(loader.Invoke("glNamedRenderbufferStorageMultisampleAdvancedAMD"));
            glFramebufferSamplePositionsfvAMD = Marshal.GetDelegateForFunctionPointer<GLFramebufferSamplePositionsfvAMD>(loader.Invoke("glFramebufferSamplePositionsfvAMD"));
            glNamedFramebufferSamplePositionsfvAMD = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferSamplePositionsfvAMD>(loader.Invoke("glNamedFramebufferSamplePositionsfvAMD"));
            glGetFramebufferParameterfvAMD = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferParameterfvAMD>(loader.Invoke("glGetFramebufferParameterfvAMD"));
            glGetNamedFramebufferParameterfvAMD = Marshal.GetDelegateForFunctionPointer<GLGetNamedFramebufferParameterfvAMD>(loader.Invoke("glGetNamedFramebufferParameterfvAMD"));
            glUniform1i64NV = Marshal.GetDelegateForFunctionPointer<GLUniform1i64NV>(loader.Invoke("glUniform1i64NV"));
            glUniform2i64NV = Marshal.GetDelegateForFunctionPointer<GLUniform2i64NV>(loader.Invoke("glUniform2i64NV"));
            glUniform3i64NV = Marshal.GetDelegateForFunctionPointer<GLUniform3i64NV>(loader.Invoke("glUniform3i64NV"));
            glUniform4i64NV = Marshal.GetDelegateForFunctionPointer<GLUniform4i64NV>(loader.Invoke("glUniform4i64NV"));
            glUniform1i64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform1i64vNV>(loader.Invoke("glUniform1i64vNV"));
            glUniform2i64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform2i64vNV>(loader.Invoke("glUniform2i64vNV"));
            glUniform3i64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform3i64vNV>(loader.Invoke("glUniform3i64vNV"));
            glUniform4i64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform4i64vNV>(loader.Invoke("glUniform4i64vNV"));
            glUniform1ui64NV = Marshal.GetDelegateForFunctionPointer<GLUniform1ui64NV>(loader.Invoke("glUniform1ui64NV"));
            glUniform2ui64NV = Marshal.GetDelegateForFunctionPointer<GLUniform2ui64NV>(loader.Invoke("glUniform2ui64NV"));
            glUniform3ui64NV = Marshal.GetDelegateForFunctionPointer<GLUniform3ui64NV>(loader.Invoke("glUniform3ui64NV"));
            glUniform4ui64NV = Marshal.GetDelegateForFunctionPointer<GLUniform4ui64NV>(loader.Invoke("glUniform4ui64NV"));
            glUniform1ui64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform1ui64vNV>(loader.Invoke("glUniform1ui64vNV"));
            glUniform2ui64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform2ui64vNV>(loader.Invoke("glUniform2ui64vNV"));
            glUniform3ui64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform3ui64vNV>(loader.Invoke("glUniform3ui64vNV"));
            glUniform4ui64vNV = Marshal.GetDelegateForFunctionPointer<GLUniform4ui64vNV>(loader.Invoke("glUniform4ui64vNV"));
            glGetUniformi64vNV = Marshal.GetDelegateForFunctionPointer<GLGetUniformi64vNV>(loader.Invoke("glGetUniformi64vNV"));
            glGetUniformui64vNV = Marshal.GetDelegateForFunctionPointer<GLGetUniformui64vNV>(loader.Invoke("glGetUniformui64vNV"));
            glProgramUniform1i64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1i64NV>(loader.Invoke("glProgramUniform1i64NV"));
            glProgramUniform2i64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2i64NV>(loader.Invoke("glProgramUniform2i64NV"));
            glProgramUniform3i64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3i64NV>(loader.Invoke("glProgramUniform3i64NV"));
            glProgramUniform4i64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4i64NV>(loader.Invoke("glProgramUniform4i64NV"));
            glProgramUniform1i64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1i64vNV>(loader.Invoke("glProgramUniform1i64vNV"));
            glProgramUniform2i64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2i64vNV>(loader.Invoke("glProgramUniform2i64vNV"));
            glProgramUniform3i64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3i64vNV>(loader.Invoke("glProgramUniform3i64vNV"));
            glProgramUniform4i64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4i64vNV>(loader.Invoke("glProgramUniform4i64vNV"));
            glProgramUniform1ui64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1ui64NV>(loader.Invoke("glProgramUniform1ui64NV"));
            glProgramUniform2ui64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2ui64NV>(loader.Invoke("glProgramUniform2ui64NV"));
            glProgramUniform3ui64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3ui64NV>(loader.Invoke("glProgramUniform3ui64NV"));
            glProgramUniform4ui64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4ui64NV>(loader.Invoke("glProgramUniform4ui64NV"));
            glProgramUniform1ui64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1ui64vNV>(loader.Invoke("glProgramUniform1ui64vNV"));
            glProgramUniform2ui64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2ui64vNV>(loader.Invoke("glProgramUniform2ui64vNV"));
            glProgramUniform3ui64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3ui64vNV>(loader.Invoke("glProgramUniform3ui64vNV"));
            glProgramUniform4ui64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4ui64vNV>(loader.Invoke("glProgramUniform4ui64vNV"));
            glVertexAttribParameteriAMD = Marshal.GetDelegateForFunctionPointer<GLVertexAttribParameteriAMD>(loader.Invoke("glVertexAttribParameteriAMD"));
            glMultiDrawArraysIndirectAMD = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysIndirectAMD>(loader.Invoke("glMultiDrawArraysIndirectAMD"));
            glMultiDrawElementsIndirectAMD = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsIndirectAMD>(loader.Invoke("glMultiDrawElementsIndirectAMD"));
            glGenNamesAMD = Marshal.GetDelegateForFunctionPointer<GLGenNamesAMD>(loader.Invoke("glGenNamesAMD"));
            glDeleteNamesAMD = Marshal.GetDelegateForFunctionPointer<GLDeleteNamesAMD>(loader.Invoke("glDeleteNamesAMD"));
            glIsNameAMD = Marshal.GetDelegateForFunctionPointer<GLIsNameAMD>(loader.Invoke("glIsNameAMD"));
            glQueryObjectParameteruiAMD = Marshal.GetDelegateForFunctionPointer<GLQueryObjectParameteruiAMD>(loader.Invoke("glQueryObjectParameteruiAMD"));
            glGetPerfMonitorGroupsAMD = Marshal.GetDelegateForFunctionPointer<GLGetPerfMonitorGroupsAMD>(loader.Invoke("glGetPerfMonitorGroupsAMD"));
            glGetPerfMonitorCountersAMD = Marshal.GetDelegateForFunctionPointer<GLGetPerfMonitorCountersAMD>(loader.Invoke("glGetPerfMonitorCountersAMD"));
            glGetPerfMonitorGroupStringAMD = Marshal.GetDelegateForFunctionPointer<GLGetPerfMonitorGroupStringAMD>(loader.Invoke("glGetPerfMonitorGroupStringAMD"));
            glGetPerfMonitorCounterStringAMD = Marshal.GetDelegateForFunctionPointer<GLGetPerfMonitorCounterStringAMD>(loader.Invoke("glGetPerfMonitorCounterStringAMD"));
            glGetPerfMonitorCounterInfoAMD = Marshal.GetDelegateForFunctionPointer<GLGetPerfMonitorCounterInfoAMD>(loader.Invoke("glGetPerfMonitorCounterInfoAMD"));
            glGenPerfMonitorsAMD = Marshal.GetDelegateForFunctionPointer<GLGenPerfMonitorsAMD>(loader.Invoke("glGenPerfMonitorsAMD"));
            glDeletePerfMonitorsAMD = Marshal.GetDelegateForFunctionPointer<GLDeletePerfMonitorsAMD>(loader.Invoke("glDeletePerfMonitorsAMD"));
            glSelectPerfMonitorCountersAMD = Marshal.GetDelegateForFunctionPointer<GLSelectPerfMonitorCountersAMD>(loader.Invoke("glSelectPerfMonitorCountersAMD"));
            glBeginPerfMonitorAMD = Marshal.GetDelegateForFunctionPointer<GLBeginPerfMonitorAMD>(loader.Invoke("glBeginPerfMonitorAMD"));
            glEndPerfMonitorAMD = Marshal.GetDelegateForFunctionPointer<GLEndPerfMonitorAMD>(loader.Invoke("glEndPerfMonitorAMD"));
            glGetPerfMonitorCounterDataAMD = Marshal.GetDelegateForFunctionPointer<GLGetPerfMonitorCounterDataAMD>(loader.Invoke("glGetPerfMonitorCounterDataAMD"));
            glSetMultisamplefvAMD = Marshal.GetDelegateForFunctionPointer<GLSetMultisamplefvAMD>(loader.Invoke("glSetMultisamplefvAMD"));
            glTexStorageSparseAMD = Marshal.GetDelegateForFunctionPointer<GLTexStorageSparseAMD>(loader.Invoke("glTexStorageSparseAMD"));
            glTextureStorageSparseAMD = Marshal.GetDelegateForFunctionPointer<GLTextureStorageSparseAMD>(loader.Invoke("glTextureStorageSparseAMD"));
            glStencilOpValueAMD = Marshal.GetDelegateForFunctionPointer<GLStencilOpValueAMD>(loader.Invoke("glStencilOpValueAMD"));
            glTessellationFactorAMD = Marshal.GetDelegateForFunctionPointer<GLTessellationFactorAMD>(loader.Invoke("glTessellationFactorAMD"));
            glTessellationModeAMD = Marshal.GetDelegateForFunctionPointer<GLTessellationModeAMD>(loader.Invoke("glTessellationModeAMD"));
            glBlitFramebufferANGLE = Marshal.GetDelegateForFunctionPointer<GLBlitFramebufferANGLE>(loader.Invoke("glBlitFramebufferANGLE"));
            glRenderbufferStorageMultisampleANGLE = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisampleANGLE>(loader.Invoke("glRenderbufferStorageMultisampleANGLE"));
            glDrawArraysInstancedANGLE = Marshal.GetDelegateForFunctionPointer<GLDrawArraysInstancedANGLE>(loader.Invoke("glDrawArraysInstancedANGLE"));
            glDrawElementsInstancedANGLE = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedANGLE>(loader.Invoke("glDrawElementsInstancedANGLE"));
            glVertexAttribDivisorANGLE = Marshal.GetDelegateForFunctionPointer<GLVertexAttribDivisorANGLE>(loader.Invoke("glVertexAttribDivisorANGLE"));
            glGetTranslatedShaderSourceANGLE = Marshal.GetDelegateForFunctionPointer<GLGetTranslatedShaderSourceANGLE>(loader.Invoke("glGetTranslatedShaderSourceANGLE"));
            glCopyTextureLevelsAPPLE = Marshal.GetDelegateForFunctionPointer<GLCopyTextureLevelsAPPLE>(loader.Invoke("glCopyTextureLevelsAPPLE"));
            glElementPointerAPPLE = Marshal.GetDelegateForFunctionPointer<GLElementPointerAPPLE>(loader.Invoke("glElementPointerAPPLE"));
            glDrawElementArrayAPPLE = Marshal.GetDelegateForFunctionPointer<GLDrawElementArrayAPPLE>(loader.Invoke("glDrawElementArrayAPPLE"));
            glDrawRangeElementArrayAPPLE = Marshal.GetDelegateForFunctionPointer<GLDrawRangeElementArrayAPPLE>(loader.Invoke("glDrawRangeElementArrayAPPLE"));
            glMultiDrawElementArrayAPPLE = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementArrayAPPLE>(loader.Invoke("glMultiDrawElementArrayAPPLE"));
            glMultiDrawRangeElementArrayAPPLE = Marshal.GetDelegateForFunctionPointer<GLMultiDrawRangeElementArrayAPPLE>(loader.Invoke("glMultiDrawRangeElementArrayAPPLE"));
            glGenFencesAPPLE = Marshal.GetDelegateForFunctionPointer<GLGenFencesAPPLE>(loader.Invoke("glGenFencesAPPLE"));
            glDeleteFencesAPPLE = Marshal.GetDelegateForFunctionPointer<GLDeleteFencesAPPLE>(loader.Invoke("glDeleteFencesAPPLE"));
            glSetFenceAPPLE = Marshal.GetDelegateForFunctionPointer<GLSetFenceAPPLE>(loader.Invoke("glSetFenceAPPLE"));
            glIsFenceAPPLE = Marshal.GetDelegateForFunctionPointer<GLIsFenceAPPLE>(loader.Invoke("glIsFenceAPPLE"));
            glTestFenceAPPLE = Marshal.GetDelegateForFunctionPointer<GLTestFenceAPPLE>(loader.Invoke("glTestFenceAPPLE"));
            glFinishFenceAPPLE = Marshal.GetDelegateForFunctionPointer<GLFinishFenceAPPLE>(loader.Invoke("glFinishFenceAPPLE"));
            glTestObjectAPPLE = Marshal.GetDelegateForFunctionPointer<GLTestObjectAPPLE>(loader.Invoke("glTestObjectAPPLE"));
            glFinishObjectAPPLE = Marshal.GetDelegateForFunctionPointer<GLFinishObjectAPPLE>(loader.Invoke("glFinishObjectAPPLE"));
            glBufferParameteriAPPLE = Marshal.GetDelegateForFunctionPointer<GLBufferParameteriAPPLE>(loader.Invoke("glBufferParameteriAPPLE"));
            glFlushMappedBufferRangeAPPLE = Marshal.GetDelegateForFunctionPointer<GLFlushMappedBufferRangeAPPLE>(loader.Invoke("glFlushMappedBufferRangeAPPLE"));
            glRenderbufferStorageMultisampleAPPLE = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisampleAPPLE>(loader.Invoke("glRenderbufferStorageMultisampleAPPLE"));
            glResolveMultisampleFramebufferAPPLE = Marshal.GetDelegateForFunctionPointer<GLResolveMultisampleFramebufferAPPLE>(loader.Invoke("glResolveMultisampleFramebufferAPPLE"));
            glObjectPurgeableAPPLE = Marshal.GetDelegateForFunctionPointer<GLObjectPurgeableAPPLE>(loader.Invoke("glObjectPurgeableAPPLE"));
            glObjectUnpurgeableAPPLE = Marshal.GetDelegateForFunctionPointer<GLObjectUnpurgeableAPPLE>(loader.Invoke("glObjectUnpurgeableAPPLE"));
            glGetObjectParameterivAPPLE = Marshal.GetDelegateForFunctionPointer<GLGetObjectParameterivAPPLE>(loader.Invoke("glGetObjectParameterivAPPLE"));
            glFenceSyncAPPLE = Marshal.GetDelegateForFunctionPointer<GLFenceSyncAPPLE>(loader.Invoke("glFenceSyncAPPLE"));
            glIsSyncAPPLE = Marshal.GetDelegateForFunctionPointer<GLIsSyncAPPLE>(loader.Invoke("glIsSyncAPPLE"));
            glDeleteSyncAPPLE = Marshal.GetDelegateForFunctionPointer<GLDeleteSyncAPPLE>(loader.Invoke("glDeleteSyncAPPLE"));
            glClientWaitSyncAPPLE = Marshal.GetDelegateForFunctionPointer<GLClientWaitSyncAPPLE>(loader.Invoke("glClientWaitSyncAPPLE"));
            glWaitSyncAPPLE = Marshal.GetDelegateForFunctionPointer<GLWaitSyncAPPLE>(loader.Invoke("glWaitSyncAPPLE"));
            glGetInteger64vAPPLE = Marshal.GetDelegateForFunctionPointer<GLGetInteger64vAPPLE>(loader.Invoke("glGetInteger64vAPPLE"));
            glGetSyncivAPPLE = Marshal.GetDelegateForFunctionPointer<GLGetSyncivAPPLE>(loader.Invoke("glGetSyncivAPPLE"));
            glTextureRangeAPPLE = Marshal.GetDelegateForFunctionPointer<GLTextureRangeAPPLE>(loader.Invoke("glTextureRangeAPPLE"));
            glGetTexParameterPointervAPPLE = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterPointervAPPLE>(loader.Invoke("glGetTexParameterPointervAPPLE"));
            glBindVertexArrayAPPLE = Marshal.GetDelegateForFunctionPointer<GLBindVertexArrayAPPLE>(loader.Invoke("glBindVertexArrayAPPLE"));
            glDeleteVertexArraysAPPLE = Marshal.GetDelegateForFunctionPointer<GLDeleteVertexArraysAPPLE>(loader.Invoke("glDeleteVertexArraysAPPLE"));
            glGenVertexArraysAPPLE = Marshal.GetDelegateForFunctionPointer<GLGenVertexArraysAPPLE>(loader.Invoke("glGenVertexArraysAPPLE"));
            glIsVertexArrayAPPLE = Marshal.GetDelegateForFunctionPointer<GLIsVertexArrayAPPLE>(loader.Invoke("glIsVertexArrayAPPLE"));
            glVertexArrayRangeAPPLE = Marshal.GetDelegateForFunctionPointer<GLVertexArrayRangeAPPLE>(loader.Invoke("glVertexArrayRangeAPPLE"));
            glFlushVertexArrayRangeAPPLE = Marshal.GetDelegateForFunctionPointer<GLFlushVertexArrayRangeAPPLE>(loader.Invoke("glFlushVertexArrayRangeAPPLE"));
            glVertexArrayParameteriAPPLE = Marshal.GetDelegateForFunctionPointer<GLVertexArrayParameteriAPPLE>(loader.Invoke("glVertexArrayParameteriAPPLE"));
            glEnableVertexAttribAPPLE = Marshal.GetDelegateForFunctionPointer<GLEnableVertexAttribAPPLE>(loader.Invoke("glEnableVertexAttribAPPLE"));
            glDisableVertexAttribAPPLE = Marshal.GetDelegateForFunctionPointer<GLDisableVertexAttribAPPLE>(loader.Invoke("glDisableVertexAttribAPPLE"));
            glIsVertexAttribEnabledAPPLE = Marshal.GetDelegateForFunctionPointer<GLIsVertexAttribEnabledAPPLE>(loader.Invoke("glIsVertexAttribEnabledAPPLE"));
            glMapVertexAttrib1dAPPLE = Marshal.GetDelegateForFunctionPointer<GLMapVertexAttrib1dAPPLE>(loader.Invoke("glMapVertexAttrib1dAPPLE"));
            glMapVertexAttrib1fAPPLE = Marshal.GetDelegateForFunctionPointer<GLMapVertexAttrib1fAPPLE>(loader.Invoke("glMapVertexAttrib1fAPPLE"));
            glMapVertexAttrib2dAPPLE = Marshal.GetDelegateForFunctionPointer<GLMapVertexAttrib2dAPPLE>(loader.Invoke("glMapVertexAttrib2dAPPLE"));
            glMapVertexAttrib2fAPPLE = Marshal.GetDelegateForFunctionPointer<GLMapVertexAttrib2fAPPLE>(loader.Invoke("glMapVertexAttrib2fAPPLE"));
            glReleaseShaderCompiler = Marshal.GetDelegateForFunctionPointer<GLReleaseShaderCompiler>(loader.Invoke("glReleaseShaderCompiler"));
            glShaderBinary = Marshal.GetDelegateForFunctionPointer<GLShaderBinary>(loader.Invoke("glShaderBinary"));
            glGetShaderPrecisionFormat = Marshal.GetDelegateForFunctionPointer<GLGetShaderPrecisionFormat>(loader.Invoke("glGetShaderPrecisionFormat"));
            glDepthRangef = Marshal.GetDelegateForFunctionPointer<GLDepthRangef>(loader.Invoke("glDepthRangef"));
            glClearDepthf = Marshal.GetDelegateForFunctionPointer<GLClearDepthf>(loader.Invoke("glClearDepthf"));
            glMemoryBarrierByRegion = Marshal.GetDelegateForFunctionPointer<GLMemoryBarrierByRegion>(loader.Invoke("glMemoryBarrierByRegion"));
            glPrimitiveBoundingBoxARB = Marshal.GetDelegateForFunctionPointer<GLPrimitiveBoundingBoxARB>(loader.Invoke("glPrimitiveBoundingBoxARB"));
            glDrawArraysInstancedBaseInstance = Marshal.GetDelegateForFunctionPointer<GLDrawArraysInstancedBaseInstance>(loader.Invoke("glDrawArraysInstancedBaseInstance"));
            glDrawElementsInstancedBaseInstance = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedBaseInstance>(loader.Invoke("glDrawElementsInstancedBaseInstance"));
            glDrawElementsInstancedBaseVertexBaseInstance = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedBaseVertexBaseInstance>(loader.Invoke("glDrawElementsInstancedBaseVertexBaseInstance"));
            glGetTextureHandleARB = Marshal.GetDelegateForFunctionPointer<GLGetTextureHandleARB>(loader.Invoke("glGetTextureHandleARB"));
            glGetTextureSamplerHandleARB = Marshal.GetDelegateForFunctionPointer<GLGetTextureSamplerHandleARB>(loader.Invoke("glGetTextureSamplerHandleARB"));
            glMakeTextureHandleResidentARB = Marshal.GetDelegateForFunctionPointer<GLMakeTextureHandleResidentARB>(loader.Invoke("glMakeTextureHandleResidentARB"));
            glMakeTextureHandleNonResidentARB = Marshal.GetDelegateForFunctionPointer<GLMakeTextureHandleNonResidentARB>(loader.Invoke("glMakeTextureHandleNonResidentARB"));
            glGetImageHandleARB = Marshal.GetDelegateForFunctionPointer<GLGetImageHandleARB>(loader.Invoke("glGetImageHandleARB"));
            glMakeImageHandleResidentARB = Marshal.GetDelegateForFunctionPointer<GLMakeImageHandleResidentARB>(loader.Invoke("glMakeImageHandleResidentARB"));
            glMakeImageHandleNonResidentARB = Marshal.GetDelegateForFunctionPointer<GLMakeImageHandleNonResidentARB>(loader.Invoke("glMakeImageHandleNonResidentARB"));
            glUniformHandleui64ARB = Marshal.GetDelegateForFunctionPointer<GLUniformHandleui64ARB>(loader.Invoke("glUniformHandleui64ARB"));
            glUniformHandleui64vARB = Marshal.GetDelegateForFunctionPointer<GLUniformHandleui64vARB>(loader.Invoke("glUniformHandleui64vARB"));
            glProgramUniformHandleui64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniformHandleui64ARB>(loader.Invoke("glProgramUniformHandleui64ARB"));
            glProgramUniformHandleui64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniformHandleui64vARB>(loader.Invoke("glProgramUniformHandleui64vARB"));
            glIsTextureHandleResidentARB = Marshal.GetDelegateForFunctionPointer<GLIsTextureHandleResidentARB>(loader.Invoke("glIsTextureHandleResidentARB"));
            glIsImageHandleResidentARB = Marshal.GetDelegateForFunctionPointer<GLIsImageHandleResidentARB>(loader.Invoke("glIsImageHandleResidentARB"));
            glVertexAttribL1ui64ARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1ui64ARB>(loader.Invoke("glVertexAttribL1ui64ARB"));
            glVertexAttribL1ui64vARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1ui64vARB>(loader.Invoke("glVertexAttribL1ui64vARB"));
            glGetVertexAttribLui64vARB = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribLui64vARB>(loader.Invoke("glGetVertexAttribLui64vARB"));
            glBindFragDataLocationIndexed = Marshal.GetDelegateForFunctionPointer<GLBindFragDataLocationIndexed>(loader.Invoke("glBindFragDataLocationIndexed"));
            glGetFragDataIndex = Marshal.GetDelegateForFunctionPointer<GLGetFragDataIndex>(loader.Invoke("glGetFragDataIndex"));
            glBufferStorage = Marshal.GetDelegateForFunctionPointer<GLBufferStorage>(loader.Invoke("glBufferStorage"));
            glCreateSyncFromCLeventARB = Marshal.GetDelegateForFunctionPointer<GLCreateSyncFromCLeventARB>(loader.Invoke("glCreateSyncFromCLeventARB"));
            glClearBufferData = Marshal.GetDelegateForFunctionPointer<GLClearBufferData>(loader.Invoke("glClearBufferData"));
            glClearBufferSubData = Marshal.GetDelegateForFunctionPointer<GLClearBufferSubData>(loader.Invoke("glClearBufferSubData"));
            glClearTexImage = Marshal.GetDelegateForFunctionPointer<GLClearTexImage>(loader.Invoke("glClearTexImage"));
            glClearTexSubImage = Marshal.GetDelegateForFunctionPointer<GLClearTexSubImage>(loader.Invoke("glClearTexSubImage"));
            glClipControl = Marshal.GetDelegateForFunctionPointer<GLClipControl>(loader.Invoke("glClipControl"));
            glClampColorARB = Marshal.GetDelegateForFunctionPointer<GLClampColorARB>(loader.Invoke("glClampColorARB"));
            glDispatchCompute = Marshal.GetDelegateForFunctionPointer<GLDispatchCompute>(loader.Invoke("glDispatchCompute"));
            glDispatchComputeIndirect = Marshal.GetDelegateForFunctionPointer<GLDispatchComputeIndirect>(loader.Invoke("glDispatchComputeIndirect"));
            glDispatchComputeGroupSizeARB = Marshal.GetDelegateForFunctionPointer<GLDispatchComputeGroupSizeARB>(loader.Invoke("glDispatchComputeGroupSizeARB"));
            glCopyBufferSubData = Marshal.GetDelegateForFunctionPointer<GLCopyBufferSubData>(loader.Invoke("glCopyBufferSubData"));
            glCopyImageSubData = Marshal.GetDelegateForFunctionPointer<GLCopyImageSubData>(loader.Invoke("glCopyImageSubData"));
            glDebugMessageControlARB = Marshal.GetDelegateForFunctionPointer<GLDebugMessageControlARB>(loader.Invoke("glDebugMessageControlARB"));
            glDebugMessageInsertARB = Marshal.GetDelegateForFunctionPointer<GLDebugMessageInsertARB>(loader.Invoke("glDebugMessageInsertARB"));
            glDebugMessageCallbackARB = Marshal.GetDelegateForFunctionPointer<GLDebugMessageCallbackARB>(loader.Invoke("glDebugMessageCallbackARB"));
            glGetDebugMessageLogARB = Marshal.GetDelegateForFunctionPointer<GLGetDebugMessageLogARB>(loader.Invoke("glGetDebugMessageLogARB"));
            glCreateTransformFeedbacks = Marshal.GetDelegateForFunctionPointer<GLCreateTransformFeedbacks>(loader.Invoke("glCreateTransformFeedbacks"));
            glTransformFeedbackBufferBase = Marshal.GetDelegateForFunctionPointer<GLTransformFeedbackBufferBase>(loader.Invoke("glTransformFeedbackBufferBase"));
            glTransformFeedbackBufferRange = Marshal.GetDelegateForFunctionPointer<GLTransformFeedbackBufferRange>(loader.Invoke("glTransformFeedbackBufferRange"));
            glGetTransformFeedbackiv = Marshal.GetDelegateForFunctionPointer<GLGetTransformFeedbackiv>(loader.Invoke("glGetTransformFeedbackiv"));
            glGetTransformFeedbacki_v = Marshal.GetDelegateForFunctionPointer<GLGetTransformFeedbacki_v>(loader.Invoke("glGetTransformFeedbacki_v"));
            glGetTransformFeedbacki64_v = Marshal.GetDelegateForFunctionPointer<GLGetTransformFeedbacki64_v>(loader.Invoke("glGetTransformFeedbacki64_v"));
            glCreateBuffers = Marshal.GetDelegateForFunctionPointer<GLCreateBuffers>(loader.Invoke("glCreateBuffers"));
            glNamedBufferStorage = Marshal.GetDelegateForFunctionPointer<GLNamedBufferStorage>(loader.Invoke("glNamedBufferStorage"));
            glNamedBufferData = Marshal.GetDelegateForFunctionPointer<GLNamedBufferData>(loader.Invoke("glNamedBufferData"));
            glNamedBufferSubData = Marshal.GetDelegateForFunctionPointer<GLNamedBufferSubData>(loader.Invoke("glNamedBufferSubData"));
            glCopyNamedBufferSubData = Marshal.GetDelegateForFunctionPointer<GLCopyNamedBufferSubData>(loader.Invoke("glCopyNamedBufferSubData"));
            glClearNamedBufferData = Marshal.GetDelegateForFunctionPointer<GLClearNamedBufferData>(loader.Invoke("glClearNamedBufferData"));
            glClearNamedBufferSubData = Marshal.GetDelegateForFunctionPointer<GLClearNamedBufferSubData>(loader.Invoke("glClearNamedBufferSubData"));
            glMapNamedBuffer = Marshal.GetDelegateForFunctionPointer<GLMapNamedBuffer>(loader.Invoke("glMapNamedBuffer"));
            glMapNamedBufferRange = Marshal.GetDelegateForFunctionPointer<GLMapNamedBufferRange>(loader.Invoke("glMapNamedBufferRange"));
            glUnmapNamedBuffer = Marshal.GetDelegateForFunctionPointer<GLUnmapNamedBuffer>(loader.Invoke("glUnmapNamedBuffer"));
            glFlushMappedNamedBufferRange = Marshal.GetDelegateForFunctionPointer<GLFlushMappedNamedBufferRange>(loader.Invoke("glFlushMappedNamedBufferRange"));
            glGetNamedBufferParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferParameteriv>(loader.Invoke("glGetNamedBufferParameteriv"));
            glGetNamedBufferParameteri64v = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferParameteri64v>(loader.Invoke("glGetNamedBufferParameteri64v"));
            glGetNamedBufferPointerv = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferPointerv>(loader.Invoke("glGetNamedBufferPointerv"));
            glGetNamedBufferSubData = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferSubData>(loader.Invoke("glGetNamedBufferSubData"));
            glCreateFramebuffers = Marshal.GetDelegateForFunctionPointer<GLCreateFramebuffers>(loader.Invoke("glCreateFramebuffers"));
            glNamedFramebufferRenderbuffer = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferRenderbuffer>(loader.Invoke("glNamedFramebufferRenderbuffer"));
            glNamedFramebufferParameteri = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferParameteri>(loader.Invoke("glNamedFramebufferParameteri"));
            glNamedFramebufferTexture = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTexture>(loader.Invoke("glNamedFramebufferTexture"));
            glNamedFramebufferTextureLayer = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTextureLayer>(loader.Invoke("glNamedFramebufferTextureLayer"));
            glNamedFramebufferDrawBuffer = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferDrawBuffer>(loader.Invoke("glNamedFramebufferDrawBuffer"));
            glNamedFramebufferDrawBuffers = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferDrawBuffers>(loader.Invoke("glNamedFramebufferDrawBuffers"));
            glNamedFramebufferReadBuffer = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferReadBuffer>(loader.Invoke("glNamedFramebufferReadBuffer"));
            glInvalidateNamedFramebufferData = Marshal.GetDelegateForFunctionPointer<GLInvalidateNamedFramebufferData>(loader.Invoke("glInvalidateNamedFramebufferData"));
            glInvalidateNamedFramebufferSubData = Marshal.GetDelegateForFunctionPointer<GLInvalidateNamedFramebufferSubData>(loader.Invoke("glInvalidateNamedFramebufferSubData"));
            glClearNamedFramebufferiv = Marshal.GetDelegateForFunctionPointer<GLClearNamedFramebufferiv>(loader.Invoke("glClearNamedFramebufferiv"));
            glClearNamedFramebufferuiv = Marshal.GetDelegateForFunctionPointer<GLClearNamedFramebufferuiv>(loader.Invoke("glClearNamedFramebufferuiv"));
            glClearNamedFramebufferfv = Marshal.GetDelegateForFunctionPointer<GLClearNamedFramebufferfv>(loader.Invoke("glClearNamedFramebufferfv"));
            glClearNamedFramebufferfi = Marshal.GetDelegateForFunctionPointer<GLClearNamedFramebufferfi>(loader.Invoke("glClearNamedFramebufferfi"));
            glBlitNamedFramebuffer = Marshal.GetDelegateForFunctionPointer<GLBlitNamedFramebuffer>(loader.Invoke("glBlitNamedFramebuffer"));
            glCheckNamedFramebufferStatus = Marshal.GetDelegateForFunctionPointer<GLCheckNamedFramebufferStatus>(loader.Invoke("glCheckNamedFramebufferStatus"));
            glGetNamedFramebufferParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetNamedFramebufferParameteriv>(loader.Invoke("glGetNamedFramebufferParameteriv"));
            glGetNamedFramebufferAttachmentParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetNamedFramebufferAttachmentParameteriv>(loader.Invoke("glGetNamedFramebufferAttachmentParameteriv"));
            glCreateRenderbuffers = Marshal.GetDelegateForFunctionPointer<GLCreateRenderbuffers>(loader.Invoke("glCreateRenderbuffers"));
            glNamedRenderbufferStorage = Marshal.GetDelegateForFunctionPointer<GLNamedRenderbufferStorage>(loader.Invoke("glNamedRenderbufferStorage"));
            glNamedRenderbufferStorageMultisample = Marshal.GetDelegateForFunctionPointer<GLNamedRenderbufferStorageMultisample>(loader.Invoke("glNamedRenderbufferStorageMultisample"));
            glGetNamedRenderbufferParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetNamedRenderbufferParameteriv>(loader.Invoke("glGetNamedRenderbufferParameteriv"));
            glCreateTextures = Marshal.GetDelegateForFunctionPointer<GLCreateTextures>(loader.Invoke("glCreateTextures"));
            glTextureBuffer = Marshal.GetDelegateForFunctionPointer<GLTextureBuffer>(loader.Invoke("glTextureBuffer"));
            glTextureBufferRange = Marshal.GetDelegateForFunctionPointer<GLTextureBufferRange>(loader.Invoke("glTextureBufferRange"));
            glTextureStorage1D = Marshal.GetDelegateForFunctionPointer<GLTextureStorage1D>(loader.Invoke("glTextureStorage1D"));
            glTextureStorage2D = Marshal.GetDelegateForFunctionPointer<GLTextureStorage2D>(loader.Invoke("glTextureStorage2D"));
            glTextureStorage3D = Marshal.GetDelegateForFunctionPointer<GLTextureStorage3D>(loader.Invoke("glTextureStorage3D"));
            glTextureStorage2DMultisample = Marshal.GetDelegateForFunctionPointer<GLTextureStorage2DMultisample>(loader.Invoke("glTextureStorage2DMultisample"));
            glTextureStorage3DMultisample = Marshal.GetDelegateForFunctionPointer<GLTextureStorage3DMultisample>(loader.Invoke("glTextureStorage3DMultisample"));
            glTextureSubImage1D = Marshal.GetDelegateForFunctionPointer<GLTextureSubImage1D>(loader.Invoke("glTextureSubImage1D"));
            glTextureSubImage2D = Marshal.GetDelegateForFunctionPointer<GLTextureSubImage2D>(loader.Invoke("glTextureSubImage2D"));
            glTextureSubImage3D = Marshal.GetDelegateForFunctionPointer<GLTextureSubImage3D>(loader.Invoke("glTextureSubImage3D"));
            glCompressedTextureSubImage1D = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureSubImage1D>(loader.Invoke("glCompressedTextureSubImage1D"));
            glCompressedTextureSubImage2D = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureSubImage2D>(loader.Invoke("glCompressedTextureSubImage2D"));
            glCompressedTextureSubImage3D = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureSubImage3D>(loader.Invoke("glCompressedTextureSubImage3D"));
            glCopyTextureSubImage1D = Marshal.GetDelegateForFunctionPointer<GLCopyTextureSubImage1D>(loader.Invoke("glCopyTextureSubImage1D"));
            glCopyTextureSubImage2D = Marshal.GetDelegateForFunctionPointer<GLCopyTextureSubImage2D>(loader.Invoke("glCopyTextureSubImage2D"));
            glCopyTextureSubImage3D = Marshal.GetDelegateForFunctionPointer<GLCopyTextureSubImage3D>(loader.Invoke("glCopyTextureSubImage3D"));
            glTextureParameterf = Marshal.GetDelegateForFunctionPointer<GLTextureParameterf>(loader.Invoke("glTextureParameterf"));
            glTextureParameterfv = Marshal.GetDelegateForFunctionPointer<GLTextureParameterfv>(loader.Invoke("glTextureParameterfv"));
            glTextureParameteri = Marshal.GetDelegateForFunctionPointer<GLTextureParameteri>(loader.Invoke("glTextureParameteri"));
            glTextureParameterIiv = Marshal.GetDelegateForFunctionPointer<GLTextureParameterIiv>(loader.Invoke("glTextureParameterIiv"));
            glTextureParameterIuiv = Marshal.GetDelegateForFunctionPointer<GLTextureParameterIuiv>(loader.Invoke("glTextureParameterIuiv"));
            glTextureParameteriv = Marshal.GetDelegateForFunctionPointer<GLTextureParameteriv>(loader.Invoke("glTextureParameteriv"));
            glGenerateTextureMipmap = Marshal.GetDelegateForFunctionPointer<GLGenerateTextureMipmap>(loader.Invoke("glGenerateTextureMipmap"));
            glBindTextureUnit = Marshal.GetDelegateForFunctionPointer<GLBindTextureUnit>(loader.Invoke("glBindTextureUnit"));
            glGetTextureImage = Marshal.GetDelegateForFunctionPointer<GLGetTextureImage>(loader.Invoke("glGetTextureImage"));
            glGetCompressedTextureImage = Marshal.GetDelegateForFunctionPointer<GLGetCompressedTextureImage>(loader.Invoke("glGetCompressedTextureImage"));
            glGetTextureLevelParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetTextureLevelParameterfv>(loader.Invoke("glGetTextureLevelParameterfv"));
            glGetTextureLevelParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetTextureLevelParameteriv>(loader.Invoke("glGetTextureLevelParameteriv"));
            glGetTextureParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameterfv>(loader.Invoke("glGetTextureParameterfv"));
            glGetTextureParameterIiv = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameterIiv>(loader.Invoke("glGetTextureParameterIiv"));
            glGetTextureParameterIuiv = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameterIuiv>(loader.Invoke("glGetTextureParameterIuiv"));
            glGetTextureParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameteriv>(loader.Invoke("glGetTextureParameteriv"));
            glCreateVertexArrays = Marshal.GetDelegateForFunctionPointer<GLCreateVertexArrays>(loader.Invoke("glCreateVertexArrays"));
            glDisableVertexArrayAttrib = Marshal.GetDelegateForFunctionPointer<GLDisableVertexArrayAttrib>(loader.Invoke("glDisableVertexArrayAttrib"));
            glEnableVertexArrayAttrib = Marshal.GetDelegateForFunctionPointer<GLEnableVertexArrayAttrib>(loader.Invoke("glEnableVertexArrayAttrib"));
            glVertexArrayElementBuffer = Marshal.GetDelegateForFunctionPointer<GLVertexArrayElementBuffer>(loader.Invoke("glVertexArrayElementBuffer"));
            glVertexArrayVertexBuffer = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexBuffer>(loader.Invoke("glVertexArrayVertexBuffer"));
            glVertexArrayVertexBuffers = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexBuffers>(loader.Invoke("glVertexArrayVertexBuffers"));
            glVertexArrayAttribBinding = Marshal.GetDelegateForFunctionPointer<GLVertexArrayAttribBinding>(loader.Invoke("glVertexArrayAttribBinding"));
            glVertexArrayAttribFormat = Marshal.GetDelegateForFunctionPointer<GLVertexArrayAttribFormat>(loader.Invoke("glVertexArrayAttribFormat"));
            glVertexArrayAttribIFormat = Marshal.GetDelegateForFunctionPointer<GLVertexArrayAttribIFormat>(loader.Invoke("glVertexArrayAttribIFormat"));
            glVertexArrayAttribLFormat = Marshal.GetDelegateForFunctionPointer<GLVertexArrayAttribLFormat>(loader.Invoke("glVertexArrayAttribLFormat"));
            glVertexArrayBindingDivisor = Marshal.GetDelegateForFunctionPointer<GLVertexArrayBindingDivisor>(loader.Invoke("glVertexArrayBindingDivisor"));
            glGetVertexArrayiv = Marshal.GetDelegateForFunctionPointer<GLGetVertexArrayiv>(loader.Invoke("glGetVertexArrayiv"));
            glGetVertexArrayIndexediv = Marshal.GetDelegateForFunctionPointer<GLGetVertexArrayIndexediv>(loader.Invoke("glGetVertexArrayIndexediv"));
            glGetVertexArrayIndexed64iv = Marshal.GetDelegateForFunctionPointer<GLGetVertexArrayIndexed64iv>(loader.Invoke("glGetVertexArrayIndexed64iv"));
            glCreateSamplers = Marshal.GetDelegateForFunctionPointer<GLCreateSamplers>(loader.Invoke("glCreateSamplers"));
            glCreateProgramPipelines = Marshal.GetDelegateForFunctionPointer<GLCreateProgramPipelines>(loader.Invoke("glCreateProgramPipelines"));
            glCreateQueries = Marshal.GetDelegateForFunctionPointer<GLCreateQueries>(loader.Invoke("glCreateQueries"));
            glGetQueryBufferObjecti64v = Marshal.GetDelegateForFunctionPointer<GLGetQueryBufferObjecti64v>(loader.Invoke("glGetQueryBufferObjecti64v"));
            glGetQueryBufferObjectiv = Marshal.GetDelegateForFunctionPointer<GLGetQueryBufferObjectiv>(loader.Invoke("glGetQueryBufferObjectiv"));
            glGetQueryBufferObjectui64v = Marshal.GetDelegateForFunctionPointer<GLGetQueryBufferObjectui64v>(loader.Invoke("glGetQueryBufferObjectui64v"));
            glGetQueryBufferObjectuiv = Marshal.GetDelegateForFunctionPointer<GLGetQueryBufferObjectuiv>(loader.Invoke("glGetQueryBufferObjectuiv"));
            glDrawBuffersARB = Marshal.GetDelegateForFunctionPointer<GLDrawBuffersARB>(loader.Invoke("glDrawBuffersARB"));
            glBlendEquationiARB = Marshal.GetDelegateForFunctionPointer<GLBlendEquationiARB>(loader.Invoke("glBlendEquationiARB"));
            glBlendEquationSeparateiARB = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparateiARB>(loader.Invoke("glBlendEquationSeparateiARB"));
            glBlendFunciARB = Marshal.GetDelegateForFunctionPointer<GLBlendFunciARB>(loader.Invoke("glBlendFunciARB"));
            glBlendFuncSeparateiARB = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparateiARB>(loader.Invoke("glBlendFuncSeparateiARB"));
            glDrawElementsBaseVertex = Marshal.GetDelegateForFunctionPointer<GLDrawElementsBaseVertex>(loader.Invoke("glDrawElementsBaseVertex"));
            glDrawRangeElementsBaseVertex = Marshal.GetDelegateForFunctionPointer<GLDrawRangeElementsBaseVertex>(loader.Invoke("glDrawRangeElementsBaseVertex"));
            glDrawElementsInstancedBaseVertex = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedBaseVertex>(loader.Invoke("glDrawElementsInstancedBaseVertex"));
            glMultiDrawElementsBaseVertex = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsBaseVertex>(loader.Invoke("glMultiDrawElementsBaseVertex"));
            glDrawArraysIndirect = Marshal.GetDelegateForFunctionPointer<GLDrawArraysIndirect>(loader.Invoke("glDrawArraysIndirect"));
            glDrawElementsIndirect = Marshal.GetDelegateForFunctionPointer<GLDrawElementsIndirect>(loader.Invoke("glDrawElementsIndirect"));
            glDrawArraysInstancedARB = Marshal.GetDelegateForFunctionPointer<GLDrawArraysInstancedARB>(loader.Invoke("glDrawArraysInstancedARB"));
            glDrawElementsInstancedARB = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedARB>(loader.Invoke("glDrawElementsInstancedARB"));
            glProgramStringARB = Marshal.GetDelegateForFunctionPointer<GLProgramStringARB>(loader.Invoke("glProgramStringARB"));
            glBindProgramARB = Marshal.GetDelegateForFunctionPointer<GLBindProgramARB>(loader.Invoke("glBindProgramARB"));
            glDeleteProgramsARB = Marshal.GetDelegateForFunctionPointer<GLDeleteProgramsARB>(loader.Invoke("glDeleteProgramsARB"));
            glGenProgramsARB = Marshal.GetDelegateForFunctionPointer<GLGenProgramsARB>(loader.Invoke("glGenProgramsARB"));
            glProgramEnvParameter4dARB = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameter4dARB>(loader.Invoke("glProgramEnvParameter4dARB"));
            glProgramEnvParameter4dvARB = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameter4dvARB>(loader.Invoke("glProgramEnvParameter4dvARB"));
            glProgramEnvParameter4fARB = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameter4fARB>(loader.Invoke("glProgramEnvParameter4fARB"));
            glProgramEnvParameter4fvARB = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameter4fvARB>(loader.Invoke("glProgramEnvParameter4fvARB"));
            glProgramLocalParameter4dARB = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameter4dARB>(loader.Invoke("glProgramLocalParameter4dARB"));
            glProgramLocalParameter4dvARB = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameter4dvARB>(loader.Invoke("glProgramLocalParameter4dvARB"));
            glProgramLocalParameter4fARB = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameter4fARB>(loader.Invoke("glProgramLocalParameter4fARB"));
            glProgramLocalParameter4fvARB = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameter4fvARB>(loader.Invoke("glProgramLocalParameter4fvARB"));
            glGetProgramEnvParameterdvARB = Marshal.GetDelegateForFunctionPointer<GLGetProgramEnvParameterdvARB>(loader.Invoke("glGetProgramEnvParameterdvARB"));
            glGetProgramEnvParameterfvARB = Marshal.GetDelegateForFunctionPointer<GLGetProgramEnvParameterfvARB>(loader.Invoke("glGetProgramEnvParameterfvARB"));
            glGetProgramLocalParameterdvARB = Marshal.GetDelegateForFunctionPointer<GLGetProgramLocalParameterdvARB>(loader.Invoke("glGetProgramLocalParameterdvARB"));
            glGetProgramLocalParameterfvARB = Marshal.GetDelegateForFunctionPointer<GLGetProgramLocalParameterfvARB>(loader.Invoke("glGetProgramLocalParameterfvARB"));
            glGetProgramivARB = Marshal.GetDelegateForFunctionPointer<GLGetProgramivARB>(loader.Invoke("glGetProgramivARB"));
            glGetProgramStringARB = Marshal.GetDelegateForFunctionPointer<GLGetProgramStringARB>(loader.Invoke("glGetProgramStringARB"));
            glIsProgramARB = Marshal.GetDelegateForFunctionPointer<GLIsProgramARB>(loader.Invoke("glIsProgramARB"));
            glFramebufferParameteri = Marshal.GetDelegateForFunctionPointer<GLFramebufferParameteri>(loader.Invoke("glFramebufferParameteri"));
            glGetFramebufferParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferParameteriv>(loader.Invoke("glGetFramebufferParameteriv"));
            glIsRenderbuffer = Marshal.GetDelegateForFunctionPointer<GLIsRenderbuffer>(loader.Invoke("glIsRenderbuffer"));
            glBindRenderbuffer = Marshal.GetDelegateForFunctionPointer<GLBindRenderbuffer>(loader.Invoke("glBindRenderbuffer"));
            glDeleteRenderbuffers = Marshal.GetDelegateForFunctionPointer<GLDeleteRenderbuffers>(loader.Invoke("glDeleteRenderbuffers"));
            glGenRenderbuffers = Marshal.GetDelegateForFunctionPointer<GLGenRenderbuffers>(loader.Invoke("glGenRenderbuffers"));
            glRenderbufferStorage = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorage>(loader.Invoke("glRenderbufferStorage"));
            glGetRenderbufferParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetRenderbufferParameteriv>(loader.Invoke("glGetRenderbufferParameteriv"));
            glIsFramebuffer = Marshal.GetDelegateForFunctionPointer<GLIsFramebuffer>(loader.Invoke("glIsFramebuffer"));
            glBindFramebuffer = Marshal.GetDelegateForFunctionPointer<GLBindFramebuffer>(loader.Invoke("glBindFramebuffer"));
            glDeleteFramebuffers = Marshal.GetDelegateForFunctionPointer<GLDeleteFramebuffers>(loader.Invoke("glDeleteFramebuffers"));
            glGenFramebuffers = Marshal.GetDelegateForFunctionPointer<GLGenFramebuffers>(loader.Invoke("glGenFramebuffers"));
            glCheckFramebufferStatus = Marshal.GetDelegateForFunctionPointer<GLCheckFramebufferStatus>(loader.Invoke("glCheckFramebufferStatus"));
            glFramebufferTexture1D = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture1D>(loader.Invoke("glFramebufferTexture1D"));
            glFramebufferTexture2D = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture2D>(loader.Invoke("glFramebufferTexture2D"));
            glFramebufferTexture3D = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture3D>(loader.Invoke("glFramebufferTexture3D"));
            glFramebufferRenderbuffer = Marshal.GetDelegateForFunctionPointer<GLFramebufferRenderbuffer>(loader.Invoke("glFramebufferRenderbuffer"));
            glGetFramebufferAttachmentParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferAttachmentParameteriv>(loader.Invoke("glGetFramebufferAttachmentParameteriv"));
            glGenerateMipmap = Marshal.GetDelegateForFunctionPointer<GLGenerateMipmap>(loader.Invoke("glGenerateMipmap"));
            glBlitFramebuffer = Marshal.GetDelegateForFunctionPointer<GLBlitFramebuffer>(loader.Invoke("glBlitFramebuffer"));
            glRenderbufferStorageMultisample = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisample>(loader.Invoke("glRenderbufferStorageMultisample"));
            glFramebufferTextureLayer = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureLayer>(loader.Invoke("glFramebufferTextureLayer"));
            glProgramParameteriARB = Marshal.GetDelegateForFunctionPointer<GLProgramParameteriARB>(loader.Invoke("glProgramParameteriARB"));
            glFramebufferTextureARB = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureARB>(loader.Invoke("glFramebufferTextureARB"));
            glFramebufferTextureLayerARB = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureLayerARB>(loader.Invoke("glFramebufferTextureLayerARB"));
            glFramebufferTextureFaceARB = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureFaceARB>(loader.Invoke("glFramebufferTextureFaceARB"));
            glGetProgramBinary = Marshal.GetDelegateForFunctionPointer<GLGetProgramBinary>(loader.Invoke("glGetProgramBinary"));
            glProgramBinary = Marshal.GetDelegateForFunctionPointer<GLProgramBinary>(loader.Invoke("glProgramBinary"));
            glProgramParameteri = Marshal.GetDelegateForFunctionPointer<GLProgramParameteri>(loader.Invoke("glProgramParameteri"));
            glGetTextureSubImage = Marshal.GetDelegateForFunctionPointer<GLGetTextureSubImage>(loader.Invoke("glGetTextureSubImage"));
            glGetCompressedTextureSubImage = Marshal.GetDelegateForFunctionPointer<GLGetCompressedTextureSubImage>(loader.Invoke("glGetCompressedTextureSubImage"));
            glSpecializeShaderARB = Marshal.GetDelegateForFunctionPointer<GLSpecializeShaderARB>(loader.Invoke("glSpecializeShaderARB"));
            glUniform1d = Marshal.GetDelegateForFunctionPointer<GLUniform1d>(loader.Invoke("glUniform1d"));
            glUniform2d = Marshal.GetDelegateForFunctionPointer<GLUniform2d>(loader.Invoke("glUniform2d"));
            glUniform3d = Marshal.GetDelegateForFunctionPointer<GLUniform3d>(loader.Invoke("glUniform3d"));
            glUniform4d = Marshal.GetDelegateForFunctionPointer<GLUniform4d>(loader.Invoke("glUniform4d"));
            glUniform1dv = Marshal.GetDelegateForFunctionPointer<GLUniform1dv>(loader.Invoke("glUniform1dv"));
            glUniform2dv = Marshal.GetDelegateForFunctionPointer<GLUniform2dv>(loader.Invoke("glUniform2dv"));
            glUniform3dv = Marshal.GetDelegateForFunctionPointer<GLUniform3dv>(loader.Invoke("glUniform3dv"));
            glUniform4dv = Marshal.GetDelegateForFunctionPointer<GLUniform4dv>(loader.Invoke("glUniform4dv"));
            glUniformMatrix2dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2dv>(loader.Invoke("glUniformMatrix2dv"));
            glUniformMatrix3dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3dv>(loader.Invoke("glUniformMatrix3dv"));
            glUniformMatrix4dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4dv>(loader.Invoke("glUniformMatrix4dv"));
            glUniformMatrix2x3dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2x3dv>(loader.Invoke("glUniformMatrix2x3dv"));
            glUniformMatrix2x4dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2x4dv>(loader.Invoke("glUniformMatrix2x4dv"));
            glUniformMatrix3x2dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3x2dv>(loader.Invoke("glUniformMatrix3x2dv"));
            glUniformMatrix3x4dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3x4dv>(loader.Invoke("glUniformMatrix3x4dv"));
            glUniformMatrix4x2dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4x2dv>(loader.Invoke("glUniformMatrix4x2dv"));
            glUniformMatrix4x3dv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4x3dv>(loader.Invoke("glUniformMatrix4x3dv"));
            glGetUniformdv = Marshal.GetDelegateForFunctionPointer<GLGetUniformdv>(loader.Invoke("glGetUniformdv"));
            glUniform1i64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform1i64ARB>(loader.Invoke("glUniform1i64ARB"));
            glUniform2i64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform2i64ARB>(loader.Invoke("glUniform2i64ARB"));
            glUniform3i64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform3i64ARB>(loader.Invoke("glUniform3i64ARB"));
            glUniform4i64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform4i64ARB>(loader.Invoke("glUniform4i64ARB"));
            glUniform1i64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform1i64vARB>(loader.Invoke("glUniform1i64vARB"));
            glUniform2i64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform2i64vARB>(loader.Invoke("glUniform2i64vARB"));
            glUniform3i64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform3i64vARB>(loader.Invoke("glUniform3i64vARB"));
            glUniform4i64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform4i64vARB>(loader.Invoke("glUniform4i64vARB"));
            glUniform1ui64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform1ui64ARB>(loader.Invoke("glUniform1ui64ARB"));
            glUniform2ui64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform2ui64ARB>(loader.Invoke("glUniform2ui64ARB"));
            glUniform3ui64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform3ui64ARB>(loader.Invoke("glUniform3ui64ARB"));
            glUniform4ui64ARB = Marshal.GetDelegateForFunctionPointer<GLUniform4ui64ARB>(loader.Invoke("glUniform4ui64ARB"));
            glUniform1ui64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform1ui64vARB>(loader.Invoke("glUniform1ui64vARB"));
            glUniform2ui64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform2ui64vARB>(loader.Invoke("glUniform2ui64vARB"));
            glUniform3ui64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform3ui64vARB>(loader.Invoke("glUniform3ui64vARB"));
            glUniform4ui64vARB = Marshal.GetDelegateForFunctionPointer<GLUniform4ui64vARB>(loader.Invoke("glUniform4ui64vARB"));
            glGetUniformi64vARB = Marshal.GetDelegateForFunctionPointer<GLGetUniformi64vARB>(loader.Invoke("glGetUniformi64vARB"));
            glGetUniformui64vARB = Marshal.GetDelegateForFunctionPointer<GLGetUniformui64vARB>(loader.Invoke("glGetUniformui64vARB"));
            glGetnUniformi64vARB = Marshal.GetDelegateForFunctionPointer<GLGetnUniformi64vARB>(loader.Invoke("glGetnUniformi64vARB"));
            glGetnUniformui64vARB = Marshal.GetDelegateForFunctionPointer<GLGetnUniformui64vARB>(loader.Invoke("glGetnUniformui64vARB"));
            glProgramUniform1i64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1i64ARB>(loader.Invoke("glProgramUniform1i64ARB"));
            glProgramUniform2i64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2i64ARB>(loader.Invoke("glProgramUniform2i64ARB"));
            glProgramUniform3i64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3i64ARB>(loader.Invoke("glProgramUniform3i64ARB"));
            glProgramUniform4i64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4i64ARB>(loader.Invoke("glProgramUniform4i64ARB"));
            glProgramUniform1i64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1i64vARB>(loader.Invoke("glProgramUniform1i64vARB"));
            glProgramUniform2i64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2i64vARB>(loader.Invoke("glProgramUniform2i64vARB"));
            glProgramUniform3i64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3i64vARB>(loader.Invoke("glProgramUniform3i64vARB"));
            glProgramUniform4i64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4i64vARB>(loader.Invoke("glProgramUniform4i64vARB"));
            glProgramUniform1ui64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1ui64ARB>(loader.Invoke("glProgramUniform1ui64ARB"));
            glProgramUniform2ui64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2ui64ARB>(loader.Invoke("glProgramUniform2ui64ARB"));
            glProgramUniform3ui64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3ui64ARB>(loader.Invoke("glProgramUniform3ui64ARB"));
            glProgramUniform4ui64ARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4ui64ARB>(loader.Invoke("glProgramUniform4ui64ARB"));
            glProgramUniform1ui64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1ui64vARB>(loader.Invoke("glProgramUniform1ui64vARB"));
            glProgramUniform2ui64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2ui64vARB>(loader.Invoke("glProgramUniform2ui64vARB"));
            glProgramUniform3ui64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3ui64vARB>(loader.Invoke("glProgramUniform3ui64vARB"));
            glProgramUniform4ui64vARB = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4ui64vARB>(loader.Invoke("glProgramUniform4ui64vARB"));
            glBlendColor = Marshal.GetDelegateForFunctionPointer<GLBlendColor>(loader.Invoke("glBlendColor"));
            glBlendEquation = Marshal.GetDelegateForFunctionPointer<GLBlendEquation>(loader.Invoke("glBlendEquation"));
            glColorTable = Marshal.GetDelegateForFunctionPointer<GLColorTable>(loader.Invoke("glColorTable"));
            glColorTableParameterfv = Marshal.GetDelegateForFunctionPointer<GLColorTableParameterfv>(loader.Invoke("glColorTableParameterfv"));
            glColorTableParameteriv = Marshal.GetDelegateForFunctionPointer<GLColorTableParameteriv>(loader.Invoke("glColorTableParameteriv"));
            glCopyColorTable = Marshal.GetDelegateForFunctionPointer<GLCopyColorTable>(loader.Invoke("glCopyColorTable"));
            glGetColorTable = Marshal.GetDelegateForFunctionPointer<GLGetColorTable>(loader.Invoke("glGetColorTable"));
            glGetColorTableParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetColorTableParameterfv>(loader.Invoke("glGetColorTableParameterfv"));
            glGetColorTableParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetColorTableParameteriv>(loader.Invoke("glGetColorTableParameteriv"));
            glColorSubTable = Marshal.GetDelegateForFunctionPointer<GLColorSubTable>(loader.Invoke("glColorSubTable"));
            glCopyColorSubTable = Marshal.GetDelegateForFunctionPointer<GLCopyColorSubTable>(loader.Invoke("glCopyColorSubTable"));
            glConvolutionFilter1D = Marshal.GetDelegateForFunctionPointer<GLConvolutionFilter1D>(loader.Invoke("glConvolutionFilter1D"));
            glConvolutionFilter2D = Marshal.GetDelegateForFunctionPointer<GLConvolutionFilter2D>(loader.Invoke("glConvolutionFilter2D"));
            glConvolutionParameterf = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameterf>(loader.Invoke("glConvolutionParameterf"));
            glConvolutionParameterfv = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameterfv>(loader.Invoke("glConvolutionParameterfv"));
            glConvolutionParameteri = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameteri>(loader.Invoke("glConvolutionParameteri"));
            glConvolutionParameteriv = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameteriv>(loader.Invoke("glConvolutionParameteriv"));
            glCopyConvolutionFilter1D = Marshal.GetDelegateForFunctionPointer<GLCopyConvolutionFilter1D>(loader.Invoke("glCopyConvolutionFilter1D"));
            glCopyConvolutionFilter2D = Marshal.GetDelegateForFunctionPointer<GLCopyConvolutionFilter2D>(loader.Invoke("glCopyConvolutionFilter2D"));
            glGetConvolutionFilter = Marshal.GetDelegateForFunctionPointer<GLGetConvolutionFilter>(loader.Invoke("glGetConvolutionFilter"));
            glGetConvolutionParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetConvolutionParameterfv>(loader.Invoke("glGetConvolutionParameterfv"));
            glGetConvolutionParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetConvolutionParameteriv>(loader.Invoke("glGetConvolutionParameteriv"));
            glGetSeparableFilter = Marshal.GetDelegateForFunctionPointer<GLGetSeparableFilter>(loader.Invoke("glGetSeparableFilter"));
            glSeparableFilter2D = Marshal.GetDelegateForFunctionPointer<GLSeparableFilter2D>(loader.Invoke("glSeparableFilter2D"));
            glGetHistogram = Marshal.GetDelegateForFunctionPointer<GLGetHistogram>(loader.Invoke("glGetHistogram"));
            glGetHistogramParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetHistogramParameterfv>(loader.Invoke("glGetHistogramParameterfv"));
            glGetHistogramParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetHistogramParameteriv>(loader.Invoke("glGetHistogramParameteriv"));
            glGetMinmax = Marshal.GetDelegateForFunctionPointer<GLGetMinmax>(loader.Invoke("glGetMinmax"));
            glGetMinmaxParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetMinmaxParameterfv>(loader.Invoke("glGetMinmaxParameterfv"));
            glGetMinmaxParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetMinmaxParameteriv>(loader.Invoke("glGetMinmaxParameteriv"));
            glHistogram = Marshal.GetDelegateForFunctionPointer<GLHistogram>(loader.Invoke("glHistogram"));
            glMinmax = Marshal.GetDelegateForFunctionPointer<GLMinmax>(loader.Invoke("glMinmax"));
            glResetHistogram = Marshal.GetDelegateForFunctionPointer<GLResetHistogram>(loader.Invoke("glResetHistogram"));
            glResetMinmax = Marshal.GetDelegateForFunctionPointer<GLResetMinmax>(loader.Invoke("glResetMinmax"));
            glMultiDrawArraysIndirectCountARB = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysIndirectCountARB>(loader.Invoke("glMultiDrawArraysIndirectCountARB"));
            glMultiDrawElementsIndirectCountARB = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsIndirectCountARB>(loader.Invoke("glMultiDrawElementsIndirectCountARB"));
            glVertexAttribDivisorARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttribDivisorARB>(loader.Invoke("glVertexAttribDivisorARB"));
            glGetInternalformativ = Marshal.GetDelegateForFunctionPointer<GLGetInternalformativ>(loader.Invoke("glGetInternalformativ"));
            glGetInternalformati64v = Marshal.GetDelegateForFunctionPointer<GLGetInternalformati64v>(loader.Invoke("glGetInternalformati64v"));
            glInvalidateTexSubImage = Marshal.GetDelegateForFunctionPointer<GLInvalidateTexSubImage>(loader.Invoke("glInvalidateTexSubImage"));
            glInvalidateTexImage = Marshal.GetDelegateForFunctionPointer<GLInvalidateTexImage>(loader.Invoke("glInvalidateTexImage"));
            glInvalidateBufferSubData = Marshal.GetDelegateForFunctionPointer<GLInvalidateBufferSubData>(loader.Invoke("glInvalidateBufferSubData"));
            glInvalidateBufferData = Marshal.GetDelegateForFunctionPointer<GLInvalidateBufferData>(loader.Invoke("glInvalidateBufferData"));
            glInvalidateFramebuffer = Marshal.GetDelegateForFunctionPointer<GLInvalidateFramebuffer>(loader.Invoke("glInvalidateFramebuffer"));
            glInvalidateSubFramebuffer = Marshal.GetDelegateForFunctionPointer<GLInvalidateSubFramebuffer>(loader.Invoke("glInvalidateSubFramebuffer"));
            glMapBufferRange = Marshal.GetDelegateForFunctionPointer<GLMapBufferRange>(loader.Invoke("glMapBufferRange"));
            glFlushMappedBufferRange = Marshal.GetDelegateForFunctionPointer<GLFlushMappedBufferRange>(loader.Invoke("glFlushMappedBufferRange"));
            glCurrentPaletteMatrixARB = Marshal.GetDelegateForFunctionPointer<GLCurrentPaletteMatrixARB>(loader.Invoke("glCurrentPaletteMatrixARB"));
            glMatrixIndexubvARB = Marshal.GetDelegateForFunctionPointer<GLMatrixIndexubvARB>(loader.Invoke("glMatrixIndexubvARB"));
            glMatrixIndexusvARB = Marshal.GetDelegateForFunctionPointer<GLMatrixIndexusvARB>(loader.Invoke("glMatrixIndexusvARB"));
            glMatrixIndexuivARB = Marshal.GetDelegateForFunctionPointer<GLMatrixIndexuivARB>(loader.Invoke("glMatrixIndexuivARB"));
            glMatrixIndexPointerARB = Marshal.GetDelegateForFunctionPointer<GLMatrixIndexPointerARB>(loader.Invoke("glMatrixIndexPointerARB"));
            glBindBuffersBase = Marshal.GetDelegateForFunctionPointer<GLBindBuffersBase>(loader.Invoke("glBindBuffersBase"));
            glBindBuffersRange = Marshal.GetDelegateForFunctionPointer<GLBindBuffersRange>(loader.Invoke("glBindBuffersRange"));
            glBindTextures = Marshal.GetDelegateForFunctionPointer<GLBindTextures>(loader.Invoke("glBindTextures"));
            glBindSamplers = Marshal.GetDelegateForFunctionPointer<GLBindSamplers>(loader.Invoke("glBindSamplers"));
            glBindImageTextures = Marshal.GetDelegateForFunctionPointer<GLBindImageTextures>(loader.Invoke("glBindImageTextures"));
            glBindVertexBuffers = Marshal.GetDelegateForFunctionPointer<GLBindVertexBuffers>(loader.Invoke("glBindVertexBuffers"));
            glMultiDrawArraysIndirect = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysIndirect>(loader.Invoke("glMultiDrawArraysIndirect"));
            glMultiDrawElementsIndirect = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsIndirect>(loader.Invoke("glMultiDrawElementsIndirect"));
            glSampleCoverageARB = Marshal.GetDelegateForFunctionPointer<GLSampleCoverageARB>(loader.Invoke("glSampleCoverageARB"));
            glActiveTextureARB = Marshal.GetDelegateForFunctionPointer<GLActiveTextureARB>(loader.Invoke("glActiveTextureARB"));
            glClientActiveTextureARB = Marshal.GetDelegateForFunctionPointer<GLClientActiveTextureARB>(loader.Invoke("glClientActiveTextureARB"));
            glMultiTexCoord1dARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1dARB>(loader.Invoke("glMultiTexCoord1dARB"));
            glMultiTexCoord1dvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1dvARB>(loader.Invoke("glMultiTexCoord1dvARB"));
            glMultiTexCoord1fARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1fARB>(loader.Invoke("glMultiTexCoord1fARB"));
            glMultiTexCoord1fvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1fvARB>(loader.Invoke("glMultiTexCoord1fvARB"));
            glMultiTexCoord1iARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1iARB>(loader.Invoke("glMultiTexCoord1iARB"));
            glMultiTexCoord1ivARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1ivARB>(loader.Invoke("glMultiTexCoord1ivARB"));
            glMultiTexCoord1sARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1sARB>(loader.Invoke("glMultiTexCoord1sARB"));
            glMultiTexCoord1svARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1svARB>(loader.Invoke("glMultiTexCoord1svARB"));
            glMultiTexCoord2dARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2dARB>(loader.Invoke("glMultiTexCoord2dARB"));
            glMultiTexCoord2dvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2dvARB>(loader.Invoke("glMultiTexCoord2dvARB"));
            glMultiTexCoord2fARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2fARB>(loader.Invoke("glMultiTexCoord2fARB"));
            glMultiTexCoord2fvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2fvARB>(loader.Invoke("glMultiTexCoord2fvARB"));
            glMultiTexCoord2iARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2iARB>(loader.Invoke("glMultiTexCoord2iARB"));
            glMultiTexCoord2ivARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2ivARB>(loader.Invoke("glMultiTexCoord2ivARB"));
            glMultiTexCoord2sARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2sARB>(loader.Invoke("glMultiTexCoord2sARB"));
            glMultiTexCoord2svARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2svARB>(loader.Invoke("glMultiTexCoord2svARB"));
            glMultiTexCoord3dARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3dARB>(loader.Invoke("glMultiTexCoord3dARB"));
            glMultiTexCoord3dvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3dvARB>(loader.Invoke("glMultiTexCoord3dvARB"));
            glMultiTexCoord3fARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3fARB>(loader.Invoke("glMultiTexCoord3fARB"));
            glMultiTexCoord3fvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3fvARB>(loader.Invoke("glMultiTexCoord3fvARB"));
            glMultiTexCoord3iARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3iARB>(loader.Invoke("glMultiTexCoord3iARB"));
            glMultiTexCoord3ivARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3ivARB>(loader.Invoke("glMultiTexCoord3ivARB"));
            glMultiTexCoord3sARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3sARB>(loader.Invoke("glMultiTexCoord3sARB"));
            glMultiTexCoord3svARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3svARB>(loader.Invoke("glMultiTexCoord3svARB"));
            glMultiTexCoord4dARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4dARB>(loader.Invoke("glMultiTexCoord4dARB"));
            glMultiTexCoord4dvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4dvARB>(loader.Invoke("glMultiTexCoord4dvARB"));
            glMultiTexCoord4fARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4fARB>(loader.Invoke("glMultiTexCoord4fARB"));
            glMultiTexCoord4fvARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4fvARB>(loader.Invoke("glMultiTexCoord4fvARB"));
            glMultiTexCoord4iARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4iARB>(loader.Invoke("glMultiTexCoord4iARB"));
            glMultiTexCoord4ivARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4ivARB>(loader.Invoke("glMultiTexCoord4ivARB"));
            glMultiTexCoord4sARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4sARB>(loader.Invoke("glMultiTexCoord4sARB"));
            glMultiTexCoord4svARB = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4svARB>(loader.Invoke("glMultiTexCoord4svARB"));
            glGenQueriesARB = Marshal.GetDelegateForFunctionPointer<GLGenQueriesARB>(loader.Invoke("glGenQueriesARB"));
            glDeleteQueriesARB = Marshal.GetDelegateForFunctionPointer<GLDeleteQueriesARB>(loader.Invoke("glDeleteQueriesARB"));
            glIsQueryARB = Marshal.GetDelegateForFunctionPointer<GLIsQueryARB>(loader.Invoke("glIsQueryARB"));
            glBeginQueryARB = Marshal.GetDelegateForFunctionPointer<GLBeginQueryARB>(loader.Invoke("glBeginQueryARB"));
            glEndQueryARB = Marshal.GetDelegateForFunctionPointer<GLEndQueryARB>(loader.Invoke("glEndQueryARB"));
            glGetQueryivARB = Marshal.GetDelegateForFunctionPointer<GLGetQueryivARB>(loader.Invoke("glGetQueryivARB"));
            glGetQueryObjectivARB = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectivARB>(loader.Invoke("glGetQueryObjectivARB"));
            glGetQueryObjectuivARB = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectuivARB>(loader.Invoke("glGetQueryObjectuivARB"));
            glMaxShaderCompilerThreadsARB = Marshal.GetDelegateForFunctionPointer<GLMaxShaderCompilerThreadsARB>(loader.Invoke("glMaxShaderCompilerThreadsARB"));
            glPointParameterfARB = Marshal.GetDelegateForFunctionPointer<GLPointParameterfARB>(loader.Invoke("glPointParameterfARB"));
            glPointParameterfvARB = Marshal.GetDelegateForFunctionPointer<GLPointParameterfvARB>(loader.Invoke("glPointParameterfvARB"));
            glPolygonOffsetClamp = Marshal.GetDelegateForFunctionPointer<GLPolygonOffsetClamp>(loader.Invoke("glPolygonOffsetClamp"));
            glGetProgramInterfaceiv = Marshal.GetDelegateForFunctionPointer<GLGetProgramInterfaceiv>(loader.Invoke("glGetProgramInterfaceiv"));
            glGetProgramResourceIndex = Marshal.GetDelegateForFunctionPointer<GLGetProgramResourceIndex>(loader.Invoke("glGetProgramResourceIndex"));
            glGetProgramResourceName = Marshal.GetDelegateForFunctionPointer<GLGetProgramResourceName>(loader.Invoke("glGetProgramResourceName"));
            glGetProgramResourceiv = Marshal.GetDelegateForFunctionPointer<GLGetProgramResourceiv>(loader.Invoke("glGetProgramResourceiv"));
            glGetProgramResourceLocation = Marshal.GetDelegateForFunctionPointer<GLGetProgramResourceLocation>(loader.Invoke("glGetProgramResourceLocation"));
            glGetProgramResourceLocationIndex = Marshal.GetDelegateForFunctionPointer<GLGetProgramResourceLocationIndex>(loader.Invoke("glGetProgramResourceLocationIndex"));
            glProvokingVertex = Marshal.GetDelegateForFunctionPointer<GLProvokingVertex>(loader.Invoke("glProvokingVertex"));
            glGetGraphicsResetStatusARB = Marshal.GetDelegateForFunctionPointer<GLGetGraphicsResetStatusARB>(loader.Invoke("glGetGraphicsResetStatusARB"));
            glGetnTexImageARB = Marshal.GetDelegateForFunctionPointer<GLGetnTexImageARB>(loader.Invoke("glGetnTexImageARB"));
            glReadnPixelsARB = Marshal.GetDelegateForFunctionPointer<GLReadnPixelsARB>(loader.Invoke("glReadnPixelsARB"));
            glGetnCompressedTexImageARB = Marshal.GetDelegateForFunctionPointer<GLGetnCompressedTexImageARB>(loader.Invoke("glGetnCompressedTexImageARB"));
            glGetnUniformfvARB = Marshal.GetDelegateForFunctionPointer<GLGetnUniformfvARB>(loader.Invoke("glGetnUniformfvARB"));
            glGetnUniformivARB = Marshal.GetDelegateForFunctionPointer<GLGetnUniformivARB>(loader.Invoke("glGetnUniformivARB"));
            glGetnUniformuivARB = Marshal.GetDelegateForFunctionPointer<GLGetnUniformuivARB>(loader.Invoke("glGetnUniformuivARB"));
            glGetnUniformdvARB = Marshal.GetDelegateForFunctionPointer<GLGetnUniformdvARB>(loader.Invoke("glGetnUniformdvARB"));
            glGetnMapdvARB = Marshal.GetDelegateForFunctionPointer<GLGetnMapdvARB>(loader.Invoke("glGetnMapdvARB"));
            glGetnMapfvARB = Marshal.GetDelegateForFunctionPointer<GLGetnMapfvARB>(loader.Invoke("glGetnMapfvARB"));
            glGetnMapivARB = Marshal.GetDelegateForFunctionPointer<GLGetnMapivARB>(loader.Invoke("glGetnMapivARB"));
            glGetnPixelMapfvARB = Marshal.GetDelegateForFunctionPointer<GLGetnPixelMapfvARB>(loader.Invoke("glGetnPixelMapfvARB"));
            glGetnPixelMapuivARB = Marshal.GetDelegateForFunctionPointer<GLGetnPixelMapuivARB>(loader.Invoke("glGetnPixelMapuivARB"));
            glGetnPixelMapusvARB = Marshal.GetDelegateForFunctionPointer<GLGetnPixelMapusvARB>(loader.Invoke("glGetnPixelMapusvARB"));
            glGetnPolygonStippleARB = Marshal.GetDelegateForFunctionPointer<GLGetnPolygonStippleARB>(loader.Invoke("glGetnPolygonStippleARB"));
            glGetnColorTableARB = Marshal.GetDelegateForFunctionPointer<GLGetnColorTableARB>(loader.Invoke("glGetnColorTableARB"));
            glGetnConvolutionFilterARB = Marshal.GetDelegateForFunctionPointer<GLGetnConvolutionFilterARB>(loader.Invoke("glGetnConvolutionFilterARB"));
            glGetnSeparableFilterARB = Marshal.GetDelegateForFunctionPointer<GLGetnSeparableFilterARB>(loader.Invoke("glGetnSeparableFilterARB"));
            glGetnHistogramARB = Marshal.GetDelegateForFunctionPointer<GLGetnHistogramARB>(loader.Invoke("glGetnHistogramARB"));
            glGetnMinmaxARB = Marshal.GetDelegateForFunctionPointer<GLGetnMinmaxARB>(loader.Invoke("glGetnMinmaxARB"));
            glFramebufferSampleLocationsfvARB = Marshal.GetDelegateForFunctionPointer<GLFramebufferSampleLocationsfvARB>(loader.Invoke("glFramebufferSampleLocationsfvARB"));
            glNamedFramebufferSampleLocationsfvARB = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferSampleLocationsfvARB>(loader.Invoke("glNamedFramebufferSampleLocationsfvARB"));
            glEvaluateDepthValuesARB = Marshal.GetDelegateForFunctionPointer<GLEvaluateDepthValuesARB>(loader.Invoke("glEvaluateDepthValuesARB"));
            glMinSampleShadingARB = Marshal.GetDelegateForFunctionPointer<GLMinSampleShadingARB>(loader.Invoke("glMinSampleShadingARB"));
            glGenSamplers = Marshal.GetDelegateForFunctionPointer<GLGenSamplers>(loader.Invoke("glGenSamplers"));
            glDeleteSamplers = Marshal.GetDelegateForFunctionPointer<GLDeleteSamplers>(loader.Invoke("glDeleteSamplers"));
            glIsSampler = Marshal.GetDelegateForFunctionPointer<GLIsSampler>(loader.Invoke("glIsSampler"));
            glBindSampler = Marshal.GetDelegateForFunctionPointer<GLBindSampler>(loader.Invoke("glBindSampler"));
            glSamplerParameteri = Marshal.GetDelegateForFunctionPointer<GLSamplerParameteri>(loader.Invoke("glSamplerParameteri"));
            glSamplerParameteriv = Marshal.GetDelegateForFunctionPointer<GLSamplerParameteriv>(loader.Invoke("glSamplerParameteriv"));
            glSamplerParameterf = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterf>(loader.Invoke("glSamplerParameterf"));
            glSamplerParameterfv = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterfv>(loader.Invoke("glSamplerParameterfv"));
            glSamplerParameterIiv = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterIiv>(loader.Invoke("glSamplerParameterIiv"));
            glSamplerParameterIuiv = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterIuiv>(loader.Invoke("glSamplerParameterIuiv"));
            glGetSamplerParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameteriv>(loader.Invoke("glGetSamplerParameteriv"));
            glGetSamplerParameterIiv = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameterIiv>(loader.Invoke("glGetSamplerParameterIiv"));
            glGetSamplerParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameterfv>(loader.Invoke("glGetSamplerParameterfv"));
            glGetSamplerParameterIuiv = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameterIuiv>(loader.Invoke("glGetSamplerParameterIuiv"));
            glUseProgramStages = Marshal.GetDelegateForFunctionPointer<GLUseProgramStages>(loader.Invoke("glUseProgramStages"));
            glActiveShaderProgram = Marshal.GetDelegateForFunctionPointer<GLActiveShaderProgram>(loader.Invoke("glActiveShaderProgram"));
            glCreateShaderProgramv = Marshal.GetDelegateForFunctionPointer<GLCreateShaderProgramv>(loader.Invoke("glCreateShaderProgramv"));
            glBindProgramPipeline = Marshal.GetDelegateForFunctionPointer<GLBindProgramPipeline>(loader.Invoke("glBindProgramPipeline"));
            glDeleteProgramPipelines = Marshal.GetDelegateForFunctionPointer<GLDeleteProgramPipelines>(loader.Invoke("glDeleteProgramPipelines"));
            glGenProgramPipelines = Marshal.GetDelegateForFunctionPointer<GLGenProgramPipelines>(loader.Invoke("glGenProgramPipelines"));
            glIsProgramPipeline = Marshal.GetDelegateForFunctionPointer<GLIsProgramPipeline>(loader.Invoke("glIsProgramPipeline"));
            glGetProgramPipelineiv = Marshal.GetDelegateForFunctionPointer<GLGetProgramPipelineiv>(loader.Invoke("glGetProgramPipelineiv"));
            glProgramUniform1i = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1i>(loader.Invoke("glProgramUniform1i"));
            glProgramUniform1iv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1iv>(loader.Invoke("glProgramUniform1iv"));
            glProgramUniform1f = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1f>(loader.Invoke("glProgramUniform1f"));
            glProgramUniform1fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1fv>(loader.Invoke("glProgramUniform1fv"));
            glProgramUniform1d = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1d>(loader.Invoke("glProgramUniform1d"));
            glProgramUniform1dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1dv>(loader.Invoke("glProgramUniform1dv"));
            glProgramUniform1ui = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1ui>(loader.Invoke("glProgramUniform1ui"));
            glProgramUniform1uiv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1uiv>(loader.Invoke("glProgramUniform1uiv"));
            glProgramUniform2i = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2i>(loader.Invoke("glProgramUniform2i"));
            glProgramUniform2iv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2iv>(loader.Invoke("glProgramUniform2iv"));
            glProgramUniform2f = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2f>(loader.Invoke("glProgramUniform2f"));
            glProgramUniform2fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2fv>(loader.Invoke("glProgramUniform2fv"));
            glProgramUniform2d = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2d>(loader.Invoke("glProgramUniform2d"));
            glProgramUniform2dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2dv>(loader.Invoke("glProgramUniform2dv"));
            glProgramUniform2ui = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2ui>(loader.Invoke("glProgramUniform2ui"));
            glProgramUniform2uiv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2uiv>(loader.Invoke("glProgramUniform2uiv"));
            glProgramUniform3i = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3i>(loader.Invoke("glProgramUniform3i"));
            glProgramUniform3iv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3iv>(loader.Invoke("glProgramUniform3iv"));
            glProgramUniform3f = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3f>(loader.Invoke("glProgramUniform3f"));
            glProgramUniform3fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3fv>(loader.Invoke("glProgramUniform3fv"));
            glProgramUniform3d = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3d>(loader.Invoke("glProgramUniform3d"));
            glProgramUniform3dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3dv>(loader.Invoke("glProgramUniform3dv"));
            glProgramUniform3ui = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3ui>(loader.Invoke("glProgramUniform3ui"));
            glProgramUniform3uiv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3uiv>(loader.Invoke("glProgramUniform3uiv"));
            glProgramUniform4i = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4i>(loader.Invoke("glProgramUniform4i"));
            glProgramUniform4iv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4iv>(loader.Invoke("glProgramUniform4iv"));
            glProgramUniform4f = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4f>(loader.Invoke("glProgramUniform4f"));
            glProgramUniform4fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4fv>(loader.Invoke("glProgramUniform4fv"));
            glProgramUniform4d = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4d>(loader.Invoke("glProgramUniform4d"));
            glProgramUniform4dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4dv>(loader.Invoke("glProgramUniform4dv"));
            glProgramUniform4ui = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4ui>(loader.Invoke("glProgramUniform4ui"));
            glProgramUniform4uiv = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4uiv>(loader.Invoke("glProgramUniform4uiv"));
            glProgramUniformMatrix2fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2fv>(loader.Invoke("glProgramUniformMatrix2fv"));
            glProgramUniformMatrix3fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3fv>(loader.Invoke("glProgramUniformMatrix3fv"));
            glProgramUniformMatrix4fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4fv>(loader.Invoke("glProgramUniformMatrix4fv"));
            glProgramUniformMatrix2dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2dv>(loader.Invoke("glProgramUniformMatrix2dv"));
            glProgramUniformMatrix3dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3dv>(loader.Invoke("glProgramUniformMatrix3dv"));
            glProgramUniformMatrix4dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4dv>(loader.Invoke("glProgramUniformMatrix4dv"));
            glProgramUniformMatrix2x3fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x3fv>(loader.Invoke("glProgramUniformMatrix2x3fv"));
            glProgramUniformMatrix3x2fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x2fv>(loader.Invoke("glProgramUniformMatrix3x2fv"));
            glProgramUniformMatrix2x4fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x4fv>(loader.Invoke("glProgramUniformMatrix2x4fv"));
            glProgramUniformMatrix4x2fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x2fv>(loader.Invoke("glProgramUniformMatrix4x2fv"));
            glProgramUniformMatrix3x4fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x4fv>(loader.Invoke("glProgramUniformMatrix3x4fv"));
            glProgramUniformMatrix4x3fv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x3fv>(loader.Invoke("glProgramUniformMatrix4x3fv"));
            glProgramUniformMatrix2x3dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x3dv>(loader.Invoke("glProgramUniformMatrix2x3dv"));
            glProgramUniformMatrix3x2dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x2dv>(loader.Invoke("glProgramUniformMatrix3x2dv"));
            glProgramUniformMatrix2x4dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x4dv>(loader.Invoke("glProgramUniformMatrix2x4dv"));
            glProgramUniformMatrix4x2dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x2dv>(loader.Invoke("glProgramUniformMatrix4x2dv"));
            glProgramUniformMatrix3x4dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x4dv>(loader.Invoke("glProgramUniformMatrix3x4dv"));
            glProgramUniformMatrix4x3dv = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x3dv>(loader.Invoke("glProgramUniformMatrix4x3dv"));
            glValidateProgramPipeline = Marshal.GetDelegateForFunctionPointer<GLValidateProgramPipeline>(loader.Invoke("glValidateProgramPipeline"));
            glGetProgramPipelineInfoLog = Marshal.GetDelegateForFunctionPointer<GLGetProgramPipelineInfoLog>(loader.Invoke("glGetProgramPipelineInfoLog"));
            glGetActiveAtomicCounterBufferiv = Marshal.GetDelegateForFunctionPointer<GLGetActiveAtomicCounterBufferiv>(loader.Invoke("glGetActiveAtomicCounterBufferiv"));
            glBindImageTexture = Marshal.GetDelegateForFunctionPointer<GLBindImageTexture>(loader.Invoke("glBindImageTexture"));
            glMemoryBarrier = Marshal.GetDelegateForFunctionPointer<GLMemoryBarrier>(loader.Invoke("glMemoryBarrier"));
            glDeleteObjectARB = Marshal.GetDelegateForFunctionPointer<GLDeleteObjectARB>(loader.Invoke("glDeleteObjectARB"));
            glGetHandleARB = Marshal.GetDelegateForFunctionPointer<GLGetHandleARB>(loader.Invoke("glGetHandleARB"));
            glDetachObjectARB = Marshal.GetDelegateForFunctionPointer<GLDetachObjectARB>(loader.Invoke("glDetachObjectARB"));
            glCreateShaderObjectARB = Marshal.GetDelegateForFunctionPointer<GLCreateShaderObjectARB>(loader.Invoke("glCreateShaderObjectARB"));
            glShaderSourceARB = Marshal.GetDelegateForFunctionPointer<GLShaderSourceARB>(loader.Invoke("glShaderSourceARB"));
            glCompileShaderARB = Marshal.GetDelegateForFunctionPointer<GLCompileShaderARB>(loader.Invoke("glCompileShaderARB"));
            glCreateProgramObjectARB = Marshal.GetDelegateForFunctionPointer<GLCreateProgramObjectARB>(loader.Invoke("glCreateProgramObjectARB"));
            glAttachObjectARB = Marshal.GetDelegateForFunctionPointer<GLAttachObjectARB>(loader.Invoke("glAttachObjectARB"));
            glLinkProgramARB = Marshal.GetDelegateForFunctionPointer<GLLinkProgramARB>(loader.Invoke("glLinkProgramARB"));
            glUseProgramObjectARB = Marshal.GetDelegateForFunctionPointer<GLUseProgramObjectARB>(loader.Invoke("glUseProgramObjectARB"));
            glValidateProgramARB = Marshal.GetDelegateForFunctionPointer<GLValidateProgramARB>(loader.Invoke("glValidateProgramARB"));
            glUniform1fARB = Marshal.GetDelegateForFunctionPointer<GLUniform1fARB>(loader.Invoke("glUniform1fARB"));
            glUniform2fARB = Marshal.GetDelegateForFunctionPointer<GLUniform2fARB>(loader.Invoke("glUniform2fARB"));
            glUniform3fARB = Marshal.GetDelegateForFunctionPointer<GLUniform3fARB>(loader.Invoke("glUniform3fARB"));
            glUniform4fARB = Marshal.GetDelegateForFunctionPointer<GLUniform4fARB>(loader.Invoke("glUniform4fARB"));
            glUniform1iARB = Marshal.GetDelegateForFunctionPointer<GLUniform1iARB>(loader.Invoke("glUniform1iARB"));
            glUniform2iARB = Marshal.GetDelegateForFunctionPointer<GLUniform2iARB>(loader.Invoke("glUniform2iARB"));
            glUniform3iARB = Marshal.GetDelegateForFunctionPointer<GLUniform3iARB>(loader.Invoke("glUniform3iARB"));
            glUniform4iARB = Marshal.GetDelegateForFunctionPointer<GLUniform4iARB>(loader.Invoke("glUniform4iARB"));
            glUniform1fvARB = Marshal.GetDelegateForFunctionPointer<GLUniform1fvARB>(loader.Invoke("glUniform1fvARB"));
            glUniform2fvARB = Marshal.GetDelegateForFunctionPointer<GLUniform2fvARB>(loader.Invoke("glUniform2fvARB"));
            glUniform3fvARB = Marshal.GetDelegateForFunctionPointer<GLUniform3fvARB>(loader.Invoke("glUniform3fvARB"));
            glUniform4fvARB = Marshal.GetDelegateForFunctionPointer<GLUniform4fvARB>(loader.Invoke("glUniform4fvARB"));
            glUniform1ivARB = Marshal.GetDelegateForFunctionPointer<GLUniform1ivARB>(loader.Invoke("glUniform1ivARB"));
            glUniform2ivARB = Marshal.GetDelegateForFunctionPointer<GLUniform2ivARB>(loader.Invoke("glUniform2ivARB"));
            glUniform3ivARB = Marshal.GetDelegateForFunctionPointer<GLUniform3ivARB>(loader.Invoke("glUniform3ivARB"));
            glUniform4ivARB = Marshal.GetDelegateForFunctionPointer<GLUniform4ivARB>(loader.Invoke("glUniform4ivARB"));
            glUniformMatrix2fvARB = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2fvARB>(loader.Invoke("glUniformMatrix2fvARB"));
            glUniformMatrix3fvARB = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3fvARB>(loader.Invoke("glUniformMatrix3fvARB"));
            glUniformMatrix4fvARB = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4fvARB>(loader.Invoke("glUniformMatrix4fvARB"));
            glGetObjectParameterfvARB = Marshal.GetDelegateForFunctionPointer<GLGetObjectParameterfvARB>(loader.Invoke("glGetObjectParameterfvARB"));
            glGetObjectParameterivARB = Marshal.GetDelegateForFunctionPointer<GLGetObjectParameterivARB>(loader.Invoke("glGetObjectParameterivARB"));
            glGetInfoLogARB = Marshal.GetDelegateForFunctionPointer<GLGetInfoLogARB>(loader.Invoke("glGetInfoLogARB"));
            glGetAttachedObjectsARB = Marshal.GetDelegateForFunctionPointer<GLGetAttachedObjectsARB>(loader.Invoke("glGetAttachedObjectsARB"));
            glGetUniformLocationARB = Marshal.GetDelegateForFunctionPointer<GLGetUniformLocationARB>(loader.Invoke("glGetUniformLocationARB"));
            glGetActiveUniformARB = Marshal.GetDelegateForFunctionPointer<GLGetActiveUniformARB>(loader.Invoke("glGetActiveUniformARB"));
            glGetUniformfvARB = Marshal.GetDelegateForFunctionPointer<GLGetUniformfvARB>(loader.Invoke("glGetUniformfvARB"));
            glGetUniformivARB = Marshal.GetDelegateForFunctionPointer<GLGetUniformivARB>(loader.Invoke("glGetUniformivARB"));
            glGetShaderSourceARB = Marshal.GetDelegateForFunctionPointer<GLGetShaderSourceARB>(loader.Invoke("glGetShaderSourceARB"));
            glShaderStorageBlockBinding = Marshal.GetDelegateForFunctionPointer<GLShaderStorageBlockBinding>(loader.Invoke("glShaderStorageBlockBinding"));
            glGetSubroutineUniformLocation = Marshal.GetDelegateForFunctionPointer<GLGetSubroutineUniformLocation>(loader.Invoke("glGetSubroutineUniformLocation"));
            glGetSubroutineIndex = Marshal.GetDelegateForFunctionPointer<GLGetSubroutineIndex>(loader.Invoke("glGetSubroutineIndex"));
            glGetActiveSubroutineUniformiv = Marshal.GetDelegateForFunctionPointer<GLGetActiveSubroutineUniformiv>(loader.Invoke("glGetActiveSubroutineUniformiv"));
            glGetActiveSubroutineUniformName = Marshal.GetDelegateForFunctionPointer<GLGetActiveSubroutineUniformName>(loader.Invoke("glGetActiveSubroutineUniformName"));
            glGetActiveSubroutineName = Marshal.GetDelegateForFunctionPointer<GLGetActiveSubroutineName>(loader.Invoke("glGetActiveSubroutineName"));
            glUniformSubroutinesuiv = Marshal.GetDelegateForFunctionPointer<GLUniformSubroutinesuiv>(loader.Invoke("glUniformSubroutinesuiv"));
            glGetUniformSubroutineuiv = Marshal.GetDelegateForFunctionPointer<GLGetUniformSubroutineuiv>(loader.Invoke("glGetUniformSubroutineuiv"));
            glGetProgramStageiv = Marshal.GetDelegateForFunctionPointer<GLGetProgramStageiv>(loader.Invoke("glGetProgramStageiv"));
            glNamedStringARB = Marshal.GetDelegateForFunctionPointer<GLNamedStringARB>(loader.Invoke("glNamedStringARB"));
            glDeleteNamedStringARB = Marshal.GetDelegateForFunctionPointer<GLDeleteNamedStringARB>(loader.Invoke("glDeleteNamedStringARB"));
            glCompileShaderIncludeARB = Marshal.GetDelegateForFunctionPointer<GLCompileShaderIncludeARB>(loader.Invoke("glCompileShaderIncludeARB"));
            glIsNamedStringARB = Marshal.GetDelegateForFunctionPointer<GLIsNamedStringARB>(loader.Invoke("glIsNamedStringARB"));
            glGetNamedStringARB = Marshal.GetDelegateForFunctionPointer<GLGetNamedStringARB>(loader.Invoke("glGetNamedStringARB"));
            glGetNamedStringivARB = Marshal.GetDelegateForFunctionPointer<GLGetNamedStringivARB>(loader.Invoke("glGetNamedStringivARB"));
            glBufferPageCommitmentARB = Marshal.GetDelegateForFunctionPointer<GLBufferPageCommitmentARB>(loader.Invoke("glBufferPageCommitmentARB"));
            glNamedBufferPageCommitmentEXT = Marshal.GetDelegateForFunctionPointer<GLNamedBufferPageCommitmentEXT>(loader.Invoke("glNamedBufferPageCommitmentEXT"));
            glNamedBufferPageCommitmentARB = Marshal.GetDelegateForFunctionPointer<GLNamedBufferPageCommitmentARB>(loader.Invoke("glNamedBufferPageCommitmentARB"));
            glTexPageCommitmentARB = Marshal.GetDelegateForFunctionPointer<GLTexPageCommitmentARB>(loader.Invoke("glTexPageCommitmentARB"));
            glFenceSync = Marshal.GetDelegateForFunctionPointer<GLFenceSync>(loader.Invoke("glFenceSync"));
            glIsSync = Marshal.GetDelegateForFunctionPointer<GLIsSync>(loader.Invoke("glIsSync"));
            glDeleteSync = Marshal.GetDelegateForFunctionPointer<GLDeleteSync>(loader.Invoke("glDeleteSync"));
            glClientWaitSync = Marshal.GetDelegateForFunctionPointer<GLClientWaitSync>(loader.Invoke("glClientWaitSync"));
            glWaitSync = Marshal.GetDelegateForFunctionPointer<GLWaitSync>(loader.Invoke("glWaitSync"));
            glGetInteger64v = Marshal.GetDelegateForFunctionPointer<GLGetInteger64v>(loader.Invoke("glGetInteger64v"));
            glGetSynciv = Marshal.GetDelegateForFunctionPointer<GLGetSynciv>(loader.Invoke("glGetSynciv"));
            glPatchParameteri = Marshal.GetDelegateForFunctionPointer<GLPatchParameteri>(loader.Invoke("glPatchParameteri"));
            glPatchParameterfv = Marshal.GetDelegateForFunctionPointer<GLPatchParameterfv>(loader.Invoke("glPatchParameterfv"));
            glTextureBarrier = Marshal.GetDelegateForFunctionPointer<GLTextureBarrier>(loader.Invoke("glTextureBarrier"));
            glTexBufferARB = Marshal.GetDelegateForFunctionPointer<GLTexBufferARB>(loader.Invoke("glTexBufferARB"));
            glTexBufferRange = Marshal.GetDelegateForFunctionPointer<GLTexBufferRange>(loader.Invoke("glTexBufferRange"));
            glCompressedTexImage3DARB = Marshal.GetDelegateForFunctionPointer<GLCompressedTexImage3DARB>(loader.Invoke("glCompressedTexImage3DARB"));
            glCompressedTexImage2DARB = Marshal.GetDelegateForFunctionPointer<GLCompressedTexImage2DARB>(loader.Invoke("glCompressedTexImage2DARB"));
            glCompressedTexImage1DARB = Marshal.GetDelegateForFunctionPointer<GLCompressedTexImage1DARB>(loader.Invoke("glCompressedTexImage1DARB"));
            glCompressedTexSubImage3DARB = Marshal.GetDelegateForFunctionPointer<GLCompressedTexSubImage3DARB>(loader.Invoke("glCompressedTexSubImage3DARB"));
            glCompressedTexSubImage2DARB = Marshal.GetDelegateForFunctionPointer<GLCompressedTexSubImage2DARB>(loader.Invoke("glCompressedTexSubImage2DARB"));
            glCompressedTexSubImage1DARB = Marshal.GetDelegateForFunctionPointer<GLCompressedTexSubImage1DARB>(loader.Invoke("glCompressedTexSubImage1DARB"));
            glGetCompressedTexImageARB = Marshal.GetDelegateForFunctionPointer<GLGetCompressedTexImageARB>(loader.Invoke("glGetCompressedTexImageARB"));
            glTexImage2DMultisample = Marshal.GetDelegateForFunctionPointer<GLTexImage2DMultisample>(loader.Invoke("glTexImage2DMultisample"));
            glTexImage3DMultisample = Marshal.GetDelegateForFunctionPointer<GLTexImage3DMultisample>(loader.Invoke("glTexImage3DMultisample"));
            glGetMultisamplefv = Marshal.GetDelegateForFunctionPointer<GLGetMultisamplefv>(loader.Invoke("glGetMultisamplefv"));
            glSampleMaski = Marshal.GetDelegateForFunctionPointer<GLSampleMaski>(loader.Invoke("glSampleMaski"));
            glTexStorage1D = Marshal.GetDelegateForFunctionPointer<GLTexStorage1D>(loader.Invoke("glTexStorage1D"));
            glTexStorage2D = Marshal.GetDelegateForFunctionPointer<GLTexStorage2D>(loader.Invoke("glTexStorage2D"));
            glTexStorage3D = Marshal.GetDelegateForFunctionPointer<GLTexStorage3D>(loader.Invoke("glTexStorage3D"));
            glTexStorage2DMultisample = Marshal.GetDelegateForFunctionPointer<GLTexStorage2DMultisample>(loader.Invoke("glTexStorage2DMultisample"));
            glTexStorage3DMultisample = Marshal.GetDelegateForFunctionPointer<GLTexStorage3DMultisample>(loader.Invoke("glTexStorage3DMultisample"));
            glTextureView = Marshal.GetDelegateForFunctionPointer<GLTextureView>(loader.Invoke("glTextureView"));
            glQueryCounter = Marshal.GetDelegateForFunctionPointer<GLQueryCounter>(loader.Invoke("glQueryCounter"));
            glGetQueryObjecti64v = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjecti64v>(loader.Invoke("glGetQueryObjecti64v"));
            glGetQueryObjectui64v = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectui64v>(loader.Invoke("glGetQueryObjectui64v"));
            glBindTransformFeedback = Marshal.GetDelegateForFunctionPointer<GLBindTransformFeedback>(loader.Invoke("glBindTransformFeedback"));
            glDeleteTransformFeedbacks = Marshal.GetDelegateForFunctionPointer<GLDeleteTransformFeedbacks>(loader.Invoke("glDeleteTransformFeedbacks"));
            glGenTransformFeedbacks = Marshal.GetDelegateForFunctionPointer<GLGenTransformFeedbacks>(loader.Invoke("glGenTransformFeedbacks"));
            glIsTransformFeedback = Marshal.GetDelegateForFunctionPointer<GLIsTransformFeedback>(loader.Invoke("glIsTransformFeedback"));
            glPauseTransformFeedback = Marshal.GetDelegateForFunctionPointer<GLPauseTransformFeedback>(loader.Invoke("glPauseTransformFeedback"));
            glResumeTransformFeedback = Marshal.GetDelegateForFunctionPointer<GLResumeTransformFeedback>(loader.Invoke("glResumeTransformFeedback"));
            glDrawTransformFeedback = Marshal.GetDelegateForFunctionPointer<GLDrawTransformFeedback>(loader.Invoke("glDrawTransformFeedback"));
            glDrawTransformFeedbackStream = Marshal.GetDelegateForFunctionPointer<GLDrawTransformFeedbackStream>(loader.Invoke("glDrawTransformFeedbackStream"));
            glBeginQueryIndexed = Marshal.GetDelegateForFunctionPointer<GLBeginQueryIndexed>(loader.Invoke("glBeginQueryIndexed"));
            glEndQueryIndexed = Marshal.GetDelegateForFunctionPointer<GLEndQueryIndexed>(loader.Invoke("glEndQueryIndexed"));
            glGetQueryIndexediv = Marshal.GetDelegateForFunctionPointer<GLGetQueryIndexediv>(loader.Invoke("glGetQueryIndexediv"));
            glDrawTransformFeedbackInstanced = Marshal.GetDelegateForFunctionPointer<GLDrawTransformFeedbackInstanced>(loader.Invoke("glDrawTransformFeedbackInstanced"));
            glDrawTransformFeedbackStreamInstanced = Marshal.GetDelegateForFunctionPointer<GLDrawTransformFeedbackStreamInstanced>(loader.Invoke("glDrawTransformFeedbackStreamInstanced"));
            glLoadTransposeMatrixfARB = Marshal.GetDelegateForFunctionPointer<GLLoadTransposeMatrixfARB>(loader.Invoke("glLoadTransposeMatrixfARB"));
            glLoadTransposeMatrixdARB = Marshal.GetDelegateForFunctionPointer<GLLoadTransposeMatrixdARB>(loader.Invoke("glLoadTransposeMatrixdARB"));
            glMultTransposeMatrixfARB = Marshal.GetDelegateForFunctionPointer<GLMultTransposeMatrixfARB>(loader.Invoke("glMultTransposeMatrixfARB"));
            glMultTransposeMatrixdARB = Marshal.GetDelegateForFunctionPointer<GLMultTransposeMatrixdARB>(loader.Invoke("glMultTransposeMatrixdARB"));
            glGetUniformIndices = Marshal.GetDelegateForFunctionPointer<GLGetUniformIndices>(loader.Invoke("glGetUniformIndices"));
            glGetActiveUniformsiv = Marshal.GetDelegateForFunctionPointer<GLGetActiveUniformsiv>(loader.Invoke("glGetActiveUniformsiv"));
            glGetActiveUniformName = Marshal.GetDelegateForFunctionPointer<GLGetActiveUniformName>(loader.Invoke("glGetActiveUniformName"));
            glGetUniformBlockIndex = Marshal.GetDelegateForFunctionPointer<GLGetUniformBlockIndex>(loader.Invoke("glGetUniformBlockIndex"));
            glGetActiveUniformBlockiv = Marshal.GetDelegateForFunctionPointer<GLGetActiveUniformBlockiv>(loader.Invoke("glGetActiveUniformBlockiv"));
            glGetActiveUniformBlockName = Marshal.GetDelegateForFunctionPointer<GLGetActiveUniformBlockName>(loader.Invoke("glGetActiveUniformBlockName"));
            glUniformBlockBinding = Marshal.GetDelegateForFunctionPointer<GLUniformBlockBinding>(loader.Invoke("glUniformBlockBinding"));
            glBindBufferRange = Marshal.GetDelegateForFunctionPointer<GLBindBufferRange>(loader.Invoke("glBindBufferRange"));
            glBindBufferBase = Marshal.GetDelegateForFunctionPointer<GLBindBufferBase>(loader.Invoke("glBindBufferBase"));
            glGetIntegeri_v = Marshal.GetDelegateForFunctionPointer<GLGetIntegeri_v>(loader.Invoke("glGetIntegeri_v"));
            glBindVertexArray = Marshal.GetDelegateForFunctionPointer<GLBindVertexArray>(loader.Invoke("glBindVertexArray"));
            glDeleteVertexArrays = Marshal.GetDelegateForFunctionPointer<GLDeleteVertexArrays>(loader.Invoke("glDeleteVertexArrays"));
            glGenVertexArrays = Marshal.GetDelegateForFunctionPointer<GLGenVertexArrays>(loader.Invoke("glGenVertexArrays"));
            glIsVertexArray = Marshal.GetDelegateForFunctionPointer<GLIsVertexArray>(loader.Invoke("glIsVertexArray"));
            glVertexAttribL1d = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1d>(loader.Invoke("glVertexAttribL1d"));
            glVertexAttribL2d = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2d>(loader.Invoke("glVertexAttribL2d"));
            glVertexAttribL3d = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3d>(loader.Invoke("glVertexAttribL3d"));
            glVertexAttribL4d = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4d>(loader.Invoke("glVertexAttribL4d"));
            glVertexAttribL1dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1dv>(loader.Invoke("glVertexAttribL1dv"));
            glVertexAttribL2dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2dv>(loader.Invoke("glVertexAttribL2dv"));
            glVertexAttribL3dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3dv>(loader.Invoke("glVertexAttribL3dv"));
            glVertexAttribL4dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4dv>(loader.Invoke("glVertexAttribL4dv"));
            glVertexAttribLPointer = Marshal.GetDelegateForFunctionPointer<GLVertexAttribLPointer>(loader.Invoke("glVertexAttribLPointer"));
            glGetVertexAttribLdv = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribLdv>(loader.Invoke("glGetVertexAttribLdv"));
            glBindVertexBuffer = Marshal.GetDelegateForFunctionPointer<GLBindVertexBuffer>(loader.Invoke("glBindVertexBuffer"));
            glVertexAttribFormat = Marshal.GetDelegateForFunctionPointer<GLVertexAttribFormat>(loader.Invoke("glVertexAttribFormat"));
            glVertexAttribIFormat = Marshal.GetDelegateForFunctionPointer<GLVertexAttribIFormat>(loader.Invoke("glVertexAttribIFormat"));
            glVertexAttribLFormat = Marshal.GetDelegateForFunctionPointer<GLVertexAttribLFormat>(loader.Invoke("glVertexAttribLFormat"));
            glVertexAttribBinding = Marshal.GetDelegateForFunctionPointer<GLVertexAttribBinding>(loader.Invoke("glVertexAttribBinding"));
            glVertexBindingDivisor = Marshal.GetDelegateForFunctionPointer<GLVertexBindingDivisor>(loader.Invoke("glVertexBindingDivisor"));
            glWeightbvARB = Marshal.GetDelegateForFunctionPointer<GLWeightbvARB>(loader.Invoke("glWeightbvARB"));
            glWeightsvARB = Marshal.GetDelegateForFunctionPointer<GLWeightsvARB>(loader.Invoke("glWeightsvARB"));
            glWeightivARB = Marshal.GetDelegateForFunctionPointer<GLWeightivARB>(loader.Invoke("glWeightivARB"));
            glWeightfvARB = Marshal.GetDelegateForFunctionPointer<GLWeightfvARB>(loader.Invoke("glWeightfvARB"));
            glWeightdvARB = Marshal.GetDelegateForFunctionPointer<GLWeightdvARB>(loader.Invoke("glWeightdvARB"));
            glWeightubvARB = Marshal.GetDelegateForFunctionPointer<GLWeightubvARB>(loader.Invoke("glWeightubvARB"));
            glWeightusvARB = Marshal.GetDelegateForFunctionPointer<GLWeightusvARB>(loader.Invoke("glWeightusvARB"));
            glWeightuivARB = Marshal.GetDelegateForFunctionPointer<GLWeightuivARB>(loader.Invoke("glWeightuivARB"));
            glWeightPointerARB = Marshal.GetDelegateForFunctionPointer<GLWeightPointerARB>(loader.Invoke("glWeightPointerARB"));
            glVertexBlendARB = Marshal.GetDelegateForFunctionPointer<GLVertexBlendARB>(loader.Invoke("glVertexBlendARB"));
            glBindBufferARB = Marshal.GetDelegateForFunctionPointer<GLBindBufferARB>(loader.Invoke("glBindBufferARB"));
            glDeleteBuffersARB = Marshal.GetDelegateForFunctionPointer<GLDeleteBuffersARB>(loader.Invoke("glDeleteBuffersARB"));
            glGenBuffersARB = Marshal.GetDelegateForFunctionPointer<GLGenBuffersARB>(loader.Invoke("glGenBuffersARB"));
            glIsBufferARB = Marshal.GetDelegateForFunctionPointer<GLIsBufferARB>(loader.Invoke("glIsBufferARB"));
            glBufferDataARB = Marshal.GetDelegateForFunctionPointer<GLBufferDataARB>(loader.Invoke("glBufferDataARB"));
            glBufferSubDataARB = Marshal.GetDelegateForFunctionPointer<GLBufferSubDataARB>(loader.Invoke("glBufferSubDataARB"));
            glGetBufferSubDataARB = Marshal.GetDelegateForFunctionPointer<GLGetBufferSubDataARB>(loader.Invoke("glGetBufferSubDataARB"));
            glMapBufferARB = Marshal.GetDelegateForFunctionPointer<GLMapBufferARB>(loader.Invoke("glMapBufferARB"));
            glUnmapBufferARB = Marshal.GetDelegateForFunctionPointer<GLUnmapBufferARB>(loader.Invoke("glUnmapBufferARB"));
            glGetBufferParameterivARB = Marshal.GetDelegateForFunctionPointer<GLGetBufferParameterivARB>(loader.Invoke("glGetBufferParameterivARB"));
            glGetBufferPointervARB = Marshal.GetDelegateForFunctionPointer<GLGetBufferPointervARB>(loader.Invoke("glGetBufferPointervARB"));
            glVertexAttrib1dARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1dARB>(loader.Invoke("glVertexAttrib1dARB"));
            glVertexAttrib1dvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1dvARB>(loader.Invoke("glVertexAttrib1dvARB"));
            glVertexAttrib1fARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1fARB>(loader.Invoke("glVertexAttrib1fARB"));
            glVertexAttrib1fvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1fvARB>(loader.Invoke("glVertexAttrib1fvARB"));
            glVertexAttrib1sARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1sARB>(loader.Invoke("glVertexAttrib1sARB"));
            glVertexAttrib1svARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1svARB>(loader.Invoke("glVertexAttrib1svARB"));
            glVertexAttrib2dARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2dARB>(loader.Invoke("glVertexAttrib2dARB"));
            glVertexAttrib2dvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2dvARB>(loader.Invoke("glVertexAttrib2dvARB"));
            glVertexAttrib2fARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2fARB>(loader.Invoke("glVertexAttrib2fARB"));
            glVertexAttrib2fvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2fvARB>(loader.Invoke("glVertexAttrib2fvARB"));
            glVertexAttrib2sARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2sARB>(loader.Invoke("glVertexAttrib2sARB"));
            glVertexAttrib2svARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2svARB>(loader.Invoke("glVertexAttrib2svARB"));
            glVertexAttrib3dARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3dARB>(loader.Invoke("glVertexAttrib3dARB"));
            glVertexAttrib3dvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3dvARB>(loader.Invoke("glVertexAttrib3dvARB"));
            glVertexAttrib3fARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3fARB>(loader.Invoke("glVertexAttrib3fARB"));
            glVertexAttrib3fvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3fvARB>(loader.Invoke("glVertexAttrib3fvARB"));
            glVertexAttrib3sARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3sARB>(loader.Invoke("glVertexAttrib3sARB"));
            glVertexAttrib3svARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3svARB>(loader.Invoke("glVertexAttrib3svARB"));
            glVertexAttrib4NbvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4NbvARB>(loader.Invoke("glVertexAttrib4NbvARB"));
            glVertexAttrib4NivARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4NivARB>(loader.Invoke("glVertexAttrib4NivARB"));
            glVertexAttrib4NsvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4NsvARB>(loader.Invoke("glVertexAttrib4NsvARB"));
            glVertexAttrib4NubARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4NubARB>(loader.Invoke("glVertexAttrib4NubARB"));
            glVertexAttrib4NubvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4NubvARB>(loader.Invoke("glVertexAttrib4NubvARB"));
            glVertexAttrib4NuivARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4NuivARB>(loader.Invoke("glVertexAttrib4NuivARB"));
            glVertexAttrib4NusvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4NusvARB>(loader.Invoke("glVertexAttrib4NusvARB"));
            glVertexAttrib4bvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4bvARB>(loader.Invoke("glVertexAttrib4bvARB"));
            glVertexAttrib4dARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4dARB>(loader.Invoke("glVertexAttrib4dARB"));
            glVertexAttrib4dvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4dvARB>(loader.Invoke("glVertexAttrib4dvARB"));
            glVertexAttrib4fARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4fARB>(loader.Invoke("glVertexAttrib4fARB"));
            glVertexAttrib4fvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4fvARB>(loader.Invoke("glVertexAttrib4fvARB"));
            glVertexAttrib4ivARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4ivARB>(loader.Invoke("glVertexAttrib4ivARB"));
            glVertexAttrib4sARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4sARB>(loader.Invoke("glVertexAttrib4sARB"));
            glVertexAttrib4svARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4svARB>(loader.Invoke("glVertexAttrib4svARB"));
            glVertexAttrib4ubvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4ubvARB>(loader.Invoke("glVertexAttrib4ubvARB"));
            glVertexAttrib4uivARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4uivARB>(loader.Invoke("glVertexAttrib4uivARB"));
            glVertexAttrib4usvARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4usvARB>(loader.Invoke("glVertexAttrib4usvARB"));
            glVertexAttribPointerARB = Marshal.GetDelegateForFunctionPointer<GLVertexAttribPointerARB>(loader.Invoke("glVertexAttribPointerARB"));
            glEnableVertexAttribArrayARB = Marshal.GetDelegateForFunctionPointer<GLEnableVertexAttribArrayARB>(loader.Invoke("glEnableVertexAttribArrayARB"));
            glDisableVertexAttribArrayARB = Marshal.GetDelegateForFunctionPointer<GLDisableVertexAttribArrayARB>(loader.Invoke("glDisableVertexAttribArrayARB"));
            glGetVertexAttribdvARB = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribdvARB>(loader.Invoke("glGetVertexAttribdvARB"));
            glGetVertexAttribfvARB = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribfvARB>(loader.Invoke("glGetVertexAttribfvARB"));
            glGetVertexAttribivARB = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribivARB>(loader.Invoke("glGetVertexAttribivARB"));
            glGetVertexAttribPointervARB = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribPointervARB>(loader.Invoke("glGetVertexAttribPointervARB"));
            glBindAttribLocationARB = Marshal.GetDelegateForFunctionPointer<GLBindAttribLocationARB>(loader.Invoke("glBindAttribLocationARB"));
            glGetActiveAttribARB = Marshal.GetDelegateForFunctionPointer<GLGetActiveAttribARB>(loader.Invoke("glGetActiveAttribARB"));
            glGetAttribLocationARB = Marshal.GetDelegateForFunctionPointer<GLGetAttribLocationARB>(loader.Invoke("glGetAttribLocationARB"));
            glVertexAttribP1ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP1ui>(loader.Invoke("glVertexAttribP1ui"));
            glVertexAttribP1uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP1uiv>(loader.Invoke("glVertexAttribP1uiv"));
            glVertexAttribP2ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP2ui>(loader.Invoke("glVertexAttribP2ui"));
            glVertexAttribP2uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP2uiv>(loader.Invoke("glVertexAttribP2uiv"));
            glVertexAttribP3ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP3ui>(loader.Invoke("glVertexAttribP3ui"));
            glVertexAttribP3uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP3uiv>(loader.Invoke("glVertexAttribP3uiv"));
            glVertexAttribP4ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP4ui>(loader.Invoke("glVertexAttribP4ui"));
            glVertexAttribP4uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribP4uiv>(loader.Invoke("glVertexAttribP4uiv"));
            glVertexP2ui = Marshal.GetDelegateForFunctionPointer<GLVertexP2ui>(loader.Invoke("glVertexP2ui"));
            glVertexP2uiv = Marshal.GetDelegateForFunctionPointer<GLVertexP2uiv>(loader.Invoke("glVertexP2uiv"));
            glVertexP3ui = Marshal.GetDelegateForFunctionPointer<GLVertexP3ui>(loader.Invoke("glVertexP3ui"));
            glVertexP3uiv = Marshal.GetDelegateForFunctionPointer<GLVertexP3uiv>(loader.Invoke("glVertexP3uiv"));
            glVertexP4ui = Marshal.GetDelegateForFunctionPointer<GLVertexP4ui>(loader.Invoke("glVertexP4ui"));
            glVertexP4uiv = Marshal.GetDelegateForFunctionPointer<GLVertexP4uiv>(loader.Invoke("glVertexP4uiv"));
            glTexCoordP1ui = Marshal.GetDelegateForFunctionPointer<GLTexCoordP1ui>(loader.Invoke("glTexCoordP1ui"));
            glTexCoordP1uiv = Marshal.GetDelegateForFunctionPointer<GLTexCoordP1uiv>(loader.Invoke("glTexCoordP1uiv"));
            glTexCoordP2ui = Marshal.GetDelegateForFunctionPointer<GLTexCoordP2ui>(loader.Invoke("glTexCoordP2ui"));
            glTexCoordP2uiv = Marshal.GetDelegateForFunctionPointer<GLTexCoordP2uiv>(loader.Invoke("glTexCoordP2uiv"));
            glTexCoordP3ui = Marshal.GetDelegateForFunctionPointer<GLTexCoordP3ui>(loader.Invoke("glTexCoordP3ui"));
            glTexCoordP3uiv = Marshal.GetDelegateForFunctionPointer<GLTexCoordP3uiv>(loader.Invoke("glTexCoordP3uiv"));
            glTexCoordP4ui = Marshal.GetDelegateForFunctionPointer<GLTexCoordP4ui>(loader.Invoke("glTexCoordP4ui"));
            glTexCoordP4uiv = Marshal.GetDelegateForFunctionPointer<GLTexCoordP4uiv>(loader.Invoke("glTexCoordP4uiv"));
            glMultiTexCoordP1ui = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP1ui>(loader.Invoke("glMultiTexCoordP1ui"));
            glMultiTexCoordP1uiv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP1uiv>(loader.Invoke("glMultiTexCoordP1uiv"));
            glMultiTexCoordP2ui = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP2ui>(loader.Invoke("glMultiTexCoordP2ui"));
            glMultiTexCoordP2uiv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP2uiv>(loader.Invoke("glMultiTexCoordP2uiv"));
            glMultiTexCoordP3ui = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP3ui>(loader.Invoke("glMultiTexCoordP3ui"));
            glMultiTexCoordP3uiv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP3uiv>(loader.Invoke("glMultiTexCoordP3uiv"));
            glMultiTexCoordP4ui = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP4ui>(loader.Invoke("glMultiTexCoordP4ui"));
            glMultiTexCoordP4uiv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordP4uiv>(loader.Invoke("glMultiTexCoordP4uiv"));
            glNormalP3ui = Marshal.GetDelegateForFunctionPointer<GLNormalP3ui>(loader.Invoke("glNormalP3ui"));
            glNormalP3uiv = Marshal.GetDelegateForFunctionPointer<GLNormalP3uiv>(loader.Invoke("glNormalP3uiv"));
            glColorP3ui = Marshal.GetDelegateForFunctionPointer<GLColorP3ui>(loader.Invoke("glColorP3ui"));
            glColorP3uiv = Marshal.GetDelegateForFunctionPointer<GLColorP3uiv>(loader.Invoke("glColorP3uiv"));
            glColorP4ui = Marshal.GetDelegateForFunctionPointer<GLColorP4ui>(loader.Invoke("glColorP4ui"));
            glColorP4uiv = Marshal.GetDelegateForFunctionPointer<GLColorP4uiv>(loader.Invoke("glColorP4uiv"));
            glSecondaryColorP3ui = Marshal.GetDelegateForFunctionPointer<GLSecondaryColorP3ui>(loader.Invoke("glSecondaryColorP3ui"));
            glSecondaryColorP3uiv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColorP3uiv>(loader.Invoke("glSecondaryColorP3uiv"));
            glViewportArrayv = Marshal.GetDelegateForFunctionPointer<GLViewportArrayv>(loader.Invoke("glViewportArrayv"));
            glViewportIndexedf = Marshal.GetDelegateForFunctionPointer<GLViewportIndexedf>(loader.Invoke("glViewportIndexedf"));
            glViewportIndexedfv = Marshal.GetDelegateForFunctionPointer<GLViewportIndexedfv>(loader.Invoke("glViewportIndexedfv"));
            glScissorArrayv = Marshal.GetDelegateForFunctionPointer<GLScissorArrayv>(loader.Invoke("glScissorArrayv"));
            glScissorIndexed = Marshal.GetDelegateForFunctionPointer<GLScissorIndexed>(loader.Invoke("glScissorIndexed"));
            glScissorIndexedv = Marshal.GetDelegateForFunctionPointer<GLScissorIndexedv>(loader.Invoke("glScissorIndexedv"));
            glDepthRangeArrayv = Marshal.GetDelegateForFunctionPointer<GLDepthRangeArrayv>(loader.Invoke("glDepthRangeArrayv"));
            glDepthRangeIndexed = Marshal.GetDelegateForFunctionPointer<GLDepthRangeIndexed>(loader.Invoke("glDepthRangeIndexed"));
            glGetFloati_v = Marshal.GetDelegateForFunctionPointer<GLGetFloati_v>(loader.Invoke("glGetFloati_v"));
            glGetDoublei_v = Marshal.GetDelegateForFunctionPointer<GLGetDoublei_v>(loader.Invoke("glGetDoublei_v"));
            glDepthRangeArraydvNV = Marshal.GetDelegateForFunctionPointer<GLDepthRangeArraydvNV>(loader.Invoke("glDepthRangeArraydvNV"));
            glDepthRangeIndexeddNV = Marshal.GetDelegateForFunctionPointer<GLDepthRangeIndexeddNV>(loader.Invoke("glDepthRangeIndexeddNV"));
            glWindowPos2dARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2dARB>(loader.Invoke("glWindowPos2dARB"));
            glWindowPos2dvARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2dvARB>(loader.Invoke("glWindowPos2dvARB"));
            glWindowPos2fARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2fARB>(loader.Invoke("glWindowPos2fARB"));
            glWindowPos2fvARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2fvARB>(loader.Invoke("glWindowPos2fvARB"));
            glWindowPos2iARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2iARB>(loader.Invoke("glWindowPos2iARB"));
            glWindowPos2ivARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2ivARB>(loader.Invoke("glWindowPos2ivARB"));
            glWindowPos2sARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2sARB>(loader.Invoke("glWindowPos2sARB"));
            glWindowPos2svARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos2svARB>(loader.Invoke("glWindowPos2svARB"));
            glWindowPos3dARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3dARB>(loader.Invoke("glWindowPos3dARB"));
            glWindowPos3dvARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3dvARB>(loader.Invoke("glWindowPos3dvARB"));
            glWindowPos3fARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3fARB>(loader.Invoke("glWindowPos3fARB"));
            glWindowPos3fvARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3fvARB>(loader.Invoke("glWindowPos3fvARB"));
            glWindowPos3iARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3iARB>(loader.Invoke("glWindowPos3iARB"));
            glWindowPos3ivARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3ivARB>(loader.Invoke("glWindowPos3ivARB"));
            glWindowPos3sARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3sARB>(loader.Invoke("glWindowPos3sARB"));
            glWindowPos3svARB = Marshal.GetDelegateForFunctionPointer<GLWindowPos3svARB>(loader.Invoke("glWindowPos3svARB"));
            glDrawBuffersATI = Marshal.GetDelegateForFunctionPointer<GLDrawBuffersATI>(loader.Invoke("glDrawBuffersATI"));
            glElementPointerATI = Marshal.GetDelegateForFunctionPointer<GLElementPointerATI>(loader.Invoke("glElementPointerATI"));
            glDrawElementArrayATI = Marshal.GetDelegateForFunctionPointer<GLDrawElementArrayATI>(loader.Invoke("glDrawElementArrayATI"));
            glDrawRangeElementArrayATI = Marshal.GetDelegateForFunctionPointer<GLDrawRangeElementArrayATI>(loader.Invoke("glDrawRangeElementArrayATI"));
            glTexBumpParameterivATI = Marshal.GetDelegateForFunctionPointer<GLTexBumpParameterivATI>(loader.Invoke("glTexBumpParameterivATI"));
            glTexBumpParameterfvATI = Marshal.GetDelegateForFunctionPointer<GLTexBumpParameterfvATI>(loader.Invoke("glTexBumpParameterfvATI"));
            glGetTexBumpParameterivATI = Marshal.GetDelegateForFunctionPointer<GLGetTexBumpParameterivATI>(loader.Invoke("glGetTexBumpParameterivATI"));
            glGetTexBumpParameterfvATI = Marshal.GetDelegateForFunctionPointer<GLGetTexBumpParameterfvATI>(loader.Invoke("glGetTexBumpParameterfvATI"));
            glGenFragmentShadersATI = Marshal.GetDelegateForFunctionPointer<GLGenFragmentShadersATI>(loader.Invoke("glGenFragmentShadersATI"));
            glBindFragmentShaderATI = Marshal.GetDelegateForFunctionPointer<GLBindFragmentShaderATI>(loader.Invoke("glBindFragmentShaderATI"));
            glDeleteFragmentShaderATI = Marshal.GetDelegateForFunctionPointer<GLDeleteFragmentShaderATI>(loader.Invoke("glDeleteFragmentShaderATI"));
            glBeginFragmentShaderATI = Marshal.GetDelegateForFunctionPointer<GLBeginFragmentShaderATI>(loader.Invoke("glBeginFragmentShaderATI"));
            glEndFragmentShaderATI = Marshal.GetDelegateForFunctionPointer<GLEndFragmentShaderATI>(loader.Invoke("glEndFragmentShaderATI"));
            glPassTexCoordATI = Marshal.GetDelegateForFunctionPointer<GLPassTexCoordATI>(loader.Invoke("glPassTexCoordATI"));
            glSampleMapATI = Marshal.GetDelegateForFunctionPointer<GLSampleMapATI>(loader.Invoke("glSampleMapATI"));
            glColorFragmentOp1ATI = Marshal.GetDelegateForFunctionPointer<GLColorFragmentOp1ATI>(loader.Invoke("glColorFragmentOp1ATI"));
            glColorFragmentOp2ATI = Marshal.GetDelegateForFunctionPointer<GLColorFragmentOp2ATI>(loader.Invoke("glColorFragmentOp2ATI"));
            glColorFragmentOp3ATI = Marshal.GetDelegateForFunctionPointer<GLColorFragmentOp3ATI>(loader.Invoke("glColorFragmentOp3ATI"));
            glAlphaFragmentOp1ATI = Marshal.GetDelegateForFunctionPointer<GLAlphaFragmentOp1ATI>(loader.Invoke("glAlphaFragmentOp1ATI"));
            glAlphaFragmentOp2ATI = Marshal.GetDelegateForFunctionPointer<GLAlphaFragmentOp2ATI>(loader.Invoke("glAlphaFragmentOp2ATI"));
            glAlphaFragmentOp3ATI = Marshal.GetDelegateForFunctionPointer<GLAlphaFragmentOp3ATI>(loader.Invoke("glAlphaFragmentOp3ATI"));
            glSetFragmentShaderConstantATI = Marshal.GetDelegateForFunctionPointer<GLSetFragmentShaderConstantATI>(loader.Invoke("glSetFragmentShaderConstantATI"));
            glMapObjectBufferATI = Marshal.GetDelegateForFunctionPointer<GLMapObjectBufferATI>(loader.Invoke("glMapObjectBufferATI"));
            glUnmapObjectBufferATI = Marshal.GetDelegateForFunctionPointer<GLUnmapObjectBufferATI>(loader.Invoke("glUnmapObjectBufferATI"));
            glPNTrianglesiATI = Marshal.GetDelegateForFunctionPointer<GLPNTrianglesiATI>(loader.Invoke("glPNTrianglesiATI"));
            glPNTrianglesfATI = Marshal.GetDelegateForFunctionPointer<GLPNTrianglesfATI>(loader.Invoke("glPNTrianglesfATI"));
            glStencilOpSeparateATI = Marshal.GetDelegateForFunctionPointer<GLStencilOpSeparateATI>(loader.Invoke("glStencilOpSeparateATI"));
            glStencilFuncSeparateATI = Marshal.GetDelegateForFunctionPointer<GLStencilFuncSeparateATI>(loader.Invoke("glStencilFuncSeparateATI"));
            glNewObjectBufferATI = Marshal.GetDelegateForFunctionPointer<GLNewObjectBufferATI>(loader.Invoke("glNewObjectBufferATI"));
            glIsObjectBufferATI = Marshal.GetDelegateForFunctionPointer<GLIsObjectBufferATI>(loader.Invoke("glIsObjectBufferATI"));
            glUpdateObjectBufferATI = Marshal.GetDelegateForFunctionPointer<GLUpdateObjectBufferATI>(loader.Invoke("glUpdateObjectBufferATI"));
            glGetObjectBufferfvATI = Marshal.GetDelegateForFunctionPointer<GLGetObjectBufferfvATI>(loader.Invoke("glGetObjectBufferfvATI"));
            glGetObjectBufferivATI = Marshal.GetDelegateForFunctionPointer<GLGetObjectBufferivATI>(loader.Invoke("glGetObjectBufferivATI"));
            glFreeObjectBufferATI = Marshal.GetDelegateForFunctionPointer<GLFreeObjectBufferATI>(loader.Invoke("glFreeObjectBufferATI"));
            glArrayObjectATI = Marshal.GetDelegateForFunctionPointer<GLArrayObjectATI>(loader.Invoke("glArrayObjectATI"));
            glGetArrayObjectfvATI = Marshal.GetDelegateForFunctionPointer<GLGetArrayObjectfvATI>(loader.Invoke("glGetArrayObjectfvATI"));
            glGetArrayObjectivATI = Marshal.GetDelegateForFunctionPointer<GLGetArrayObjectivATI>(loader.Invoke("glGetArrayObjectivATI"));
            glVariantArrayObjectATI = Marshal.GetDelegateForFunctionPointer<GLVariantArrayObjectATI>(loader.Invoke("glVariantArrayObjectATI"));
            glGetVariantArrayObjectfvATI = Marshal.GetDelegateForFunctionPointer<GLGetVariantArrayObjectfvATI>(loader.Invoke("glGetVariantArrayObjectfvATI"));
            glGetVariantArrayObjectivATI = Marshal.GetDelegateForFunctionPointer<GLGetVariantArrayObjectivATI>(loader.Invoke("glGetVariantArrayObjectivATI"));
            glVertexAttribArrayObjectATI = Marshal.GetDelegateForFunctionPointer<GLVertexAttribArrayObjectATI>(loader.Invoke("glVertexAttribArrayObjectATI"));
            glGetVertexAttribArrayObjectfvATI = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribArrayObjectfvATI>(loader.Invoke("glGetVertexAttribArrayObjectfvATI"));
            glGetVertexAttribArrayObjectivATI = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribArrayObjectivATI>(loader.Invoke("glGetVertexAttribArrayObjectivATI"));
            glVertexStream1sATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1sATI>(loader.Invoke("glVertexStream1sATI"));
            glVertexStream1svATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1svATI>(loader.Invoke("glVertexStream1svATI"));
            glVertexStream1iATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1iATI>(loader.Invoke("glVertexStream1iATI"));
            glVertexStream1ivATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1ivATI>(loader.Invoke("glVertexStream1ivATI"));
            glVertexStream1fATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1fATI>(loader.Invoke("glVertexStream1fATI"));
            glVertexStream1fvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1fvATI>(loader.Invoke("glVertexStream1fvATI"));
            glVertexStream1dATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1dATI>(loader.Invoke("glVertexStream1dATI"));
            glVertexStream1dvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream1dvATI>(loader.Invoke("glVertexStream1dvATI"));
            glVertexStream2sATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2sATI>(loader.Invoke("glVertexStream2sATI"));
            glVertexStream2svATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2svATI>(loader.Invoke("glVertexStream2svATI"));
            glVertexStream2iATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2iATI>(loader.Invoke("glVertexStream2iATI"));
            glVertexStream2ivATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2ivATI>(loader.Invoke("glVertexStream2ivATI"));
            glVertexStream2fATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2fATI>(loader.Invoke("glVertexStream2fATI"));
            glVertexStream2fvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2fvATI>(loader.Invoke("glVertexStream2fvATI"));
            glVertexStream2dATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2dATI>(loader.Invoke("glVertexStream2dATI"));
            glVertexStream2dvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream2dvATI>(loader.Invoke("glVertexStream2dvATI"));
            glVertexStream3sATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3sATI>(loader.Invoke("glVertexStream3sATI"));
            glVertexStream3svATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3svATI>(loader.Invoke("glVertexStream3svATI"));
            glVertexStream3iATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3iATI>(loader.Invoke("glVertexStream3iATI"));
            glVertexStream3ivATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3ivATI>(loader.Invoke("glVertexStream3ivATI"));
            glVertexStream3fATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3fATI>(loader.Invoke("glVertexStream3fATI"));
            glVertexStream3fvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3fvATI>(loader.Invoke("glVertexStream3fvATI"));
            glVertexStream3dATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3dATI>(loader.Invoke("glVertexStream3dATI"));
            glVertexStream3dvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream3dvATI>(loader.Invoke("glVertexStream3dvATI"));
            glVertexStream4sATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4sATI>(loader.Invoke("glVertexStream4sATI"));
            glVertexStream4svATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4svATI>(loader.Invoke("glVertexStream4svATI"));
            glVertexStream4iATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4iATI>(loader.Invoke("glVertexStream4iATI"));
            glVertexStream4ivATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4ivATI>(loader.Invoke("glVertexStream4ivATI"));
            glVertexStream4fATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4fATI>(loader.Invoke("glVertexStream4fATI"));
            glVertexStream4fvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4fvATI>(loader.Invoke("glVertexStream4fvATI"));
            glVertexStream4dATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4dATI>(loader.Invoke("glVertexStream4dATI"));
            glVertexStream4dvATI = Marshal.GetDelegateForFunctionPointer<GLVertexStream4dvATI>(loader.Invoke("glVertexStream4dvATI"));
            glNormalStream3bATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3bATI>(loader.Invoke("glNormalStream3bATI"));
            glNormalStream3bvATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3bvATI>(loader.Invoke("glNormalStream3bvATI"));
            glNormalStream3sATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3sATI>(loader.Invoke("glNormalStream3sATI"));
            glNormalStream3svATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3svATI>(loader.Invoke("glNormalStream3svATI"));
            glNormalStream3iATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3iATI>(loader.Invoke("glNormalStream3iATI"));
            glNormalStream3ivATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3ivATI>(loader.Invoke("glNormalStream3ivATI"));
            glNormalStream3fATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3fATI>(loader.Invoke("glNormalStream3fATI"));
            glNormalStream3fvATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3fvATI>(loader.Invoke("glNormalStream3fvATI"));
            glNormalStream3dATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3dATI>(loader.Invoke("glNormalStream3dATI"));
            glNormalStream3dvATI = Marshal.GetDelegateForFunctionPointer<GLNormalStream3dvATI>(loader.Invoke("glNormalStream3dvATI"));
            glClientActiveVertexStreamATI = Marshal.GetDelegateForFunctionPointer<GLClientActiveVertexStreamATI>(loader.Invoke("glClientActiveVertexStreamATI"));
            glVertexBlendEnviATI = Marshal.GetDelegateForFunctionPointer<GLVertexBlendEnviATI>(loader.Invoke("glVertexBlendEnviATI"));
            glVertexBlendEnvfATI = Marshal.GetDelegateForFunctionPointer<GLVertexBlendEnvfATI>(loader.Invoke("glVertexBlendEnvfATI"));
            glEGLImageTargetTexStorageEXT = Marshal.GetDelegateForFunctionPointer<GLEGLImageTargetTexStorageEXT>(loader.Invoke("glEGLImageTargetTexStorageEXT"));
            glEGLImageTargetTextureStorageEXT = Marshal.GetDelegateForFunctionPointer<GLEGLImageTargetTextureStorageEXT>(loader.Invoke("glEGLImageTargetTextureStorageEXT"));
            glDrawArraysInstancedBaseInstanceEXT = Marshal.GetDelegateForFunctionPointer<GLDrawArraysInstancedBaseInstanceEXT>(loader.Invoke("glDrawArraysInstancedBaseInstanceEXT"));
            glDrawElementsInstancedBaseInstanceEXT = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedBaseInstanceEXT>(loader.Invoke("glDrawElementsInstancedBaseInstanceEXT"));
            glDrawElementsInstancedBaseVertexBaseInstanceEXT = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedBaseVertexBaseInstanceEXT>(loader.Invoke("glDrawElementsInstancedBaseVertexBaseInstanceEXT"));
            glUniformBufferEXT = Marshal.GetDelegateForFunctionPointer<GLUniformBufferEXT>(loader.Invoke("glUniformBufferEXT"));
            glGetUniformBufferSizeEXT = Marshal.GetDelegateForFunctionPointer<GLGetUniformBufferSizeEXT>(loader.Invoke("glGetUniformBufferSizeEXT"));
            glGetUniformOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLGetUniformOffsetEXT>(loader.Invoke("glGetUniformOffsetEXT"));
            glBlendColorEXT = Marshal.GetDelegateForFunctionPointer<GLBlendColorEXT>(loader.Invoke("glBlendColorEXT"));
            glBlendEquationSeparateEXT = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparateEXT>(loader.Invoke("glBlendEquationSeparateEXT"));
            glBindFragDataLocationIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLBindFragDataLocationIndexedEXT>(loader.Invoke("glBindFragDataLocationIndexedEXT"));
            glBindFragDataLocationEXT = Marshal.GetDelegateForFunctionPointer<GLBindFragDataLocationEXT>(loader.Invoke("glBindFragDataLocationEXT"));
            glGetProgramResourceLocationIndexEXT = Marshal.GetDelegateForFunctionPointer<GLGetProgramResourceLocationIndexEXT>(loader.Invoke("glGetProgramResourceLocationIndexEXT"));
            glGetFragDataIndexEXT = Marshal.GetDelegateForFunctionPointer<GLGetFragDataIndexEXT>(loader.Invoke("glGetFragDataIndexEXT"));
            glBlendFuncSeparateEXT = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparateEXT>(loader.Invoke("glBlendFuncSeparateEXT"));
            glBlendEquationEXT = Marshal.GetDelegateForFunctionPointer<GLBlendEquationEXT>(loader.Invoke("glBlendEquationEXT"));
            glBufferStorageEXT = Marshal.GetDelegateForFunctionPointer<GLBufferStorageEXT>(loader.Invoke("glBufferStorageEXT"));
            glClearTexImageEXT = Marshal.GetDelegateForFunctionPointer<GLClearTexImageEXT>(loader.Invoke("glClearTexImageEXT"));
            glClearTexSubImageEXT = Marshal.GetDelegateForFunctionPointer<GLClearTexSubImageEXT>(loader.Invoke("glClearTexSubImageEXT"));
            glClipControlEXT = Marshal.GetDelegateForFunctionPointer<GLClipControlEXT>(loader.Invoke("glClipControlEXT"));
            glColorSubTableEXT = Marshal.GetDelegateForFunctionPointer<GLColorSubTableEXT>(loader.Invoke("glColorSubTableEXT"));
            glCopyColorSubTableEXT = Marshal.GetDelegateForFunctionPointer<GLCopyColorSubTableEXT>(loader.Invoke("glCopyColorSubTableEXT"));
            glLockArraysEXT = Marshal.GetDelegateForFunctionPointer<GLLockArraysEXT>(loader.Invoke("glLockArraysEXT"));
            glUnlockArraysEXT = Marshal.GetDelegateForFunctionPointer<GLUnlockArraysEXT>(loader.Invoke("glUnlockArraysEXT"));
            glConvolutionFilter1DEXT = Marshal.GetDelegateForFunctionPointer<GLConvolutionFilter1DEXT>(loader.Invoke("glConvolutionFilter1DEXT"));
            glConvolutionFilter2DEXT = Marshal.GetDelegateForFunctionPointer<GLConvolutionFilter2DEXT>(loader.Invoke("glConvolutionFilter2DEXT"));
            glConvolutionParameterfEXT = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameterfEXT>(loader.Invoke("glConvolutionParameterfEXT"));
            glConvolutionParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameterfvEXT>(loader.Invoke("glConvolutionParameterfvEXT"));
            glConvolutionParameteriEXT = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameteriEXT>(loader.Invoke("glConvolutionParameteriEXT"));
            glConvolutionParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameterivEXT>(loader.Invoke("glConvolutionParameterivEXT"));
            glCopyConvolutionFilter1DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyConvolutionFilter1DEXT>(loader.Invoke("glCopyConvolutionFilter1DEXT"));
            glCopyConvolutionFilter2DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyConvolutionFilter2DEXT>(loader.Invoke("glCopyConvolutionFilter2DEXT"));
            glGetConvolutionFilterEXT = Marshal.GetDelegateForFunctionPointer<GLGetConvolutionFilterEXT>(loader.Invoke("glGetConvolutionFilterEXT"));
            glGetConvolutionParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetConvolutionParameterfvEXT>(loader.Invoke("glGetConvolutionParameterfvEXT"));
            glGetConvolutionParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetConvolutionParameterivEXT>(loader.Invoke("glGetConvolutionParameterivEXT"));
            glGetSeparableFilterEXT = Marshal.GetDelegateForFunctionPointer<GLGetSeparableFilterEXT>(loader.Invoke("glGetSeparableFilterEXT"));
            glSeparableFilter2DEXT = Marshal.GetDelegateForFunctionPointer<GLSeparableFilter2DEXT>(loader.Invoke("glSeparableFilter2DEXT"));
            glTangent3bEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3bEXT>(loader.Invoke("glTangent3bEXT"));
            glTangent3bvEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3bvEXT>(loader.Invoke("glTangent3bvEXT"));
            glTangent3dEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3dEXT>(loader.Invoke("glTangent3dEXT"));
            glTangent3dvEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3dvEXT>(loader.Invoke("glTangent3dvEXT"));
            glTangent3fEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3fEXT>(loader.Invoke("glTangent3fEXT"));
            glTangent3fvEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3fvEXT>(loader.Invoke("glTangent3fvEXT"));
            glTangent3iEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3iEXT>(loader.Invoke("glTangent3iEXT"));
            glTangent3ivEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3ivEXT>(loader.Invoke("glTangent3ivEXT"));
            glTangent3sEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3sEXT>(loader.Invoke("glTangent3sEXT"));
            glTangent3svEXT = Marshal.GetDelegateForFunctionPointer<GLTangent3svEXT>(loader.Invoke("glTangent3svEXT"));
            glBinormal3bEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3bEXT>(loader.Invoke("glBinormal3bEXT"));
            glBinormal3bvEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3bvEXT>(loader.Invoke("glBinormal3bvEXT"));
            glBinormal3dEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3dEXT>(loader.Invoke("glBinormal3dEXT"));
            glBinormal3dvEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3dvEXT>(loader.Invoke("glBinormal3dvEXT"));
            glBinormal3fEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3fEXT>(loader.Invoke("glBinormal3fEXT"));
            glBinormal3fvEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3fvEXT>(loader.Invoke("glBinormal3fvEXT"));
            glBinormal3iEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3iEXT>(loader.Invoke("glBinormal3iEXT"));
            glBinormal3ivEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3ivEXT>(loader.Invoke("glBinormal3ivEXT"));
            glBinormal3sEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3sEXT>(loader.Invoke("glBinormal3sEXT"));
            glBinormal3svEXT = Marshal.GetDelegateForFunctionPointer<GLBinormal3svEXT>(loader.Invoke("glBinormal3svEXT"));
            glTangentPointerEXT = Marshal.GetDelegateForFunctionPointer<GLTangentPointerEXT>(loader.Invoke("glTangentPointerEXT"));
            glBinormalPointerEXT = Marshal.GetDelegateForFunctionPointer<GLBinormalPointerEXT>(loader.Invoke("glBinormalPointerEXT"));
            glCopyImageSubDataEXT = Marshal.GetDelegateForFunctionPointer<GLCopyImageSubDataEXT>(loader.Invoke("glCopyImageSubDataEXT"));
            glCopyTexImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTexImage1DEXT>(loader.Invoke("glCopyTexImage1DEXT"));
            glCopyTexImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTexImage2DEXT>(loader.Invoke("glCopyTexImage2DEXT"));
            glCopyTexSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTexSubImage1DEXT>(loader.Invoke("glCopyTexSubImage1DEXT"));
            glCopyTexSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTexSubImage2DEXT>(loader.Invoke("glCopyTexSubImage2DEXT"));
            glCopyTexSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTexSubImage3DEXT>(loader.Invoke("glCopyTexSubImage3DEXT"));
            glCullParameterdvEXT = Marshal.GetDelegateForFunctionPointer<GLCullParameterdvEXT>(loader.Invoke("glCullParameterdvEXT"));
            glCullParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLCullParameterfvEXT>(loader.Invoke("glCullParameterfvEXT"));
            glLabelObjectEXT = Marshal.GetDelegateForFunctionPointer<GLLabelObjectEXT>(loader.Invoke("glLabelObjectEXT"));
            glGetObjectLabelEXT = Marshal.GetDelegateForFunctionPointer<GLGetObjectLabelEXT>(loader.Invoke("glGetObjectLabelEXT"));
            glInsertEventMarkerEXT = Marshal.GetDelegateForFunctionPointer<GLInsertEventMarkerEXT>(loader.Invoke("glInsertEventMarkerEXT"));
            glPushGroupMarkerEXT = Marshal.GetDelegateForFunctionPointer<GLPushGroupMarkerEXT>(loader.Invoke("glPushGroupMarkerEXT"));
            glPopGroupMarkerEXT = Marshal.GetDelegateForFunctionPointer<GLPopGroupMarkerEXT>(loader.Invoke("glPopGroupMarkerEXT"));
            glDepthBoundsEXT = Marshal.GetDelegateForFunctionPointer<GLDepthBoundsEXT>(loader.Invoke("glDepthBoundsEXT"));
            glMatrixLoadfEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixLoadfEXT>(loader.Invoke("glMatrixLoadfEXT"));
            glMatrixLoaddEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixLoaddEXT>(loader.Invoke("glMatrixLoaddEXT"));
            glMatrixMultfEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixMultfEXT>(loader.Invoke("glMatrixMultfEXT"));
            glMatrixMultdEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixMultdEXT>(loader.Invoke("glMatrixMultdEXT"));
            glMatrixLoadIdentityEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixLoadIdentityEXT>(loader.Invoke("glMatrixLoadIdentityEXT"));
            glMatrixRotatefEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixRotatefEXT>(loader.Invoke("glMatrixRotatefEXT"));
            glMatrixRotatedEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixRotatedEXT>(loader.Invoke("glMatrixRotatedEXT"));
            glMatrixScalefEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixScalefEXT>(loader.Invoke("glMatrixScalefEXT"));
            glMatrixScaledEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixScaledEXT>(loader.Invoke("glMatrixScaledEXT"));
            glMatrixTranslatefEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixTranslatefEXT>(loader.Invoke("glMatrixTranslatefEXT"));
            glMatrixTranslatedEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixTranslatedEXT>(loader.Invoke("glMatrixTranslatedEXT"));
            glMatrixFrustumEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixFrustumEXT>(loader.Invoke("glMatrixFrustumEXT"));
            glMatrixOrthoEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixOrthoEXT>(loader.Invoke("glMatrixOrthoEXT"));
            glMatrixPopEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixPopEXT>(loader.Invoke("glMatrixPopEXT"));
            glMatrixPushEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixPushEXT>(loader.Invoke("glMatrixPushEXT"));
            glClientAttribDefaultEXT = Marshal.GetDelegateForFunctionPointer<GLClientAttribDefaultEXT>(loader.Invoke("glClientAttribDefaultEXT"));
            glPushClientAttribDefaultEXT = Marshal.GetDelegateForFunctionPointer<GLPushClientAttribDefaultEXT>(loader.Invoke("glPushClientAttribDefaultEXT"));
            glTextureParameterfEXT = Marshal.GetDelegateForFunctionPointer<GLTextureParameterfEXT>(loader.Invoke("glTextureParameterfEXT"));
            glTextureParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLTextureParameterfvEXT>(loader.Invoke("glTextureParameterfvEXT"));
            glTextureParameteriEXT = Marshal.GetDelegateForFunctionPointer<GLTextureParameteriEXT>(loader.Invoke("glTextureParameteriEXT"));
            glTextureParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLTextureParameterivEXT>(loader.Invoke("glTextureParameterivEXT"));
            glTextureImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureImage1DEXT>(loader.Invoke("glTextureImage1DEXT"));
            glTextureImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureImage2DEXT>(loader.Invoke("glTextureImage2DEXT"));
            glTextureSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureSubImage1DEXT>(loader.Invoke("glTextureSubImage1DEXT"));
            glTextureSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureSubImage2DEXT>(loader.Invoke("glTextureSubImage2DEXT"));
            glCopyTextureImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTextureImage1DEXT>(loader.Invoke("glCopyTextureImage1DEXT"));
            glCopyTextureImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTextureImage2DEXT>(loader.Invoke("glCopyTextureImage2DEXT"));
            glCopyTextureSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTextureSubImage1DEXT>(loader.Invoke("glCopyTextureSubImage1DEXT"));
            glCopyTextureSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTextureSubImage2DEXT>(loader.Invoke("glCopyTextureSubImage2DEXT"));
            glGetTextureImageEXT = Marshal.GetDelegateForFunctionPointer<GLGetTextureImageEXT>(loader.Invoke("glGetTextureImageEXT"));
            glGetTextureParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameterfvEXT>(loader.Invoke("glGetTextureParameterfvEXT"));
            glGetTextureParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameterivEXT>(loader.Invoke("glGetTextureParameterivEXT"));
            glGetTextureLevelParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetTextureLevelParameterfvEXT>(loader.Invoke("glGetTextureLevelParameterfvEXT"));
            glGetTextureLevelParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetTextureLevelParameterivEXT>(loader.Invoke("glGetTextureLevelParameterivEXT"));
            glTextureImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureImage3DEXT>(loader.Invoke("glTextureImage3DEXT"));
            glTextureSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureSubImage3DEXT>(loader.Invoke("glTextureSubImage3DEXT"));
            glCopyTextureSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyTextureSubImage3DEXT>(loader.Invoke("glCopyTextureSubImage3DEXT"));
            glBindMultiTextureEXT = Marshal.GetDelegateForFunctionPointer<GLBindMultiTextureEXT>(loader.Invoke("glBindMultiTextureEXT"));
            glMultiTexCoordPointerEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoordPointerEXT>(loader.Invoke("glMultiTexCoordPointerEXT"));
            glMultiTexEnvfEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexEnvfEXT>(loader.Invoke("glMultiTexEnvfEXT"));
            glMultiTexEnvfvEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexEnvfvEXT>(loader.Invoke("glMultiTexEnvfvEXT"));
            glMultiTexEnviEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexEnviEXT>(loader.Invoke("glMultiTexEnviEXT"));
            glMultiTexEnvivEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexEnvivEXT>(loader.Invoke("glMultiTexEnvivEXT"));
            glMultiTexGendEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexGendEXT>(loader.Invoke("glMultiTexGendEXT"));
            glMultiTexGendvEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexGendvEXT>(loader.Invoke("glMultiTexGendvEXT"));
            glMultiTexGenfEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexGenfEXT>(loader.Invoke("glMultiTexGenfEXT"));
            glMultiTexGenfvEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexGenfvEXT>(loader.Invoke("glMultiTexGenfvEXT"));
            glMultiTexGeniEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexGeniEXT>(loader.Invoke("glMultiTexGeniEXT"));
            glMultiTexGenivEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexGenivEXT>(loader.Invoke("glMultiTexGenivEXT"));
            glGetMultiTexEnvfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexEnvfvEXT>(loader.Invoke("glGetMultiTexEnvfvEXT"));
            glGetMultiTexEnvivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexEnvivEXT>(loader.Invoke("glGetMultiTexEnvivEXT"));
            glGetMultiTexGendvEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexGendvEXT>(loader.Invoke("glGetMultiTexGendvEXT"));
            glGetMultiTexGenfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexGenfvEXT>(loader.Invoke("glGetMultiTexGenfvEXT"));
            glGetMultiTexGenivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexGenivEXT>(loader.Invoke("glGetMultiTexGenivEXT"));
            glMultiTexParameteriEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexParameteriEXT>(loader.Invoke("glMultiTexParameteriEXT"));
            glMultiTexParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexParameterivEXT>(loader.Invoke("glMultiTexParameterivEXT"));
            glMultiTexParameterfEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexParameterfEXT>(loader.Invoke("glMultiTexParameterfEXT"));
            glMultiTexParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexParameterfvEXT>(loader.Invoke("glMultiTexParameterfvEXT"));
            glMultiTexImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexImage1DEXT>(loader.Invoke("glMultiTexImage1DEXT"));
            glMultiTexImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexImage2DEXT>(loader.Invoke("glMultiTexImage2DEXT"));
            glMultiTexSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexSubImage1DEXT>(loader.Invoke("glMultiTexSubImage1DEXT"));
            glMultiTexSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexSubImage2DEXT>(loader.Invoke("glMultiTexSubImage2DEXT"));
            glCopyMultiTexImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyMultiTexImage1DEXT>(loader.Invoke("glCopyMultiTexImage1DEXT"));
            glCopyMultiTexImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyMultiTexImage2DEXT>(loader.Invoke("glCopyMultiTexImage2DEXT"));
            glCopyMultiTexSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyMultiTexSubImage1DEXT>(loader.Invoke("glCopyMultiTexSubImage1DEXT"));
            glCopyMultiTexSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyMultiTexSubImage2DEXT>(loader.Invoke("glCopyMultiTexSubImage2DEXT"));
            glGetMultiTexImageEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexImageEXT>(loader.Invoke("glGetMultiTexImageEXT"));
            glGetMultiTexParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexParameterfvEXT>(loader.Invoke("glGetMultiTexParameterfvEXT"));
            glGetMultiTexParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexParameterivEXT>(loader.Invoke("glGetMultiTexParameterivEXT"));
            glGetMultiTexLevelParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexLevelParameterfvEXT>(loader.Invoke("glGetMultiTexLevelParameterfvEXT"));
            glGetMultiTexLevelParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexLevelParameterivEXT>(loader.Invoke("glGetMultiTexLevelParameterivEXT"));
            glMultiTexImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexImage3DEXT>(loader.Invoke("glMultiTexImage3DEXT"));
            glMultiTexSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexSubImage3DEXT>(loader.Invoke("glMultiTexSubImage3DEXT"));
            glCopyMultiTexSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLCopyMultiTexSubImage3DEXT>(loader.Invoke("glCopyMultiTexSubImage3DEXT"));
            glEnableClientStateIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLEnableClientStateIndexedEXT>(loader.Invoke("glEnableClientStateIndexedEXT"));
            glDisableClientStateIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLDisableClientStateIndexedEXT>(loader.Invoke("glDisableClientStateIndexedEXT"));
            glGetFloatIndexedvEXT = Marshal.GetDelegateForFunctionPointer<GLGetFloatIndexedvEXT>(loader.Invoke("glGetFloatIndexedvEXT"));
            glGetDoubleIndexedvEXT = Marshal.GetDelegateForFunctionPointer<GLGetDoubleIndexedvEXT>(loader.Invoke("glGetDoubleIndexedvEXT"));
            glGetPointerIndexedvEXT = Marshal.GetDelegateForFunctionPointer<GLGetPointerIndexedvEXT>(loader.Invoke("glGetPointerIndexedvEXT"));
            glEnableIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLEnableIndexedEXT>(loader.Invoke("glEnableIndexedEXT"));
            glDisableIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLDisableIndexedEXT>(loader.Invoke("glDisableIndexedEXT"));
            glIsEnabledIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLIsEnabledIndexedEXT>(loader.Invoke("glIsEnabledIndexedEXT"));
            glGetIntegerIndexedvEXT = Marshal.GetDelegateForFunctionPointer<GLGetIntegerIndexedvEXT>(loader.Invoke("glGetIntegerIndexedvEXT"));
            glGetBooleanIndexedvEXT = Marshal.GetDelegateForFunctionPointer<GLGetBooleanIndexedvEXT>(loader.Invoke("glGetBooleanIndexedvEXT"));
            glCompressedTextureImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureImage3DEXT>(loader.Invoke("glCompressedTextureImage3DEXT"));
            glCompressedTextureImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureImage2DEXT>(loader.Invoke("glCompressedTextureImage2DEXT"));
            glCompressedTextureImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureImage1DEXT>(loader.Invoke("glCompressedTextureImage1DEXT"));
            glCompressedTextureSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureSubImage3DEXT>(loader.Invoke("glCompressedTextureSubImage3DEXT"));
            glCompressedTextureSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureSubImage2DEXT>(loader.Invoke("glCompressedTextureSubImage2DEXT"));
            glCompressedTextureSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedTextureSubImage1DEXT>(loader.Invoke("glCompressedTextureSubImage1DEXT"));
            glGetCompressedTextureImageEXT = Marshal.GetDelegateForFunctionPointer<GLGetCompressedTextureImageEXT>(loader.Invoke("glGetCompressedTextureImageEXT"));
            glCompressedMultiTexImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedMultiTexImage3DEXT>(loader.Invoke("glCompressedMultiTexImage3DEXT"));
            glCompressedMultiTexImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedMultiTexImage2DEXT>(loader.Invoke("glCompressedMultiTexImage2DEXT"));
            glCompressedMultiTexImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedMultiTexImage1DEXT>(loader.Invoke("glCompressedMultiTexImage1DEXT"));
            glCompressedMultiTexSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedMultiTexSubImage3DEXT>(loader.Invoke("glCompressedMultiTexSubImage3DEXT"));
            glCompressedMultiTexSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedMultiTexSubImage2DEXT>(loader.Invoke("glCompressedMultiTexSubImage2DEXT"));
            glCompressedMultiTexSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLCompressedMultiTexSubImage1DEXT>(loader.Invoke("glCompressedMultiTexSubImage1DEXT"));
            glGetCompressedMultiTexImageEXT = Marshal.GetDelegateForFunctionPointer<GLGetCompressedMultiTexImageEXT>(loader.Invoke("glGetCompressedMultiTexImageEXT"));
            glMatrixLoadTransposefEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixLoadTransposefEXT>(loader.Invoke("glMatrixLoadTransposefEXT"));
            glMatrixLoadTransposedEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixLoadTransposedEXT>(loader.Invoke("glMatrixLoadTransposedEXT"));
            glMatrixMultTransposefEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixMultTransposefEXT>(loader.Invoke("glMatrixMultTransposefEXT"));
            glMatrixMultTransposedEXT = Marshal.GetDelegateForFunctionPointer<GLMatrixMultTransposedEXT>(loader.Invoke("glMatrixMultTransposedEXT"));
            glNamedBufferDataEXT = Marshal.GetDelegateForFunctionPointer<GLNamedBufferDataEXT>(loader.Invoke("glNamedBufferDataEXT"));
            glNamedBufferSubDataEXT = Marshal.GetDelegateForFunctionPointer<GLNamedBufferSubDataEXT>(loader.Invoke("glNamedBufferSubDataEXT"));
            glMapNamedBufferEXT = Marshal.GetDelegateForFunctionPointer<GLMapNamedBufferEXT>(loader.Invoke("glMapNamedBufferEXT"));
            glUnmapNamedBufferEXT = Marshal.GetDelegateForFunctionPointer<GLUnmapNamedBufferEXT>(loader.Invoke("glUnmapNamedBufferEXT"));
            glGetNamedBufferParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferParameterivEXT>(loader.Invoke("glGetNamedBufferParameterivEXT"));
            glGetNamedBufferPointervEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferPointervEXT>(loader.Invoke("glGetNamedBufferPointervEXT"));
            glGetNamedBufferSubDataEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferSubDataEXT>(loader.Invoke("glGetNamedBufferSubDataEXT"));
            glProgramUniform1fEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1fEXT>(loader.Invoke("glProgramUniform1fEXT"));
            glProgramUniform2fEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2fEXT>(loader.Invoke("glProgramUniform2fEXT"));
            glProgramUniform3fEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3fEXT>(loader.Invoke("glProgramUniform3fEXT"));
            glProgramUniform4fEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4fEXT>(loader.Invoke("glProgramUniform4fEXT"));
            glProgramUniform1iEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1iEXT>(loader.Invoke("glProgramUniform1iEXT"));
            glProgramUniform2iEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2iEXT>(loader.Invoke("glProgramUniform2iEXT"));
            glProgramUniform3iEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3iEXT>(loader.Invoke("glProgramUniform3iEXT"));
            glProgramUniform4iEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4iEXT>(loader.Invoke("glProgramUniform4iEXT"));
            glProgramUniform1fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1fvEXT>(loader.Invoke("glProgramUniform1fvEXT"));
            glProgramUniform2fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2fvEXT>(loader.Invoke("glProgramUniform2fvEXT"));
            glProgramUniform3fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3fvEXT>(loader.Invoke("glProgramUniform3fvEXT"));
            glProgramUniform4fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4fvEXT>(loader.Invoke("glProgramUniform4fvEXT"));
            glProgramUniform1ivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1ivEXT>(loader.Invoke("glProgramUniform1ivEXT"));
            glProgramUniform2ivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2ivEXT>(loader.Invoke("glProgramUniform2ivEXT"));
            glProgramUniform3ivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3ivEXT>(loader.Invoke("glProgramUniform3ivEXT"));
            glProgramUniform4ivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4ivEXT>(loader.Invoke("glProgramUniform4ivEXT"));
            glProgramUniformMatrix2fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2fvEXT>(loader.Invoke("glProgramUniformMatrix2fvEXT"));
            glProgramUniformMatrix3fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3fvEXT>(loader.Invoke("glProgramUniformMatrix3fvEXT"));
            glProgramUniformMatrix4fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4fvEXT>(loader.Invoke("glProgramUniformMatrix4fvEXT"));
            glProgramUniformMatrix2x3fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x3fvEXT>(loader.Invoke("glProgramUniformMatrix2x3fvEXT"));
            glProgramUniformMatrix3x2fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x2fvEXT>(loader.Invoke("glProgramUniformMatrix3x2fvEXT"));
            glProgramUniformMatrix2x4fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x4fvEXT>(loader.Invoke("glProgramUniformMatrix2x4fvEXT"));
            glProgramUniformMatrix4x2fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x2fvEXT>(loader.Invoke("glProgramUniformMatrix4x2fvEXT"));
            glProgramUniformMatrix3x4fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x4fvEXT>(loader.Invoke("glProgramUniformMatrix3x4fvEXT"));
            glProgramUniformMatrix4x3fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x3fvEXT>(loader.Invoke("glProgramUniformMatrix4x3fvEXT"));
            glTextureBufferEXT = Marshal.GetDelegateForFunctionPointer<GLTextureBufferEXT>(loader.Invoke("glTextureBufferEXT"));
            glMultiTexBufferEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexBufferEXT>(loader.Invoke("glMultiTexBufferEXT"));
            glTextureParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLTextureParameterIivEXT>(loader.Invoke("glTextureParameterIivEXT"));
            glTextureParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLTextureParameterIuivEXT>(loader.Invoke("glTextureParameterIuivEXT"));
            glGetTextureParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameterIivEXT>(loader.Invoke("glGetTextureParameterIivEXT"));
            glGetTextureParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetTextureParameterIuivEXT>(loader.Invoke("glGetTextureParameterIuivEXT"));
            glMultiTexParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexParameterIivEXT>(loader.Invoke("glMultiTexParameterIivEXT"));
            glMultiTexParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexParameterIuivEXT>(loader.Invoke("glMultiTexParameterIuivEXT"));
            glGetMultiTexParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexParameterIivEXT>(loader.Invoke("glGetMultiTexParameterIivEXT"));
            glGetMultiTexParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMultiTexParameterIuivEXT>(loader.Invoke("glGetMultiTexParameterIuivEXT"));
            glProgramUniform1uiEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1uiEXT>(loader.Invoke("glProgramUniform1uiEXT"));
            glProgramUniform2uiEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2uiEXT>(loader.Invoke("glProgramUniform2uiEXT"));
            glProgramUniform3uiEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3uiEXT>(loader.Invoke("glProgramUniform3uiEXT"));
            glProgramUniform4uiEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4uiEXT>(loader.Invoke("glProgramUniform4uiEXT"));
            glProgramUniform1uivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1uivEXT>(loader.Invoke("glProgramUniform1uivEXT"));
            glProgramUniform2uivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2uivEXT>(loader.Invoke("glProgramUniform2uivEXT"));
            glProgramUniform3uivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3uivEXT>(loader.Invoke("glProgramUniform3uivEXT"));
            glProgramUniform4uivEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4uivEXT>(loader.Invoke("glProgramUniform4uivEXT"));
            glNamedProgramLocalParameters4fvEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameters4fvEXT>(loader.Invoke("glNamedProgramLocalParameters4fvEXT"));
            glNamedProgramLocalParameterI4iEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameterI4iEXT>(loader.Invoke("glNamedProgramLocalParameterI4iEXT"));
            glNamedProgramLocalParameterI4ivEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameterI4ivEXT>(loader.Invoke("glNamedProgramLocalParameterI4ivEXT"));
            glNamedProgramLocalParametersI4ivEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParametersI4ivEXT>(loader.Invoke("glNamedProgramLocalParametersI4ivEXT"));
            glNamedProgramLocalParameterI4uiEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameterI4uiEXT>(loader.Invoke("glNamedProgramLocalParameterI4uiEXT"));
            glNamedProgramLocalParameterI4uivEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameterI4uivEXT>(loader.Invoke("glNamedProgramLocalParameterI4uivEXT"));
            glNamedProgramLocalParametersI4uivEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParametersI4uivEXT>(loader.Invoke("glNamedProgramLocalParametersI4uivEXT"));
            glGetNamedProgramLocalParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedProgramLocalParameterIivEXT>(loader.Invoke("glGetNamedProgramLocalParameterIivEXT"));
            glGetNamedProgramLocalParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedProgramLocalParameterIuivEXT>(loader.Invoke("glGetNamedProgramLocalParameterIuivEXT"));
            glEnableClientStateiEXT = Marshal.GetDelegateForFunctionPointer<GLEnableClientStateiEXT>(loader.Invoke("glEnableClientStateiEXT"));
            glDisableClientStateiEXT = Marshal.GetDelegateForFunctionPointer<GLDisableClientStateiEXT>(loader.Invoke("glDisableClientStateiEXT"));
            glGetFloati_vEXT = Marshal.GetDelegateForFunctionPointer<GLGetFloati_vEXT>(loader.Invoke("glGetFloati_vEXT"));
            glGetDoublei_vEXT = Marshal.GetDelegateForFunctionPointer<GLGetDoublei_vEXT>(loader.Invoke("glGetDoublei_vEXT"));
            glGetPointeri_vEXT = Marshal.GetDelegateForFunctionPointer<GLGetPointeri_vEXT>(loader.Invoke("glGetPointeri_vEXT"));
            glNamedProgramStringEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramStringEXT>(loader.Invoke("glNamedProgramStringEXT"));
            glNamedProgramLocalParameter4dEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameter4dEXT>(loader.Invoke("glNamedProgramLocalParameter4dEXT"));
            glNamedProgramLocalParameter4dvEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameter4dvEXT>(loader.Invoke("glNamedProgramLocalParameter4dvEXT"));
            glNamedProgramLocalParameter4fEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameter4fEXT>(loader.Invoke("glNamedProgramLocalParameter4fEXT"));
            glNamedProgramLocalParameter4fvEXT = Marshal.GetDelegateForFunctionPointer<GLNamedProgramLocalParameter4fvEXT>(loader.Invoke("glNamedProgramLocalParameter4fvEXT"));
            glGetNamedProgramLocalParameterdvEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedProgramLocalParameterdvEXT>(loader.Invoke("glGetNamedProgramLocalParameterdvEXT"));
            glGetNamedProgramLocalParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedProgramLocalParameterfvEXT>(loader.Invoke("glGetNamedProgramLocalParameterfvEXT"));
            glGetNamedProgramivEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedProgramivEXT>(loader.Invoke("glGetNamedProgramivEXT"));
            glGetNamedProgramStringEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedProgramStringEXT>(loader.Invoke("glGetNamedProgramStringEXT"));
            glNamedRenderbufferStorageEXT = Marshal.GetDelegateForFunctionPointer<GLNamedRenderbufferStorageEXT>(loader.Invoke("glNamedRenderbufferStorageEXT"));
            glGetNamedRenderbufferParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedRenderbufferParameterivEXT>(loader.Invoke("glGetNamedRenderbufferParameterivEXT"));
            glNamedRenderbufferStorageMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLNamedRenderbufferStorageMultisampleEXT>(loader.Invoke("glNamedRenderbufferStorageMultisampleEXT"));
            glNamedRenderbufferStorageMultisampleCoverageEXT = Marshal.GetDelegateForFunctionPointer<GLNamedRenderbufferStorageMultisampleCoverageEXT>(loader.Invoke("glNamedRenderbufferStorageMultisampleCoverageEXT"));
            glCheckNamedFramebufferStatusEXT = Marshal.GetDelegateForFunctionPointer<GLCheckNamedFramebufferStatusEXT>(loader.Invoke("glCheckNamedFramebufferStatusEXT"));
            glNamedFramebufferTexture1DEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTexture1DEXT>(loader.Invoke("glNamedFramebufferTexture1DEXT"));
            glNamedFramebufferTexture2DEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTexture2DEXT>(loader.Invoke("glNamedFramebufferTexture2DEXT"));
            glNamedFramebufferTexture3DEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTexture3DEXT>(loader.Invoke("glNamedFramebufferTexture3DEXT"));
            glNamedFramebufferRenderbufferEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferRenderbufferEXT>(loader.Invoke("glNamedFramebufferRenderbufferEXT"));
            glGetNamedFramebufferAttachmentParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedFramebufferAttachmentParameterivEXT>(loader.Invoke("glGetNamedFramebufferAttachmentParameterivEXT"));
            glGenerateTextureMipmapEXT = Marshal.GetDelegateForFunctionPointer<GLGenerateTextureMipmapEXT>(loader.Invoke("glGenerateTextureMipmapEXT"));
            glGenerateMultiTexMipmapEXT = Marshal.GetDelegateForFunctionPointer<GLGenerateMultiTexMipmapEXT>(loader.Invoke("glGenerateMultiTexMipmapEXT"));
            glFramebufferDrawBufferEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferDrawBufferEXT>(loader.Invoke("glFramebufferDrawBufferEXT"));
            glFramebufferDrawBuffersEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferDrawBuffersEXT>(loader.Invoke("glFramebufferDrawBuffersEXT"));
            glFramebufferReadBufferEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferReadBufferEXT>(loader.Invoke("glFramebufferReadBufferEXT"));
            glGetFramebufferParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferParameterivEXT>(loader.Invoke("glGetFramebufferParameterivEXT"));
            glNamedCopyBufferSubDataEXT = Marshal.GetDelegateForFunctionPointer<GLNamedCopyBufferSubDataEXT>(loader.Invoke("glNamedCopyBufferSubDataEXT"));
            glNamedFramebufferTextureEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTextureEXT>(loader.Invoke("glNamedFramebufferTextureEXT"));
            glNamedFramebufferTextureLayerEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTextureLayerEXT>(loader.Invoke("glNamedFramebufferTextureLayerEXT"));
            glNamedFramebufferTextureFaceEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferTextureFaceEXT>(loader.Invoke("glNamedFramebufferTextureFaceEXT"));
            glTextureRenderbufferEXT = Marshal.GetDelegateForFunctionPointer<GLTextureRenderbufferEXT>(loader.Invoke("glTextureRenderbufferEXT"));
            glMultiTexRenderbufferEXT = Marshal.GetDelegateForFunctionPointer<GLMultiTexRenderbufferEXT>(loader.Invoke("glMultiTexRenderbufferEXT"));
            glVertexArrayVertexOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexOffsetEXT>(loader.Invoke("glVertexArrayVertexOffsetEXT"));
            glVertexArrayColorOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayColorOffsetEXT>(loader.Invoke("glVertexArrayColorOffsetEXT"));
            glVertexArrayEdgeFlagOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayEdgeFlagOffsetEXT>(loader.Invoke("glVertexArrayEdgeFlagOffsetEXT"));
            glVertexArrayIndexOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayIndexOffsetEXT>(loader.Invoke("glVertexArrayIndexOffsetEXT"));
            glVertexArrayNormalOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayNormalOffsetEXT>(loader.Invoke("glVertexArrayNormalOffsetEXT"));
            glVertexArrayTexCoordOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayTexCoordOffsetEXT>(loader.Invoke("glVertexArrayTexCoordOffsetEXT"));
            glVertexArrayMultiTexCoordOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayMultiTexCoordOffsetEXT>(loader.Invoke("glVertexArrayMultiTexCoordOffsetEXT"));
            glVertexArrayFogCoordOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayFogCoordOffsetEXT>(loader.Invoke("glVertexArrayFogCoordOffsetEXT"));
            glVertexArraySecondaryColorOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArraySecondaryColorOffsetEXT>(loader.Invoke("glVertexArraySecondaryColorOffsetEXT"));
            glVertexArrayVertexAttribOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribOffsetEXT>(loader.Invoke("glVertexArrayVertexAttribOffsetEXT"));
            glVertexArrayVertexAttribIOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribIOffsetEXT>(loader.Invoke("glVertexArrayVertexAttribIOffsetEXT"));
            glEnableVertexArrayEXT = Marshal.GetDelegateForFunctionPointer<GLEnableVertexArrayEXT>(loader.Invoke("glEnableVertexArrayEXT"));
            glDisableVertexArrayEXT = Marshal.GetDelegateForFunctionPointer<GLDisableVertexArrayEXT>(loader.Invoke("glDisableVertexArrayEXT"));
            glEnableVertexArrayAttribEXT = Marshal.GetDelegateForFunctionPointer<GLEnableVertexArrayAttribEXT>(loader.Invoke("glEnableVertexArrayAttribEXT"));
            glDisableVertexArrayAttribEXT = Marshal.GetDelegateForFunctionPointer<GLDisableVertexArrayAttribEXT>(loader.Invoke("glDisableVertexArrayAttribEXT"));
            glGetVertexArrayIntegervEXT = Marshal.GetDelegateForFunctionPointer<GLGetVertexArrayIntegervEXT>(loader.Invoke("glGetVertexArrayIntegervEXT"));
            glGetVertexArrayPointervEXT = Marshal.GetDelegateForFunctionPointer<GLGetVertexArrayPointervEXT>(loader.Invoke("glGetVertexArrayPointervEXT"));
            glGetVertexArrayIntegeri_vEXT = Marshal.GetDelegateForFunctionPointer<GLGetVertexArrayIntegeri_vEXT>(loader.Invoke("glGetVertexArrayIntegeri_vEXT"));
            glGetVertexArrayPointeri_vEXT = Marshal.GetDelegateForFunctionPointer<GLGetVertexArrayPointeri_vEXT>(loader.Invoke("glGetVertexArrayPointeri_vEXT"));
            glMapNamedBufferRangeEXT = Marshal.GetDelegateForFunctionPointer<GLMapNamedBufferRangeEXT>(loader.Invoke("glMapNamedBufferRangeEXT"));
            glFlushMappedNamedBufferRangeEXT = Marshal.GetDelegateForFunctionPointer<GLFlushMappedNamedBufferRangeEXT>(loader.Invoke("glFlushMappedNamedBufferRangeEXT"));
            glNamedBufferStorageEXT = Marshal.GetDelegateForFunctionPointer<GLNamedBufferStorageEXT>(loader.Invoke("glNamedBufferStorageEXT"));
            glClearNamedBufferDataEXT = Marshal.GetDelegateForFunctionPointer<GLClearNamedBufferDataEXT>(loader.Invoke("glClearNamedBufferDataEXT"));
            glClearNamedBufferSubDataEXT = Marshal.GetDelegateForFunctionPointer<GLClearNamedBufferSubDataEXT>(loader.Invoke("glClearNamedBufferSubDataEXT"));
            glNamedFramebufferParameteriEXT = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferParameteriEXT>(loader.Invoke("glNamedFramebufferParameteriEXT"));
            glGetNamedFramebufferParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetNamedFramebufferParameterivEXT>(loader.Invoke("glGetNamedFramebufferParameterivEXT"));
            glProgramUniform1dEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1dEXT>(loader.Invoke("glProgramUniform1dEXT"));
            glProgramUniform2dEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2dEXT>(loader.Invoke("glProgramUniform2dEXT"));
            glProgramUniform3dEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3dEXT>(loader.Invoke("glProgramUniform3dEXT"));
            glProgramUniform4dEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4dEXT>(loader.Invoke("glProgramUniform4dEXT"));
            glProgramUniform1dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform1dvEXT>(loader.Invoke("glProgramUniform1dvEXT"));
            glProgramUniform2dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform2dvEXT>(loader.Invoke("glProgramUniform2dvEXT"));
            glProgramUniform3dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform3dvEXT>(loader.Invoke("glProgramUniform3dvEXT"));
            glProgramUniform4dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniform4dvEXT>(loader.Invoke("glProgramUniform4dvEXT"));
            glProgramUniformMatrix2dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2dvEXT>(loader.Invoke("glProgramUniformMatrix2dvEXT"));
            glProgramUniformMatrix3dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3dvEXT>(loader.Invoke("glProgramUniformMatrix3dvEXT"));
            glProgramUniformMatrix4dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4dvEXT>(loader.Invoke("glProgramUniformMatrix4dvEXT"));
            glProgramUniformMatrix2x3dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x3dvEXT>(loader.Invoke("glProgramUniformMatrix2x3dvEXT"));
            glProgramUniformMatrix2x4dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix2x4dvEXT>(loader.Invoke("glProgramUniformMatrix2x4dvEXT"));
            glProgramUniformMatrix3x2dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x2dvEXT>(loader.Invoke("glProgramUniformMatrix3x2dvEXT"));
            glProgramUniformMatrix3x4dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix3x4dvEXT>(loader.Invoke("glProgramUniformMatrix3x4dvEXT"));
            glProgramUniformMatrix4x2dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x2dvEXT>(loader.Invoke("glProgramUniformMatrix4x2dvEXT"));
            glProgramUniformMatrix4x3dvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramUniformMatrix4x3dvEXT>(loader.Invoke("glProgramUniformMatrix4x3dvEXT"));
            glTextureBufferRangeEXT = Marshal.GetDelegateForFunctionPointer<GLTextureBufferRangeEXT>(loader.Invoke("glTextureBufferRangeEXT"));
            glTextureStorage1DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorage1DEXT>(loader.Invoke("glTextureStorage1DEXT"));
            glTextureStorage2DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorage2DEXT>(loader.Invoke("glTextureStorage2DEXT"));
            glTextureStorage3DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorage3DEXT>(loader.Invoke("glTextureStorage3DEXT"));
            glTextureStorage2DMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorage2DMultisampleEXT>(loader.Invoke("glTextureStorage2DMultisampleEXT"));
            glTextureStorage3DMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorage3DMultisampleEXT>(loader.Invoke("glTextureStorage3DMultisampleEXT"));
            glVertexArrayBindVertexBufferEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayBindVertexBufferEXT>(loader.Invoke("glVertexArrayBindVertexBufferEXT"));
            glVertexArrayVertexAttribFormatEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribFormatEXT>(loader.Invoke("glVertexArrayVertexAttribFormatEXT"));
            glVertexArrayVertexAttribIFormatEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribIFormatEXT>(loader.Invoke("glVertexArrayVertexAttribIFormatEXT"));
            glVertexArrayVertexAttribLFormatEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribLFormatEXT>(loader.Invoke("glVertexArrayVertexAttribLFormatEXT"));
            glVertexArrayVertexAttribBindingEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribBindingEXT>(loader.Invoke("glVertexArrayVertexAttribBindingEXT"));
            glVertexArrayVertexBindingDivisorEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexBindingDivisorEXT>(loader.Invoke("glVertexArrayVertexBindingDivisorEXT"));
            glVertexArrayVertexAttribLOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribLOffsetEXT>(loader.Invoke("glVertexArrayVertexAttribLOffsetEXT"));
            glTexturePageCommitmentEXT = Marshal.GetDelegateForFunctionPointer<GLTexturePageCommitmentEXT>(loader.Invoke("glTexturePageCommitmentEXT"));
            glVertexArrayVertexAttribDivisorEXT = Marshal.GetDelegateForFunctionPointer<GLVertexArrayVertexAttribDivisorEXT>(loader.Invoke("glVertexArrayVertexAttribDivisorEXT"));
            glDiscardFramebufferEXT = Marshal.GetDelegateForFunctionPointer<GLDiscardFramebufferEXT>(loader.Invoke("glDiscardFramebufferEXT"));
            glGenQueriesEXT = Marshal.GetDelegateForFunctionPointer<GLGenQueriesEXT>(loader.Invoke("glGenQueriesEXT"));
            glDeleteQueriesEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteQueriesEXT>(loader.Invoke("glDeleteQueriesEXT"));
            glIsQueryEXT = Marshal.GetDelegateForFunctionPointer<GLIsQueryEXT>(loader.Invoke("glIsQueryEXT"));
            glBeginQueryEXT = Marshal.GetDelegateForFunctionPointer<GLBeginQueryEXT>(loader.Invoke("glBeginQueryEXT"));
            glEndQueryEXT = Marshal.GetDelegateForFunctionPointer<GLEndQueryEXT>(loader.Invoke("glEndQueryEXT"));
            glQueryCounterEXT = Marshal.GetDelegateForFunctionPointer<GLQueryCounterEXT>(loader.Invoke("glQueryCounterEXT"));
            glGetQueryivEXT = Marshal.GetDelegateForFunctionPointer<GLGetQueryivEXT>(loader.Invoke("glGetQueryivEXT"));
            glGetQueryObjectivEXT = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectivEXT>(loader.Invoke("glGetQueryObjectivEXT"));
            glGetQueryObjectuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectuivEXT>(loader.Invoke("glGetQueryObjectuivEXT"));
            glGetQueryObjecti64vEXT = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjecti64vEXT>(loader.Invoke("glGetQueryObjecti64vEXT"));
            glGetQueryObjectui64vEXT = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectui64vEXT>(loader.Invoke("glGetQueryObjectui64vEXT"));
            glGetInteger64vEXT = Marshal.GetDelegateForFunctionPointer<GLGetInteger64vEXT>(loader.Invoke("glGetInteger64vEXT"));
            glDrawBuffersEXT = Marshal.GetDelegateForFunctionPointer<GLDrawBuffersEXT>(loader.Invoke("glDrawBuffersEXT"));
            glColorMaskIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLColorMaskIndexedEXT>(loader.Invoke("glColorMaskIndexedEXT"));
            glEnableiEXT = Marshal.GetDelegateForFunctionPointer<GLEnableiEXT>(loader.Invoke("glEnableiEXT"));
            glDisableiEXT = Marshal.GetDelegateForFunctionPointer<GLDisableiEXT>(loader.Invoke("glDisableiEXT"));
            glBlendEquationiEXT = Marshal.GetDelegateForFunctionPointer<GLBlendEquationiEXT>(loader.Invoke("glBlendEquationiEXT"));
            glBlendEquationSeparateiEXT = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparateiEXT>(loader.Invoke("glBlendEquationSeparateiEXT"));
            glBlendFunciEXT = Marshal.GetDelegateForFunctionPointer<GLBlendFunciEXT>(loader.Invoke("glBlendFunciEXT"));
            glBlendFuncSeparateiEXT = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparateiEXT>(loader.Invoke("glBlendFuncSeparateiEXT"));
            glColorMaskiEXT = Marshal.GetDelegateForFunctionPointer<GLColorMaskiEXT>(loader.Invoke("glColorMaskiEXT"));
            glIsEnablediEXT = Marshal.GetDelegateForFunctionPointer<GLIsEnablediEXT>(loader.Invoke("glIsEnablediEXT"));
            glDrawElementsBaseVertexEXT = Marshal.GetDelegateForFunctionPointer<GLDrawElementsBaseVertexEXT>(loader.Invoke("glDrawElementsBaseVertexEXT"));
            glDrawRangeElementsBaseVertexEXT = Marshal.GetDelegateForFunctionPointer<GLDrawRangeElementsBaseVertexEXT>(loader.Invoke("glDrawRangeElementsBaseVertexEXT"));
            glDrawElementsInstancedBaseVertexEXT = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedBaseVertexEXT>(loader.Invoke("glDrawElementsInstancedBaseVertexEXT"));
            glMultiDrawElementsBaseVertexEXT = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsBaseVertexEXT>(loader.Invoke("glMultiDrawElementsBaseVertexEXT"));
            glDrawArraysInstancedEXT = Marshal.GetDelegateForFunctionPointer<GLDrawArraysInstancedEXT>(loader.Invoke("glDrawArraysInstancedEXT"));
            glDrawElementsInstancedEXT = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedEXT>(loader.Invoke("glDrawElementsInstancedEXT"));
            glDrawRangeElementsEXT = Marshal.GetDelegateForFunctionPointer<GLDrawRangeElementsEXT>(loader.Invoke("glDrawRangeElementsEXT"));
            glDrawTransformFeedbackEXT = Marshal.GetDelegateForFunctionPointer<GLDrawTransformFeedbackEXT>(loader.Invoke("glDrawTransformFeedbackEXT"));
            glDrawTransformFeedbackInstancedEXT = Marshal.GetDelegateForFunctionPointer<GLDrawTransformFeedbackInstancedEXT>(loader.Invoke("glDrawTransformFeedbackInstancedEXT"));
            glBufferStorageExternalEXT = Marshal.GetDelegateForFunctionPointer<GLBufferStorageExternalEXT>(loader.Invoke("glBufferStorageExternalEXT"));
            glNamedBufferStorageExternalEXT = Marshal.GetDelegateForFunctionPointer<GLNamedBufferStorageExternalEXT>(loader.Invoke("glNamedBufferStorageExternalEXT"));
            glFogCoordfEXT = Marshal.GetDelegateForFunctionPointer<GLFogCoordfEXT>(loader.Invoke("glFogCoordfEXT"));
            glFogCoordfvEXT = Marshal.GetDelegateForFunctionPointer<GLFogCoordfvEXT>(loader.Invoke("glFogCoordfvEXT"));
            glFogCoorddEXT = Marshal.GetDelegateForFunctionPointer<GLFogCoorddEXT>(loader.Invoke("glFogCoorddEXT"));
            glFogCoorddvEXT = Marshal.GetDelegateForFunctionPointer<GLFogCoorddvEXT>(loader.Invoke("glFogCoorddvEXT"));
            glFogCoordPointerEXT = Marshal.GetDelegateForFunctionPointer<GLFogCoordPointerEXT>(loader.Invoke("glFogCoordPointerEXT"));
            glGetFragmentShadingRatesEXT = Marshal.GetDelegateForFunctionPointer<GLGetFragmentShadingRatesEXT>(loader.Invoke("glGetFragmentShadingRatesEXT"));
            glShadingRateEXT = Marshal.GetDelegateForFunctionPointer<GLShadingRateEXT>(loader.Invoke("glShadingRateEXT"));
            glShadingRateCombinerOpsEXT = Marshal.GetDelegateForFunctionPointer<GLShadingRateCombinerOpsEXT>(loader.Invoke("glShadingRateCombinerOpsEXT"));
            glFramebufferShadingRateEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferShadingRateEXT>(loader.Invoke("glFramebufferShadingRateEXT"));
            glBlitFramebufferEXT = Marshal.GetDelegateForFunctionPointer<GLBlitFramebufferEXT>(loader.Invoke("glBlitFramebufferEXT"));
            glRenderbufferStorageMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisampleEXT>(loader.Invoke("glRenderbufferStorageMultisampleEXT"));
            glIsRenderbufferEXT = Marshal.GetDelegateForFunctionPointer<GLIsRenderbufferEXT>(loader.Invoke("glIsRenderbufferEXT"));
            glBindRenderbufferEXT = Marshal.GetDelegateForFunctionPointer<GLBindRenderbufferEXT>(loader.Invoke("glBindRenderbufferEXT"));
            glDeleteRenderbuffersEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteRenderbuffersEXT>(loader.Invoke("glDeleteRenderbuffersEXT"));
            glGenRenderbuffersEXT = Marshal.GetDelegateForFunctionPointer<GLGenRenderbuffersEXT>(loader.Invoke("glGenRenderbuffersEXT"));
            glRenderbufferStorageEXT = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageEXT>(loader.Invoke("glRenderbufferStorageEXT"));
            glGetRenderbufferParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetRenderbufferParameterivEXT>(loader.Invoke("glGetRenderbufferParameterivEXT"));
            glIsFramebufferEXT = Marshal.GetDelegateForFunctionPointer<GLIsFramebufferEXT>(loader.Invoke("glIsFramebufferEXT"));
            glBindFramebufferEXT = Marshal.GetDelegateForFunctionPointer<GLBindFramebufferEXT>(loader.Invoke("glBindFramebufferEXT"));
            glDeleteFramebuffersEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteFramebuffersEXT>(loader.Invoke("glDeleteFramebuffersEXT"));
            glGenFramebuffersEXT = Marshal.GetDelegateForFunctionPointer<GLGenFramebuffersEXT>(loader.Invoke("glGenFramebuffersEXT"));
            glCheckFramebufferStatusEXT = Marshal.GetDelegateForFunctionPointer<GLCheckFramebufferStatusEXT>(loader.Invoke("glCheckFramebufferStatusEXT"));
            glFramebufferTexture1DEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture1DEXT>(loader.Invoke("glFramebufferTexture1DEXT"));
            glFramebufferTexture2DEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture2DEXT>(loader.Invoke("glFramebufferTexture2DEXT"));
            glFramebufferTexture3DEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture3DEXT>(loader.Invoke("glFramebufferTexture3DEXT"));
            glFramebufferRenderbufferEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferRenderbufferEXT>(loader.Invoke("glFramebufferRenderbufferEXT"));
            glGetFramebufferAttachmentParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferAttachmentParameterivEXT>(loader.Invoke("glGetFramebufferAttachmentParameterivEXT"));
            glGenerateMipmapEXT = Marshal.GetDelegateForFunctionPointer<GLGenerateMipmapEXT>(loader.Invoke("glGenerateMipmapEXT"));
            glFramebufferTextureEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureEXT>(loader.Invoke("glFramebufferTextureEXT"));
            glProgramParameteriEXT = Marshal.GetDelegateForFunctionPointer<GLProgramParameteriEXT>(loader.Invoke("glProgramParameteriEXT"));
            glProgramEnvParameters4fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameters4fvEXT>(loader.Invoke("glProgramEnvParameters4fvEXT"));
            glProgramLocalParameters4fvEXT = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameters4fvEXT>(loader.Invoke("glProgramLocalParameters4fvEXT"));
            glGetUniformuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetUniformuivEXT>(loader.Invoke("glGetUniformuivEXT"));
            glGetFragDataLocationEXT = Marshal.GetDelegateForFunctionPointer<GLGetFragDataLocationEXT>(loader.Invoke("glGetFragDataLocationEXT"));
            glUniform1uiEXT = Marshal.GetDelegateForFunctionPointer<GLUniform1uiEXT>(loader.Invoke("glUniform1uiEXT"));
            glUniform2uiEXT = Marshal.GetDelegateForFunctionPointer<GLUniform2uiEXT>(loader.Invoke("glUniform2uiEXT"));
            glUniform3uiEXT = Marshal.GetDelegateForFunctionPointer<GLUniform3uiEXT>(loader.Invoke("glUniform3uiEXT"));
            glUniform4uiEXT = Marshal.GetDelegateForFunctionPointer<GLUniform4uiEXT>(loader.Invoke("glUniform4uiEXT"));
            glUniform1uivEXT = Marshal.GetDelegateForFunctionPointer<GLUniform1uivEXT>(loader.Invoke("glUniform1uivEXT"));
            glUniform2uivEXT = Marshal.GetDelegateForFunctionPointer<GLUniform2uivEXT>(loader.Invoke("glUniform2uivEXT"));
            glUniform3uivEXT = Marshal.GetDelegateForFunctionPointer<GLUniform3uivEXT>(loader.Invoke("glUniform3uivEXT"));
            glUniform4uivEXT = Marshal.GetDelegateForFunctionPointer<GLUniform4uivEXT>(loader.Invoke("glUniform4uivEXT"));
            glVertexAttribI1iEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1iEXT>(loader.Invoke("glVertexAttribI1iEXT"));
            glVertexAttribI2iEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2iEXT>(loader.Invoke("glVertexAttribI2iEXT"));
            glVertexAttribI3iEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3iEXT>(loader.Invoke("glVertexAttribI3iEXT"));
            glVertexAttribI4iEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4iEXT>(loader.Invoke("glVertexAttribI4iEXT"));
            glVertexAttribI1uiEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1uiEXT>(loader.Invoke("glVertexAttribI1uiEXT"));
            glVertexAttribI2uiEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2uiEXT>(loader.Invoke("glVertexAttribI2uiEXT"));
            glVertexAttribI3uiEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3uiEXT>(loader.Invoke("glVertexAttribI3uiEXT"));
            glVertexAttribI4uiEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4uiEXT>(loader.Invoke("glVertexAttribI4uiEXT"));
            glVertexAttribI1ivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1ivEXT>(loader.Invoke("glVertexAttribI1ivEXT"));
            glVertexAttribI2ivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2ivEXT>(loader.Invoke("glVertexAttribI2ivEXT"));
            glVertexAttribI3ivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3ivEXT>(loader.Invoke("glVertexAttribI3ivEXT"));
            glVertexAttribI4ivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4ivEXT>(loader.Invoke("glVertexAttribI4ivEXT"));
            glVertexAttribI1uivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1uivEXT>(loader.Invoke("glVertexAttribI1uivEXT"));
            glVertexAttribI2uivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2uivEXT>(loader.Invoke("glVertexAttribI2uivEXT"));
            glVertexAttribI3uivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3uivEXT>(loader.Invoke("glVertexAttribI3uivEXT"));
            glVertexAttribI4uivEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4uivEXT>(loader.Invoke("glVertexAttribI4uivEXT"));
            glVertexAttribI4bvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4bvEXT>(loader.Invoke("glVertexAttribI4bvEXT"));
            glVertexAttribI4svEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4svEXT>(loader.Invoke("glVertexAttribI4svEXT"));
            glVertexAttribI4ubvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4ubvEXT>(loader.Invoke("glVertexAttribI4ubvEXT"));
            glVertexAttribI4usvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4usvEXT>(loader.Invoke("glVertexAttribI4usvEXT"));
            glVertexAttribIPointerEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribIPointerEXT>(loader.Invoke("glVertexAttribIPointerEXT"));
            glGetVertexAttribIivEXT = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribIivEXT>(loader.Invoke("glGetVertexAttribIivEXT"));
            glGetVertexAttribIuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribIuivEXT>(loader.Invoke("glGetVertexAttribIuivEXT"));
            glGetHistogramEXT = Marshal.GetDelegateForFunctionPointer<GLGetHistogramEXT>(loader.Invoke("glGetHistogramEXT"));
            glGetHistogramParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetHistogramParameterfvEXT>(loader.Invoke("glGetHistogramParameterfvEXT"));
            glGetHistogramParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetHistogramParameterivEXT>(loader.Invoke("glGetHistogramParameterivEXT"));
            glGetMinmaxEXT = Marshal.GetDelegateForFunctionPointer<GLGetMinmaxEXT>(loader.Invoke("glGetMinmaxEXT"));
            glGetMinmaxParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetMinmaxParameterfvEXT>(loader.Invoke("glGetMinmaxParameterfvEXT"));
            glGetMinmaxParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMinmaxParameterivEXT>(loader.Invoke("glGetMinmaxParameterivEXT"));
            glHistogramEXT = Marshal.GetDelegateForFunctionPointer<GLHistogramEXT>(loader.Invoke("glHistogramEXT"));
            glMinmaxEXT = Marshal.GetDelegateForFunctionPointer<GLMinmaxEXT>(loader.Invoke("glMinmaxEXT"));
            glResetHistogramEXT = Marshal.GetDelegateForFunctionPointer<GLResetHistogramEXT>(loader.Invoke("glResetHistogramEXT"));
            glResetMinmaxEXT = Marshal.GetDelegateForFunctionPointer<GLResetMinmaxEXT>(loader.Invoke("glResetMinmaxEXT"));
            glIndexFuncEXT = Marshal.GetDelegateForFunctionPointer<GLIndexFuncEXT>(loader.Invoke("glIndexFuncEXT"));
            glIndexMaterialEXT = Marshal.GetDelegateForFunctionPointer<GLIndexMaterialEXT>(loader.Invoke("glIndexMaterialEXT"));
            glVertexAttribDivisorEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribDivisorEXT>(loader.Invoke("glVertexAttribDivisorEXT"));
            glApplyTextureEXT = Marshal.GetDelegateForFunctionPointer<GLApplyTextureEXT>(loader.Invoke("glApplyTextureEXT"));
            glTextureLightEXT = Marshal.GetDelegateForFunctionPointer<GLTextureLightEXT>(loader.Invoke("glTextureLightEXT"));
            glTextureMaterialEXT = Marshal.GetDelegateForFunctionPointer<GLTextureMaterialEXT>(loader.Invoke("glTextureMaterialEXT"));
            glMapBufferRangeEXT = Marshal.GetDelegateForFunctionPointer<GLMapBufferRangeEXT>(loader.Invoke("glMapBufferRangeEXT"));
            glFlushMappedBufferRangeEXT = Marshal.GetDelegateForFunctionPointer<GLFlushMappedBufferRangeEXT>(loader.Invoke("glFlushMappedBufferRangeEXT"));
            glGetUnsignedBytevEXT = Marshal.GetDelegateForFunctionPointer<GLGetUnsignedBytevEXT>(loader.Invoke("glGetUnsignedBytevEXT"));
            glGetUnsignedBytei_vEXT = Marshal.GetDelegateForFunctionPointer<GLGetUnsignedBytei_vEXT>(loader.Invoke("glGetUnsignedBytei_vEXT"));
            glDeleteMemoryObjectsEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteMemoryObjectsEXT>(loader.Invoke("glDeleteMemoryObjectsEXT"));
            glIsMemoryObjectEXT = Marshal.GetDelegateForFunctionPointer<GLIsMemoryObjectEXT>(loader.Invoke("glIsMemoryObjectEXT"));
            glCreateMemoryObjectsEXT = Marshal.GetDelegateForFunctionPointer<GLCreateMemoryObjectsEXT>(loader.Invoke("glCreateMemoryObjectsEXT"));
            glMemoryObjectParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLMemoryObjectParameterivEXT>(loader.Invoke("glMemoryObjectParameterivEXT"));
            glGetMemoryObjectParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetMemoryObjectParameterivEXT>(loader.Invoke("glGetMemoryObjectParameterivEXT"));
            glTexStorageMem2DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorageMem2DEXT>(loader.Invoke("glTexStorageMem2DEXT"));
            glTexStorageMem2DMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorageMem2DMultisampleEXT>(loader.Invoke("glTexStorageMem2DMultisampleEXT"));
            glTexStorageMem3DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorageMem3DEXT>(loader.Invoke("glTexStorageMem3DEXT"));
            glTexStorageMem3DMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorageMem3DMultisampleEXT>(loader.Invoke("glTexStorageMem3DMultisampleEXT"));
            glBufferStorageMemEXT = Marshal.GetDelegateForFunctionPointer<GLBufferStorageMemEXT>(loader.Invoke("glBufferStorageMemEXT"));
            glTextureStorageMem2DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorageMem2DEXT>(loader.Invoke("glTextureStorageMem2DEXT"));
            glTextureStorageMem2DMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorageMem2DMultisampleEXT>(loader.Invoke("glTextureStorageMem2DMultisampleEXT"));
            glTextureStorageMem3DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorageMem3DEXT>(loader.Invoke("glTextureStorageMem3DEXT"));
            glTextureStorageMem3DMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorageMem3DMultisampleEXT>(loader.Invoke("glTextureStorageMem3DMultisampleEXT"));
            glNamedBufferStorageMemEXT = Marshal.GetDelegateForFunctionPointer<GLNamedBufferStorageMemEXT>(loader.Invoke("glNamedBufferStorageMemEXT"));
            glTexStorageMem1DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorageMem1DEXT>(loader.Invoke("glTexStorageMem1DEXT"));
            glTextureStorageMem1DEXT = Marshal.GetDelegateForFunctionPointer<GLTextureStorageMem1DEXT>(loader.Invoke("glTextureStorageMem1DEXT"));
            glImportMemoryFdEXT = Marshal.GetDelegateForFunctionPointer<GLImportMemoryFdEXT>(loader.Invoke("glImportMemoryFdEXT"));
            glImportMemoryWin32HandleEXT = Marshal.GetDelegateForFunctionPointer<GLImportMemoryWin32HandleEXT>(loader.Invoke("glImportMemoryWin32HandleEXT"));
            glImportMemoryWin32NameEXT = Marshal.GetDelegateForFunctionPointer<GLImportMemoryWin32NameEXT>(loader.Invoke("glImportMemoryWin32NameEXT"));
            glMultiDrawArraysEXT = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysEXT>(loader.Invoke("glMultiDrawArraysEXT"));
            glMultiDrawElementsEXT = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsEXT>(loader.Invoke("glMultiDrawElementsEXT"));
            glMultiDrawArraysIndirectEXT = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysIndirectEXT>(loader.Invoke("glMultiDrawArraysIndirectEXT"));
            glMultiDrawElementsIndirectEXT = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsIndirectEXT>(loader.Invoke("glMultiDrawElementsIndirectEXT"));
            glSampleMaskEXT = Marshal.GetDelegateForFunctionPointer<GLSampleMaskEXT>(loader.Invoke("glSampleMaskEXT"));
            glSamplePatternEXT = Marshal.GetDelegateForFunctionPointer<GLSamplePatternEXT>(loader.Invoke("glSamplePatternEXT"));
            glFramebufferTexture2DMultisampleEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture2DMultisampleEXT>(loader.Invoke("glFramebufferTexture2DMultisampleEXT"));
            glReadBufferIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLReadBufferIndexedEXT>(loader.Invoke("glReadBufferIndexedEXT"));
            glDrawBuffersIndexedEXT = Marshal.GetDelegateForFunctionPointer<GLDrawBuffersIndexedEXT>(loader.Invoke("glDrawBuffersIndexedEXT"));
            glGetIntegeri_vEXT = Marshal.GetDelegateForFunctionPointer<GLGetIntegeri_vEXT>(loader.Invoke("glGetIntegeri_vEXT"));
            glColorTableEXT = Marshal.GetDelegateForFunctionPointer<GLColorTableEXT>(loader.Invoke("glColorTableEXT"));
            glGetColorTableEXT = Marshal.GetDelegateForFunctionPointer<GLGetColorTableEXT>(loader.Invoke("glGetColorTableEXT"));
            glGetColorTableParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetColorTableParameterivEXT>(loader.Invoke("glGetColorTableParameterivEXT"));
            glGetColorTableParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetColorTableParameterfvEXT>(loader.Invoke("glGetColorTableParameterfvEXT"));
            glPixelTransformParameteriEXT = Marshal.GetDelegateForFunctionPointer<GLPixelTransformParameteriEXT>(loader.Invoke("glPixelTransformParameteriEXT"));
            glPixelTransformParameterfEXT = Marshal.GetDelegateForFunctionPointer<GLPixelTransformParameterfEXT>(loader.Invoke("glPixelTransformParameterfEXT"));
            glPixelTransformParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLPixelTransformParameterivEXT>(loader.Invoke("glPixelTransformParameterivEXT"));
            glPixelTransformParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLPixelTransformParameterfvEXT>(loader.Invoke("glPixelTransformParameterfvEXT"));
            glGetPixelTransformParameterivEXT = Marshal.GetDelegateForFunctionPointer<GLGetPixelTransformParameterivEXT>(loader.Invoke("glGetPixelTransformParameterivEXT"));
            glGetPixelTransformParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetPixelTransformParameterfvEXT>(loader.Invoke("glGetPixelTransformParameterfvEXT"));
            glPointParameterfEXT = Marshal.GetDelegateForFunctionPointer<GLPointParameterfEXT>(loader.Invoke("glPointParameterfEXT"));
            glPointParameterfvEXT = Marshal.GetDelegateForFunctionPointer<GLPointParameterfvEXT>(loader.Invoke("glPointParameterfvEXT"));
            glPolygonOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLPolygonOffsetEXT>(loader.Invoke("glPolygonOffsetEXT"));
            glPolygonOffsetClampEXT = Marshal.GetDelegateForFunctionPointer<GLPolygonOffsetClampEXT>(loader.Invoke("glPolygonOffsetClampEXT"));
            glPrimitiveBoundingBoxEXT = Marshal.GetDelegateForFunctionPointer<GLPrimitiveBoundingBoxEXT>(loader.Invoke("glPrimitiveBoundingBoxEXT"));
            glProvokingVertexEXT = Marshal.GetDelegateForFunctionPointer<GLProvokingVertexEXT>(loader.Invoke("glProvokingVertexEXT"));
            glRasterSamplesEXT = Marshal.GetDelegateForFunctionPointer<GLRasterSamplesEXT>(loader.Invoke("glRasterSamplesEXT"));
            glGetGraphicsResetStatusEXT = Marshal.GetDelegateForFunctionPointer<GLGetGraphicsResetStatusEXT>(loader.Invoke("glGetGraphicsResetStatusEXT"));
            glReadnPixelsEXT = Marshal.GetDelegateForFunctionPointer<GLReadnPixelsEXT>(loader.Invoke("glReadnPixelsEXT"));
            glGetnUniformfvEXT = Marshal.GetDelegateForFunctionPointer<GLGetnUniformfvEXT>(loader.Invoke("glGetnUniformfvEXT"));
            glGetnUniformivEXT = Marshal.GetDelegateForFunctionPointer<GLGetnUniformivEXT>(loader.Invoke("glGetnUniformivEXT"));
            glGenSemaphoresEXT = Marshal.GetDelegateForFunctionPointer<GLGenSemaphoresEXT>(loader.Invoke("glGenSemaphoresEXT"));
            glDeleteSemaphoresEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteSemaphoresEXT>(loader.Invoke("glDeleteSemaphoresEXT"));
            glIsSemaphoreEXT = Marshal.GetDelegateForFunctionPointer<GLIsSemaphoreEXT>(loader.Invoke("glIsSemaphoreEXT"));
            glSemaphoreParameterui64vEXT = Marshal.GetDelegateForFunctionPointer<GLSemaphoreParameterui64vEXT>(loader.Invoke("glSemaphoreParameterui64vEXT"));
            glGetSemaphoreParameterui64vEXT = Marshal.GetDelegateForFunctionPointer<GLGetSemaphoreParameterui64vEXT>(loader.Invoke("glGetSemaphoreParameterui64vEXT"));
            glWaitSemaphoreEXT = Marshal.GetDelegateForFunctionPointer<GLWaitSemaphoreEXT>(loader.Invoke("glWaitSemaphoreEXT"));
            glSignalSemaphoreEXT = Marshal.GetDelegateForFunctionPointer<GLSignalSemaphoreEXT>(loader.Invoke("glSignalSemaphoreEXT"));
            glImportSemaphoreFdEXT = Marshal.GetDelegateForFunctionPointer<GLImportSemaphoreFdEXT>(loader.Invoke("glImportSemaphoreFdEXT"));
            glImportSemaphoreWin32HandleEXT = Marshal.GetDelegateForFunctionPointer<GLImportSemaphoreWin32HandleEXT>(loader.Invoke("glImportSemaphoreWin32HandleEXT"));
            glImportSemaphoreWin32NameEXT = Marshal.GetDelegateForFunctionPointer<GLImportSemaphoreWin32NameEXT>(loader.Invoke("glImportSemaphoreWin32NameEXT"));
            glSecondaryColor3bEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3bEXT>(loader.Invoke("glSecondaryColor3bEXT"));
            glSecondaryColor3bvEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3bvEXT>(loader.Invoke("glSecondaryColor3bvEXT"));
            glSecondaryColor3dEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3dEXT>(loader.Invoke("glSecondaryColor3dEXT"));
            glSecondaryColor3dvEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3dvEXT>(loader.Invoke("glSecondaryColor3dvEXT"));
            glSecondaryColor3fEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3fEXT>(loader.Invoke("glSecondaryColor3fEXT"));
            glSecondaryColor3fvEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3fvEXT>(loader.Invoke("glSecondaryColor3fvEXT"));
            glSecondaryColor3iEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3iEXT>(loader.Invoke("glSecondaryColor3iEXT"));
            glSecondaryColor3ivEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3ivEXT>(loader.Invoke("glSecondaryColor3ivEXT"));
            glSecondaryColor3sEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3sEXT>(loader.Invoke("glSecondaryColor3sEXT"));
            glSecondaryColor3svEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3svEXT>(loader.Invoke("glSecondaryColor3svEXT"));
            glSecondaryColor3ubEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3ubEXT>(loader.Invoke("glSecondaryColor3ubEXT"));
            glSecondaryColor3ubvEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3ubvEXT>(loader.Invoke("glSecondaryColor3ubvEXT"));
            glSecondaryColor3uiEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3uiEXT>(loader.Invoke("glSecondaryColor3uiEXT"));
            glSecondaryColor3uivEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3uivEXT>(loader.Invoke("glSecondaryColor3uivEXT"));
            glSecondaryColor3usEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3usEXT>(loader.Invoke("glSecondaryColor3usEXT"));
            glSecondaryColor3usvEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3usvEXT>(loader.Invoke("glSecondaryColor3usvEXT"));
            glSecondaryColorPointerEXT = Marshal.GetDelegateForFunctionPointer<GLSecondaryColorPointerEXT>(loader.Invoke("glSecondaryColorPointerEXT"));
            glUseShaderProgramEXT = Marshal.GetDelegateForFunctionPointer<GLUseShaderProgramEXT>(loader.Invoke("glUseShaderProgramEXT"));
            glActiveProgramEXT = Marshal.GetDelegateForFunctionPointer<GLActiveProgramEXT>(loader.Invoke("glActiveProgramEXT"));
            glCreateShaderProgramEXT = Marshal.GetDelegateForFunctionPointer<GLCreateShaderProgramEXT>(loader.Invoke("glCreateShaderProgramEXT"));
            glActiveShaderProgramEXT = Marshal.GetDelegateForFunctionPointer<GLActiveShaderProgramEXT>(loader.Invoke("glActiveShaderProgramEXT"));
            glBindProgramPipelineEXT = Marshal.GetDelegateForFunctionPointer<GLBindProgramPipelineEXT>(loader.Invoke("glBindProgramPipelineEXT"));
            glCreateShaderProgramvEXT = Marshal.GetDelegateForFunctionPointer<GLCreateShaderProgramvEXT>(loader.Invoke("glCreateShaderProgramvEXT"));
            glDeleteProgramPipelinesEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteProgramPipelinesEXT>(loader.Invoke("glDeleteProgramPipelinesEXT"));
            glGenProgramPipelinesEXT = Marshal.GetDelegateForFunctionPointer<GLGenProgramPipelinesEXT>(loader.Invoke("glGenProgramPipelinesEXT"));
            glGetProgramPipelineInfoLogEXT = Marshal.GetDelegateForFunctionPointer<GLGetProgramPipelineInfoLogEXT>(loader.Invoke("glGetProgramPipelineInfoLogEXT"));
            glGetProgramPipelineivEXT = Marshal.GetDelegateForFunctionPointer<GLGetProgramPipelineivEXT>(loader.Invoke("glGetProgramPipelineivEXT"));
            glIsProgramPipelineEXT = Marshal.GetDelegateForFunctionPointer<GLIsProgramPipelineEXT>(loader.Invoke("glIsProgramPipelineEXT"));
            glUseProgramStagesEXT = Marshal.GetDelegateForFunctionPointer<GLUseProgramStagesEXT>(loader.Invoke("glUseProgramStagesEXT"));
            glValidateProgramPipelineEXT = Marshal.GetDelegateForFunctionPointer<GLValidateProgramPipelineEXT>(loader.Invoke("glValidateProgramPipelineEXT"));
            glFramebufferFetchBarrierEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferFetchBarrierEXT>(loader.Invoke("glFramebufferFetchBarrierEXT"));
            glBindImageTextureEXT = Marshal.GetDelegateForFunctionPointer<GLBindImageTextureEXT>(loader.Invoke("glBindImageTextureEXT"));
            glMemoryBarrierEXT = Marshal.GetDelegateForFunctionPointer<GLMemoryBarrierEXT>(loader.Invoke("glMemoryBarrierEXT"));
            glFramebufferPixelLocalStorageSizeEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferPixelLocalStorageSizeEXT>(loader.Invoke("glFramebufferPixelLocalStorageSizeEXT"));
            glGetFramebufferPixelLocalStorageSizeEXT = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferPixelLocalStorageSizeEXT>(loader.Invoke("glGetFramebufferPixelLocalStorageSizeEXT"));
            glClearPixelLocalStorageuiEXT = Marshal.GetDelegateForFunctionPointer<GLClearPixelLocalStorageuiEXT>(loader.Invoke("glClearPixelLocalStorageuiEXT"));
            glTexPageCommitmentEXT = Marshal.GetDelegateForFunctionPointer<GLTexPageCommitmentEXT>(loader.Invoke("glTexPageCommitmentEXT"));
            glStencilClearTagEXT = Marshal.GetDelegateForFunctionPointer<GLStencilClearTagEXT>(loader.Invoke("glStencilClearTagEXT"));
            glActiveStencilFaceEXT = Marshal.GetDelegateForFunctionPointer<GLActiveStencilFaceEXT>(loader.Invoke("glActiveStencilFaceEXT"));
            glTexSubImage1DEXT = Marshal.GetDelegateForFunctionPointer<GLTexSubImage1DEXT>(loader.Invoke("glTexSubImage1DEXT"));
            glTexSubImage2DEXT = Marshal.GetDelegateForFunctionPointer<GLTexSubImage2DEXT>(loader.Invoke("glTexSubImage2DEXT"));
            glPatchParameteriEXT = Marshal.GetDelegateForFunctionPointer<GLPatchParameteriEXT>(loader.Invoke("glPatchParameteriEXT"));
            glTexImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLTexImage3DEXT>(loader.Invoke("glTexImage3DEXT"));
            glTexSubImage3DEXT = Marshal.GetDelegateForFunctionPointer<GLTexSubImage3DEXT>(loader.Invoke("glTexSubImage3DEXT"));
            glFramebufferTextureLayerEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureLayerEXT>(loader.Invoke("glFramebufferTextureLayerEXT"));
            glTexParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLTexParameterIivEXT>(loader.Invoke("glTexParameterIivEXT"));
            glTexParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLTexParameterIuivEXT>(loader.Invoke("glTexParameterIuivEXT"));
            glGetTexParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterIivEXT>(loader.Invoke("glGetTexParameterIivEXT"));
            glGetTexParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterIuivEXT>(loader.Invoke("glGetTexParameterIuivEXT"));
            glSamplerParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterIivEXT>(loader.Invoke("glSamplerParameterIivEXT"));
            glSamplerParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterIuivEXT>(loader.Invoke("glSamplerParameterIuivEXT"));
            glGetSamplerParameterIivEXT = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameterIivEXT>(loader.Invoke("glGetSamplerParameterIivEXT"));
            glGetSamplerParameterIuivEXT = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameterIuivEXT>(loader.Invoke("glGetSamplerParameterIuivEXT"));
            glTexBufferEXT = Marshal.GetDelegateForFunctionPointer<GLTexBufferEXT>(loader.Invoke("glTexBufferEXT"));
            glTexBufferRangeEXT = Marshal.GetDelegateForFunctionPointer<GLTexBufferRangeEXT>(loader.Invoke("glTexBufferRangeEXT"));
            glClearColorIiEXT = Marshal.GetDelegateForFunctionPointer<GLClearColorIiEXT>(loader.Invoke("glClearColorIiEXT"));
            glClearColorIuiEXT = Marshal.GetDelegateForFunctionPointer<GLClearColorIuiEXT>(loader.Invoke("glClearColorIuiEXT"));
            glAreTexturesResidentEXT = Marshal.GetDelegateForFunctionPointer<GLAreTexturesResidentEXT>(loader.Invoke("glAreTexturesResidentEXT"));
            glBindTextureEXT = Marshal.GetDelegateForFunctionPointer<GLBindTextureEXT>(loader.Invoke("glBindTextureEXT"));
            glDeleteTexturesEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteTexturesEXT>(loader.Invoke("glDeleteTexturesEXT"));
            glGenTexturesEXT = Marshal.GetDelegateForFunctionPointer<GLGenTexturesEXT>(loader.Invoke("glGenTexturesEXT"));
            glIsTextureEXT = Marshal.GetDelegateForFunctionPointer<GLIsTextureEXT>(loader.Invoke("glIsTextureEXT"));
            glPrioritizeTexturesEXT = Marshal.GetDelegateForFunctionPointer<GLPrioritizeTexturesEXT>(loader.Invoke("glPrioritizeTexturesEXT"));
            glTextureNormalEXT = Marshal.GetDelegateForFunctionPointer<GLTextureNormalEXT>(loader.Invoke("glTextureNormalEXT"));
            glTexStorage1DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorage1DEXT>(loader.Invoke("glTexStorage1DEXT"));
            glTexStorage2DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorage2DEXT>(loader.Invoke("glTexStorage2DEXT"));
            glTexStorage3DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorage3DEXT>(loader.Invoke("glTexStorage3DEXT"));
            glTexStorageAttribs2DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorageAttribs2DEXT>(loader.Invoke("glTexStorageAttribs2DEXT"));
            glTexStorageAttribs3DEXT = Marshal.GetDelegateForFunctionPointer<GLTexStorageAttribs3DEXT>(loader.Invoke("glTexStorageAttribs3DEXT"));
            glTextureViewEXT = Marshal.GetDelegateForFunctionPointer<GLTextureViewEXT>(loader.Invoke("glTextureViewEXT"));
            glCreateSemaphoresNV = Marshal.GetDelegateForFunctionPointer<GLCreateSemaphoresNV>(loader.Invoke("glCreateSemaphoresNV"));
            glSemaphoreParameterivNV = Marshal.GetDelegateForFunctionPointer<GLSemaphoreParameterivNV>(loader.Invoke("glSemaphoreParameterivNV"));
            glGetSemaphoreParameterivNV = Marshal.GetDelegateForFunctionPointer<GLGetSemaphoreParameterivNV>(loader.Invoke("glGetSemaphoreParameterivNV"));
            glBeginTransformFeedbackEXT = Marshal.GetDelegateForFunctionPointer<GLBeginTransformFeedbackEXT>(loader.Invoke("glBeginTransformFeedbackEXT"));
            glEndTransformFeedbackEXT = Marshal.GetDelegateForFunctionPointer<GLEndTransformFeedbackEXT>(loader.Invoke("glEndTransformFeedbackEXT"));
            glBindBufferRangeEXT = Marshal.GetDelegateForFunctionPointer<GLBindBufferRangeEXT>(loader.Invoke("glBindBufferRangeEXT"));
            glBindBufferOffsetEXT = Marshal.GetDelegateForFunctionPointer<GLBindBufferOffsetEXT>(loader.Invoke("glBindBufferOffsetEXT"));
            glBindBufferBaseEXT = Marshal.GetDelegateForFunctionPointer<GLBindBufferBaseEXT>(loader.Invoke("glBindBufferBaseEXT"));
            glTransformFeedbackVaryingsEXT = Marshal.GetDelegateForFunctionPointer<GLTransformFeedbackVaryingsEXT>(loader.Invoke("glTransformFeedbackVaryingsEXT"));
            glGetTransformFeedbackVaryingEXT = Marshal.GetDelegateForFunctionPointer<GLGetTransformFeedbackVaryingEXT>(loader.Invoke("glGetTransformFeedbackVaryingEXT"));
            glArrayElementEXT = Marshal.GetDelegateForFunctionPointer<GLArrayElementEXT>(loader.Invoke("glArrayElementEXT"));
            glColorPointerEXT = Marshal.GetDelegateForFunctionPointer<GLColorPointerEXT>(loader.Invoke("glColorPointerEXT"));
            glDrawArraysEXT = Marshal.GetDelegateForFunctionPointer<GLDrawArraysEXT>(loader.Invoke("glDrawArraysEXT"));
            glEdgeFlagPointerEXT = Marshal.GetDelegateForFunctionPointer<GLEdgeFlagPointerEXT>(loader.Invoke("glEdgeFlagPointerEXT"));
            glGetPointervEXT = Marshal.GetDelegateForFunctionPointer<GLGetPointervEXT>(loader.Invoke("glGetPointervEXT"));
            glIndexPointerEXT = Marshal.GetDelegateForFunctionPointer<GLIndexPointerEXT>(loader.Invoke("glIndexPointerEXT"));
            glNormalPointerEXT = Marshal.GetDelegateForFunctionPointer<GLNormalPointerEXT>(loader.Invoke("glNormalPointerEXT"));
            glTexCoordPointerEXT = Marshal.GetDelegateForFunctionPointer<GLTexCoordPointerEXT>(loader.Invoke("glTexCoordPointerEXT"));
            glVertexPointerEXT = Marshal.GetDelegateForFunctionPointer<GLVertexPointerEXT>(loader.Invoke("glVertexPointerEXT"));
            glVertexAttribL1dEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1dEXT>(loader.Invoke("glVertexAttribL1dEXT"));
            glVertexAttribL2dEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2dEXT>(loader.Invoke("glVertexAttribL2dEXT"));
            glVertexAttribL3dEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3dEXT>(loader.Invoke("glVertexAttribL3dEXT"));
            glVertexAttribL4dEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4dEXT>(loader.Invoke("glVertexAttribL4dEXT"));
            glVertexAttribL1dvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1dvEXT>(loader.Invoke("glVertexAttribL1dvEXT"));
            glVertexAttribL2dvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2dvEXT>(loader.Invoke("glVertexAttribL2dvEXT"));
            glVertexAttribL3dvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3dvEXT>(loader.Invoke("glVertexAttribL3dvEXT"));
            glVertexAttribL4dvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4dvEXT>(loader.Invoke("glVertexAttribL4dvEXT"));
            glVertexAttribLPointerEXT = Marshal.GetDelegateForFunctionPointer<GLVertexAttribLPointerEXT>(loader.Invoke("glVertexAttribLPointerEXT"));
            glGetVertexAttribLdvEXT = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribLdvEXT>(loader.Invoke("glGetVertexAttribLdvEXT"));
            glBeginVertexShaderEXT = Marshal.GetDelegateForFunctionPointer<GLBeginVertexShaderEXT>(loader.Invoke("glBeginVertexShaderEXT"));
            glEndVertexShaderEXT = Marshal.GetDelegateForFunctionPointer<GLEndVertexShaderEXT>(loader.Invoke("glEndVertexShaderEXT"));
            glBindVertexShaderEXT = Marshal.GetDelegateForFunctionPointer<GLBindVertexShaderEXT>(loader.Invoke("glBindVertexShaderEXT"));
            glGenVertexShadersEXT = Marshal.GetDelegateForFunctionPointer<GLGenVertexShadersEXT>(loader.Invoke("glGenVertexShadersEXT"));
            glDeleteVertexShaderEXT = Marshal.GetDelegateForFunctionPointer<GLDeleteVertexShaderEXT>(loader.Invoke("glDeleteVertexShaderEXT"));
            glShaderOp1EXT = Marshal.GetDelegateForFunctionPointer<GLShaderOp1EXT>(loader.Invoke("glShaderOp1EXT"));
            glShaderOp2EXT = Marshal.GetDelegateForFunctionPointer<GLShaderOp2EXT>(loader.Invoke("glShaderOp2EXT"));
            glShaderOp3EXT = Marshal.GetDelegateForFunctionPointer<GLShaderOp3EXT>(loader.Invoke("glShaderOp3EXT"));
            glSwizzleEXT = Marshal.GetDelegateForFunctionPointer<GLSwizzleEXT>(loader.Invoke("glSwizzleEXT"));
            glWriteMaskEXT = Marshal.GetDelegateForFunctionPointer<GLWriteMaskEXT>(loader.Invoke("glWriteMaskEXT"));
            glInsertComponentEXT = Marshal.GetDelegateForFunctionPointer<GLInsertComponentEXT>(loader.Invoke("glInsertComponentEXT"));
            glExtractComponentEXT = Marshal.GetDelegateForFunctionPointer<GLExtractComponentEXT>(loader.Invoke("glExtractComponentEXT"));
            glGenSymbolsEXT = Marshal.GetDelegateForFunctionPointer<GLGenSymbolsEXT>(loader.Invoke("glGenSymbolsEXT"));
            glSetInvariantEXT = Marshal.GetDelegateForFunctionPointer<GLSetInvariantEXT>(loader.Invoke("glSetInvariantEXT"));
            glSetLocalConstantEXT = Marshal.GetDelegateForFunctionPointer<GLSetLocalConstantEXT>(loader.Invoke("glSetLocalConstantEXT"));
            glVariantbvEXT = Marshal.GetDelegateForFunctionPointer<GLVariantbvEXT>(loader.Invoke("glVariantbvEXT"));
            glVariantsvEXT = Marshal.GetDelegateForFunctionPointer<GLVariantsvEXT>(loader.Invoke("glVariantsvEXT"));
            glVariantivEXT = Marshal.GetDelegateForFunctionPointer<GLVariantivEXT>(loader.Invoke("glVariantivEXT"));
            glVariantfvEXT = Marshal.GetDelegateForFunctionPointer<GLVariantfvEXT>(loader.Invoke("glVariantfvEXT"));
            glVariantdvEXT = Marshal.GetDelegateForFunctionPointer<GLVariantdvEXT>(loader.Invoke("glVariantdvEXT"));
            glVariantubvEXT = Marshal.GetDelegateForFunctionPointer<GLVariantubvEXT>(loader.Invoke("glVariantubvEXT"));
            glVariantusvEXT = Marshal.GetDelegateForFunctionPointer<GLVariantusvEXT>(loader.Invoke("glVariantusvEXT"));
            glVariantuivEXT = Marshal.GetDelegateForFunctionPointer<GLVariantuivEXT>(loader.Invoke("glVariantuivEXT"));
            glVariantPointerEXT = Marshal.GetDelegateForFunctionPointer<GLVariantPointerEXT>(loader.Invoke("glVariantPointerEXT"));
            glEnableVariantClientStateEXT = Marshal.GetDelegateForFunctionPointer<GLEnableVariantClientStateEXT>(loader.Invoke("glEnableVariantClientStateEXT"));
            glDisableVariantClientStateEXT = Marshal.GetDelegateForFunctionPointer<GLDisableVariantClientStateEXT>(loader.Invoke("glDisableVariantClientStateEXT"));
            glBindLightParameterEXT = Marshal.GetDelegateForFunctionPointer<GLBindLightParameterEXT>(loader.Invoke("glBindLightParameterEXT"));
            glBindMaterialParameterEXT = Marshal.GetDelegateForFunctionPointer<GLBindMaterialParameterEXT>(loader.Invoke("glBindMaterialParameterEXT"));
            glBindTexGenParameterEXT = Marshal.GetDelegateForFunctionPointer<GLBindTexGenParameterEXT>(loader.Invoke("glBindTexGenParameterEXT"));
            glBindTextureUnitParameterEXT = Marshal.GetDelegateForFunctionPointer<GLBindTextureUnitParameterEXT>(loader.Invoke("glBindTextureUnitParameterEXT"));
            glBindParameterEXT = Marshal.GetDelegateForFunctionPointer<GLBindParameterEXT>(loader.Invoke("glBindParameterEXT"));
            glIsVariantEnabledEXT = Marshal.GetDelegateForFunctionPointer<GLIsVariantEnabledEXT>(loader.Invoke("glIsVariantEnabledEXT"));
            glGetVariantBooleanvEXT = Marshal.GetDelegateForFunctionPointer<GLGetVariantBooleanvEXT>(loader.Invoke("glGetVariantBooleanvEXT"));
            glGetVariantIntegervEXT = Marshal.GetDelegateForFunctionPointer<GLGetVariantIntegervEXT>(loader.Invoke("glGetVariantIntegervEXT"));
            glGetVariantFloatvEXT = Marshal.GetDelegateForFunctionPointer<GLGetVariantFloatvEXT>(loader.Invoke("glGetVariantFloatvEXT"));
            glGetVariantPointervEXT = Marshal.GetDelegateForFunctionPointer<GLGetVariantPointervEXT>(loader.Invoke("glGetVariantPointervEXT"));
            glGetInvariantBooleanvEXT = Marshal.GetDelegateForFunctionPointer<GLGetInvariantBooleanvEXT>(loader.Invoke("glGetInvariantBooleanvEXT"));
            glGetInvariantIntegervEXT = Marshal.GetDelegateForFunctionPointer<GLGetInvariantIntegervEXT>(loader.Invoke("glGetInvariantIntegervEXT"));
            glGetInvariantFloatvEXT = Marshal.GetDelegateForFunctionPointer<GLGetInvariantFloatvEXT>(loader.Invoke("glGetInvariantFloatvEXT"));
            glGetLocalConstantBooleanvEXT = Marshal.GetDelegateForFunctionPointer<GLGetLocalConstantBooleanvEXT>(loader.Invoke("glGetLocalConstantBooleanvEXT"));
            glGetLocalConstantIntegervEXT = Marshal.GetDelegateForFunctionPointer<GLGetLocalConstantIntegervEXT>(loader.Invoke("glGetLocalConstantIntegervEXT"));
            glGetLocalConstantFloatvEXT = Marshal.GetDelegateForFunctionPointer<GLGetLocalConstantFloatvEXT>(loader.Invoke("glGetLocalConstantFloatvEXT"));
            glVertexWeightfEXT = Marshal.GetDelegateForFunctionPointer<GLVertexWeightfEXT>(loader.Invoke("glVertexWeightfEXT"));
            glVertexWeightfvEXT = Marshal.GetDelegateForFunctionPointer<GLVertexWeightfvEXT>(loader.Invoke("glVertexWeightfvEXT"));
            glVertexWeightPointerEXT = Marshal.GetDelegateForFunctionPointer<GLVertexWeightPointerEXT>(loader.Invoke("glVertexWeightPointerEXT"));
            glAcquireKeyedMutexWin32EXT = Marshal.GetDelegateForFunctionPointer<GLAcquireKeyedMutexWin32EXT>(loader.Invoke("glAcquireKeyedMutexWin32EXT"));
            glReleaseKeyedMutexWin32EXT = Marshal.GetDelegateForFunctionPointer<GLReleaseKeyedMutexWin32EXT>(loader.Invoke("glReleaseKeyedMutexWin32EXT"));
            glWindowRectanglesEXT = Marshal.GetDelegateForFunctionPointer<GLWindowRectanglesEXT>(loader.Invoke("glWindowRectanglesEXT"));
            glImportSyncEXT = Marshal.GetDelegateForFunctionPointer<GLImportSyncEXT>(loader.Invoke("glImportSyncEXT"));
            glFrameTerminatorGREMEDY = Marshal.GetDelegateForFunctionPointer<GLFrameTerminatorGREMEDY>(loader.Invoke("glFrameTerminatorGREMEDY"));
            glStringMarkerGREMEDY = Marshal.GetDelegateForFunctionPointer<GLStringMarkerGREMEDY>(loader.Invoke("glStringMarkerGREMEDY"));
            glImageTransformParameteriHP = Marshal.GetDelegateForFunctionPointer<GLImageTransformParameteriHP>(loader.Invoke("glImageTransformParameteriHP"));
            glImageTransformParameterfHP = Marshal.GetDelegateForFunctionPointer<GLImageTransformParameterfHP>(loader.Invoke("glImageTransformParameterfHP"));
            glImageTransformParameterivHP = Marshal.GetDelegateForFunctionPointer<GLImageTransformParameterivHP>(loader.Invoke("glImageTransformParameterivHP"));
            glImageTransformParameterfvHP = Marshal.GetDelegateForFunctionPointer<GLImageTransformParameterfvHP>(loader.Invoke("glImageTransformParameterfvHP"));
            glGetImageTransformParameterivHP = Marshal.GetDelegateForFunctionPointer<GLGetImageTransformParameterivHP>(loader.Invoke("glGetImageTransformParameterivHP"));
            glGetImageTransformParameterfvHP = Marshal.GetDelegateForFunctionPointer<GLGetImageTransformParameterfvHP>(loader.Invoke("glGetImageTransformParameterfvHP"));
            glMultiModeDrawArraysIBM = Marshal.GetDelegateForFunctionPointer<GLMultiModeDrawArraysIBM>(loader.Invoke("glMultiModeDrawArraysIBM"));
            glMultiModeDrawElementsIBM = Marshal.GetDelegateForFunctionPointer<GLMultiModeDrawElementsIBM>(loader.Invoke("glMultiModeDrawElementsIBM"));
            glFlushStaticDataIBM = Marshal.GetDelegateForFunctionPointer<GLFlushStaticDataIBM>(loader.Invoke("glFlushStaticDataIBM"));
            glColorPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLColorPointerListIBM>(loader.Invoke("glColorPointerListIBM"));
            glSecondaryColorPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLSecondaryColorPointerListIBM>(loader.Invoke("glSecondaryColorPointerListIBM"));
            glEdgeFlagPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLEdgeFlagPointerListIBM>(loader.Invoke("glEdgeFlagPointerListIBM"));
            glFogCoordPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLFogCoordPointerListIBM>(loader.Invoke("glFogCoordPointerListIBM"));
            glIndexPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLIndexPointerListIBM>(loader.Invoke("glIndexPointerListIBM"));
            glNormalPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLNormalPointerListIBM>(loader.Invoke("glNormalPointerListIBM"));
            glTexCoordPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLTexCoordPointerListIBM>(loader.Invoke("glTexCoordPointerListIBM"));
            glVertexPointerListIBM = Marshal.GetDelegateForFunctionPointer<GLVertexPointerListIBM>(loader.Invoke("glVertexPointerListIBM"));
            glGetTextureHandleIMG = Marshal.GetDelegateForFunctionPointer<GLGetTextureHandleIMG>(loader.Invoke("glGetTextureHandleIMG"));
            glGetTextureSamplerHandleIMG = Marshal.GetDelegateForFunctionPointer<GLGetTextureSamplerHandleIMG>(loader.Invoke("glGetTextureSamplerHandleIMG"));
            glUniformHandleui64IMG = Marshal.GetDelegateForFunctionPointer<GLUniformHandleui64IMG>(loader.Invoke("glUniformHandleui64IMG"));
            glUniformHandleui64vIMG = Marshal.GetDelegateForFunctionPointer<GLUniformHandleui64vIMG>(loader.Invoke("glUniformHandleui64vIMG"));
            glProgramUniformHandleui64IMG = Marshal.GetDelegateForFunctionPointer<GLProgramUniformHandleui64IMG>(loader.Invoke("glProgramUniformHandleui64IMG"));
            glProgramUniformHandleui64vIMG = Marshal.GetDelegateForFunctionPointer<GLProgramUniformHandleui64vIMG>(loader.Invoke("glProgramUniformHandleui64vIMG"));
            glFramebufferTexture2DDownsampleIMG = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture2DDownsampleIMG>(loader.Invoke("glFramebufferTexture2DDownsampleIMG"));
            glFramebufferTextureLayerDownsampleIMG = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureLayerDownsampleIMG>(loader.Invoke("glFramebufferTextureLayerDownsampleIMG"));
            glRenderbufferStorageMultisampleIMG = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisampleIMG>(loader.Invoke("glRenderbufferStorageMultisampleIMG"));
            glFramebufferTexture2DMultisampleIMG = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture2DMultisampleIMG>(loader.Invoke("glFramebufferTexture2DMultisampleIMG"));
            glClipPlanefIMG = Marshal.GetDelegateForFunctionPointer<GLClipPlanefIMG>(loader.Invoke("glClipPlanefIMG"));
            glClipPlanexIMG = Marshal.GetDelegateForFunctionPointer<GLClipPlanexIMG>(loader.Invoke("glClipPlanexIMG"));
            glBlendFuncSeparateINGR = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparateINGR>(loader.Invoke("glBlendFuncSeparateINGR"));
            glApplyFramebufferAttachmentCMAAINTEL = Marshal.GetDelegateForFunctionPointer<GLApplyFramebufferAttachmentCMAAINTEL>(loader.Invoke("glApplyFramebufferAttachmentCMAAINTEL"));
            glSyncTextureINTEL = Marshal.GetDelegateForFunctionPointer<GLSyncTextureINTEL>(loader.Invoke("glSyncTextureINTEL"));
            glUnmapTexture2DINTEL = Marshal.GetDelegateForFunctionPointer<GLUnmapTexture2DINTEL>(loader.Invoke("glUnmapTexture2DINTEL"));
            glMapTexture2DINTEL = Marshal.GetDelegateForFunctionPointer<GLMapTexture2DINTEL>(loader.Invoke("glMapTexture2DINTEL"));
            glVertexPointervINTEL = Marshal.GetDelegateForFunctionPointer<GLVertexPointervINTEL>(loader.Invoke("glVertexPointervINTEL"));
            glNormalPointervINTEL = Marshal.GetDelegateForFunctionPointer<GLNormalPointervINTEL>(loader.Invoke("glNormalPointervINTEL"));
            glColorPointervINTEL = Marshal.GetDelegateForFunctionPointer<GLColorPointervINTEL>(loader.Invoke("glColorPointervINTEL"));
            glTexCoordPointervINTEL = Marshal.GetDelegateForFunctionPointer<GLTexCoordPointervINTEL>(loader.Invoke("glTexCoordPointervINTEL"));
            glBeginPerfQueryINTEL = Marshal.GetDelegateForFunctionPointer<GLBeginPerfQueryINTEL>(loader.Invoke("glBeginPerfQueryINTEL"));
            glCreatePerfQueryINTEL = Marshal.GetDelegateForFunctionPointer<GLCreatePerfQueryINTEL>(loader.Invoke("glCreatePerfQueryINTEL"));
            glDeletePerfQueryINTEL = Marshal.GetDelegateForFunctionPointer<GLDeletePerfQueryINTEL>(loader.Invoke("glDeletePerfQueryINTEL"));
            glEndPerfQueryINTEL = Marshal.GetDelegateForFunctionPointer<GLEndPerfQueryINTEL>(loader.Invoke("glEndPerfQueryINTEL"));
            glGetFirstPerfQueryIdINTEL = Marshal.GetDelegateForFunctionPointer<GLGetFirstPerfQueryIdINTEL>(loader.Invoke("glGetFirstPerfQueryIdINTEL"));
            glGetNextPerfQueryIdINTEL = Marshal.GetDelegateForFunctionPointer<GLGetNextPerfQueryIdINTEL>(loader.Invoke("glGetNextPerfQueryIdINTEL"));
            glGetPerfCounterInfoINTEL = Marshal.GetDelegateForFunctionPointer<GLGetPerfCounterInfoINTEL>(loader.Invoke("glGetPerfCounterInfoINTEL"));
            glGetPerfQueryDataINTEL = Marshal.GetDelegateForFunctionPointer<GLGetPerfQueryDataINTEL>(loader.Invoke("glGetPerfQueryDataINTEL"));
            glGetPerfQueryIdByNameINTEL = Marshal.GetDelegateForFunctionPointer<GLGetPerfQueryIdByNameINTEL>(loader.Invoke("glGetPerfQueryIdByNameINTEL"));
            glGetPerfQueryInfoINTEL = Marshal.GetDelegateForFunctionPointer<GLGetPerfQueryInfoINTEL>(loader.Invoke("glGetPerfQueryInfoINTEL"));
            glBlendBarrierKHR = Marshal.GetDelegateForFunctionPointer<GLBlendBarrierKHR>(loader.Invoke("glBlendBarrierKHR"));
            glDebugMessageControl = Marshal.GetDelegateForFunctionPointer<GLDebugMessageControl>(loader.Invoke("glDebugMessageControl"));
            glDebugMessageInsert = Marshal.GetDelegateForFunctionPointer<GLDebugMessageInsert>(loader.Invoke("glDebugMessageInsert"));
            glDebugMessageCallback = Marshal.GetDelegateForFunctionPointer<GLDebugMessageCallback>(loader.Invoke("glDebugMessageCallback"));
            glGetDebugMessageLog = Marshal.GetDelegateForFunctionPointer<GLGetDebugMessageLog>(loader.Invoke("glGetDebugMessageLog"));
            glPushDebugGroup = Marshal.GetDelegateForFunctionPointer<GLPushDebugGroup>(loader.Invoke("glPushDebugGroup"));
            glPopDebugGroup = Marshal.GetDelegateForFunctionPointer<GLPopDebugGroup>(loader.Invoke("glPopDebugGroup"));
            glObjectLabel = Marshal.GetDelegateForFunctionPointer<GLObjectLabel>(loader.Invoke("glObjectLabel"));
            glGetObjectLabel = Marshal.GetDelegateForFunctionPointer<GLGetObjectLabel>(loader.Invoke("glGetObjectLabel"));
            glObjectPtrLabel = Marshal.GetDelegateForFunctionPointer<GLObjectPtrLabel>(loader.Invoke("glObjectPtrLabel"));
            glGetObjectPtrLabel = Marshal.GetDelegateForFunctionPointer<GLGetObjectPtrLabel>(loader.Invoke("glGetObjectPtrLabel"));
            glGetPointerv = Marshal.GetDelegateForFunctionPointer<GLGetPointerv>(loader.Invoke("glGetPointerv"));
            glDebugMessageControlKHR = Marshal.GetDelegateForFunctionPointer<GLDebugMessageControlKHR>(loader.Invoke("glDebugMessageControlKHR"));
            glDebugMessageInsertKHR = Marshal.GetDelegateForFunctionPointer<GLDebugMessageInsertKHR>(loader.Invoke("glDebugMessageInsertKHR"));
            glDebugMessageCallbackKHR = Marshal.GetDelegateForFunctionPointer<GLDebugMessageCallbackKHR>(loader.Invoke("glDebugMessageCallbackKHR"));
            glGetDebugMessageLogKHR = Marshal.GetDelegateForFunctionPointer<GLGetDebugMessageLogKHR>(loader.Invoke("glGetDebugMessageLogKHR"));
            glPushDebugGroupKHR = Marshal.GetDelegateForFunctionPointer<GLPushDebugGroupKHR>(loader.Invoke("glPushDebugGroupKHR"));
            glPopDebugGroupKHR = Marshal.GetDelegateForFunctionPointer<GLPopDebugGroupKHR>(loader.Invoke("glPopDebugGroupKHR"));
            glObjectLabelKHR = Marshal.GetDelegateForFunctionPointer<GLObjectLabelKHR>(loader.Invoke("glObjectLabelKHR"));
            glGetObjectLabelKHR = Marshal.GetDelegateForFunctionPointer<GLGetObjectLabelKHR>(loader.Invoke("glGetObjectLabelKHR"));
            glObjectPtrLabelKHR = Marshal.GetDelegateForFunctionPointer<GLObjectPtrLabelKHR>(loader.Invoke("glObjectPtrLabelKHR"));
            glGetObjectPtrLabelKHR = Marshal.GetDelegateForFunctionPointer<GLGetObjectPtrLabelKHR>(loader.Invoke("glGetObjectPtrLabelKHR"));
            glGetPointervKHR = Marshal.GetDelegateForFunctionPointer<GLGetPointervKHR>(loader.Invoke("glGetPointervKHR"));
            glGetGraphicsResetStatus = Marshal.GetDelegateForFunctionPointer<GLGetGraphicsResetStatus>(loader.Invoke("glGetGraphicsResetStatus"));
            glReadnPixels = Marshal.GetDelegateForFunctionPointer<GLReadnPixels>(loader.Invoke("glReadnPixels"));
            glGetnUniformfv = Marshal.GetDelegateForFunctionPointer<GLGetnUniformfv>(loader.Invoke("glGetnUniformfv"));
            glGetnUniformiv = Marshal.GetDelegateForFunctionPointer<GLGetnUniformiv>(loader.Invoke("glGetnUniformiv"));
            glGetnUniformuiv = Marshal.GetDelegateForFunctionPointer<GLGetnUniformuiv>(loader.Invoke("glGetnUniformuiv"));
            glGetGraphicsResetStatusKHR = Marshal.GetDelegateForFunctionPointer<GLGetGraphicsResetStatusKHR>(loader.Invoke("glGetGraphicsResetStatusKHR"));
            glReadnPixelsKHR = Marshal.GetDelegateForFunctionPointer<GLReadnPixelsKHR>(loader.Invoke("glReadnPixelsKHR"));
            glGetnUniformfvKHR = Marshal.GetDelegateForFunctionPointer<GLGetnUniformfvKHR>(loader.Invoke("glGetnUniformfvKHR"));
            glGetnUniformivKHR = Marshal.GetDelegateForFunctionPointer<GLGetnUniformivKHR>(loader.Invoke("glGetnUniformivKHR"));
            glGetnUniformuivKHR = Marshal.GetDelegateForFunctionPointer<GLGetnUniformuivKHR>(loader.Invoke("glGetnUniformuivKHR"));
            glMaxShaderCompilerThreadsKHR = Marshal.GetDelegateForFunctionPointer<GLMaxShaderCompilerThreadsKHR>(loader.Invoke("glMaxShaderCompilerThreadsKHR"));
            glFramebufferParameteriMESA = Marshal.GetDelegateForFunctionPointer<GLFramebufferParameteriMESA>(loader.Invoke("glFramebufferParameteriMESA"));
            glGetFramebufferParameterivMESA = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferParameterivMESA>(loader.Invoke("glGetFramebufferParameterivMESA"));
            glResizeBuffersMESA = Marshal.GetDelegateForFunctionPointer<GLResizeBuffersMESA>(loader.Invoke("glResizeBuffersMESA"));
            glWindowPos2dMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2dMESA>(loader.Invoke("glWindowPos2dMESA"));
            glWindowPos2dvMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2dvMESA>(loader.Invoke("glWindowPos2dvMESA"));
            glWindowPos2fMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2fMESA>(loader.Invoke("glWindowPos2fMESA"));
            glWindowPos2fvMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2fvMESA>(loader.Invoke("glWindowPos2fvMESA"));
            glWindowPos2iMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2iMESA>(loader.Invoke("glWindowPos2iMESA"));
            glWindowPos2ivMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2ivMESA>(loader.Invoke("glWindowPos2ivMESA"));
            glWindowPos2sMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2sMESA>(loader.Invoke("glWindowPos2sMESA"));
            glWindowPos2svMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos2svMESA>(loader.Invoke("glWindowPos2svMESA"));
            glWindowPos3dMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3dMESA>(loader.Invoke("glWindowPos3dMESA"));
            glWindowPos3dvMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3dvMESA>(loader.Invoke("glWindowPos3dvMESA"));
            glWindowPos3fMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3fMESA>(loader.Invoke("glWindowPos3fMESA"));
            glWindowPos3fvMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3fvMESA>(loader.Invoke("glWindowPos3fvMESA"));
            glWindowPos3iMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3iMESA>(loader.Invoke("glWindowPos3iMESA"));
            glWindowPos3ivMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3ivMESA>(loader.Invoke("glWindowPos3ivMESA"));
            glWindowPos3sMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3sMESA>(loader.Invoke("glWindowPos3sMESA"));
            glWindowPos3svMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos3svMESA>(loader.Invoke("glWindowPos3svMESA"));
            glWindowPos4dMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4dMESA>(loader.Invoke("glWindowPos4dMESA"));
            glWindowPos4dvMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4dvMESA>(loader.Invoke("glWindowPos4dvMESA"));
            glWindowPos4fMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4fMESA>(loader.Invoke("glWindowPos4fMESA"));
            glWindowPos4fvMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4fvMESA>(loader.Invoke("glWindowPos4fvMESA"));
            glWindowPos4iMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4iMESA>(loader.Invoke("glWindowPos4iMESA"));
            glWindowPos4ivMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4ivMESA>(loader.Invoke("glWindowPos4ivMESA"));
            glWindowPos4sMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4sMESA>(loader.Invoke("glWindowPos4sMESA"));
            glWindowPos4svMESA = Marshal.GetDelegateForFunctionPointer<GLWindowPos4svMESA>(loader.Invoke("glWindowPos4svMESA"));
            glBeginConditionalRenderNVX = Marshal.GetDelegateForFunctionPointer<GLBeginConditionalRenderNVX>(loader.Invoke("glBeginConditionalRenderNVX"));
            glEndConditionalRenderNVX = Marshal.GetDelegateForFunctionPointer<GLEndConditionalRenderNVX>(loader.Invoke("glEndConditionalRenderNVX"));
            glLGPUNamedBufferSubDataNVX = Marshal.GetDelegateForFunctionPointer<GLLGPUNamedBufferSubDataNVX>(loader.Invoke("glLGPUNamedBufferSubDataNVX"));
            glLGPUCopyImageSubDataNVX = Marshal.GetDelegateForFunctionPointer<GLLGPUCopyImageSubDataNVX>(loader.Invoke("glLGPUCopyImageSubDataNVX"));
            glLGPUInterlockNVX = Marshal.GetDelegateForFunctionPointer<GLLGPUInterlockNVX>(loader.Invoke("glLGPUInterlockNVX"));
            glAlphaToCoverageDitherControlNV = Marshal.GetDelegateForFunctionPointer<GLAlphaToCoverageDitherControlNV>(loader.Invoke("glAlphaToCoverageDitherControlNV"));
            glMultiDrawArraysIndirectBindlessNV = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysIndirectBindlessNV>(loader.Invoke("glMultiDrawArraysIndirectBindlessNV"));
            glMultiDrawElementsIndirectBindlessNV = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsIndirectBindlessNV>(loader.Invoke("glMultiDrawElementsIndirectBindlessNV"));
            glMultiDrawArraysIndirectBindlessCountNV = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysIndirectBindlessCountNV>(loader.Invoke("glMultiDrawArraysIndirectBindlessCountNV"));
            glMultiDrawElementsIndirectBindlessCountNV = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsIndirectBindlessCountNV>(loader.Invoke("glMultiDrawElementsIndirectBindlessCountNV"));
            glGetTextureHandleNV = Marshal.GetDelegateForFunctionPointer<GLGetTextureHandleNV>(loader.Invoke("glGetTextureHandleNV"));
            glGetTextureSamplerHandleNV = Marshal.GetDelegateForFunctionPointer<GLGetTextureSamplerHandleNV>(loader.Invoke("glGetTextureSamplerHandleNV"));
            glMakeTextureHandleResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeTextureHandleResidentNV>(loader.Invoke("glMakeTextureHandleResidentNV"));
            glMakeTextureHandleNonResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeTextureHandleNonResidentNV>(loader.Invoke("glMakeTextureHandleNonResidentNV"));
            glGetImageHandleNV = Marshal.GetDelegateForFunctionPointer<GLGetImageHandleNV>(loader.Invoke("glGetImageHandleNV"));
            glMakeImageHandleResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeImageHandleResidentNV>(loader.Invoke("glMakeImageHandleResidentNV"));
            glMakeImageHandleNonResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeImageHandleNonResidentNV>(loader.Invoke("glMakeImageHandleNonResidentNV"));
            glUniformHandleui64NV = Marshal.GetDelegateForFunctionPointer<GLUniformHandleui64NV>(loader.Invoke("glUniformHandleui64NV"));
            glUniformHandleui64vNV = Marshal.GetDelegateForFunctionPointer<GLUniformHandleui64vNV>(loader.Invoke("glUniformHandleui64vNV"));
            glProgramUniformHandleui64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniformHandleui64NV>(loader.Invoke("glProgramUniformHandleui64NV"));
            glProgramUniformHandleui64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniformHandleui64vNV>(loader.Invoke("glProgramUniformHandleui64vNV"));
            glIsTextureHandleResidentNV = Marshal.GetDelegateForFunctionPointer<GLIsTextureHandleResidentNV>(loader.Invoke("glIsTextureHandleResidentNV"));
            glIsImageHandleResidentNV = Marshal.GetDelegateForFunctionPointer<GLIsImageHandleResidentNV>(loader.Invoke("glIsImageHandleResidentNV"));
            glBlendParameteriNV = Marshal.GetDelegateForFunctionPointer<GLBlendParameteriNV>(loader.Invoke("glBlendParameteriNV"));
            glBlendBarrierNV = Marshal.GetDelegateForFunctionPointer<GLBlendBarrierNV>(loader.Invoke("glBlendBarrierNV"));
            glViewportPositionWScaleNV = Marshal.GetDelegateForFunctionPointer<GLViewportPositionWScaleNV>(loader.Invoke("glViewportPositionWScaleNV"));
            glCreateStatesNV = Marshal.GetDelegateForFunctionPointer<GLCreateStatesNV>(loader.Invoke("glCreateStatesNV"));
            glDeleteStatesNV = Marshal.GetDelegateForFunctionPointer<GLDeleteStatesNV>(loader.Invoke("glDeleteStatesNV"));
            glIsStateNV = Marshal.GetDelegateForFunctionPointer<GLIsStateNV>(loader.Invoke("glIsStateNV"));
            glStateCaptureNV = Marshal.GetDelegateForFunctionPointer<GLStateCaptureNV>(loader.Invoke("glStateCaptureNV"));
            glGetCommandHeaderNV = Marshal.GetDelegateForFunctionPointer<GLGetCommandHeaderNV>(loader.Invoke("glGetCommandHeaderNV"));
            glGetStageIndexNV = Marshal.GetDelegateForFunctionPointer<GLGetStageIndexNV>(loader.Invoke("glGetStageIndexNV"));
            glDrawCommandsNV = Marshal.GetDelegateForFunctionPointer<GLDrawCommandsNV>(loader.Invoke("glDrawCommandsNV"));
            glDrawCommandsAddressNV = Marshal.GetDelegateForFunctionPointer<GLDrawCommandsAddressNV>(loader.Invoke("glDrawCommandsAddressNV"));
            glDrawCommandsStatesNV = Marshal.GetDelegateForFunctionPointer<GLDrawCommandsStatesNV>(loader.Invoke("glDrawCommandsStatesNV"));
            glDrawCommandsStatesAddressNV = Marshal.GetDelegateForFunctionPointer<GLDrawCommandsStatesAddressNV>(loader.Invoke("glDrawCommandsStatesAddressNV"));
            glCreateCommandListsNV = Marshal.GetDelegateForFunctionPointer<GLCreateCommandListsNV>(loader.Invoke("glCreateCommandListsNV"));
            glDeleteCommandListsNV = Marshal.GetDelegateForFunctionPointer<GLDeleteCommandListsNV>(loader.Invoke("glDeleteCommandListsNV"));
            glIsCommandListNV = Marshal.GetDelegateForFunctionPointer<GLIsCommandListNV>(loader.Invoke("glIsCommandListNV"));
            glListDrawCommandsStatesClientNV = Marshal.GetDelegateForFunctionPointer<GLListDrawCommandsStatesClientNV>(loader.Invoke("glListDrawCommandsStatesClientNV"));
            glCommandListSegmentsNV = Marshal.GetDelegateForFunctionPointer<GLCommandListSegmentsNV>(loader.Invoke("glCommandListSegmentsNV"));
            glCompileCommandListNV = Marshal.GetDelegateForFunctionPointer<GLCompileCommandListNV>(loader.Invoke("glCompileCommandListNV"));
            glCallCommandListNV = Marshal.GetDelegateForFunctionPointer<GLCallCommandListNV>(loader.Invoke("glCallCommandListNV"));
            glBeginConditionalRenderNV = Marshal.GetDelegateForFunctionPointer<GLBeginConditionalRenderNV>(loader.Invoke("glBeginConditionalRenderNV"));
            glEndConditionalRenderNV = Marshal.GetDelegateForFunctionPointer<GLEndConditionalRenderNV>(loader.Invoke("glEndConditionalRenderNV"));
            glSubpixelPrecisionBiasNV = Marshal.GetDelegateForFunctionPointer<GLSubpixelPrecisionBiasNV>(loader.Invoke("glSubpixelPrecisionBiasNV"));
            glConservativeRasterParameterfNV = Marshal.GetDelegateForFunctionPointer<GLConservativeRasterParameterfNV>(loader.Invoke("glConservativeRasterParameterfNV"));
            glConservativeRasterParameteriNV = Marshal.GetDelegateForFunctionPointer<GLConservativeRasterParameteriNV>(loader.Invoke("glConservativeRasterParameteriNV"));
            glCopyBufferSubDataNV = Marshal.GetDelegateForFunctionPointer<GLCopyBufferSubDataNV>(loader.Invoke("glCopyBufferSubDataNV"));
            glCopyImageSubDataNV = Marshal.GetDelegateForFunctionPointer<GLCopyImageSubDataNV>(loader.Invoke("glCopyImageSubDataNV"));
            glCoverageMaskNV = Marshal.GetDelegateForFunctionPointer<GLCoverageMaskNV>(loader.Invoke("glCoverageMaskNV"));
            glCoverageOperationNV = Marshal.GetDelegateForFunctionPointer<GLCoverageOperationNV>(loader.Invoke("glCoverageOperationNV"));
            glDepthRangedNV = Marshal.GetDelegateForFunctionPointer<GLDepthRangedNV>(loader.Invoke("glDepthRangedNV"));
            glClearDepthdNV = Marshal.GetDelegateForFunctionPointer<GLClearDepthdNV>(loader.Invoke("glClearDepthdNV"));
            glDepthBoundsdNV = Marshal.GetDelegateForFunctionPointer<GLDepthBoundsdNV>(loader.Invoke("glDepthBoundsdNV"));
            glDrawBuffersNV = Marshal.GetDelegateForFunctionPointer<GLDrawBuffersNV>(loader.Invoke("glDrawBuffersNV"));
            glDrawArraysInstancedNV = Marshal.GetDelegateForFunctionPointer<GLDrawArraysInstancedNV>(loader.Invoke("glDrawArraysInstancedNV"));
            glDrawElementsInstancedNV = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedNV>(loader.Invoke("glDrawElementsInstancedNV"));
            glDrawTextureNV = Marshal.GetDelegateForFunctionPointer<GLDrawTextureNV>(loader.Invoke("glDrawTextureNV"));
            glDrawVkImageNV = Marshal.GetDelegateForFunctionPointer<GLDrawVkImageNV>(loader.Invoke("glDrawVkImageNV"));
            glGetVkProcAddrNV = Marshal.GetDelegateForFunctionPointer<GLGetVkProcAddrNV>(loader.Invoke("glGetVkProcAddrNV"));
            glWaitVkSemaphoreNV = Marshal.GetDelegateForFunctionPointer<GLWaitVkSemaphoreNV>(loader.Invoke("glWaitVkSemaphoreNV"));
            glSignalVkSemaphoreNV = Marshal.GetDelegateForFunctionPointer<GLSignalVkSemaphoreNV>(loader.Invoke("glSignalVkSemaphoreNV"));
            glSignalVkFenceNV = Marshal.GetDelegateForFunctionPointer<GLSignalVkFenceNV>(loader.Invoke("glSignalVkFenceNV"));
            glMapControlPointsNV = Marshal.GetDelegateForFunctionPointer<GLMapControlPointsNV>(loader.Invoke("glMapControlPointsNV"));
            glMapParameterivNV = Marshal.GetDelegateForFunctionPointer<GLMapParameterivNV>(loader.Invoke("glMapParameterivNV"));
            glMapParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLMapParameterfvNV>(loader.Invoke("glMapParameterfvNV"));
            glGetMapControlPointsNV = Marshal.GetDelegateForFunctionPointer<GLGetMapControlPointsNV>(loader.Invoke("glGetMapControlPointsNV"));
            glGetMapParameterivNV = Marshal.GetDelegateForFunctionPointer<GLGetMapParameterivNV>(loader.Invoke("glGetMapParameterivNV"));
            glGetMapParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetMapParameterfvNV>(loader.Invoke("glGetMapParameterfvNV"));
            glGetMapAttribParameterivNV = Marshal.GetDelegateForFunctionPointer<GLGetMapAttribParameterivNV>(loader.Invoke("glGetMapAttribParameterivNV"));
            glGetMapAttribParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetMapAttribParameterfvNV>(loader.Invoke("glGetMapAttribParameterfvNV"));
            glEvalMapsNV = Marshal.GetDelegateForFunctionPointer<GLEvalMapsNV>(loader.Invoke("glEvalMapsNV"));
            glGetMultisamplefvNV = Marshal.GetDelegateForFunctionPointer<GLGetMultisamplefvNV>(loader.Invoke("glGetMultisamplefvNV"));
            glSampleMaskIndexedNV = Marshal.GetDelegateForFunctionPointer<GLSampleMaskIndexedNV>(loader.Invoke("glSampleMaskIndexedNV"));
            glTexRenderbufferNV = Marshal.GetDelegateForFunctionPointer<GLTexRenderbufferNV>(loader.Invoke("glTexRenderbufferNV"));
            glDeleteFencesNV = Marshal.GetDelegateForFunctionPointer<GLDeleteFencesNV>(loader.Invoke("glDeleteFencesNV"));
            glGenFencesNV = Marshal.GetDelegateForFunctionPointer<GLGenFencesNV>(loader.Invoke("glGenFencesNV"));
            glIsFenceNV = Marshal.GetDelegateForFunctionPointer<GLIsFenceNV>(loader.Invoke("glIsFenceNV"));
            glTestFenceNV = Marshal.GetDelegateForFunctionPointer<GLTestFenceNV>(loader.Invoke("glTestFenceNV"));
            glGetFenceivNV = Marshal.GetDelegateForFunctionPointer<GLGetFenceivNV>(loader.Invoke("glGetFenceivNV"));
            glFinishFenceNV = Marshal.GetDelegateForFunctionPointer<GLFinishFenceNV>(loader.Invoke("glFinishFenceNV"));
            glSetFenceNV = Marshal.GetDelegateForFunctionPointer<GLSetFenceNV>(loader.Invoke("glSetFenceNV"));
            glFragmentCoverageColorNV = Marshal.GetDelegateForFunctionPointer<GLFragmentCoverageColorNV>(loader.Invoke("glFragmentCoverageColorNV"));
            glProgramNamedParameter4fNV = Marshal.GetDelegateForFunctionPointer<GLProgramNamedParameter4fNV>(loader.Invoke("glProgramNamedParameter4fNV"));
            glProgramNamedParameter4fvNV = Marshal.GetDelegateForFunctionPointer<GLProgramNamedParameter4fvNV>(loader.Invoke("glProgramNamedParameter4fvNV"));
            glProgramNamedParameter4dNV = Marshal.GetDelegateForFunctionPointer<GLProgramNamedParameter4dNV>(loader.Invoke("glProgramNamedParameter4dNV"));
            glProgramNamedParameter4dvNV = Marshal.GetDelegateForFunctionPointer<GLProgramNamedParameter4dvNV>(loader.Invoke("glProgramNamedParameter4dvNV"));
            glGetProgramNamedParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramNamedParameterfvNV>(loader.Invoke("glGetProgramNamedParameterfvNV"));
            glGetProgramNamedParameterdvNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramNamedParameterdvNV>(loader.Invoke("glGetProgramNamedParameterdvNV"));
            glBlitFramebufferNV = Marshal.GetDelegateForFunctionPointer<GLBlitFramebufferNV>(loader.Invoke("glBlitFramebufferNV"));
            glCoverageModulationTableNV = Marshal.GetDelegateForFunctionPointer<GLCoverageModulationTableNV>(loader.Invoke("glCoverageModulationTableNV"));
            glGetCoverageModulationTableNV = Marshal.GetDelegateForFunctionPointer<GLGetCoverageModulationTableNV>(loader.Invoke("glGetCoverageModulationTableNV"));
            glCoverageModulationNV = Marshal.GetDelegateForFunctionPointer<GLCoverageModulationNV>(loader.Invoke("glCoverageModulationNV"));
            glRenderbufferStorageMultisampleNV = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisampleNV>(loader.Invoke("glRenderbufferStorageMultisampleNV"));
            glRenderbufferStorageMultisampleCoverageNV = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageMultisampleCoverageNV>(loader.Invoke("glRenderbufferStorageMultisampleCoverageNV"));
            glProgramVertexLimitNV = Marshal.GetDelegateForFunctionPointer<GLProgramVertexLimitNV>(loader.Invoke("glProgramVertexLimitNV"));
            glFramebufferTextureFaceEXT = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureFaceEXT>(loader.Invoke("glFramebufferTextureFaceEXT"));
            glProgramLocalParameterI4iNV = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameterI4iNV>(loader.Invoke("glProgramLocalParameterI4iNV"));
            glProgramLocalParameterI4ivNV = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameterI4ivNV>(loader.Invoke("glProgramLocalParameterI4ivNV"));
            glProgramLocalParametersI4ivNV = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParametersI4ivNV>(loader.Invoke("glProgramLocalParametersI4ivNV"));
            glProgramLocalParameterI4uiNV = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameterI4uiNV>(loader.Invoke("glProgramLocalParameterI4uiNV"));
            glProgramLocalParameterI4uivNV = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParameterI4uivNV>(loader.Invoke("glProgramLocalParameterI4uivNV"));
            glProgramLocalParametersI4uivNV = Marshal.GetDelegateForFunctionPointer<GLProgramLocalParametersI4uivNV>(loader.Invoke("glProgramLocalParametersI4uivNV"));
            glProgramEnvParameterI4iNV = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameterI4iNV>(loader.Invoke("glProgramEnvParameterI4iNV"));
            glProgramEnvParameterI4ivNV = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameterI4ivNV>(loader.Invoke("glProgramEnvParameterI4ivNV"));
            glProgramEnvParametersI4ivNV = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParametersI4ivNV>(loader.Invoke("glProgramEnvParametersI4ivNV"));
            glProgramEnvParameterI4uiNV = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameterI4uiNV>(loader.Invoke("glProgramEnvParameterI4uiNV"));
            glProgramEnvParameterI4uivNV = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParameterI4uivNV>(loader.Invoke("glProgramEnvParameterI4uivNV"));
            glProgramEnvParametersI4uivNV = Marshal.GetDelegateForFunctionPointer<GLProgramEnvParametersI4uivNV>(loader.Invoke("glProgramEnvParametersI4uivNV"));
            glGetProgramLocalParameterIivNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramLocalParameterIivNV>(loader.Invoke("glGetProgramLocalParameterIivNV"));
            glGetProgramLocalParameterIuivNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramLocalParameterIuivNV>(loader.Invoke("glGetProgramLocalParameterIuivNV"));
            glGetProgramEnvParameterIivNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramEnvParameterIivNV>(loader.Invoke("glGetProgramEnvParameterIivNV"));
            glGetProgramEnvParameterIuivNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramEnvParameterIuivNV>(loader.Invoke("glGetProgramEnvParameterIuivNV"));
            glProgramSubroutineParametersuivNV = Marshal.GetDelegateForFunctionPointer<GLProgramSubroutineParametersuivNV>(loader.Invoke("glProgramSubroutineParametersuivNV"));
            glGetProgramSubroutineParameteruivNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramSubroutineParameteruivNV>(loader.Invoke("glGetProgramSubroutineParameteruivNV"));
            glVertex2hNV = Marshal.GetDelegateForFunctionPointer<GLVertex2hNV>(loader.Invoke("glVertex2hNV"));
            glVertex2hvNV = Marshal.GetDelegateForFunctionPointer<GLVertex2hvNV>(loader.Invoke("glVertex2hvNV"));
            glVertex3hNV = Marshal.GetDelegateForFunctionPointer<GLVertex3hNV>(loader.Invoke("glVertex3hNV"));
            glVertex3hvNV = Marshal.GetDelegateForFunctionPointer<GLVertex3hvNV>(loader.Invoke("glVertex3hvNV"));
            glVertex4hNV = Marshal.GetDelegateForFunctionPointer<GLVertex4hNV>(loader.Invoke("glVertex4hNV"));
            glVertex4hvNV = Marshal.GetDelegateForFunctionPointer<GLVertex4hvNV>(loader.Invoke("glVertex4hvNV"));
            glNormal3hNV = Marshal.GetDelegateForFunctionPointer<GLNormal3hNV>(loader.Invoke("glNormal3hNV"));
            glNormal3hvNV = Marshal.GetDelegateForFunctionPointer<GLNormal3hvNV>(loader.Invoke("glNormal3hvNV"));
            glColor3hNV = Marshal.GetDelegateForFunctionPointer<GLColor3hNV>(loader.Invoke("glColor3hNV"));
            glColor3hvNV = Marshal.GetDelegateForFunctionPointer<GLColor3hvNV>(loader.Invoke("glColor3hvNV"));
            glColor4hNV = Marshal.GetDelegateForFunctionPointer<GLColor4hNV>(loader.Invoke("glColor4hNV"));
            glColor4hvNV = Marshal.GetDelegateForFunctionPointer<GLColor4hvNV>(loader.Invoke("glColor4hvNV"));
            glTexCoord1hNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord1hNV>(loader.Invoke("glTexCoord1hNV"));
            glTexCoord1hvNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord1hvNV>(loader.Invoke("glTexCoord1hvNV"));
            glTexCoord2hNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord2hNV>(loader.Invoke("glTexCoord2hNV"));
            glTexCoord2hvNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord2hvNV>(loader.Invoke("glTexCoord2hvNV"));
            glTexCoord3hNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord3hNV>(loader.Invoke("glTexCoord3hNV"));
            glTexCoord3hvNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord3hvNV>(loader.Invoke("glTexCoord3hvNV"));
            glTexCoord4hNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord4hNV>(loader.Invoke("glTexCoord4hNV"));
            glTexCoord4hvNV = Marshal.GetDelegateForFunctionPointer<GLTexCoord4hvNV>(loader.Invoke("glTexCoord4hvNV"));
            glMultiTexCoord1hNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1hNV>(loader.Invoke("glMultiTexCoord1hNV"));
            glMultiTexCoord1hvNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1hvNV>(loader.Invoke("glMultiTexCoord1hvNV"));
            glMultiTexCoord2hNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2hNV>(loader.Invoke("glMultiTexCoord2hNV"));
            glMultiTexCoord2hvNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2hvNV>(loader.Invoke("glMultiTexCoord2hvNV"));
            glMultiTexCoord3hNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3hNV>(loader.Invoke("glMultiTexCoord3hNV"));
            glMultiTexCoord3hvNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3hvNV>(loader.Invoke("glMultiTexCoord3hvNV"));
            glMultiTexCoord4hNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4hNV>(loader.Invoke("glMultiTexCoord4hNV"));
            glMultiTexCoord4hvNV = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4hvNV>(loader.Invoke("glMultiTexCoord4hvNV"));
            glFogCoordhNV = Marshal.GetDelegateForFunctionPointer<GLFogCoordhNV>(loader.Invoke("glFogCoordhNV"));
            glFogCoordhvNV = Marshal.GetDelegateForFunctionPointer<GLFogCoordhvNV>(loader.Invoke("glFogCoordhvNV"));
            glSecondaryColor3hNV = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3hNV>(loader.Invoke("glSecondaryColor3hNV"));
            glSecondaryColor3hvNV = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3hvNV>(loader.Invoke("glSecondaryColor3hvNV"));
            glVertexWeighthNV = Marshal.GetDelegateForFunctionPointer<GLVertexWeighthNV>(loader.Invoke("glVertexWeighthNV"));
            glVertexWeighthvNV = Marshal.GetDelegateForFunctionPointer<GLVertexWeighthvNV>(loader.Invoke("glVertexWeighthvNV"));
            glVertexAttrib1hNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1hNV>(loader.Invoke("glVertexAttrib1hNV"));
            glVertexAttrib1hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1hvNV>(loader.Invoke("glVertexAttrib1hvNV"));
            glVertexAttrib2hNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2hNV>(loader.Invoke("glVertexAttrib2hNV"));
            glVertexAttrib2hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2hvNV>(loader.Invoke("glVertexAttrib2hvNV"));
            glVertexAttrib3hNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3hNV>(loader.Invoke("glVertexAttrib3hNV"));
            glVertexAttrib3hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3hvNV>(loader.Invoke("glVertexAttrib3hvNV"));
            glVertexAttrib4hNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4hNV>(loader.Invoke("glVertexAttrib4hNV"));
            glVertexAttrib4hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4hvNV>(loader.Invoke("glVertexAttrib4hvNV"));
            glVertexAttribs1hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs1hvNV>(loader.Invoke("glVertexAttribs1hvNV"));
            glVertexAttribs2hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs2hvNV>(loader.Invoke("glVertexAttribs2hvNV"));
            glVertexAttribs3hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs3hvNV>(loader.Invoke("glVertexAttribs3hvNV"));
            glVertexAttribs4hvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs4hvNV>(loader.Invoke("glVertexAttribs4hvNV"));
            glVertexAttribDivisorNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribDivisorNV>(loader.Invoke("glVertexAttribDivisorNV"));
            glGetInternalformatSampleivNV = Marshal.GetDelegateForFunctionPointer<GLGetInternalformatSampleivNV>(loader.Invoke("glGetInternalformatSampleivNV"));
            glRenderGpuMaskNV = Marshal.GetDelegateForFunctionPointer<GLRenderGpuMaskNV>(loader.Invoke("glRenderGpuMaskNV"));
            glMulticastBufferSubDataNV = Marshal.GetDelegateForFunctionPointer<GLMulticastBufferSubDataNV>(loader.Invoke("glMulticastBufferSubDataNV"));
            glMulticastCopyBufferSubDataNV = Marshal.GetDelegateForFunctionPointer<GLMulticastCopyBufferSubDataNV>(loader.Invoke("glMulticastCopyBufferSubDataNV"));
            glMulticastCopyImageSubDataNV = Marshal.GetDelegateForFunctionPointer<GLMulticastCopyImageSubDataNV>(loader.Invoke("glMulticastCopyImageSubDataNV"));
            glMulticastBlitFramebufferNV = Marshal.GetDelegateForFunctionPointer<GLMulticastBlitFramebufferNV>(loader.Invoke("glMulticastBlitFramebufferNV"));
            glMulticastFramebufferSampleLocationsfvNV = Marshal.GetDelegateForFunctionPointer<GLMulticastFramebufferSampleLocationsfvNV>(loader.Invoke("glMulticastFramebufferSampleLocationsfvNV"));
            glMulticastBarrierNV = Marshal.GetDelegateForFunctionPointer<GLMulticastBarrierNV>(loader.Invoke("glMulticastBarrierNV"));
            glMulticastWaitSyncNV = Marshal.GetDelegateForFunctionPointer<GLMulticastWaitSyncNV>(loader.Invoke("glMulticastWaitSyncNV"));
            glMulticastGetQueryObjectivNV = Marshal.GetDelegateForFunctionPointer<GLMulticastGetQueryObjectivNV>(loader.Invoke("glMulticastGetQueryObjectivNV"));
            glMulticastGetQueryObjectuivNV = Marshal.GetDelegateForFunctionPointer<GLMulticastGetQueryObjectuivNV>(loader.Invoke("glMulticastGetQueryObjectuivNV"));
            glMulticastGetQueryObjecti64vNV = Marshal.GetDelegateForFunctionPointer<GLMulticastGetQueryObjecti64vNV>(loader.Invoke("glMulticastGetQueryObjecti64vNV"));
            glMulticastGetQueryObjectui64vNV = Marshal.GetDelegateForFunctionPointer<GLMulticastGetQueryObjectui64vNV>(loader.Invoke("glMulticastGetQueryObjectui64vNV"));
            glUploadGpuMaskNVX = Marshal.GetDelegateForFunctionPointer<GLUploadGpuMaskNVX>(loader.Invoke("glUploadGpuMaskNVX"));
            glMulticastViewportArrayvNVX = Marshal.GetDelegateForFunctionPointer<GLMulticastViewportArrayvNVX>(loader.Invoke("glMulticastViewportArrayvNVX"));
            glMulticastViewportPositionWScaleNVX = Marshal.GetDelegateForFunctionPointer<GLMulticastViewportPositionWScaleNVX>(loader.Invoke("glMulticastViewportPositionWScaleNVX"));
            glMulticastScissorArrayvNVX = Marshal.GetDelegateForFunctionPointer<GLMulticastScissorArrayvNVX>(loader.Invoke("glMulticastScissorArrayvNVX"));
            glAsyncCopyBufferSubDataNVX = Marshal.GetDelegateForFunctionPointer<GLAsyncCopyBufferSubDataNVX>(loader.Invoke("glAsyncCopyBufferSubDataNVX"));
            glAsyncCopyImageSubDataNVX = Marshal.GetDelegateForFunctionPointer<GLAsyncCopyImageSubDataNVX>(loader.Invoke("glAsyncCopyImageSubDataNVX"));
            glCreateProgressFenceNVX = Marshal.GetDelegateForFunctionPointer<GLCreateProgressFenceNVX>(loader.Invoke("glCreateProgressFenceNVX"));
            glSignalSemaphoreui64NVX = Marshal.GetDelegateForFunctionPointer<GLSignalSemaphoreui64NVX>(loader.Invoke("glSignalSemaphoreui64NVX"));
            glWaitSemaphoreui64NVX = Marshal.GetDelegateForFunctionPointer<GLWaitSemaphoreui64NVX>(loader.Invoke("glWaitSemaphoreui64NVX"));
            glClientWaitSemaphoreui64NVX = Marshal.GetDelegateForFunctionPointer<GLClientWaitSemaphoreui64NVX>(loader.Invoke("glClientWaitSemaphoreui64NVX"));
            glGetMemoryObjectDetachedResourcesuivNV = Marshal.GetDelegateForFunctionPointer<GLGetMemoryObjectDetachedResourcesuivNV>(loader.Invoke("glGetMemoryObjectDetachedResourcesuivNV"));
            glResetMemoryObjectParameterNV = Marshal.GetDelegateForFunctionPointer<GLResetMemoryObjectParameterNV>(loader.Invoke("glResetMemoryObjectParameterNV"));
            glTexAttachMemoryNV = Marshal.GetDelegateForFunctionPointer<GLTexAttachMemoryNV>(loader.Invoke("glTexAttachMemoryNV"));
            glBufferAttachMemoryNV = Marshal.GetDelegateForFunctionPointer<GLBufferAttachMemoryNV>(loader.Invoke("glBufferAttachMemoryNV"));
            glTextureAttachMemoryNV = Marshal.GetDelegateForFunctionPointer<GLTextureAttachMemoryNV>(loader.Invoke("glTextureAttachMemoryNV"));
            glNamedBufferAttachMemoryNV = Marshal.GetDelegateForFunctionPointer<GLNamedBufferAttachMemoryNV>(loader.Invoke("glNamedBufferAttachMemoryNV"));
            glBufferPageCommitmentMemNV = Marshal.GetDelegateForFunctionPointer<GLBufferPageCommitmentMemNV>(loader.Invoke("glBufferPageCommitmentMemNV"));
            glTexPageCommitmentMemNV = Marshal.GetDelegateForFunctionPointer<GLTexPageCommitmentMemNV>(loader.Invoke("glTexPageCommitmentMemNV"));
            glNamedBufferPageCommitmentMemNV = Marshal.GetDelegateForFunctionPointer<GLNamedBufferPageCommitmentMemNV>(loader.Invoke("glNamedBufferPageCommitmentMemNV"));
            glTexturePageCommitmentMemNV = Marshal.GetDelegateForFunctionPointer<GLTexturePageCommitmentMemNV>(loader.Invoke("glTexturePageCommitmentMemNV"));
            glDrawMeshTasksNV = Marshal.GetDelegateForFunctionPointer<GLDrawMeshTasksNV>(loader.Invoke("glDrawMeshTasksNV"));
            glDrawMeshTasksIndirectNV = Marshal.GetDelegateForFunctionPointer<GLDrawMeshTasksIndirectNV>(loader.Invoke("glDrawMeshTasksIndirectNV"));
            glMultiDrawMeshTasksIndirectNV = Marshal.GetDelegateForFunctionPointer<GLMultiDrawMeshTasksIndirectNV>(loader.Invoke("glMultiDrawMeshTasksIndirectNV"));
            glMultiDrawMeshTasksIndirectCountNV = Marshal.GetDelegateForFunctionPointer<GLMultiDrawMeshTasksIndirectCountNV>(loader.Invoke("glMultiDrawMeshTasksIndirectCountNV"));
            glUniformMatrix2x3fvNV = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2x3fvNV>(loader.Invoke("glUniformMatrix2x3fvNV"));
            glUniformMatrix3x2fvNV = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3x2fvNV>(loader.Invoke("glUniformMatrix3x2fvNV"));
            glUniformMatrix2x4fvNV = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2x4fvNV>(loader.Invoke("glUniformMatrix2x4fvNV"));
            glUniformMatrix4x2fvNV = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4x2fvNV>(loader.Invoke("glUniformMatrix4x2fvNV"));
            glUniformMatrix3x4fvNV = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3x4fvNV>(loader.Invoke("glUniformMatrix3x4fvNV"));
            glUniformMatrix4x3fvNV = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4x3fvNV>(loader.Invoke("glUniformMatrix4x3fvNV"));
            glGenOcclusionQueriesNV = Marshal.GetDelegateForFunctionPointer<GLGenOcclusionQueriesNV>(loader.Invoke("glGenOcclusionQueriesNV"));
            glDeleteOcclusionQueriesNV = Marshal.GetDelegateForFunctionPointer<GLDeleteOcclusionQueriesNV>(loader.Invoke("glDeleteOcclusionQueriesNV"));
            glIsOcclusionQueryNV = Marshal.GetDelegateForFunctionPointer<GLIsOcclusionQueryNV>(loader.Invoke("glIsOcclusionQueryNV"));
            glBeginOcclusionQueryNV = Marshal.GetDelegateForFunctionPointer<GLBeginOcclusionQueryNV>(loader.Invoke("glBeginOcclusionQueryNV"));
            glEndOcclusionQueryNV = Marshal.GetDelegateForFunctionPointer<GLEndOcclusionQueryNV>(loader.Invoke("glEndOcclusionQueryNV"));
            glGetOcclusionQueryivNV = Marshal.GetDelegateForFunctionPointer<GLGetOcclusionQueryivNV>(loader.Invoke("glGetOcclusionQueryivNV"));
            glGetOcclusionQueryuivNV = Marshal.GetDelegateForFunctionPointer<GLGetOcclusionQueryuivNV>(loader.Invoke("glGetOcclusionQueryuivNV"));
            glProgramBufferParametersfvNV = Marshal.GetDelegateForFunctionPointer<GLProgramBufferParametersfvNV>(loader.Invoke("glProgramBufferParametersfvNV"));
            glProgramBufferParametersIivNV = Marshal.GetDelegateForFunctionPointer<GLProgramBufferParametersIivNV>(loader.Invoke("glProgramBufferParametersIivNV"));
            glProgramBufferParametersIuivNV = Marshal.GetDelegateForFunctionPointer<GLProgramBufferParametersIuivNV>(loader.Invoke("glProgramBufferParametersIuivNV"));
            glGenPathsNV = Marshal.GetDelegateForFunctionPointer<GLGenPathsNV>(loader.Invoke("glGenPathsNV"));
            glDeletePathsNV = Marshal.GetDelegateForFunctionPointer<GLDeletePathsNV>(loader.Invoke("glDeletePathsNV"));
            glIsPathNV = Marshal.GetDelegateForFunctionPointer<GLIsPathNV>(loader.Invoke("glIsPathNV"));
            glPathCommandsNV = Marshal.GetDelegateForFunctionPointer<GLPathCommandsNV>(loader.Invoke("glPathCommandsNV"));
            glPathCoordsNV = Marshal.GetDelegateForFunctionPointer<GLPathCoordsNV>(loader.Invoke("glPathCoordsNV"));
            glPathSubCommandsNV = Marshal.GetDelegateForFunctionPointer<GLPathSubCommandsNV>(loader.Invoke("glPathSubCommandsNV"));
            glPathSubCoordsNV = Marshal.GetDelegateForFunctionPointer<GLPathSubCoordsNV>(loader.Invoke("glPathSubCoordsNV"));
            glPathStringNV = Marshal.GetDelegateForFunctionPointer<GLPathStringNV>(loader.Invoke("glPathStringNV"));
            glPathGlyphsNV = Marshal.GetDelegateForFunctionPointer<GLPathGlyphsNV>(loader.Invoke("glPathGlyphsNV"));
            glPathGlyphRangeNV = Marshal.GetDelegateForFunctionPointer<GLPathGlyphRangeNV>(loader.Invoke("glPathGlyphRangeNV"));
            glWeightPathsNV = Marshal.GetDelegateForFunctionPointer<GLWeightPathsNV>(loader.Invoke("glWeightPathsNV"));
            glCopyPathNV = Marshal.GetDelegateForFunctionPointer<GLCopyPathNV>(loader.Invoke("glCopyPathNV"));
            glInterpolatePathsNV = Marshal.GetDelegateForFunctionPointer<GLInterpolatePathsNV>(loader.Invoke("glInterpolatePathsNV"));
            glTransformPathNV = Marshal.GetDelegateForFunctionPointer<GLTransformPathNV>(loader.Invoke("glTransformPathNV"));
            glPathParameterivNV = Marshal.GetDelegateForFunctionPointer<GLPathParameterivNV>(loader.Invoke("glPathParameterivNV"));
            glPathParameteriNV = Marshal.GetDelegateForFunctionPointer<GLPathParameteriNV>(loader.Invoke("glPathParameteriNV"));
            glPathParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLPathParameterfvNV>(loader.Invoke("glPathParameterfvNV"));
            glPathParameterfNV = Marshal.GetDelegateForFunctionPointer<GLPathParameterfNV>(loader.Invoke("glPathParameterfNV"));
            glPathDashArrayNV = Marshal.GetDelegateForFunctionPointer<GLPathDashArrayNV>(loader.Invoke("glPathDashArrayNV"));
            glPathStencilFuncNV = Marshal.GetDelegateForFunctionPointer<GLPathStencilFuncNV>(loader.Invoke("glPathStencilFuncNV"));
            glPathStencilDepthOffsetNV = Marshal.GetDelegateForFunctionPointer<GLPathStencilDepthOffsetNV>(loader.Invoke("glPathStencilDepthOffsetNV"));
            glStencilFillPathNV = Marshal.GetDelegateForFunctionPointer<GLStencilFillPathNV>(loader.Invoke("glStencilFillPathNV"));
            glStencilStrokePathNV = Marshal.GetDelegateForFunctionPointer<GLStencilStrokePathNV>(loader.Invoke("glStencilStrokePathNV"));
            glStencilFillPathInstancedNV = Marshal.GetDelegateForFunctionPointer<GLStencilFillPathInstancedNV>(loader.Invoke("glStencilFillPathInstancedNV"));
            glStencilStrokePathInstancedNV = Marshal.GetDelegateForFunctionPointer<GLStencilStrokePathInstancedNV>(loader.Invoke("glStencilStrokePathInstancedNV"));
            glPathCoverDepthFuncNV = Marshal.GetDelegateForFunctionPointer<GLPathCoverDepthFuncNV>(loader.Invoke("glPathCoverDepthFuncNV"));
            glCoverFillPathNV = Marshal.GetDelegateForFunctionPointer<GLCoverFillPathNV>(loader.Invoke("glCoverFillPathNV"));
            glCoverStrokePathNV = Marshal.GetDelegateForFunctionPointer<GLCoverStrokePathNV>(loader.Invoke("glCoverStrokePathNV"));
            glCoverFillPathInstancedNV = Marshal.GetDelegateForFunctionPointer<GLCoverFillPathInstancedNV>(loader.Invoke("glCoverFillPathInstancedNV"));
            glCoverStrokePathInstancedNV = Marshal.GetDelegateForFunctionPointer<GLCoverStrokePathInstancedNV>(loader.Invoke("glCoverStrokePathInstancedNV"));
            glGetPathParameterivNV = Marshal.GetDelegateForFunctionPointer<GLGetPathParameterivNV>(loader.Invoke("glGetPathParameterivNV"));
            glGetPathParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetPathParameterfvNV>(loader.Invoke("glGetPathParameterfvNV"));
            glGetPathCommandsNV = Marshal.GetDelegateForFunctionPointer<GLGetPathCommandsNV>(loader.Invoke("glGetPathCommandsNV"));
            glGetPathCoordsNV = Marshal.GetDelegateForFunctionPointer<GLGetPathCoordsNV>(loader.Invoke("glGetPathCoordsNV"));
            glGetPathDashArrayNV = Marshal.GetDelegateForFunctionPointer<GLGetPathDashArrayNV>(loader.Invoke("glGetPathDashArrayNV"));
            glGetPathMetricsNV = Marshal.GetDelegateForFunctionPointer<GLGetPathMetricsNV>(loader.Invoke("glGetPathMetricsNV"));
            glGetPathMetricRangeNV = Marshal.GetDelegateForFunctionPointer<GLGetPathMetricRangeNV>(loader.Invoke("glGetPathMetricRangeNV"));
            glGetPathSpacingNV = Marshal.GetDelegateForFunctionPointer<GLGetPathSpacingNV>(loader.Invoke("glGetPathSpacingNV"));
            glIsPointInFillPathNV = Marshal.GetDelegateForFunctionPointer<GLIsPointInFillPathNV>(loader.Invoke("glIsPointInFillPathNV"));
            glIsPointInStrokePathNV = Marshal.GetDelegateForFunctionPointer<GLIsPointInStrokePathNV>(loader.Invoke("glIsPointInStrokePathNV"));
            glGetPathLengthNV = Marshal.GetDelegateForFunctionPointer<GLGetPathLengthNV>(loader.Invoke("glGetPathLengthNV"));
            glPointAlongPathNV = Marshal.GetDelegateForFunctionPointer<GLPointAlongPathNV>(loader.Invoke("glPointAlongPathNV"));
            glMatrixLoad3x2fNV = Marshal.GetDelegateForFunctionPointer<GLMatrixLoad3x2fNV>(loader.Invoke("glMatrixLoad3x2fNV"));
            glMatrixLoad3x3fNV = Marshal.GetDelegateForFunctionPointer<GLMatrixLoad3x3fNV>(loader.Invoke("glMatrixLoad3x3fNV"));
            glMatrixLoadTranspose3x3fNV = Marshal.GetDelegateForFunctionPointer<GLMatrixLoadTranspose3x3fNV>(loader.Invoke("glMatrixLoadTranspose3x3fNV"));
            glMatrixMult3x2fNV = Marshal.GetDelegateForFunctionPointer<GLMatrixMult3x2fNV>(loader.Invoke("glMatrixMult3x2fNV"));
            glMatrixMult3x3fNV = Marshal.GetDelegateForFunctionPointer<GLMatrixMult3x3fNV>(loader.Invoke("glMatrixMult3x3fNV"));
            glMatrixMultTranspose3x3fNV = Marshal.GetDelegateForFunctionPointer<GLMatrixMultTranspose3x3fNV>(loader.Invoke("glMatrixMultTranspose3x3fNV"));
            glStencilThenCoverFillPathNV = Marshal.GetDelegateForFunctionPointer<GLStencilThenCoverFillPathNV>(loader.Invoke("glStencilThenCoverFillPathNV"));
            glStencilThenCoverStrokePathNV = Marshal.GetDelegateForFunctionPointer<GLStencilThenCoverStrokePathNV>(loader.Invoke("glStencilThenCoverStrokePathNV"));
            glStencilThenCoverFillPathInstancedNV = Marshal.GetDelegateForFunctionPointer<GLStencilThenCoverFillPathInstancedNV>(loader.Invoke("glStencilThenCoverFillPathInstancedNV"));
            glStencilThenCoverStrokePathInstancedNV = Marshal.GetDelegateForFunctionPointer<GLStencilThenCoverStrokePathInstancedNV>(loader.Invoke("glStencilThenCoverStrokePathInstancedNV"));
            glPathGlyphIndexRangeNV = Marshal.GetDelegateForFunctionPointer<GLPathGlyphIndexRangeNV>(loader.Invoke("glPathGlyphIndexRangeNV"));
            glPathGlyphIndexArrayNV = Marshal.GetDelegateForFunctionPointer<GLPathGlyphIndexArrayNV>(loader.Invoke("glPathGlyphIndexArrayNV"));
            glPathMemoryGlyphIndexArrayNV = Marshal.GetDelegateForFunctionPointer<GLPathMemoryGlyphIndexArrayNV>(loader.Invoke("glPathMemoryGlyphIndexArrayNV"));
            glProgramPathFragmentInputGenNV = Marshal.GetDelegateForFunctionPointer<GLProgramPathFragmentInputGenNV>(loader.Invoke("glProgramPathFragmentInputGenNV"));
            glGetProgramResourcefvNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramResourcefvNV>(loader.Invoke("glGetProgramResourcefvNV"));
            glPathColorGenNV = Marshal.GetDelegateForFunctionPointer<GLPathColorGenNV>(loader.Invoke("glPathColorGenNV"));
            glPathTexGenNV = Marshal.GetDelegateForFunctionPointer<GLPathTexGenNV>(loader.Invoke("glPathTexGenNV"));
            glPathFogGenNV = Marshal.GetDelegateForFunctionPointer<GLPathFogGenNV>(loader.Invoke("glPathFogGenNV"));
            glGetPathColorGenivNV = Marshal.GetDelegateForFunctionPointer<GLGetPathColorGenivNV>(loader.Invoke("glGetPathColorGenivNV"));
            glGetPathColorGenfvNV = Marshal.GetDelegateForFunctionPointer<GLGetPathColorGenfvNV>(loader.Invoke("glGetPathColorGenfvNV"));
            glGetPathTexGenivNV = Marshal.GetDelegateForFunctionPointer<GLGetPathTexGenivNV>(loader.Invoke("glGetPathTexGenivNV"));
            glGetPathTexGenfvNV = Marshal.GetDelegateForFunctionPointer<GLGetPathTexGenfvNV>(loader.Invoke("glGetPathTexGenfvNV"));
            glPixelDataRangeNV = Marshal.GetDelegateForFunctionPointer<GLPixelDataRangeNV>(loader.Invoke("glPixelDataRangeNV"));
            glFlushPixelDataRangeNV = Marshal.GetDelegateForFunctionPointer<GLFlushPixelDataRangeNV>(loader.Invoke("glFlushPixelDataRangeNV"));
            glPointParameteriNV = Marshal.GetDelegateForFunctionPointer<GLPointParameteriNV>(loader.Invoke("glPointParameteriNV"));
            glPointParameterivNV = Marshal.GetDelegateForFunctionPointer<GLPointParameterivNV>(loader.Invoke("glPointParameterivNV"));
            glPolygonModeNV = Marshal.GetDelegateForFunctionPointer<GLPolygonModeNV>(loader.Invoke("glPolygonModeNV"));
            glPresentFrameKeyedNV = Marshal.GetDelegateForFunctionPointer<GLPresentFrameKeyedNV>(loader.Invoke("glPresentFrameKeyedNV"));
            glPresentFrameDualFillNV = Marshal.GetDelegateForFunctionPointer<GLPresentFrameDualFillNV>(loader.Invoke("glPresentFrameDualFillNV"));
            glGetVideoivNV = Marshal.GetDelegateForFunctionPointer<GLGetVideoivNV>(loader.Invoke("glGetVideoivNV"));
            glGetVideouivNV = Marshal.GetDelegateForFunctionPointer<GLGetVideouivNV>(loader.Invoke("glGetVideouivNV"));
            glGetVideoi64vNV = Marshal.GetDelegateForFunctionPointer<GLGetVideoi64vNV>(loader.Invoke("glGetVideoi64vNV"));
            glGetVideoui64vNV = Marshal.GetDelegateForFunctionPointer<GLGetVideoui64vNV>(loader.Invoke("glGetVideoui64vNV"));
            glPrimitiveRestartNV = Marshal.GetDelegateForFunctionPointer<GLPrimitiveRestartNV>(loader.Invoke("glPrimitiveRestartNV"));
            glPrimitiveRestartIndexNV = Marshal.GetDelegateForFunctionPointer<GLPrimitiveRestartIndexNV>(loader.Invoke("glPrimitiveRestartIndexNV"));
            glQueryResourceNV = Marshal.GetDelegateForFunctionPointer<GLQueryResourceNV>(loader.Invoke("glQueryResourceNV"));
            glGenQueryResourceTagNV = Marshal.GetDelegateForFunctionPointer<GLGenQueryResourceTagNV>(loader.Invoke("glGenQueryResourceTagNV"));
            glDeleteQueryResourceTagNV = Marshal.GetDelegateForFunctionPointer<GLDeleteQueryResourceTagNV>(loader.Invoke("glDeleteQueryResourceTagNV"));
            glQueryResourceTagNV = Marshal.GetDelegateForFunctionPointer<GLQueryResourceTagNV>(loader.Invoke("glQueryResourceTagNV"));
            glReadBufferNV = Marshal.GetDelegateForFunctionPointer<GLReadBufferNV>(loader.Invoke("glReadBufferNV"));
            glCombinerParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLCombinerParameterfvNV>(loader.Invoke("glCombinerParameterfvNV"));
            glCombinerParameterfNV = Marshal.GetDelegateForFunctionPointer<GLCombinerParameterfNV>(loader.Invoke("glCombinerParameterfNV"));
            glCombinerParameterivNV = Marshal.GetDelegateForFunctionPointer<GLCombinerParameterivNV>(loader.Invoke("glCombinerParameterivNV"));
            glCombinerParameteriNV = Marshal.GetDelegateForFunctionPointer<GLCombinerParameteriNV>(loader.Invoke("glCombinerParameteriNV"));
            glCombinerInputNV = Marshal.GetDelegateForFunctionPointer<GLCombinerInputNV>(loader.Invoke("glCombinerInputNV"));
            glCombinerOutputNV = Marshal.GetDelegateForFunctionPointer<GLCombinerOutputNV>(loader.Invoke("glCombinerOutputNV"));
            glFinalCombinerInputNV = Marshal.GetDelegateForFunctionPointer<GLFinalCombinerInputNV>(loader.Invoke("glFinalCombinerInputNV"));
            glGetCombinerInputParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetCombinerInputParameterfvNV>(loader.Invoke("glGetCombinerInputParameterfvNV"));
            glGetCombinerInputParameterivNV = Marshal.GetDelegateForFunctionPointer<GLGetCombinerInputParameterivNV>(loader.Invoke("glGetCombinerInputParameterivNV"));
            glGetCombinerOutputParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetCombinerOutputParameterfvNV>(loader.Invoke("glGetCombinerOutputParameterfvNV"));
            glGetCombinerOutputParameterivNV = Marshal.GetDelegateForFunctionPointer<GLGetCombinerOutputParameterivNV>(loader.Invoke("glGetCombinerOutputParameterivNV"));
            glGetFinalCombinerInputParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetFinalCombinerInputParameterfvNV>(loader.Invoke("glGetFinalCombinerInputParameterfvNV"));
            glGetFinalCombinerInputParameterivNV = Marshal.GetDelegateForFunctionPointer<GLGetFinalCombinerInputParameterivNV>(loader.Invoke("glGetFinalCombinerInputParameterivNV"));
            glCombinerStageParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLCombinerStageParameterfvNV>(loader.Invoke("glCombinerStageParameterfvNV"));
            glGetCombinerStageParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetCombinerStageParameterfvNV>(loader.Invoke("glGetCombinerStageParameterfvNV"));
            glFramebufferSampleLocationsfvNV = Marshal.GetDelegateForFunctionPointer<GLFramebufferSampleLocationsfvNV>(loader.Invoke("glFramebufferSampleLocationsfvNV"));
            glNamedFramebufferSampleLocationsfvNV = Marshal.GetDelegateForFunctionPointer<GLNamedFramebufferSampleLocationsfvNV>(loader.Invoke("glNamedFramebufferSampleLocationsfvNV"));
            glResolveDepthValuesNV = Marshal.GetDelegateForFunctionPointer<GLResolveDepthValuesNV>(loader.Invoke("glResolveDepthValuesNV"));
            glScissorExclusiveNV = Marshal.GetDelegateForFunctionPointer<GLScissorExclusiveNV>(loader.Invoke("glScissorExclusiveNV"));
            glScissorExclusiveArrayvNV = Marshal.GetDelegateForFunctionPointer<GLScissorExclusiveArrayvNV>(loader.Invoke("glScissorExclusiveArrayvNV"));
            glMakeBufferResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeBufferResidentNV>(loader.Invoke("glMakeBufferResidentNV"));
            glMakeBufferNonResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeBufferNonResidentNV>(loader.Invoke("glMakeBufferNonResidentNV"));
            glIsBufferResidentNV = Marshal.GetDelegateForFunctionPointer<GLIsBufferResidentNV>(loader.Invoke("glIsBufferResidentNV"));
            glMakeNamedBufferResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeNamedBufferResidentNV>(loader.Invoke("glMakeNamedBufferResidentNV"));
            glMakeNamedBufferNonResidentNV = Marshal.GetDelegateForFunctionPointer<GLMakeNamedBufferNonResidentNV>(loader.Invoke("glMakeNamedBufferNonResidentNV"));
            glIsNamedBufferResidentNV = Marshal.GetDelegateForFunctionPointer<GLIsNamedBufferResidentNV>(loader.Invoke("glIsNamedBufferResidentNV"));
            glGetBufferParameterui64vNV = Marshal.GetDelegateForFunctionPointer<GLGetBufferParameterui64vNV>(loader.Invoke("glGetBufferParameterui64vNV"));
            glGetNamedBufferParameterui64vNV = Marshal.GetDelegateForFunctionPointer<GLGetNamedBufferParameterui64vNV>(loader.Invoke("glGetNamedBufferParameterui64vNV"));
            glGetIntegerui64vNV = Marshal.GetDelegateForFunctionPointer<GLGetIntegerui64vNV>(loader.Invoke("glGetIntegerui64vNV"));
            glUniformui64NV = Marshal.GetDelegateForFunctionPointer<GLUniformui64NV>(loader.Invoke("glUniformui64NV"));
            glUniformui64vNV = Marshal.GetDelegateForFunctionPointer<GLUniformui64vNV>(loader.Invoke("glUniformui64vNV"));
            glProgramUniformui64NV = Marshal.GetDelegateForFunctionPointer<GLProgramUniformui64NV>(loader.Invoke("glProgramUniformui64NV"));
            glProgramUniformui64vNV = Marshal.GetDelegateForFunctionPointer<GLProgramUniformui64vNV>(loader.Invoke("glProgramUniformui64vNV"));
            glBindShadingRateImageNV = Marshal.GetDelegateForFunctionPointer<GLBindShadingRateImageNV>(loader.Invoke("glBindShadingRateImageNV"));
            glGetShadingRateImagePaletteNV = Marshal.GetDelegateForFunctionPointer<GLGetShadingRateImagePaletteNV>(loader.Invoke("glGetShadingRateImagePaletteNV"));
            glGetShadingRateSampleLocationivNV = Marshal.GetDelegateForFunctionPointer<GLGetShadingRateSampleLocationivNV>(loader.Invoke("glGetShadingRateSampleLocationivNV"));
            glShadingRateImageBarrierNV = Marshal.GetDelegateForFunctionPointer<GLShadingRateImageBarrierNV>(loader.Invoke("glShadingRateImageBarrierNV"));
            glShadingRateImagePaletteNV = Marshal.GetDelegateForFunctionPointer<GLShadingRateImagePaletteNV>(loader.Invoke("glShadingRateImagePaletteNV"));
            glShadingRateSampleOrderNV = Marshal.GetDelegateForFunctionPointer<GLShadingRateSampleOrderNV>(loader.Invoke("glShadingRateSampleOrderNV"));
            glShadingRateSampleOrderCustomNV = Marshal.GetDelegateForFunctionPointer<GLShadingRateSampleOrderCustomNV>(loader.Invoke("glShadingRateSampleOrderCustomNV"));
            glTextureBarrierNV = Marshal.GetDelegateForFunctionPointer<GLTextureBarrierNV>(loader.Invoke("glTextureBarrierNV"));
            glTexImage2DMultisampleCoverageNV = Marshal.GetDelegateForFunctionPointer<GLTexImage2DMultisampleCoverageNV>(loader.Invoke("glTexImage2DMultisampleCoverageNV"));
            glTexImage3DMultisampleCoverageNV = Marshal.GetDelegateForFunctionPointer<GLTexImage3DMultisampleCoverageNV>(loader.Invoke("glTexImage3DMultisampleCoverageNV"));
            glTextureImage2DMultisampleNV = Marshal.GetDelegateForFunctionPointer<GLTextureImage2DMultisampleNV>(loader.Invoke("glTextureImage2DMultisampleNV"));
            glTextureImage3DMultisampleNV = Marshal.GetDelegateForFunctionPointer<GLTextureImage3DMultisampleNV>(loader.Invoke("glTextureImage3DMultisampleNV"));
            glTextureImage2DMultisampleCoverageNV = Marshal.GetDelegateForFunctionPointer<GLTextureImage2DMultisampleCoverageNV>(loader.Invoke("glTextureImage2DMultisampleCoverageNV"));
            glTextureImage3DMultisampleCoverageNV = Marshal.GetDelegateForFunctionPointer<GLTextureImage3DMultisampleCoverageNV>(loader.Invoke("glTextureImage3DMultisampleCoverageNV"));
            glBeginTransformFeedbackNV = Marshal.GetDelegateForFunctionPointer<GLBeginTransformFeedbackNV>(loader.Invoke("glBeginTransformFeedbackNV"));
            glEndTransformFeedbackNV = Marshal.GetDelegateForFunctionPointer<GLEndTransformFeedbackNV>(loader.Invoke("glEndTransformFeedbackNV"));
            glTransformFeedbackAttribsNV = Marshal.GetDelegateForFunctionPointer<GLTransformFeedbackAttribsNV>(loader.Invoke("glTransformFeedbackAttribsNV"));
            glBindBufferRangeNV = Marshal.GetDelegateForFunctionPointer<GLBindBufferRangeNV>(loader.Invoke("glBindBufferRangeNV"));
            glBindBufferOffsetNV = Marshal.GetDelegateForFunctionPointer<GLBindBufferOffsetNV>(loader.Invoke("glBindBufferOffsetNV"));
            glBindBufferBaseNV = Marshal.GetDelegateForFunctionPointer<GLBindBufferBaseNV>(loader.Invoke("glBindBufferBaseNV"));
            glTransformFeedbackVaryingsNV = Marshal.GetDelegateForFunctionPointer<GLTransformFeedbackVaryingsNV>(loader.Invoke("glTransformFeedbackVaryingsNV"));
            glActiveVaryingNV = Marshal.GetDelegateForFunctionPointer<GLActiveVaryingNV>(loader.Invoke("glActiveVaryingNV"));
            glGetVaryingLocationNV = Marshal.GetDelegateForFunctionPointer<GLGetVaryingLocationNV>(loader.Invoke("glGetVaryingLocationNV"));
            glGetActiveVaryingNV = Marshal.GetDelegateForFunctionPointer<GLGetActiveVaryingNV>(loader.Invoke("glGetActiveVaryingNV"));
            glGetTransformFeedbackVaryingNV = Marshal.GetDelegateForFunctionPointer<GLGetTransformFeedbackVaryingNV>(loader.Invoke("glGetTransformFeedbackVaryingNV"));
            glTransformFeedbackStreamAttribsNV = Marshal.GetDelegateForFunctionPointer<GLTransformFeedbackStreamAttribsNV>(loader.Invoke("glTransformFeedbackStreamAttribsNV"));
            glBindTransformFeedbackNV = Marshal.GetDelegateForFunctionPointer<GLBindTransformFeedbackNV>(loader.Invoke("glBindTransformFeedbackNV"));
            glDeleteTransformFeedbacksNV = Marshal.GetDelegateForFunctionPointer<GLDeleteTransformFeedbacksNV>(loader.Invoke("glDeleteTransformFeedbacksNV"));
            glGenTransformFeedbacksNV = Marshal.GetDelegateForFunctionPointer<GLGenTransformFeedbacksNV>(loader.Invoke("glGenTransformFeedbacksNV"));
            glIsTransformFeedbackNV = Marshal.GetDelegateForFunctionPointer<GLIsTransformFeedbackNV>(loader.Invoke("glIsTransformFeedbackNV"));
            glPauseTransformFeedbackNV = Marshal.GetDelegateForFunctionPointer<GLPauseTransformFeedbackNV>(loader.Invoke("glPauseTransformFeedbackNV"));
            glResumeTransformFeedbackNV = Marshal.GetDelegateForFunctionPointer<GLResumeTransformFeedbackNV>(loader.Invoke("glResumeTransformFeedbackNV"));
            glDrawTransformFeedbackNV = Marshal.GetDelegateForFunctionPointer<GLDrawTransformFeedbackNV>(loader.Invoke("glDrawTransformFeedbackNV"));
            glVDPAUInitNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUInitNV>(loader.Invoke("glVDPAUInitNV"));
            glVDPAUFiniNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUFiniNV>(loader.Invoke("glVDPAUFiniNV"));
            glVDPAURegisterVideoSurfaceNV = Marshal.GetDelegateForFunctionPointer<GLVDPAURegisterVideoSurfaceNV>(loader.Invoke("glVDPAURegisterVideoSurfaceNV"));
            glVDPAURegisterOutputSurfaceNV = Marshal.GetDelegateForFunctionPointer<GLVDPAURegisterOutputSurfaceNV>(loader.Invoke("glVDPAURegisterOutputSurfaceNV"));
            glVDPAUIsSurfaceNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUIsSurfaceNV>(loader.Invoke("glVDPAUIsSurfaceNV"));
            glVDPAUUnregisterSurfaceNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUUnregisterSurfaceNV>(loader.Invoke("glVDPAUUnregisterSurfaceNV"));
            glVDPAUGetSurfaceivNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUGetSurfaceivNV>(loader.Invoke("glVDPAUGetSurfaceivNV"));
            glVDPAUSurfaceAccessNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUSurfaceAccessNV>(loader.Invoke("glVDPAUSurfaceAccessNV"));
            glVDPAUMapSurfacesNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUMapSurfacesNV>(loader.Invoke("glVDPAUMapSurfacesNV"));
            glVDPAUUnmapSurfacesNV = Marshal.GetDelegateForFunctionPointer<GLVDPAUUnmapSurfacesNV>(loader.Invoke("glVDPAUUnmapSurfacesNV"));
            glVDPAURegisterVideoSurfaceWithPictureStructureNV = Marshal.GetDelegateForFunctionPointer<GLVDPAURegisterVideoSurfaceWithPictureStructureNV>(loader.Invoke("glVDPAURegisterVideoSurfaceWithPictureStructureNV"));
            glFlushVertexArrayRangeNV = Marshal.GetDelegateForFunctionPointer<GLFlushVertexArrayRangeNV>(loader.Invoke("glFlushVertexArrayRangeNV"));
            glVertexArrayRangeNV = Marshal.GetDelegateForFunctionPointer<GLVertexArrayRangeNV>(loader.Invoke("glVertexArrayRangeNV"));
            glVertexAttribL1i64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1i64NV>(loader.Invoke("glVertexAttribL1i64NV"));
            glVertexAttribL2i64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2i64NV>(loader.Invoke("glVertexAttribL2i64NV"));
            glVertexAttribL3i64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3i64NV>(loader.Invoke("glVertexAttribL3i64NV"));
            glVertexAttribL4i64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4i64NV>(loader.Invoke("glVertexAttribL4i64NV"));
            glVertexAttribL1i64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1i64vNV>(loader.Invoke("glVertexAttribL1i64vNV"));
            glVertexAttribL2i64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2i64vNV>(loader.Invoke("glVertexAttribL2i64vNV"));
            glVertexAttribL3i64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3i64vNV>(loader.Invoke("glVertexAttribL3i64vNV"));
            glVertexAttribL4i64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4i64vNV>(loader.Invoke("glVertexAttribL4i64vNV"));
            glVertexAttribL1ui64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1ui64NV>(loader.Invoke("glVertexAttribL1ui64NV"));
            glVertexAttribL2ui64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2ui64NV>(loader.Invoke("glVertexAttribL2ui64NV"));
            glVertexAttribL3ui64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3ui64NV>(loader.Invoke("glVertexAttribL3ui64NV"));
            glVertexAttribL4ui64NV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4ui64NV>(loader.Invoke("glVertexAttribL4ui64NV"));
            glVertexAttribL1ui64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL1ui64vNV>(loader.Invoke("glVertexAttribL1ui64vNV"));
            glVertexAttribL2ui64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL2ui64vNV>(loader.Invoke("glVertexAttribL2ui64vNV"));
            glVertexAttribL3ui64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL3ui64vNV>(loader.Invoke("glVertexAttribL3ui64vNV"));
            glVertexAttribL4ui64vNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribL4ui64vNV>(loader.Invoke("glVertexAttribL4ui64vNV"));
            glGetVertexAttribLi64vNV = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribLi64vNV>(loader.Invoke("glGetVertexAttribLi64vNV"));
            glGetVertexAttribLui64vNV = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribLui64vNV>(loader.Invoke("glGetVertexAttribLui64vNV"));
            glVertexAttribLFormatNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribLFormatNV>(loader.Invoke("glVertexAttribLFormatNV"));
            glBufferAddressRangeNV = Marshal.GetDelegateForFunctionPointer<GLBufferAddressRangeNV>(loader.Invoke("glBufferAddressRangeNV"));
            glVertexFormatNV = Marshal.GetDelegateForFunctionPointer<GLVertexFormatNV>(loader.Invoke("glVertexFormatNV"));
            glNormalFormatNV = Marshal.GetDelegateForFunctionPointer<GLNormalFormatNV>(loader.Invoke("glNormalFormatNV"));
            glColorFormatNV = Marshal.GetDelegateForFunctionPointer<GLColorFormatNV>(loader.Invoke("glColorFormatNV"));
            glIndexFormatNV = Marshal.GetDelegateForFunctionPointer<GLIndexFormatNV>(loader.Invoke("glIndexFormatNV"));
            glTexCoordFormatNV = Marshal.GetDelegateForFunctionPointer<GLTexCoordFormatNV>(loader.Invoke("glTexCoordFormatNV"));
            glEdgeFlagFormatNV = Marshal.GetDelegateForFunctionPointer<GLEdgeFlagFormatNV>(loader.Invoke("glEdgeFlagFormatNV"));
            glSecondaryColorFormatNV = Marshal.GetDelegateForFunctionPointer<GLSecondaryColorFormatNV>(loader.Invoke("glSecondaryColorFormatNV"));
            glFogCoordFormatNV = Marshal.GetDelegateForFunctionPointer<GLFogCoordFormatNV>(loader.Invoke("glFogCoordFormatNV"));
            glVertexAttribFormatNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribFormatNV>(loader.Invoke("glVertexAttribFormatNV"));
            glVertexAttribIFormatNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribIFormatNV>(loader.Invoke("glVertexAttribIFormatNV"));
            glGetIntegerui64i_vNV = Marshal.GetDelegateForFunctionPointer<GLGetIntegerui64i_vNV>(loader.Invoke("glGetIntegerui64i_vNV"));
            glAreProgramsResidentNV = Marshal.GetDelegateForFunctionPointer<GLAreProgramsResidentNV>(loader.Invoke("glAreProgramsResidentNV"));
            glBindProgramNV = Marshal.GetDelegateForFunctionPointer<GLBindProgramNV>(loader.Invoke("glBindProgramNV"));
            glDeleteProgramsNV = Marshal.GetDelegateForFunctionPointer<GLDeleteProgramsNV>(loader.Invoke("glDeleteProgramsNV"));
            glExecuteProgramNV = Marshal.GetDelegateForFunctionPointer<GLExecuteProgramNV>(loader.Invoke("glExecuteProgramNV"));
            glGenProgramsNV = Marshal.GetDelegateForFunctionPointer<GLGenProgramsNV>(loader.Invoke("glGenProgramsNV"));
            glGetProgramParameterdvNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramParameterdvNV>(loader.Invoke("glGetProgramParameterdvNV"));
            glGetProgramParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramParameterfvNV>(loader.Invoke("glGetProgramParameterfvNV"));
            glGetProgramivNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramivNV>(loader.Invoke("glGetProgramivNV"));
            glGetProgramStringNV = Marshal.GetDelegateForFunctionPointer<GLGetProgramStringNV>(loader.Invoke("glGetProgramStringNV"));
            glGetTrackMatrixivNV = Marshal.GetDelegateForFunctionPointer<GLGetTrackMatrixivNV>(loader.Invoke("glGetTrackMatrixivNV"));
            glGetVertexAttribdvNV = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribdvNV>(loader.Invoke("glGetVertexAttribdvNV"));
            glGetVertexAttribfvNV = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribfvNV>(loader.Invoke("glGetVertexAttribfvNV"));
            glGetVertexAttribivNV = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribivNV>(loader.Invoke("glGetVertexAttribivNV"));
            glGetVertexAttribPointervNV = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribPointervNV>(loader.Invoke("glGetVertexAttribPointervNV"));
            glIsProgramNV = Marshal.GetDelegateForFunctionPointer<GLIsProgramNV>(loader.Invoke("glIsProgramNV"));
            glLoadProgramNV = Marshal.GetDelegateForFunctionPointer<GLLoadProgramNV>(loader.Invoke("glLoadProgramNV"));
            glProgramParameter4dNV = Marshal.GetDelegateForFunctionPointer<GLProgramParameter4dNV>(loader.Invoke("glProgramParameter4dNV"));
            glProgramParameter4dvNV = Marshal.GetDelegateForFunctionPointer<GLProgramParameter4dvNV>(loader.Invoke("glProgramParameter4dvNV"));
            glProgramParameter4fNV = Marshal.GetDelegateForFunctionPointer<GLProgramParameter4fNV>(loader.Invoke("glProgramParameter4fNV"));
            glProgramParameter4fvNV = Marshal.GetDelegateForFunctionPointer<GLProgramParameter4fvNV>(loader.Invoke("glProgramParameter4fvNV"));
            glProgramParameters4dvNV = Marshal.GetDelegateForFunctionPointer<GLProgramParameters4dvNV>(loader.Invoke("glProgramParameters4dvNV"));
            glProgramParameters4fvNV = Marshal.GetDelegateForFunctionPointer<GLProgramParameters4fvNV>(loader.Invoke("glProgramParameters4fvNV"));
            glRequestResidentProgramsNV = Marshal.GetDelegateForFunctionPointer<GLRequestResidentProgramsNV>(loader.Invoke("glRequestResidentProgramsNV"));
            glTrackMatrixNV = Marshal.GetDelegateForFunctionPointer<GLTrackMatrixNV>(loader.Invoke("glTrackMatrixNV"));
            glVertexAttribPointerNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribPointerNV>(loader.Invoke("glVertexAttribPointerNV"));
            glVertexAttrib1dNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1dNV>(loader.Invoke("glVertexAttrib1dNV"));
            glVertexAttrib1dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1dvNV>(loader.Invoke("glVertexAttrib1dvNV"));
            glVertexAttrib1fNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1fNV>(loader.Invoke("glVertexAttrib1fNV"));
            glVertexAttrib1fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1fvNV>(loader.Invoke("glVertexAttrib1fvNV"));
            glVertexAttrib1sNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1sNV>(loader.Invoke("glVertexAttrib1sNV"));
            glVertexAttrib1svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1svNV>(loader.Invoke("glVertexAttrib1svNV"));
            glVertexAttrib2dNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2dNV>(loader.Invoke("glVertexAttrib2dNV"));
            glVertexAttrib2dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2dvNV>(loader.Invoke("glVertexAttrib2dvNV"));
            glVertexAttrib2fNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2fNV>(loader.Invoke("glVertexAttrib2fNV"));
            glVertexAttrib2fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2fvNV>(loader.Invoke("glVertexAttrib2fvNV"));
            glVertexAttrib2sNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2sNV>(loader.Invoke("glVertexAttrib2sNV"));
            glVertexAttrib2svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2svNV>(loader.Invoke("glVertexAttrib2svNV"));
            glVertexAttrib3dNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3dNV>(loader.Invoke("glVertexAttrib3dNV"));
            glVertexAttrib3dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3dvNV>(loader.Invoke("glVertexAttrib3dvNV"));
            glVertexAttrib3fNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3fNV>(loader.Invoke("glVertexAttrib3fNV"));
            glVertexAttrib3fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3fvNV>(loader.Invoke("glVertexAttrib3fvNV"));
            glVertexAttrib3sNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3sNV>(loader.Invoke("glVertexAttrib3sNV"));
            glVertexAttrib3svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3svNV>(loader.Invoke("glVertexAttrib3svNV"));
            glVertexAttrib4dNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4dNV>(loader.Invoke("glVertexAttrib4dNV"));
            glVertexAttrib4dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4dvNV>(loader.Invoke("glVertexAttrib4dvNV"));
            glVertexAttrib4fNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4fNV>(loader.Invoke("glVertexAttrib4fNV"));
            glVertexAttrib4fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4fvNV>(loader.Invoke("glVertexAttrib4fvNV"));
            glVertexAttrib4sNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4sNV>(loader.Invoke("glVertexAttrib4sNV"));
            glVertexAttrib4svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4svNV>(loader.Invoke("glVertexAttrib4svNV"));
            glVertexAttrib4ubNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4ubNV>(loader.Invoke("glVertexAttrib4ubNV"));
            glVertexAttrib4ubvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4ubvNV>(loader.Invoke("glVertexAttrib4ubvNV"));
            glVertexAttribs1dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs1dvNV>(loader.Invoke("glVertexAttribs1dvNV"));
            glVertexAttribs1fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs1fvNV>(loader.Invoke("glVertexAttribs1fvNV"));
            glVertexAttribs1svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs1svNV>(loader.Invoke("glVertexAttribs1svNV"));
            glVertexAttribs2dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs2dvNV>(loader.Invoke("glVertexAttribs2dvNV"));
            glVertexAttribs2fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs2fvNV>(loader.Invoke("glVertexAttribs2fvNV"));
            glVertexAttribs2svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs2svNV>(loader.Invoke("glVertexAttribs2svNV"));
            glVertexAttribs3dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs3dvNV>(loader.Invoke("glVertexAttribs3dvNV"));
            glVertexAttribs3fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs3fvNV>(loader.Invoke("glVertexAttribs3fvNV"));
            glVertexAttribs3svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs3svNV>(loader.Invoke("glVertexAttribs3svNV"));
            glVertexAttribs4dvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs4dvNV>(loader.Invoke("glVertexAttribs4dvNV"));
            glVertexAttribs4fvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs4fvNV>(loader.Invoke("glVertexAttribs4fvNV"));
            glVertexAttribs4svNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs4svNV>(loader.Invoke("glVertexAttribs4svNV"));
            glVertexAttribs4ubvNV = Marshal.GetDelegateForFunctionPointer<GLVertexAttribs4ubvNV>(loader.Invoke("glVertexAttribs4ubvNV"));
            glBeginVideoCaptureNV = Marshal.GetDelegateForFunctionPointer<GLBeginVideoCaptureNV>(loader.Invoke("glBeginVideoCaptureNV"));
            glBindVideoCaptureStreamBufferNV = Marshal.GetDelegateForFunctionPointer<GLBindVideoCaptureStreamBufferNV>(loader.Invoke("glBindVideoCaptureStreamBufferNV"));
            glBindVideoCaptureStreamTextureNV = Marshal.GetDelegateForFunctionPointer<GLBindVideoCaptureStreamTextureNV>(loader.Invoke("glBindVideoCaptureStreamTextureNV"));
            glEndVideoCaptureNV = Marshal.GetDelegateForFunctionPointer<GLEndVideoCaptureNV>(loader.Invoke("glEndVideoCaptureNV"));
            glGetVideoCaptureivNV = Marshal.GetDelegateForFunctionPointer<GLGetVideoCaptureivNV>(loader.Invoke("glGetVideoCaptureivNV"));
            glGetVideoCaptureStreamivNV = Marshal.GetDelegateForFunctionPointer<GLGetVideoCaptureStreamivNV>(loader.Invoke("glGetVideoCaptureStreamivNV"));
            glGetVideoCaptureStreamfvNV = Marshal.GetDelegateForFunctionPointer<GLGetVideoCaptureStreamfvNV>(loader.Invoke("glGetVideoCaptureStreamfvNV"));
            glGetVideoCaptureStreamdvNV = Marshal.GetDelegateForFunctionPointer<GLGetVideoCaptureStreamdvNV>(loader.Invoke("glGetVideoCaptureStreamdvNV"));
            glVideoCaptureNV = Marshal.GetDelegateForFunctionPointer<GLVideoCaptureNV>(loader.Invoke("glVideoCaptureNV"));
            glVideoCaptureStreamParameterivNV = Marshal.GetDelegateForFunctionPointer<GLVideoCaptureStreamParameterivNV>(loader.Invoke("glVideoCaptureStreamParameterivNV"));
            glVideoCaptureStreamParameterfvNV = Marshal.GetDelegateForFunctionPointer<GLVideoCaptureStreamParameterfvNV>(loader.Invoke("glVideoCaptureStreamParameterfvNV"));
            glVideoCaptureStreamParameterdvNV = Marshal.GetDelegateForFunctionPointer<GLVideoCaptureStreamParameterdvNV>(loader.Invoke("glVideoCaptureStreamParameterdvNV"));
            glViewportArrayvNV = Marshal.GetDelegateForFunctionPointer<GLViewportArrayvNV>(loader.Invoke("glViewportArrayvNV"));
            glViewportIndexedfNV = Marshal.GetDelegateForFunctionPointer<GLViewportIndexedfNV>(loader.Invoke("glViewportIndexedfNV"));
            glViewportIndexedfvNV = Marshal.GetDelegateForFunctionPointer<GLViewportIndexedfvNV>(loader.Invoke("glViewportIndexedfvNV"));
            glScissorArrayvNV = Marshal.GetDelegateForFunctionPointer<GLScissorArrayvNV>(loader.Invoke("glScissorArrayvNV"));
            glScissorIndexedNV = Marshal.GetDelegateForFunctionPointer<GLScissorIndexedNV>(loader.Invoke("glScissorIndexedNV"));
            glScissorIndexedvNV = Marshal.GetDelegateForFunctionPointer<GLScissorIndexedvNV>(loader.Invoke("glScissorIndexedvNV"));
            glDepthRangeArrayfvNV = Marshal.GetDelegateForFunctionPointer<GLDepthRangeArrayfvNV>(loader.Invoke("glDepthRangeArrayfvNV"));
            glDepthRangeIndexedfNV = Marshal.GetDelegateForFunctionPointer<GLDepthRangeIndexedfNV>(loader.Invoke("glDepthRangeIndexedfNV"));
            glGetFloati_vNV = Marshal.GetDelegateForFunctionPointer<GLGetFloati_vNV>(loader.Invoke("glGetFloati_vNV"));
            glEnableiNV = Marshal.GetDelegateForFunctionPointer<GLEnableiNV>(loader.Invoke("glEnableiNV"));
            glDisableiNV = Marshal.GetDelegateForFunctionPointer<GLDisableiNV>(loader.Invoke("glDisableiNV"));
            glIsEnablediNV = Marshal.GetDelegateForFunctionPointer<GLIsEnablediNV>(loader.Invoke("glIsEnablediNV"));
            glViewportSwizzleNV = Marshal.GetDelegateForFunctionPointer<GLViewportSwizzleNV>(loader.Invoke("glViewportSwizzleNV"));
            glEGLImageTargetTexture2DOES = Marshal.GetDelegateForFunctionPointer<GLEGLImageTargetTexture2DOES>(loader.Invoke("glEGLImageTargetTexture2DOES"));
            glEGLImageTargetRenderbufferStorageOES = Marshal.GetDelegateForFunctionPointer<GLEGLImageTargetRenderbufferStorageOES>(loader.Invoke("glEGLImageTargetRenderbufferStorageOES"));
            glBlendEquationSeparateOES = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparateOES>(loader.Invoke("glBlendEquationSeparateOES"));
            glBlendFuncSeparateOES = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparateOES>(loader.Invoke("glBlendFuncSeparateOES"));
            glBlendEquationOES = Marshal.GetDelegateForFunctionPointer<GLBlendEquationOES>(loader.Invoke("glBlendEquationOES"));
            glMultiTexCoord1bOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1bOES>(loader.Invoke("glMultiTexCoord1bOES"));
            glMultiTexCoord1bvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1bvOES>(loader.Invoke("glMultiTexCoord1bvOES"));
            glMultiTexCoord2bOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2bOES>(loader.Invoke("glMultiTexCoord2bOES"));
            glMultiTexCoord2bvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2bvOES>(loader.Invoke("glMultiTexCoord2bvOES"));
            glMultiTexCoord3bOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3bOES>(loader.Invoke("glMultiTexCoord3bOES"));
            glMultiTexCoord3bvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3bvOES>(loader.Invoke("glMultiTexCoord3bvOES"));
            glMultiTexCoord4bOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4bOES>(loader.Invoke("glMultiTexCoord4bOES"));
            glMultiTexCoord4bvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4bvOES>(loader.Invoke("glMultiTexCoord4bvOES"));
            glTexCoord1bOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord1bOES>(loader.Invoke("glTexCoord1bOES"));
            glTexCoord1bvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord1bvOES>(loader.Invoke("glTexCoord1bvOES"));
            glTexCoord2bOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord2bOES>(loader.Invoke("glTexCoord2bOES"));
            glTexCoord2bvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord2bvOES>(loader.Invoke("glTexCoord2bvOES"));
            glTexCoord3bOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord3bOES>(loader.Invoke("glTexCoord3bOES"));
            glTexCoord3bvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord3bvOES>(loader.Invoke("glTexCoord3bvOES"));
            glTexCoord4bOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord4bOES>(loader.Invoke("glTexCoord4bOES"));
            glTexCoord4bvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord4bvOES>(loader.Invoke("glTexCoord4bvOES"));
            glVertex2bOES = Marshal.GetDelegateForFunctionPointer<GLVertex2bOES>(loader.Invoke("glVertex2bOES"));
            glVertex2bvOES = Marshal.GetDelegateForFunctionPointer<GLVertex2bvOES>(loader.Invoke("glVertex2bvOES"));
            glVertex3bOES = Marshal.GetDelegateForFunctionPointer<GLVertex3bOES>(loader.Invoke("glVertex3bOES"));
            glVertex3bvOES = Marshal.GetDelegateForFunctionPointer<GLVertex3bvOES>(loader.Invoke("glVertex3bvOES"));
            glVertex4bOES = Marshal.GetDelegateForFunctionPointer<GLVertex4bOES>(loader.Invoke("glVertex4bOES"));
            glVertex4bvOES = Marshal.GetDelegateForFunctionPointer<GLVertex4bvOES>(loader.Invoke("glVertex4bvOES"));
            glCopyImageSubDataOES = Marshal.GetDelegateForFunctionPointer<GLCopyImageSubDataOES>(loader.Invoke("glCopyImageSubDataOES"));
            glEnableiOES = Marshal.GetDelegateForFunctionPointer<GLEnableiOES>(loader.Invoke("glEnableiOES"));
            glDisableiOES = Marshal.GetDelegateForFunctionPointer<GLDisableiOES>(loader.Invoke("glDisableiOES"));
            glBlendEquationiOES = Marshal.GetDelegateForFunctionPointer<GLBlendEquationiOES>(loader.Invoke("glBlendEquationiOES"));
            glBlendEquationSeparateiOES = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparateiOES>(loader.Invoke("glBlendEquationSeparateiOES"));
            glBlendFunciOES = Marshal.GetDelegateForFunctionPointer<GLBlendFunciOES>(loader.Invoke("glBlendFunciOES"));
            glBlendFuncSeparateiOES = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparateiOES>(loader.Invoke("glBlendFuncSeparateiOES"));
            glColorMaskiOES = Marshal.GetDelegateForFunctionPointer<GLColorMaskiOES>(loader.Invoke("glColorMaskiOES"));
            glIsEnablediOES = Marshal.GetDelegateForFunctionPointer<GLIsEnablediOES>(loader.Invoke("glIsEnablediOES"));
            glDrawElementsBaseVertexOES = Marshal.GetDelegateForFunctionPointer<GLDrawElementsBaseVertexOES>(loader.Invoke("glDrawElementsBaseVertexOES"));
            glDrawRangeElementsBaseVertexOES = Marshal.GetDelegateForFunctionPointer<GLDrawRangeElementsBaseVertexOES>(loader.Invoke("glDrawRangeElementsBaseVertexOES"));
            glDrawElementsInstancedBaseVertexOES = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstancedBaseVertexOES>(loader.Invoke("glDrawElementsInstancedBaseVertexOES"));
            glDrawTexsOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexsOES>(loader.Invoke("glDrawTexsOES"));
            glDrawTexiOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexiOES>(loader.Invoke("glDrawTexiOES"));
            glDrawTexxOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexxOES>(loader.Invoke("glDrawTexxOES"));
            glDrawTexsvOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexsvOES>(loader.Invoke("glDrawTexsvOES"));
            glDrawTexivOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexivOES>(loader.Invoke("glDrawTexivOES"));
            glDrawTexxvOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexxvOES>(loader.Invoke("glDrawTexxvOES"));
            glDrawTexfOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexfOES>(loader.Invoke("glDrawTexfOES"));
            glDrawTexfvOES = Marshal.GetDelegateForFunctionPointer<GLDrawTexfvOES>(loader.Invoke("glDrawTexfvOES"));
            glAlphaFuncxOES = Marshal.GetDelegateForFunctionPointer<GLAlphaFuncxOES>(loader.Invoke("glAlphaFuncxOES"));
            glClearColorxOES = Marshal.GetDelegateForFunctionPointer<GLClearColorxOES>(loader.Invoke("glClearColorxOES"));
            glClearDepthxOES = Marshal.GetDelegateForFunctionPointer<GLClearDepthxOES>(loader.Invoke("glClearDepthxOES"));
            glClipPlanexOES = Marshal.GetDelegateForFunctionPointer<GLClipPlanexOES>(loader.Invoke("glClipPlanexOES"));
            glColor4xOES = Marshal.GetDelegateForFunctionPointer<GLColor4xOES>(loader.Invoke("glColor4xOES"));
            glDepthRangexOES = Marshal.GetDelegateForFunctionPointer<GLDepthRangexOES>(loader.Invoke("glDepthRangexOES"));
            glFogxOES = Marshal.GetDelegateForFunctionPointer<GLFogxOES>(loader.Invoke("glFogxOES"));
            glFogxvOES = Marshal.GetDelegateForFunctionPointer<GLFogxvOES>(loader.Invoke("glFogxvOES"));
            glFrustumxOES = Marshal.GetDelegateForFunctionPointer<GLFrustumxOES>(loader.Invoke("glFrustumxOES"));
            glGetClipPlanexOES = Marshal.GetDelegateForFunctionPointer<GLGetClipPlanexOES>(loader.Invoke("glGetClipPlanexOES"));
            glGetFixedvOES = Marshal.GetDelegateForFunctionPointer<GLGetFixedvOES>(loader.Invoke("glGetFixedvOES"));
            glGetTexEnvxvOES = Marshal.GetDelegateForFunctionPointer<GLGetTexEnvxvOES>(loader.Invoke("glGetTexEnvxvOES"));
            glGetTexParameterxvOES = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterxvOES>(loader.Invoke("glGetTexParameterxvOES"));
            glLightModelxOES = Marshal.GetDelegateForFunctionPointer<GLLightModelxOES>(loader.Invoke("glLightModelxOES"));
            glLightModelxvOES = Marshal.GetDelegateForFunctionPointer<GLLightModelxvOES>(loader.Invoke("glLightModelxvOES"));
            glLightxOES = Marshal.GetDelegateForFunctionPointer<GLLightxOES>(loader.Invoke("glLightxOES"));
            glLightxvOES = Marshal.GetDelegateForFunctionPointer<GLLightxvOES>(loader.Invoke("glLightxvOES"));
            glLineWidthxOES = Marshal.GetDelegateForFunctionPointer<GLLineWidthxOES>(loader.Invoke("glLineWidthxOES"));
            glLoadMatrixxOES = Marshal.GetDelegateForFunctionPointer<GLLoadMatrixxOES>(loader.Invoke("glLoadMatrixxOES"));
            glMaterialxOES = Marshal.GetDelegateForFunctionPointer<GLMaterialxOES>(loader.Invoke("glMaterialxOES"));
            glMaterialxvOES = Marshal.GetDelegateForFunctionPointer<GLMaterialxvOES>(loader.Invoke("glMaterialxvOES"));
            glMultMatrixxOES = Marshal.GetDelegateForFunctionPointer<GLMultMatrixxOES>(loader.Invoke("glMultMatrixxOES"));
            glMultiTexCoord4xOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4xOES>(loader.Invoke("glMultiTexCoord4xOES"));
            glNormal3xOES = Marshal.GetDelegateForFunctionPointer<GLNormal3xOES>(loader.Invoke("glNormal3xOES"));
            glOrthoxOES = Marshal.GetDelegateForFunctionPointer<GLOrthoxOES>(loader.Invoke("glOrthoxOES"));
            glPointParameterxvOES = Marshal.GetDelegateForFunctionPointer<GLPointParameterxvOES>(loader.Invoke("glPointParameterxvOES"));
            glPointSizexOES = Marshal.GetDelegateForFunctionPointer<GLPointSizexOES>(loader.Invoke("glPointSizexOES"));
            glPolygonOffsetxOES = Marshal.GetDelegateForFunctionPointer<GLPolygonOffsetxOES>(loader.Invoke("glPolygonOffsetxOES"));
            glRotatexOES = Marshal.GetDelegateForFunctionPointer<GLRotatexOES>(loader.Invoke("glRotatexOES"));
            glScalexOES = Marshal.GetDelegateForFunctionPointer<GLScalexOES>(loader.Invoke("glScalexOES"));
            glTexEnvxOES = Marshal.GetDelegateForFunctionPointer<GLTexEnvxOES>(loader.Invoke("glTexEnvxOES"));
            glTexEnvxvOES = Marshal.GetDelegateForFunctionPointer<GLTexEnvxvOES>(loader.Invoke("glTexEnvxvOES"));
            glTexParameterxOES = Marshal.GetDelegateForFunctionPointer<GLTexParameterxOES>(loader.Invoke("glTexParameterxOES"));
            glTexParameterxvOES = Marshal.GetDelegateForFunctionPointer<GLTexParameterxvOES>(loader.Invoke("glTexParameterxvOES"));
            glTranslatexOES = Marshal.GetDelegateForFunctionPointer<GLTranslatexOES>(loader.Invoke("glTranslatexOES"));
            glGetLightxvOES = Marshal.GetDelegateForFunctionPointer<GLGetLightxvOES>(loader.Invoke("glGetLightxvOES"));
            glGetMaterialxvOES = Marshal.GetDelegateForFunctionPointer<GLGetMaterialxvOES>(loader.Invoke("glGetMaterialxvOES"));
            glPointParameterxOES = Marshal.GetDelegateForFunctionPointer<GLPointParameterxOES>(loader.Invoke("glPointParameterxOES"));
            glSampleCoveragexOES = Marshal.GetDelegateForFunctionPointer<GLSampleCoveragexOES>(loader.Invoke("glSampleCoveragexOES"));
            glAccumxOES = Marshal.GetDelegateForFunctionPointer<GLAccumxOES>(loader.Invoke("glAccumxOES"));
            glBitmapxOES = Marshal.GetDelegateForFunctionPointer<GLBitmapxOES>(loader.Invoke("glBitmapxOES"));
            glBlendColorxOES = Marshal.GetDelegateForFunctionPointer<GLBlendColorxOES>(loader.Invoke("glBlendColorxOES"));
            glClearAccumxOES = Marshal.GetDelegateForFunctionPointer<GLClearAccumxOES>(loader.Invoke("glClearAccumxOES"));
            glColor3xOES = Marshal.GetDelegateForFunctionPointer<GLColor3xOES>(loader.Invoke("glColor3xOES"));
            glColor3xvOES = Marshal.GetDelegateForFunctionPointer<GLColor3xvOES>(loader.Invoke("glColor3xvOES"));
            glColor4xvOES = Marshal.GetDelegateForFunctionPointer<GLColor4xvOES>(loader.Invoke("glColor4xvOES"));
            glConvolutionParameterxOES = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameterxOES>(loader.Invoke("glConvolutionParameterxOES"));
            glConvolutionParameterxvOES = Marshal.GetDelegateForFunctionPointer<GLConvolutionParameterxvOES>(loader.Invoke("glConvolutionParameterxvOES"));
            glEvalCoord1xOES = Marshal.GetDelegateForFunctionPointer<GLEvalCoord1xOES>(loader.Invoke("glEvalCoord1xOES"));
            glEvalCoord1xvOES = Marshal.GetDelegateForFunctionPointer<GLEvalCoord1xvOES>(loader.Invoke("glEvalCoord1xvOES"));
            glEvalCoord2xOES = Marshal.GetDelegateForFunctionPointer<GLEvalCoord2xOES>(loader.Invoke("glEvalCoord2xOES"));
            glEvalCoord2xvOES = Marshal.GetDelegateForFunctionPointer<GLEvalCoord2xvOES>(loader.Invoke("glEvalCoord2xvOES"));
            glFeedbackBufferxOES = Marshal.GetDelegateForFunctionPointer<GLFeedbackBufferxOES>(loader.Invoke("glFeedbackBufferxOES"));
            glGetConvolutionParameterxvOES = Marshal.GetDelegateForFunctionPointer<GLGetConvolutionParameterxvOES>(loader.Invoke("glGetConvolutionParameterxvOES"));
            glGetHistogramParameterxvOES = Marshal.GetDelegateForFunctionPointer<GLGetHistogramParameterxvOES>(loader.Invoke("glGetHistogramParameterxvOES"));
            glGetLightxOES = Marshal.GetDelegateForFunctionPointer<GLGetLightxOES>(loader.Invoke("glGetLightxOES"));
            glGetMapxvOES = Marshal.GetDelegateForFunctionPointer<GLGetMapxvOES>(loader.Invoke("glGetMapxvOES"));
            glGetMaterialxOES = Marshal.GetDelegateForFunctionPointer<GLGetMaterialxOES>(loader.Invoke("glGetMaterialxOES"));
            glGetPixelMapxv = Marshal.GetDelegateForFunctionPointer<GLGetPixelMapxv>(loader.Invoke("glGetPixelMapxv"));
            glGetTexGenxvOES = Marshal.GetDelegateForFunctionPointer<GLGetTexGenxvOES>(loader.Invoke("glGetTexGenxvOES"));
            glGetTexLevelParameterxvOES = Marshal.GetDelegateForFunctionPointer<GLGetTexLevelParameterxvOES>(loader.Invoke("glGetTexLevelParameterxvOES"));
            glIndexxOES = Marshal.GetDelegateForFunctionPointer<GLIndexxOES>(loader.Invoke("glIndexxOES"));
            glIndexxvOES = Marshal.GetDelegateForFunctionPointer<GLIndexxvOES>(loader.Invoke("glIndexxvOES"));
            glLoadTransposeMatrixxOES = Marshal.GetDelegateForFunctionPointer<GLLoadTransposeMatrixxOES>(loader.Invoke("glLoadTransposeMatrixxOES"));
            glMap1xOES = Marshal.GetDelegateForFunctionPointer<GLMap1xOES>(loader.Invoke("glMap1xOES"));
            glMap2xOES = Marshal.GetDelegateForFunctionPointer<GLMap2xOES>(loader.Invoke("glMap2xOES"));
            glMapGrid1xOES = Marshal.GetDelegateForFunctionPointer<GLMapGrid1xOES>(loader.Invoke("glMapGrid1xOES"));
            glMapGrid2xOES = Marshal.GetDelegateForFunctionPointer<GLMapGrid2xOES>(loader.Invoke("glMapGrid2xOES"));
            glMultTransposeMatrixxOES = Marshal.GetDelegateForFunctionPointer<GLMultTransposeMatrixxOES>(loader.Invoke("glMultTransposeMatrixxOES"));
            glMultiTexCoord1xOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1xOES>(loader.Invoke("glMultiTexCoord1xOES"));
            glMultiTexCoord1xvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1xvOES>(loader.Invoke("glMultiTexCoord1xvOES"));
            glMultiTexCoord2xOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2xOES>(loader.Invoke("glMultiTexCoord2xOES"));
            glMultiTexCoord2xvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2xvOES>(loader.Invoke("glMultiTexCoord2xvOES"));
            glMultiTexCoord3xOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3xOES>(loader.Invoke("glMultiTexCoord3xOES"));
            glMultiTexCoord3xvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3xvOES>(loader.Invoke("glMultiTexCoord3xvOES"));
            glMultiTexCoord4xvOES = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4xvOES>(loader.Invoke("glMultiTexCoord4xvOES"));
            glNormal3xvOES = Marshal.GetDelegateForFunctionPointer<GLNormal3xvOES>(loader.Invoke("glNormal3xvOES"));
            glPassThroughxOES = Marshal.GetDelegateForFunctionPointer<GLPassThroughxOES>(loader.Invoke("glPassThroughxOES"));
            glPixelMapx = Marshal.GetDelegateForFunctionPointer<GLPixelMapx>(loader.Invoke("glPixelMapx"));
            glPixelStorex = Marshal.GetDelegateForFunctionPointer<GLPixelStorex>(loader.Invoke("glPixelStorex"));
            glPixelTransferxOES = Marshal.GetDelegateForFunctionPointer<GLPixelTransferxOES>(loader.Invoke("glPixelTransferxOES"));
            glPixelZoomxOES = Marshal.GetDelegateForFunctionPointer<GLPixelZoomxOES>(loader.Invoke("glPixelZoomxOES"));
            glPrioritizeTexturesxOES = Marshal.GetDelegateForFunctionPointer<GLPrioritizeTexturesxOES>(loader.Invoke("glPrioritizeTexturesxOES"));
            glRasterPos2xOES = Marshal.GetDelegateForFunctionPointer<GLRasterPos2xOES>(loader.Invoke("glRasterPos2xOES"));
            glRasterPos2xvOES = Marshal.GetDelegateForFunctionPointer<GLRasterPos2xvOES>(loader.Invoke("glRasterPos2xvOES"));
            glRasterPos3xOES = Marshal.GetDelegateForFunctionPointer<GLRasterPos3xOES>(loader.Invoke("glRasterPos3xOES"));
            glRasterPos3xvOES = Marshal.GetDelegateForFunctionPointer<GLRasterPos3xvOES>(loader.Invoke("glRasterPos3xvOES"));
            glRasterPos4xOES = Marshal.GetDelegateForFunctionPointer<GLRasterPos4xOES>(loader.Invoke("glRasterPos4xOES"));
            glRasterPos4xvOES = Marshal.GetDelegateForFunctionPointer<GLRasterPos4xvOES>(loader.Invoke("glRasterPos4xvOES"));
            glRectxOES = Marshal.GetDelegateForFunctionPointer<GLRectxOES>(loader.Invoke("glRectxOES"));
            glRectxvOES = Marshal.GetDelegateForFunctionPointer<GLRectxvOES>(loader.Invoke("glRectxvOES"));
            glTexCoord1xOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord1xOES>(loader.Invoke("glTexCoord1xOES"));
            glTexCoord1xvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord1xvOES>(loader.Invoke("glTexCoord1xvOES"));
            glTexCoord2xOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord2xOES>(loader.Invoke("glTexCoord2xOES"));
            glTexCoord2xvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord2xvOES>(loader.Invoke("glTexCoord2xvOES"));
            glTexCoord3xOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord3xOES>(loader.Invoke("glTexCoord3xOES"));
            glTexCoord3xvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord3xvOES>(loader.Invoke("glTexCoord3xvOES"));
            glTexCoord4xOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord4xOES>(loader.Invoke("glTexCoord4xOES"));
            glTexCoord4xvOES = Marshal.GetDelegateForFunctionPointer<GLTexCoord4xvOES>(loader.Invoke("glTexCoord4xvOES"));
            glTexGenxOES = Marshal.GetDelegateForFunctionPointer<GLTexGenxOES>(loader.Invoke("glTexGenxOES"));
            glTexGenxvOES = Marshal.GetDelegateForFunctionPointer<GLTexGenxvOES>(loader.Invoke("glTexGenxvOES"));
            glVertex2xOES = Marshal.GetDelegateForFunctionPointer<GLVertex2xOES>(loader.Invoke("glVertex2xOES"));
            glVertex2xvOES = Marshal.GetDelegateForFunctionPointer<GLVertex2xvOES>(loader.Invoke("glVertex2xvOES"));
            glVertex3xOES = Marshal.GetDelegateForFunctionPointer<GLVertex3xOES>(loader.Invoke("glVertex3xOES"));
            glVertex3xvOES = Marshal.GetDelegateForFunctionPointer<GLVertex3xvOES>(loader.Invoke("glVertex3xvOES"));
            glVertex4xOES = Marshal.GetDelegateForFunctionPointer<GLVertex4xOES>(loader.Invoke("glVertex4xOES"));
            glVertex4xvOES = Marshal.GetDelegateForFunctionPointer<GLVertex4xvOES>(loader.Invoke("glVertex4xvOES"));
            glIsRenderbufferOES = Marshal.GetDelegateForFunctionPointer<GLIsRenderbufferOES>(loader.Invoke("glIsRenderbufferOES"));
            glBindRenderbufferOES = Marshal.GetDelegateForFunctionPointer<GLBindRenderbufferOES>(loader.Invoke("glBindRenderbufferOES"));
            glDeleteRenderbuffersOES = Marshal.GetDelegateForFunctionPointer<GLDeleteRenderbuffersOES>(loader.Invoke("glDeleteRenderbuffersOES"));
            glGenRenderbuffersOES = Marshal.GetDelegateForFunctionPointer<GLGenRenderbuffersOES>(loader.Invoke("glGenRenderbuffersOES"));
            glRenderbufferStorageOES = Marshal.GetDelegateForFunctionPointer<GLRenderbufferStorageOES>(loader.Invoke("glRenderbufferStorageOES"));
            glGetRenderbufferParameterivOES = Marshal.GetDelegateForFunctionPointer<GLGetRenderbufferParameterivOES>(loader.Invoke("glGetRenderbufferParameterivOES"));
            glIsFramebufferOES = Marshal.GetDelegateForFunctionPointer<GLIsFramebufferOES>(loader.Invoke("glIsFramebufferOES"));
            glBindFramebufferOES = Marshal.GetDelegateForFunctionPointer<GLBindFramebufferOES>(loader.Invoke("glBindFramebufferOES"));
            glDeleteFramebuffersOES = Marshal.GetDelegateForFunctionPointer<GLDeleteFramebuffersOES>(loader.Invoke("glDeleteFramebuffersOES"));
            glGenFramebuffersOES = Marshal.GetDelegateForFunctionPointer<GLGenFramebuffersOES>(loader.Invoke("glGenFramebuffersOES"));
            glCheckFramebufferStatusOES = Marshal.GetDelegateForFunctionPointer<GLCheckFramebufferStatusOES>(loader.Invoke("glCheckFramebufferStatusOES"));
            glFramebufferRenderbufferOES = Marshal.GetDelegateForFunctionPointer<GLFramebufferRenderbufferOES>(loader.Invoke("glFramebufferRenderbufferOES"));
            glFramebufferTexture2DOES = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture2DOES>(loader.Invoke("glFramebufferTexture2DOES"));
            glGetFramebufferAttachmentParameterivOES = Marshal.GetDelegateForFunctionPointer<GLGetFramebufferAttachmentParameterivOES>(loader.Invoke("glGetFramebufferAttachmentParameterivOES"));
            glGenerateMipmapOES = Marshal.GetDelegateForFunctionPointer<GLGenerateMipmapOES>(loader.Invoke("glGenerateMipmapOES"));
            glFramebufferTextureOES = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureOES>(loader.Invoke("glFramebufferTextureOES"));
            glGetProgramBinaryOES = Marshal.GetDelegateForFunctionPointer<GLGetProgramBinaryOES>(loader.Invoke("glGetProgramBinaryOES"));
            glProgramBinaryOES = Marshal.GetDelegateForFunctionPointer<GLProgramBinaryOES>(loader.Invoke("glProgramBinaryOES"));
            glMapBufferOES = Marshal.GetDelegateForFunctionPointer<GLMapBufferOES>(loader.Invoke("glMapBufferOES"));
            glUnmapBufferOES = Marshal.GetDelegateForFunctionPointer<GLUnmapBufferOES>(loader.Invoke("glUnmapBufferOES"));
            glGetBufferPointervOES = Marshal.GetDelegateForFunctionPointer<GLGetBufferPointervOES>(loader.Invoke("glGetBufferPointervOES"));
            glCurrentPaletteMatrixOES = Marshal.GetDelegateForFunctionPointer<GLCurrentPaletteMatrixOES>(loader.Invoke("glCurrentPaletteMatrixOES"));
            glLoadPaletteFromModelViewMatrixOES = Marshal.GetDelegateForFunctionPointer<GLLoadPaletteFromModelViewMatrixOES>(loader.Invoke("glLoadPaletteFromModelViewMatrixOES"));
            glMatrixIndexPointerOES = Marshal.GetDelegateForFunctionPointer<GLMatrixIndexPointerOES>(loader.Invoke("glMatrixIndexPointerOES"));
            glWeightPointerOES = Marshal.GetDelegateForFunctionPointer<GLWeightPointerOES>(loader.Invoke("glWeightPointerOES"));
            glPointSizePointerOES = Marshal.GetDelegateForFunctionPointer<GLPointSizePointerOES>(loader.Invoke("glPointSizePointerOES"));
            glPrimitiveBoundingBoxOES = Marshal.GetDelegateForFunctionPointer<GLPrimitiveBoundingBoxOES>(loader.Invoke("glPrimitiveBoundingBoxOES"));
            glQueryMatrixxOES = Marshal.GetDelegateForFunctionPointer<GLQueryMatrixxOES>(loader.Invoke("glQueryMatrixxOES"));
            glMinSampleShadingOES = Marshal.GetDelegateForFunctionPointer<GLMinSampleShadingOES>(loader.Invoke("glMinSampleShadingOES"));
            glClearDepthfOES = Marshal.GetDelegateForFunctionPointer<GLClearDepthfOES>(loader.Invoke("glClearDepthfOES"));
            glClipPlanefOES = Marshal.GetDelegateForFunctionPointer<GLClipPlanefOES>(loader.Invoke("glClipPlanefOES"));
            glDepthRangefOES = Marshal.GetDelegateForFunctionPointer<GLDepthRangefOES>(loader.Invoke("glDepthRangefOES"));
            glFrustumfOES = Marshal.GetDelegateForFunctionPointer<GLFrustumfOES>(loader.Invoke("glFrustumfOES"));
            glGetClipPlanefOES = Marshal.GetDelegateForFunctionPointer<GLGetClipPlanefOES>(loader.Invoke("glGetClipPlanefOES"));
            glOrthofOES = Marshal.GetDelegateForFunctionPointer<GLOrthofOES>(loader.Invoke("glOrthofOES"));
            glPatchParameteriOES = Marshal.GetDelegateForFunctionPointer<GLPatchParameteriOES>(loader.Invoke("glPatchParameteriOES"));
            glTexImage3DOES = Marshal.GetDelegateForFunctionPointer<GLTexImage3DOES>(loader.Invoke("glTexImage3DOES"));
            glTexSubImage3DOES = Marshal.GetDelegateForFunctionPointer<GLTexSubImage3DOES>(loader.Invoke("glTexSubImage3DOES"));
            glCopyTexSubImage3DOES = Marshal.GetDelegateForFunctionPointer<GLCopyTexSubImage3DOES>(loader.Invoke("glCopyTexSubImage3DOES"));
            glCompressedTexImage3DOES = Marshal.GetDelegateForFunctionPointer<GLCompressedTexImage3DOES>(loader.Invoke("glCompressedTexImage3DOES"));
            glCompressedTexSubImage3DOES = Marshal.GetDelegateForFunctionPointer<GLCompressedTexSubImage3DOES>(loader.Invoke("glCompressedTexSubImage3DOES"));
            glFramebufferTexture3DOES = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture3DOES>(loader.Invoke("glFramebufferTexture3DOES"));
            glTexParameterIivOES = Marshal.GetDelegateForFunctionPointer<GLTexParameterIivOES>(loader.Invoke("glTexParameterIivOES"));
            glTexParameterIuivOES = Marshal.GetDelegateForFunctionPointer<GLTexParameterIuivOES>(loader.Invoke("glTexParameterIuivOES"));
            glGetTexParameterIivOES = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterIivOES>(loader.Invoke("glGetTexParameterIivOES"));
            glGetTexParameterIuivOES = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterIuivOES>(loader.Invoke("glGetTexParameterIuivOES"));
            glSamplerParameterIivOES = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterIivOES>(loader.Invoke("glSamplerParameterIivOES"));
            glSamplerParameterIuivOES = Marshal.GetDelegateForFunctionPointer<GLSamplerParameterIuivOES>(loader.Invoke("glSamplerParameterIuivOES"));
            glGetSamplerParameterIivOES = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameterIivOES>(loader.Invoke("glGetSamplerParameterIivOES"));
            glGetSamplerParameterIuivOES = Marshal.GetDelegateForFunctionPointer<GLGetSamplerParameterIuivOES>(loader.Invoke("glGetSamplerParameterIuivOES"));
            glTexBufferOES = Marshal.GetDelegateForFunctionPointer<GLTexBufferOES>(loader.Invoke("glTexBufferOES"));
            glTexBufferRangeOES = Marshal.GetDelegateForFunctionPointer<GLTexBufferRangeOES>(loader.Invoke("glTexBufferRangeOES"));
            glTexGenfOES = Marshal.GetDelegateForFunctionPointer<GLTexGenfOES>(loader.Invoke("glTexGenfOES"));
            glTexGenfvOES = Marshal.GetDelegateForFunctionPointer<GLTexGenfvOES>(loader.Invoke("glTexGenfvOES"));
            glTexGeniOES = Marshal.GetDelegateForFunctionPointer<GLTexGeniOES>(loader.Invoke("glTexGeniOES"));
            glTexGenivOES = Marshal.GetDelegateForFunctionPointer<GLTexGenivOES>(loader.Invoke("glTexGenivOES"));
            glGetTexGenfvOES = Marshal.GetDelegateForFunctionPointer<GLGetTexGenfvOES>(loader.Invoke("glGetTexGenfvOES"));
            glGetTexGenivOES = Marshal.GetDelegateForFunctionPointer<GLGetTexGenivOES>(loader.Invoke("glGetTexGenivOES"));
            glTexStorage3DMultisampleOES = Marshal.GetDelegateForFunctionPointer<GLTexStorage3DMultisampleOES>(loader.Invoke("glTexStorage3DMultisampleOES"));
            glTextureViewOES = Marshal.GetDelegateForFunctionPointer<GLTextureViewOES>(loader.Invoke("glTextureViewOES"));
            glBindVertexArrayOES = Marshal.GetDelegateForFunctionPointer<GLBindVertexArrayOES>(loader.Invoke("glBindVertexArrayOES"));
            glDeleteVertexArraysOES = Marshal.GetDelegateForFunctionPointer<GLDeleteVertexArraysOES>(loader.Invoke("glDeleteVertexArraysOES"));
            glGenVertexArraysOES = Marshal.GetDelegateForFunctionPointer<GLGenVertexArraysOES>(loader.Invoke("glGenVertexArraysOES"));
            glIsVertexArrayOES = Marshal.GetDelegateForFunctionPointer<GLIsVertexArrayOES>(loader.Invoke("glIsVertexArrayOES"));
            glViewportArrayvOES = Marshal.GetDelegateForFunctionPointer<GLViewportArrayvOES>(loader.Invoke("glViewportArrayvOES"));
            glViewportIndexedfOES = Marshal.GetDelegateForFunctionPointer<GLViewportIndexedfOES>(loader.Invoke("glViewportIndexedfOES"));
            glViewportIndexedfvOES = Marshal.GetDelegateForFunctionPointer<GLViewportIndexedfvOES>(loader.Invoke("glViewportIndexedfvOES"));
            glScissorArrayvOES = Marshal.GetDelegateForFunctionPointer<GLScissorArrayvOES>(loader.Invoke("glScissorArrayvOES"));
            glScissorIndexedOES = Marshal.GetDelegateForFunctionPointer<GLScissorIndexedOES>(loader.Invoke("glScissorIndexedOES"));
            glScissorIndexedvOES = Marshal.GetDelegateForFunctionPointer<GLScissorIndexedvOES>(loader.Invoke("glScissorIndexedvOES"));
            glDepthRangeArrayfvOES = Marshal.GetDelegateForFunctionPointer<GLDepthRangeArrayfvOES>(loader.Invoke("glDepthRangeArrayfvOES"));
            glDepthRangeIndexedfOES = Marshal.GetDelegateForFunctionPointer<GLDepthRangeIndexedfOES>(loader.Invoke("glDepthRangeIndexedfOES"));
            glGetFloati_vOES = Marshal.GetDelegateForFunctionPointer<GLGetFloati_vOES>(loader.Invoke("glGetFloati_vOES"));
            glFramebufferTextureMultiviewOVR = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureMultiviewOVR>(loader.Invoke("glFramebufferTextureMultiviewOVR"));
            glFramebufferTextureMultisampleMultiviewOVR = Marshal.GetDelegateForFunctionPointer<GLFramebufferTextureMultisampleMultiviewOVR>(loader.Invoke("glFramebufferTextureMultisampleMultiviewOVR"));
            glHintPGI = Marshal.GetDelegateForFunctionPointer<GLHintPGI>(loader.Invoke("glHintPGI"));
            glAlphaFuncQCOM = Marshal.GetDelegateForFunctionPointer<GLAlphaFuncQCOM>(loader.Invoke("glAlphaFuncQCOM"));
            glGetDriverControlsQCOM = Marshal.GetDelegateForFunctionPointer<GLGetDriverControlsQCOM>(loader.Invoke("glGetDriverControlsQCOM"));
            glGetDriverControlStringQCOM = Marshal.GetDelegateForFunctionPointer<GLGetDriverControlStringQCOM>(loader.Invoke("glGetDriverControlStringQCOM"));
            glEnableDriverControlQCOM = Marshal.GetDelegateForFunctionPointer<GLEnableDriverControlQCOM>(loader.Invoke("glEnableDriverControlQCOM"));
            glDisableDriverControlQCOM = Marshal.GetDelegateForFunctionPointer<GLDisableDriverControlQCOM>(loader.Invoke("glDisableDriverControlQCOM"));
            glExtGetTexturesQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetTexturesQCOM>(loader.Invoke("glExtGetTexturesQCOM"));
            glExtGetBuffersQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetBuffersQCOM>(loader.Invoke("glExtGetBuffersQCOM"));
            glExtGetRenderbuffersQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetRenderbuffersQCOM>(loader.Invoke("glExtGetRenderbuffersQCOM"));
            glExtGetFramebuffersQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetFramebuffersQCOM>(loader.Invoke("glExtGetFramebuffersQCOM"));
            glExtGetTexLevelParameterivQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetTexLevelParameterivQCOM>(loader.Invoke("glExtGetTexLevelParameterivQCOM"));
            glExtTexObjectStateOverrideiQCOM = Marshal.GetDelegateForFunctionPointer<GLExtTexObjectStateOverrideiQCOM>(loader.Invoke("glExtTexObjectStateOverrideiQCOM"));
            glExtGetTexSubImageQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetTexSubImageQCOM>(loader.Invoke("glExtGetTexSubImageQCOM"));
            glExtGetBufferPointervQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetBufferPointervQCOM>(loader.Invoke("glExtGetBufferPointervQCOM"));
            glExtGetShadersQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetShadersQCOM>(loader.Invoke("glExtGetShadersQCOM"));
            glExtGetProgramsQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetProgramsQCOM>(loader.Invoke("glExtGetProgramsQCOM"));
            glExtIsProgramBinaryQCOM = Marshal.GetDelegateForFunctionPointer<GLExtIsProgramBinaryQCOM>(loader.Invoke("glExtIsProgramBinaryQCOM"));
            glExtGetProgramBinarySourceQCOM = Marshal.GetDelegateForFunctionPointer<GLExtGetProgramBinarySourceQCOM>(loader.Invoke("glExtGetProgramBinarySourceQCOM"));
            glFramebufferFoveationConfigQCOM = Marshal.GetDelegateForFunctionPointer<GLFramebufferFoveationConfigQCOM>(loader.Invoke("glFramebufferFoveationConfigQCOM"));
            glFramebufferFoveationParametersQCOM = Marshal.GetDelegateForFunctionPointer<GLFramebufferFoveationParametersQCOM>(loader.Invoke("glFramebufferFoveationParametersQCOM"));
            glTexEstimateMotionQCOM = Marshal.GetDelegateForFunctionPointer<GLTexEstimateMotionQCOM>(loader.Invoke("glTexEstimateMotionQCOM"));
            glTexEstimateMotionRegionsQCOM = Marshal.GetDelegateForFunctionPointer<GLTexEstimateMotionRegionsQCOM>(loader.Invoke("glTexEstimateMotionRegionsQCOM"));
            glExtrapolateTex2DQCOM = Marshal.GetDelegateForFunctionPointer<GLExtrapolateTex2DQCOM>(loader.Invoke("glExtrapolateTex2DQCOM"));
            glTextureFoveationParametersQCOM = Marshal.GetDelegateForFunctionPointer<GLTextureFoveationParametersQCOM>(loader.Invoke("glTextureFoveationParametersQCOM"));
            glFramebufferFetchBarrierQCOM = Marshal.GetDelegateForFunctionPointer<GLFramebufferFetchBarrierQCOM>(loader.Invoke("glFramebufferFetchBarrierQCOM"));
            glShadingRateQCOM = Marshal.GetDelegateForFunctionPointer<GLShadingRateQCOM>(loader.Invoke("glShadingRateQCOM"));
            glStartTilingQCOM = Marshal.GetDelegateForFunctionPointer<GLStartTilingQCOM>(loader.Invoke("glStartTilingQCOM"));
            glEndTilingQCOM = Marshal.GetDelegateForFunctionPointer<GLEndTilingQCOM>(loader.Invoke("glEndTilingQCOM"));
            glDetailTexFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLDetailTexFuncSGIS>(loader.Invoke("glDetailTexFuncSGIS"));
            glGetDetailTexFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLGetDetailTexFuncSGIS>(loader.Invoke("glGetDetailTexFuncSGIS"));
            glFogFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLFogFuncSGIS>(loader.Invoke("glFogFuncSGIS"));
            glGetFogFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLGetFogFuncSGIS>(loader.Invoke("glGetFogFuncSGIS"));
            glSampleMaskSGIS = Marshal.GetDelegateForFunctionPointer<GLSampleMaskSGIS>(loader.Invoke("glSampleMaskSGIS"));
            glSamplePatternSGIS = Marshal.GetDelegateForFunctionPointer<GLSamplePatternSGIS>(loader.Invoke("glSamplePatternSGIS"));
            glPixelTexGenParameteriSGIS = Marshal.GetDelegateForFunctionPointer<GLPixelTexGenParameteriSGIS>(loader.Invoke("glPixelTexGenParameteriSGIS"));
            glPixelTexGenParameterivSGIS = Marshal.GetDelegateForFunctionPointer<GLPixelTexGenParameterivSGIS>(loader.Invoke("glPixelTexGenParameterivSGIS"));
            glPixelTexGenParameterfSGIS = Marshal.GetDelegateForFunctionPointer<GLPixelTexGenParameterfSGIS>(loader.Invoke("glPixelTexGenParameterfSGIS"));
            glPixelTexGenParameterfvSGIS = Marshal.GetDelegateForFunctionPointer<GLPixelTexGenParameterfvSGIS>(loader.Invoke("glPixelTexGenParameterfvSGIS"));
            glGetPixelTexGenParameterivSGIS = Marshal.GetDelegateForFunctionPointer<GLGetPixelTexGenParameterivSGIS>(loader.Invoke("glGetPixelTexGenParameterivSGIS"));
            glGetPixelTexGenParameterfvSGIS = Marshal.GetDelegateForFunctionPointer<GLGetPixelTexGenParameterfvSGIS>(loader.Invoke("glGetPixelTexGenParameterfvSGIS"));
            glPointParameterfSGIS = Marshal.GetDelegateForFunctionPointer<GLPointParameterfSGIS>(loader.Invoke("glPointParameterfSGIS"));
            glPointParameterfvSGIS = Marshal.GetDelegateForFunctionPointer<GLPointParameterfvSGIS>(loader.Invoke("glPointParameterfvSGIS"));
            glSharpenTexFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLSharpenTexFuncSGIS>(loader.Invoke("glSharpenTexFuncSGIS"));
            glGetSharpenTexFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLGetSharpenTexFuncSGIS>(loader.Invoke("glGetSharpenTexFuncSGIS"));
            glTexImage4DSGIS = Marshal.GetDelegateForFunctionPointer<GLTexImage4DSGIS>(loader.Invoke("glTexImage4DSGIS"));
            glTexSubImage4DSGIS = Marshal.GetDelegateForFunctionPointer<GLTexSubImage4DSGIS>(loader.Invoke("glTexSubImage4DSGIS"));
            glTextureColorMaskSGIS = Marshal.GetDelegateForFunctionPointer<GLTextureColorMaskSGIS>(loader.Invoke("glTextureColorMaskSGIS"));
            glGetTexFilterFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLGetTexFilterFuncSGIS>(loader.Invoke("glGetTexFilterFuncSGIS"));
            glTexFilterFuncSGIS = Marshal.GetDelegateForFunctionPointer<GLTexFilterFuncSGIS>(loader.Invoke("glTexFilterFuncSGIS"));
            glAsyncMarkerSGIX = Marshal.GetDelegateForFunctionPointer<GLAsyncMarkerSGIX>(loader.Invoke("glAsyncMarkerSGIX"));
            glFinishAsyncSGIX = Marshal.GetDelegateForFunctionPointer<GLFinishAsyncSGIX>(loader.Invoke("glFinishAsyncSGIX"));
            glPollAsyncSGIX = Marshal.GetDelegateForFunctionPointer<GLPollAsyncSGIX>(loader.Invoke("glPollAsyncSGIX"));
            glGenAsyncMarkersSGIX = Marshal.GetDelegateForFunctionPointer<GLGenAsyncMarkersSGIX>(loader.Invoke("glGenAsyncMarkersSGIX"));
            glDeleteAsyncMarkersSGIX = Marshal.GetDelegateForFunctionPointer<GLDeleteAsyncMarkersSGIX>(loader.Invoke("glDeleteAsyncMarkersSGIX"));
            glIsAsyncMarkerSGIX = Marshal.GetDelegateForFunctionPointer<GLIsAsyncMarkerSGIX>(loader.Invoke("glIsAsyncMarkerSGIX"));
            glFlushRasterSGIX = Marshal.GetDelegateForFunctionPointer<GLFlushRasterSGIX>(loader.Invoke("glFlushRasterSGIX"));
            glFragmentColorMaterialSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentColorMaterialSGIX>(loader.Invoke("glFragmentColorMaterialSGIX"));
            glFragmentLightfSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightfSGIX>(loader.Invoke("glFragmentLightfSGIX"));
            glFragmentLightfvSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightfvSGIX>(loader.Invoke("glFragmentLightfvSGIX"));
            glFragmentLightiSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightiSGIX>(loader.Invoke("glFragmentLightiSGIX"));
            glFragmentLightivSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightivSGIX>(loader.Invoke("glFragmentLightivSGIX"));
            glFragmentLightModelfSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightModelfSGIX>(loader.Invoke("glFragmentLightModelfSGIX"));
            glFragmentLightModelfvSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightModelfvSGIX>(loader.Invoke("glFragmentLightModelfvSGIX"));
            glFragmentLightModeliSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightModeliSGIX>(loader.Invoke("glFragmentLightModeliSGIX"));
            glFragmentLightModelivSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentLightModelivSGIX>(loader.Invoke("glFragmentLightModelivSGIX"));
            glFragmentMaterialfSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentMaterialfSGIX>(loader.Invoke("glFragmentMaterialfSGIX"));
            glFragmentMaterialfvSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentMaterialfvSGIX>(loader.Invoke("glFragmentMaterialfvSGIX"));
            glFragmentMaterialiSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentMaterialiSGIX>(loader.Invoke("glFragmentMaterialiSGIX"));
            glFragmentMaterialivSGIX = Marshal.GetDelegateForFunctionPointer<GLFragmentMaterialivSGIX>(loader.Invoke("glFragmentMaterialivSGIX"));
            glGetFragmentLightfvSGIX = Marshal.GetDelegateForFunctionPointer<GLGetFragmentLightfvSGIX>(loader.Invoke("glGetFragmentLightfvSGIX"));
            glGetFragmentLightivSGIX = Marshal.GetDelegateForFunctionPointer<GLGetFragmentLightivSGIX>(loader.Invoke("glGetFragmentLightivSGIX"));
            glGetFragmentMaterialfvSGIX = Marshal.GetDelegateForFunctionPointer<GLGetFragmentMaterialfvSGIX>(loader.Invoke("glGetFragmentMaterialfvSGIX"));
            glGetFragmentMaterialivSGIX = Marshal.GetDelegateForFunctionPointer<GLGetFragmentMaterialivSGIX>(loader.Invoke("glGetFragmentMaterialivSGIX"));
            glLightEnviSGIX = Marshal.GetDelegateForFunctionPointer<GLLightEnviSGIX>(loader.Invoke("glLightEnviSGIX"));
            glFrameZoomSGIX = Marshal.GetDelegateForFunctionPointer<GLFrameZoomSGIX>(loader.Invoke("glFrameZoomSGIX"));
            glIglooInterfaceSGIX = Marshal.GetDelegateForFunctionPointer<GLIglooInterfaceSGIX>(loader.Invoke("glIglooInterfaceSGIX"));
            glGetInstrumentsSGIX = Marshal.GetDelegateForFunctionPointer<GLGetInstrumentsSGIX>(loader.Invoke("glGetInstrumentsSGIX"));
            glInstrumentsBufferSGIX = Marshal.GetDelegateForFunctionPointer<GLInstrumentsBufferSGIX>(loader.Invoke("glInstrumentsBufferSGIX"));
            glPollInstrumentsSGIX = Marshal.GetDelegateForFunctionPointer<GLPollInstrumentsSGIX>(loader.Invoke("glPollInstrumentsSGIX"));
            glReadInstrumentsSGIX = Marshal.GetDelegateForFunctionPointer<GLReadInstrumentsSGIX>(loader.Invoke("glReadInstrumentsSGIX"));
            glStartInstrumentsSGIX = Marshal.GetDelegateForFunctionPointer<GLStartInstrumentsSGIX>(loader.Invoke("glStartInstrumentsSGIX"));
            glStopInstrumentsSGIX = Marshal.GetDelegateForFunctionPointer<GLStopInstrumentsSGIX>(loader.Invoke("glStopInstrumentsSGIX"));
            glGetListParameterfvSGIX = Marshal.GetDelegateForFunctionPointer<GLGetListParameterfvSGIX>(loader.Invoke("glGetListParameterfvSGIX"));
            glGetListParameterivSGIX = Marshal.GetDelegateForFunctionPointer<GLGetListParameterivSGIX>(loader.Invoke("glGetListParameterivSGIX"));
            glListParameterfSGIX = Marshal.GetDelegateForFunctionPointer<GLListParameterfSGIX>(loader.Invoke("glListParameterfSGIX"));
            glListParameterfvSGIX = Marshal.GetDelegateForFunctionPointer<GLListParameterfvSGIX>(loader.Invoke("glListParameterfvSGIX"));
            glListParameteriSGIX = Marshal.GetDelegateForFunctionPointer<GLListParameteriSGIX>(loader.Invoke("glListParameteriSGIX"));
            glListParameterivSGIX = Marshal.GetDelegateForFunctionPointer<GLListParameterivSGIX>(loader.Invoke("glListParameterivSGIX"));
            glPixelTexGenSGIX = Marshal.GetDelegateForFunctionPointer<GLPixelTexGenSGIX>(loader.Invoke("glPixelTexGenSGIX"));
            glDeformationMap3dSGIX = Marshal.GetDelegateForFunctionPointer<GLDeformationMap3dSGIX>(loader.Invoke("glDeformationMap3dSGIX"));
            glDeformationMap3fSGIX = Marshal.GetDelegateForFunctionPointer<GLDeformationMap3fSGIX>(loader.Invoke("glDeformationMap3fSGIX"));
            glDeformSGIX = Marshal.GetDelegateForFunctionPointer<GLDeformSGIX>(loader.Invoke("glDeformSGIX"));
            glLoadIdentityDeformationMapSGIX = Marshal.GetDelegateForFunctionPointer<GLLoadIdentityDeformationMapSGIX>(loader.Invoke("glLoadIdentityDeformationMapSGIX"));
            glReferencePlaneSGIX = Marshal.GetDelegateForFunctionPointer<GLReferencePlaneSGIX>(loader.Invoke("glReferencePlaneSGIX"));
            glSpriteParameterfSGIX = Marshal.GetDelegateForFunctionPointer<GLSpriteParameterfSGIX>(loader.Invoke("glSpriteParameterfSGIX"));
            glSpriteParameterfvSGIX = Marshal.GetDelegateForFunctionPointer<GLSpriteParameterfvSGIX>(loader.Invoke("glSpriteParameterfvSGIX"));
            glSpriteParameteriSGIX = Marshal.GetDelegateForFunctionPointer<GLSpriteParameteriSGIX>(loader.Invoke("glSpriteParameteriSGIX"));
            glSpriteParameterivSGIX = Marshal.GetDelegateForFunctionPointer<GLSpriteParameterivSGIX>(loader.Invoke("glSpriteParameterivSGIX"));
            glTagSampleBufferSGIX = Marshal.GetDelegateForFunctionPointer<GLTagSampleBufferSGIX>(loader.Invoke("glTagSampleBufferSGIX"));
            glColorTableSGI = Marshal.GetDelegateForFunctionPointer<GLColorTableSGI>(loader.Invoke("glColorTableSGI"));
            glColorTableParameterfvSGI = Marshal.GetDelegateForFunctionPointer<GLColorTableParameterfvSGI>(loader.Invoke("glColorTableParameterfvSGI"));
            glColorTableParameterivSGI = Marshal.GetDelegateForFunctionPointer<GLColorTableParameterivSGI>(loader.Invoke("glColorTableParameterivSGI"));
            glCopyColorTableSGI = Marshal.GetDelegateForFunctionPointer<GLCopyColorTableSGI>(loader.Invoke("glCopyColorTableSGI"));
            glGetColorTableSGI = Marshal.GetDelegateForFunctionPointer<GLGetColorTableSGI>(loader.Invoke("glGetColorTableSGI"));
            glGetColorTableParameterfvSGI = Marshal.GetDelegateForFunctionPointer<GLGetColorTableParameterfvSGI>(loader.Invoke("glGetColorTableParameterfvSGI"));
            glGetColorTableParameterivSGI = Marshal.GetDelegateForFunctionPointer<GLGetColorTableParameterivSGI>(loader.Invoke("glGetColorTableParameterivSGI"));
            glFinishTextureSUNX = Marshal.GetDelegateForFunctionPointer<GLFinishTextureSUNX>(loader.Invoke("glFinishTextureSUNX"));
            glGlobalAlphaFactorbSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactorbSUN>(loader.Invoke("glGlobalAlphaFactorbSUN"));
            glGlobalAlphaFactorsSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactorsSUN>(loader.Invoke("glGlobalAlphaFactorsSUN"));
            glGlobalAlphaFactoriSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactoriSUN>(loader.Invoke("glGlobalAlphaFactoriSUN"));
            glGlobalAlphaFactorfSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactorfSUN>(loader.Invoke("glGlobalAlphaFactorfSUN"));
            glGlobalAlphaFactordSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactordSUN>(loader.Invoke("glGlobalAlphaFactordSUN"));
            glGlobalAlphaFactorubSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactorubSUN>(loader.Invoke("glGlobalAlphaFactorubSUN"));
            glGlobalAlphaFactorusSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactorusSUN>(loader.Invoke("glGlobalAlphaFactorusSUN"));
            glGlobalAlphaFactoruiSUN = Marshal.GetDelegateForFunctionPointer<GLGlobalAlphaFactoruiSUN>(loader.Invoke("glGlobalAlphaFactoruiSUN"));
            glDrawMeshArraysSUN = Marshal.GetDelegateForFunctionPointer<GLDrawMeshArraysSUN>(loader.Invoke("glDrawMeshArraysSUN"));
            glReplacementCodeuiSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiSUN>(loader.Invoke("glReplacementCodeuiSUN"));
            glReplacementCodeusSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeusSUN>(loader.Invoke("glReplacementCodeusSUN"));
            glReplacementCodeubSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeubSUN>(loader.Invoke("glReplacementCodeubSUN"));
            glReplacementCodeuivSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuivSUN>(loader.Invoke("glReplacementCodeuivSUN"));
            glReplacementCodeusvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeusvSUN>(loader.Invoke("glReplacementCodeusvSUN"));
            glReplacementCodeubvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeubvSUN>(loader.Invoke("glReplacementCodeubvSUN"));
            glReplacementCodePointerSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodePointerSUN>(loader.Invoke("glReplacementCodePointerSUN"));
            glColor4ubVertex2fSUN = Marshal.GetDelegateForFunctionPointer<GLColor4ubVertex2fSUN>(loader.Invoke("glColor4ubVertex2fSUN"));
            glColor4ubVertex2fvSUN = Marshal.GetDelegateForFunctionPointer<GLColor4ubVertex2fvSUN>(loader.Invoke("glColor4ubVertex2fvSUN"));
            glColor4ubVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLColor4ubVertex3fSUN>(loader.Invoke("glColor4ubVertex3fSUN"));
            glColor4ubVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLColor4ubVertex3fvSUN>(loader.Invoke("glColor4ubVertex3fvSUN"));
            glColor3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLColor3fVertex3fSUN>(loader.Invoke("glColor3fVertex3fSUN"));
            glColor3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLColor3fVertex3fvSUN>(loader.Invoke("glColor3fVertex3fvSUN"));
            glNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLNormal3fVertex3fSUN>(loader.Invoke("glNormal3fVertex3fSUN"));
            glNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLNormal3fVertex3fvSUN>(loader.Invoke("glNormal3fVertex3fvSUN"));
            glColor4fNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLColor4fNormal3fVertex3fSUN>(loader.Invoke("glColor4fNormal3fVertex3fSUN"));
            glColor4fNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLColor4fNormal3fVertex3fvSUN>(loader.Invoke("glColor4fNormal3fVertex3fvSUN"));
            glTexCoord2fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fVertex3fSUN>(loader.Invoke("glTexCoord2fVertex3fSUN"));
            glTexCoord2fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fVertex3fvSUN>(loader.Invoke("glTexCoord2fVertex3fvSUN"));
            glTexCoord4fVertex4fSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord4fVertex4fSUN>(loader.Invoke("glTexCoord4fVertex4fSUN"));
            glTexCoord4fVertex4fvSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord4fVertex4fvSUN>(loader.Invoke("glTexCoord4fVertex4fvSUN"));
            glTexCoord2fColor4ubVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fColor4ubVertex3fSUN>(loader.Invoke("glTexCoord2fColor4ubVertex3fSUN"));
            glTexCoord2fColor4ubVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fColor4ubVertex3fvSUN>(loader.Invoke("glTexCoord2fColor4ubVertex3fvSUN"));
            glTexCoord2fColor3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fColor3fVertex3fSUN>(loader.Invoke("glTexCoord2fColor3fVertex3fSUN"));
            glTexCoord2fColor3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fColor3fVertex3fvSUN>(loader.Invoke("glTexCoord2fColor3fVertex3fvSUN"));
            glTexCoord2fNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fNormal3fVertex3fSUN>(loader.Invoke("glTexCoord2fNormal3fVertex3fSUN"));
            glTexCoord2fNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fNormal3fVertex3fvSUN>(loader.Invoke("glTexCoord2fNormal3fVertex3fvSUN"));
            glTexCoord2fColor4fNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fColor4fNormal3fVertex3fSUN>(loader.Invoke("glTexCoord2fColor4fNormal3fVertex3fSUN"));
            glTexCoord2fColor4fNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fColor4fNormal3fVertex3fvSUN>(loader.Invoke("glTexCoord2fColor4fNormal3fVertex3fvSUN"));
            glTexCoord4fColor4fNormal3fVertex4fSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord4fColor4fNormal3fVertex4fSUN>(loader.Invoke("glTexCoord4fColor4fNormal3fVertex4fSUN"));
            glTexCoord4fColor4fNormal3fVertex4fvSUN = Marshal.GetDelegateForFunctionPointer<GLTexCoord4fColor4fNormal3fVertex4fvSUN>(loader.Invoke("glTexCoord4fColor4fNormal3fVertex4fvSUN"));
            glReplacementCodeuiVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiVertex3fSUN>(loader.Invoke("glReplacementCodeuiVertex3fSUN"));
            glReplacementCodeuiVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiVertex3fvSUN>(loader.Invoke("glReplacementCodeuiVertex3fvSUN"));
            glReplacementCodeuiColor4ubVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiColor4ubVertex3fSUN>(loader.Invoke("glReplacementCodeuiColor4ubVertex3fSUN"));
            glReplacementCodeuiColor4ubVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiColor4ubVertex3fvSUN>(loader.Invoke("glReplacementCodeuiColor4ubVertex3fvSUN"));
            glReplacementCodeuiColor3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiColor3fVertex3fSUN>(loader.Invoke("glReplacementCodeuiColor3fVertex3fSUN"));
            glReplacementCodeuiColor3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiColor3fVertex3fvSUN>(loader.Invoke("glReplacementCodeuiColor3fVertex3fvSUN"));
            glReplacementCodeuiNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiNormal3fVertex3fSUN>(loader.Invoke("glReplacementCodeuiNormal3fVertex3fSUN"));
            glReplacementCodeuiNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiNormal3fVertex3fvSUN>(loader.Invoke("glReplacementCodeuiNormal3fVertex3fvSUN"));
            glReplacementCodeuiColor4fNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiColor4fNormal3fVertex3fSUN>(loader.Invoke("glReplacementCodeuiColor4fNormal3fVertex3fSUN"));
            glReplacementCodeuiColor4fNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiColor4fNormal3fVertex3fvSUN>(loader.Invoke("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"));
            glReplacementCodeuiTexCoord2fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiTexCoord2fVertex3fSUN>(loader.Invoke("glReplacementCodeuiTexCoord2fVertex3fSUN"));
            glReplacementCodeuiTexCoord2fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiTexCoord2fVertex3fvSUN>(loader.Invoke("glReplacementCodeuiTexCoord2fVertex3fvSUN"));
            glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiTexCoord2fNormal3fVertex3fSUN>(loader.Invoke("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"));
            glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN>(loader.Invoke("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"));
            glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN>(loader.Invoke("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"));
            glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = Marshal.GetDelegateForFunctionPointer<GLReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN>(loader.Invoke("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"));
            glCullFace = Marshal.GetDelegateForFunctionPointer<GLCullFace>(loader.Invoke("glCullFace"));
            glFrontFace = Marshal.GetDelegateForFunctionPointer<GLFrontFace>(loader.Invoke("glFrontFace"));
            glHint = Marshal.GetDelegateForFunctionPointer<GLHint>(loader.Invoke("glHint"));
            glLineWidth = Marshal.GetDelegateForFunctionPointer<GLLineWidth>(loader.Invoke("glLineWidth"));
            glPointSize = Marshal.GetDelegateForFunctionPointer<GLPointSize>(loader.Invoke("glPointSize"));
            glPolygonMode = Marshal.GetDelegateForFunctionPointer<GLPolygonMode>(loader.Invoke("glPolygonMode"));
            glScissor = Marshal.GetDelegateForFunctionPointer<GLScissor>(loader.Invoke("glScissor"));
            glTexParameterf = Marshal.GetDelegateForFunctionPointer<GLTexParameterf>(loader.Invoke("glTexParameterf"));
            glTexParameterfv = Marshal.GetDelegateForFunctionPointer<GLTexParameterfv>(loader.Invoke("glTexParameterfv"));
            glTexParameteri = Marshal.GetDelegateForFunctionPointer<GLTexParameteri>(loader.Invoke("glTexParameteri"));
            glTexParameteriv = Marshal.GetDelegateForFunctionPointer<GLTexParameteriv>(loader.Invoke("glTexParameteriv"));
            glTexImage1D = Marshal.GetDelegateForFunctionPointer<GLTexImage1D>(loader.Invoke("glTexImage1D"));
            glTexImage2D = Marshal.GetDelegateForFunctionPointer<GLTexImage2D>(loader.Invoke("glTexImage2D"));
            glDrawBuffer = Marshal.GetDelegateForFunctionPointer<GLDrawBuffer>(loader.Invoke("glDrawBuffer"));
            glClear = Marshal.GetDelegateForFunctionPointer<GLClear>(loader.Invoke("glClear"));
            glClearColor = Marshal.GetDelegateForFunctionPointer<GLClearColor>(loader.Invoke("glClearColor"));
            glClearStencil = Marshal.GetDelegateForFunctionPointer<GLClearStencil>(loader.Invoke("glClearStencil"));
            glClearDepth = Marshal.GetDelegateForFunctionPointer<GLClearDepth>(loader.Invoke("glClearDepth"));
            glStencilMask = Marshal.GetDelegateForFunctionPointer<GLStencilMask>(loader.Invoke("glStencilMask"));
            glColorMask = Marshal.GetDelegateForFunctionPointer<GLColorMask>(loader.Invoke("glColorMask"));
            glDepthMask = Marshal.GetDelegateForFunctionPointer<GLDepthMask>(loader.Invoke("glDepthMask"));
            glDisable = Marshal.GetDelegateForFunctionPointer<GLDisable>(loader.Invoke("glDisable"));
            glEnable = Marshal.GetDelegateForFunctionPointer<GLEnable>(loader.Invoke("glEnable"));
            glFinish = Marshal.GetDelegateForFunctionPointer<GLFinish>(loader.Invoke("glFinish"));
            glFlush = Marshal.GetDelegateForFunctionPointer<GLFlush>(loader.Invoke("glFlush"));
            glBlendFunc = Marshal.GetDelegateForFunctionPointer<GLBlendFunc>(loader.Invoke("glBlendFunc"));
            glLogicOp = Marshal.GetDelegateForFunctionPointer<GLLogicOp>(loader.Invoke("glLogicOp"));
            glStencilFunc = Marshal.GetDelegateForFunctionPointer<GLStencilFunc>(loader.Invoke("glStencilFunc"));
            glStencilOp = Marshal.GetDelegateForFunctionPointer<GLStencilOp>(loader.Invoke("glStencilOp"));
            glDepthFunc = Marshal.GetDelegateForFunctionPointer<GLDepthFunc>(loader.Invoke("glDepthFunc"));
            glPixelStoref = Marshal.GetDelegateForFunctionPointer<GLPixelStoref>(loader.Invoke("glPixelStoref"));
            glPixelStorei = Marshal.GetDelegateForFunctionPointer<GLPixelStorei>(loader.Invoke("glPixelStorei"));
            glReadBuffer = Marshal.GetDelegateForFunctionPointer<GLReadBuffer>(loader.Invoke("glReadBuffer"));
            glReadPixels = Marshal.GetDelegateForFunctionPointer<GLReadPixels>(loader.Invoke("glReadPixels"));
            glGetBooleanv = Marshal.GetDelegateForFunctionPointer<GLGetBooleanv>(loader.Invoke("glGetBooleanv"));
            glGetDoublev = Marshal.GetDelegateForFunctionPointer<GLGetDoublev>(loader.Invoke("glGetDoublev"));
            glGetError = Marshal.GetDelegateForFunctionPointer<GLGetError>(loader.Invoke("glGetError"));
            glGetFloatv = Marshal.GetDelegateForFunctionPointer<GLGetFloatv>(loader.Invoke("glGetFloatv"));
            glGetIntegerv = Marshal.GetDelegateForFunctionPointer<GLGetIntegerv>(loader.Invoke("glGetIntegerv"));
            glGetString = Marshal.GetDelegateForFunctionPointer<GLGetString>(loader.Invoke("glGetString"));
            glGetTexImage = Marshal.GetDelegateForFunctionPointer<GLGetTexImage>(loader.Invoke("glGetTexImage"));
            glGetTexParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterfv>(loader.Invoke("glGetTexParameterfv"));
            glGetTexParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetTexParameteriv>(loader.Invoke("glGetTexParameteriv"));
            glGetTexLevelParameterfv = Marshal.GetDelegateForFunctionPointer<GLGetTexLevelParameterfv>(loader.Invoke("glGetTexLevelParameterfv"));
            glGetTexLevelParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetTexLevelParameteriv>(loader.Invoke("glGetTexLevelParameteriv"));
            glIsEnabled = Marshal.GetDelegateForFunctionPointer<GLIsEnabled>(loader.Invoke("glIsEnabled"));
            glDepthRange = Marshal.GetDelegateForFunctionPointer<GLDepthRange>(loader.Invoke("glDepthRange"));
            glViewport = Marshal.GetDelegateForFunctionPointer<GLViewport>(loader.Invoke("glViewport"));
            glNewList = Marshal.GetDelegateForFunctionPointer<GLNewList>(loader.Invoke("glNewList"));
            glEndList = Marshal.GetDelegateForFunctionPointer<GLEndList>(loader.Invoke("glEndList"));
            glCallList = Marshal.GetDelegateForFunctionPointer<GLCallList>(loader.Invoke("glCallList"));
            glCallLists = Marshal.GetDelegateForFunctionPointer<GLCallLists>(loader.Invoke("glCallLists"));
            glDeleteLists = Marshal.GetDelegateForFunctionPointer<GLDeleteLists>(loader.Invoke("glDeleteLists"));
            glGenLists = Marshal.GetDelegateForFunctionPointer<GLGenLists>(loader.Invoke("glGenLists"));
            glListBase = Marshal.GetDelegateForFunctionPointer<GLListBase>(loader.Invoke("glListBase"));
            glBegin = Marshal.GetDelegateForFunctionPointer<GLBegin>(loader.Invoke("glBegin"));
            glBitmap = Marshal.GetDelegateForFunctionPointer<GLBitmap>(loader.Invoke("glBitmap"));
            glColor3b = Marshal.GetDelegateForFunctionPointer<GLColor3b>(loader.Invoke("glColor3b"));
            glColor3bv = Marshal.GetDelegateForFunctionPointer<GLColor3bv>(loader.Invoke("glColor3bv"));
            glColor3d = Marshal.GetDelegateForFunctionPointer<GLColor3d>(loader.Invoke("glColor3d"));
            glColor3dv = Marshal.GetDelegateForFunctionPointer<GLColor3dv>(loader.Invoke("glColor3dv"));
            glColor3f = Marshal.GetDelegateForFunctionPointer<GLColor3f>(loader.Invoke("glColor3f"));
            glColor3fv = Marshal.GetDelegateForFunctionPointer<GLColor3fv>(loader.Invoke("glColor3fv"));
            glColor3i = Marshal.GetDelegateForFunctionPointer<GLColor3i>(loader.Invoke("glColor3i"));
            glColor3iv = Marshal.GetDelegateForFunctionPointer<GLColor3iv>(loader.Invoke("glColor3iv"));
            glColor3s = Marshal.GetDelegateForFunctionPointer<GLColor3s>(loader.Invoke("glColor3s"));
            glColor3sv = Marshal.GetDelegateForFunctionPointer<GLColor3sv>(loader.Invoke("glColor3sv"));
            glColor3ub = Marshal.GetDelegateForFunctionPointer<GLColor3ub>(loader.Invoke("glColor3ub"));
            glColor3ubv = Marshal.GetDelegateForFunctionPointer<GLColor3ubv>(loader.Invoke("glColor3ubv"));
            glColor3ui = Marshal.GetDelegateForFunctionPointer<GLColor3ui>(loader.Invoke("glColor3ui"));
            glColor3uiv = Marshal.GetDelegateForFunctionPointer<GLColor3uiv>(loader.Invoke("glColor3uiv"));
            glColor3us = Marshal.GetDelegateForFunctionPointer<GLColor3us>(loader.Invoke("glColor3us"));
            glColor3usv = Marshal.GetDelegateForFunctionPointer<GLColor3usv>(loader.Invoke("glColor3usv"));
            glColor4b = Marshal.GetDelegateForFunctionPointer<GLColor4b>(loader.Invoke("glColor4b"));
            glColor4bv = Marshal.GetDelegateForFunctionPointer<GLColor4bv>(loader.Invoke("glColor4bv"));
            glColor4d = Marshal.GetDelegateForFunctionPointer<GLColor4d>(loader.Invoke("glColor4d"));
            glColor4dv = Marshal.GetDelegateForFunctionPointer<GLColor4dv>(loader.Invoke("glColor4dv"));
            glColor4f = Marshal.GetDelegateForFunctionPointer<GLColor4f>(loader.Invoke("glColor4f"));
            glColor4fv = Marshal.GetDelegateForFunctionPointer<GLColor4fv>(loader.Invoke("glColor4fv"));
            glColor4i = Marshal.GetDelegateForFunctionPointer<GLColor4i>(loader.Invoke("glColor4i"));
            glColor4iv = Marshal.GetDelegateForFunctionPointer<GLColor4iv>(loader.Invoke("glColor4iv"));
            glColor4s = Marshal.GetDelegateForFunctionPointer<GLColor4s>(loader.Invoke("glColor4s"));
            glColor4sv = Marshal.GetDelegateForFunctionPointer<GLColor4sv>(loader.Invoke("glColor4sv"));
            glColor4ub = Marshal.GetDelegateForFunctionPointer<GLColor4ub>(loader.Invoke("glColor4ub"));
            glColor4ubv = Marshal.GetDelegateForFunctionPointer<GLColor4ubv>(loader.Invoke("glColor4ubv"));
            glColor4ui = Marshal.GetDelegateForFunctionPointer<GLColor4ui>(loader.Invoke("glColor4ui"));
            glColor4uiv = Marshal.GetDelegateForFunctionPointer<GLColor4uiv>(loader.Invoke("glColor4uiv"));
            glColor4us = Marshal.GetDelegateForFunctionPointer<GLColor4us>(loader.Invoke("glColor4us"));
            glColor4usv = Marshal.GetDelegateForFunctionPointer<GLColor4usv>(loader.Invoke("glColor4usv"));
            glEdgeFlag = Marshal.GetDelegateForFunctionPointer<GLEdgeFlag>(loader.Invoke("glEdgeFlag"));
            glEdgeFlagv = Marshal.GetDelegateForFunctionPointer<GLEdgeFlagv>(loader.Invoke("glEdgeFlagv"));
            glEnd = Marshal.GetDelegateForFunctionPointer<GLEnd>(loader.Invoke("glEnd"));
            glIndexd = Marshal.GetDelegateForFunctionPointer<GLIndexd>(loader.Invoke("glIndexd"));
            glIndexdv = Marshal.GetDelegateForFunctionPointer<GLIndexdv>(loader.Invoke("glIndexdv"));
            glIndexf = Marshal.GetDelegateForFunctionPointer<GLIndexf>(loader.Invoke("glIndexf"));
            glIndexfv = Marshal.GetDelegateForFunctionPointer<GLIndexfv>(loader.Invoke("glIndexfv"));
            glIndexi = Marshal.GetDelegateForFunctionPointer<GLIndexi>(loader.Invoke("glIndexi"));
            glIndexiv = Marshal.GetDelegateForFunctionPointer<GLIndexiv>(loader.Invoke("glIndexiv"));
            glIndexs = Marshal.GetDelegateForFunctionPointer<GLIndexs>(loader.Invoke("glIndexs"));
            glIndexsv = Marshal.GetDelegateForFunctionPointer<GLIndexsv>(loader.Invoke("glIndexsv"));
            glNormal3b = Marshal.GetDelegateForFunctionPointer<GLNormal3b>(loader.Invoke("glNormal3b"));
            glNormal3bv = Marshal.GetDelegateForFunctionPointer<GLNormal3bv>(loader.Invoke("glNormal3bv"));
            glNormal3d = Marshal.GetDelegateForFunctionPointer<GLNormal3d>(loader.Invoke("glNormal3d"));
            glNormal3dv = Marshal.GetDelegateForFunctionPointer<GLNormal3dv>(loader.Invoke("glNormal3dv"));
            glNormal3f = Marshal.GetDelegateForFunctionPointer<GLNormal3f>(loader.Invoke("glNormal3f"));
            glNormal3fv = Marshal.GetDelegateForFunctionPointer<GLNormal3fv>(loader.Invoke("glNormal3fv"));
            glNormal3i = Marshal.GetDelegateForFunctionPointer<GLNormal3i>(loader.Invoke("glNormal3i"));
            glNormal3iv = Marshal.GetDelegateForFunctionPointer<GLNormal3iv>(loader.Invoke("glNormal3iv"));
            glNormal3s = Marshal.GetDelegateForFunctionPointer<GLNormal3s>(loader.Invoke("glNormal3s"));
            glNormal3sv = Marshal.GetDelegateForFunctionPointer<GLNormal3sv>(loader.Invoke("glNormal3sv"));
            glRasterPos2d = Marshal.GetDelegateForFunctionPointer<GLRasterPos2d>(loader.Invoke("glRasterPos2d"));
            glRasterPos2dv = Marshal.GetDelegateForFunctionPointer<GLRasterPos2dv>(loader.Invoke("glRasterPos2dv"));
            glRasterPos2f = Marshal.GetDelegateForFunctionPointer<GLRasterPos2f>(loader.Invoke("glRasterPos2f"));
            glRasterPos2fv = Marshal.GetDelegateForFunctionPointer<GLRasterPos2fv>(loader.Invoke("glRasterPos2fv"));
            glRasterPos2i = Marshal.GetDelegateForFunctionPointer<GLRasterPos2i>(loader.Invoke("glRasterPos2i"));
            glRasterPos2iv = Marshal.GetDelegateForFunctionPointer<GLRasterPos2iv>(loader.Invoke("glRasterPos2iv"));
            glRasterPos2s = Marshal.GetDelegateForFunctionPointer<GLRasterPos2s>(loader.Invoke("glRasterPos2s"));
            glRasterPos2sv = Marshal.GetDelegateForFunctionPointer<GLRasterPos2sv>(loader.Invoke("glRasterPos2sv"));
            glRasterPos3d = Marshal.GetDelegateForFunctionPointer<GLRasterPos3d>(loader.Invoke("glRasterPos3d"));
            glRasterPos3dv = Marshal.GetDelegateForFunctionPointer<GLRasterPos3dv>(loader.Invoke("glRasterPos3dv"));
            glRasterPos3f = Marshal.GetDelegateForFunctionPointer<GLRasterPos3f>(loader.Invoke("glRasterPos3f"));
            glRasterPos3fv = Marshal.GetDelegateForFunctionPointer<GLRasterPos3fv>(loader.Invoke("glRasterPos3fv"));
            glRasterPos3i = Marshal.GetDelegateForFunctionPointer<GLRasterPos3i>(loader.Invoke("glRasterPos3i"));
            glRasterPos3iv = Marshal.GetDelegateForFunctionPointer<GLRasterPos3iv>(loader.Invoke("glRasterPos3iv"));
            glRasterPos3s = Marshal.GetDelegateForFunctionPointer<GLRasterPos3s>(loader.Invoke("glRasterPos3s"));
            glRasterPos3sv = Marshal.GetDelegateForFunctionPointer<GLRasterPos3sv>(loader.Invoke("glRasterPos3sv"));
            glRasterPos4d = Marshal.GetDelegateForFunctionPointer<GLRasterPos4d>(loader.Invoke("glRasterPos4d"));
            glRasterPos4dv = Marshal.GetDelegateForFunctionPointer<GLRasterPos4dv>(loader.Invoke("glRasterPos4dv"));
            glRasterPos4f = Marshal.GetDelegateForFunctionPointer<GLRasterPos4f>(loader.Invoke("glRasterPos4f"));
            glRasterPos4fv = Marshal.GetDelegateForFunctionPointer<GLRasterPos4fv>(loader.Invoke("glRasterPos4fv"));
            glRasterPos4i = Marshal.GetDelegateForFunctionPointer<GLRasterPos4i>(loader.Invoke("glRasterPos4i"));
            glRasterPos4iv = Marshal.GetDelegateForFunctionPointer<GLRasterPos4iv>(loader.Invoke("glRasterPos4iv"));
            glRasterPos4s = Marshal.GetDelegateForFunctionPointer<GLRasterPos4s>(loader.Invoke("glRasterPos4s"));
            glRasterPos4sv = Marshal.GetDelegateForFunctionPointer<GLRasterPos4sv>(loader.Invoke("glRasterPos4sv"));
            glRectd = Marshal.GetDelegateForFunctionPointer<GLRectd>(loader.Invoke("glRectd"));
            glRectdv = Marshal.GetDelegateForFunctionPointer<GLRectdv>(loader.Invoke("glRectdv"));
            glRectf = Marshal.GetDelegateForFunctionPointer<GLRectf>(loader.Invoke("glRectf"));
            glRectfv = Marshal.GetDelegateForFunctionPointer<GLRectfv>(loader.Invoke("glRectfv"));
            glRecti = Marshal.GetDelegateForFunctionPointer<GLRecti>(loader.Invoke("glRecti"));
            glRectiv = Marshal.GetDelegateForFunctionPointer<GLRectiv>(loader.Invoke("glRectiv"));
            glRects = Marshal.GetDelegateForFunctionPointer<GLRects>(loader.Invoke("glRects"));
            glRectsv = Marshal.GetDelegateForFunctionPointer<GLRectsv>(loader.Invoke("glRectsv"));
            glTexCoord1d = Marshal.GetDelegateForFunctionPointer<GLTexCoord1d>(loader.Invoke("glTexCoord1d"));
            glTexCoord1dv = Marshal.GetDelegateForFunctionPointer<GLTexCoord1dv>(loader.Invoke("glTexCoord1dv"));
            glTexCoord1f = Marshal.GetDelegateForFunctionPointer<GLTexCoord1f>(loader.Invoke("glTexCoord1f"));
            glTexCoord1fv = Marshal.GetDelegateForFunctionPointer<GLTexCoord1fv>(loader.Invoke("glTexCoord1fv"));
            glTexCoord1i = Marshal.GetDelegateForFunctionPointer<GLTexCoord1i>(loader.Invoke("glTexCoord1i"));
            glTexCoord1iv = Marshal.GetDelegateForFunctionPointer<GLTexCoord1iv>(loader.Invoke("glTexCoord1iv"));
            glTexCoord1s = Marshal.GetDelegateForFunctionPointer<GLTexCoord1s>(loader.Invoke("glTexCoord1s"));
            glTexCoord1sv = Marshal.GetDelegateForFunctionPointer<GLTexCoord1sv>(loader.Invoke("glTexCoord1sv"));
            glTexCoord2d = Marshal.GetDelegateForFunctionPointer<GLTexCoord2d>(loader.Invoke("glTexCoord2d"));
            glTexCoord2dv = Marshal.GetDelegateForFunctionPointer<GLTexCoord2dv>(loader.Invoke("glTexCoord2dv"));
            glTexCoord2f = Marshal.GetDelegateForFunctionPointer<GLTexCoord2f>(loader.Invoke("glTexCoord2f"));
            glTexCoord2fv = Marshal.GetDelegateForFunctionPointer<GLTexCoord2fv>(loader.Invoke("glTexCoord2fv"));
            glTexCoord2i = Marshal.GetDelegateForFunctionPointer<GLTexCoord2i>(loader.Invoke("glTexCoord2i"));
            glTexCoord2iv = Marshal.GetDelegateForFunctionPointer<GLTexCoord2iv>(loader.Invoke("glTexCoord2iv"));
            glTexCoord2s = Marshal.GetDelegateForFunctionPointer<GLTexCoord2s>(loader.Invoke("glTexCoord2s"));
            glTexCoord2sv = Marshal.GetDelegateForFunctionPointer<GLTexCoord2sv>(loader.Invoke("glTexCoord2sv"));
            glTexCoord3d = Marshal.GetDelegateForFunctionPointer<GLTexCoord3d>(loader.Invoke("glTexCoord3d"));
            glTexCoord3dv = Marshal.GetDelegateForFunctionPointer<GLTexCoord3dv>(loader.Invoke("glTexCoord3dv"));
            glTexCoord3f = Marshal.GetDelegateForFunctionPointer<GLTexCoord3f>(loader.Invoke("glTexCoord3f"));
            glTexCoord3fv = Marshal.GetDelegateForFunctionPointer<GLTexCoord3fv>(loader.Invoke("glTexCoord3fv"));
            glTexCoord3i = Marshal.GetDelegateForFunctionPointer<GLTexCoord3i>(loader.Invoke("glTexCoord3i"));
            glTexCoord3iv = Marshal.GetDelegateForFunctionPointer<GLTexCoord3iv>(loader.Invoke("glTexCoord3iv"));
            glTexCoord3s = Marshal.GetDelegateForFunctionPointer<GLTexCoord3s>(loader.Invoke("glTexCoord3s"));
            glTexCoord3sv = Marshal.GetDelegateForFunctionPointer<GLTexCoord3sv>(loader.Invoke("glTexCoord3sv"));
            glTexCoord4d = Marshal.GetDelegateForFunctionPointer<GLTexCoord4d>(loader.Invoke("glTexCoord4d"));
            glTexCoord4dv = Marshal.GetDelegateForFunctionPointer<GLTexCoord4dv>(loader.Invoke("glTexCoord4dv"));
            glTexCoord4f = Marshal.GetDelegateForFunctionPointer<GLTexCoord4f>(loader.Invoke("glTexCoord4f"));
            glTexCoord4fv = Marshal.GetDelegateForFunctionPointer<GLTexCoord4fv>(loader.Invoke("glTexCoord4fv"));
            glTexCoord4i = Marshal.GetDelegateForFunctionPointer<GLTexCoord4i>(loader.Invoke("glTexCoord4i"));
            glTexCoord4iv = Marshal.GetDelegateForFunctionPointer<GLTexCoord4iv>(loader.Invoke("glTexCoord4iv"));
            glTexCoord4s = Marshal.GetDelegateForFunctionPointer<GLTexCoord4s>(loader.Invoke("glTexCoord4s"));
            glTexCoord4sv = Marshal.GetDelegateForFunctionPointer<GLTexCoord4sv>(loader.Invoke("glTexCoord4sv"));
            glVertex2d = Marshal.GetDelegateForFunctionPointer<GLVertex2d>(loader.Invoke("glVertex2d"));
            glVertex2dv = Marshal.GetDelegateForFunctionPointer<GLVertex2dv>(loader.Invoke("glVertex2dv"));
            glVertex2f = Marshal.GetDelegateForFunctionPointer<GLVertex2f>(loader.Invoke("glVertex2f"));
            glVertex2fv = Marshal.GetDelegateForFunctionPointer<GLVertex2fv>(loader.Invoke("glVertex2fv"));
            glVertex2i = Marshal.GetDelegateForFunctionPointer<GLVertex2i>(loader.Invoke("glVertex2i"));
            glVertex2iv = Marshal.GetDelegateForFunctionPointer<GLVertex2iv>(loader.Invoke("glVertex2iv"));
            glVertex2s = Marshal.GetDelegateForFunctionPointer<GLVertex2s>(loader.Invoke("glVertex2s"));
            glVertex2sv = Marshal.GetDelegateForFunctionPointer<GLVertex2sv>(loader.Invoke("glVertex2sv"));
            glVertex3d = Marshal.GetDelegateForFunctionPointer<GLVertex3d>(loader.Invoke("glVertex3d"));
            glVertex3dv = Marshal.GetDelegateForFunctionPointer<GLVertex3dv>(loader.Invoke("glVertex3dv"));
            glVertex3f = Marshal.GetDelegateForFunctionPointer<GLVertex3f>(loader.Invoke("glVertex3f"));
            glVertex3fv = Marshal.GetDelegateForFunctionPointer<GLVertex3fv>(loader.Invoke("glVertex3fv"));
            glVertex3i = Marshal.GetDelegateForFunctionPointer<GLVertex3i>(loader.Invoke("glVertex3i"));
            glVertex3iv = Marshal.GetDelegateForFunctionPointer<GLVertex3iv>(loader.Invoke("glVertex3iv"));
            glVertex3s = Marshal.GetDelegateForFunctionPointer<GLVertex3s>(loader.Invoke("glVertex3s"));
            glVertex3sv = Marshal.GetDelegateForFunctionPointer<GLVertex3sv>(loader.Invoke("glVertex3sv"));
            glVertex4d = Marshal.GetDelegateForFunctionPointer<GLVertex4d>(loader.Invoke("glVertex4d"));
            glVertex4dv = Marshal.GetDelegateForFunctionPointer<GLVertex4dv>(loader.Invoke("glVertex4dv"));
            glVertex4f = Marshal.GetDelegateForFunctionPointer<GLVertex4f>(loader.Invoke("glVertex4f"));
            glVertex4fv = Marshal.GetDelegateForFunctionPointer<GLVertex4fv>(loader.Invoke("glVertex4fv"));
            glVertex4i = Marshal.GetDelegateForFunctionPointer<GLVertex4i>(loader.Invoke("glVertex4i"));
            glVertex4iv = Marshal.GetDelegateForFunctionPointer<GLVertex4iv>(loader.Invoke("glVertex4iv"));
            glVertex4s = Marshal.GetDelegateForFunctionPointer<GLVertex4s>(loader.Invoke("glVertex4s"));
            glVertex4sv = Marshal.GetDelegateForFunctionPointer<GLVertex4sv>(loader.Invoke("glVertex4sv"));
            glClipPlane = Marshal.GetDelegateForFunctionPointer<GLClipPlane>(loader.Invoke("glClipPlane"));
            glColorMaterial = Marshal.GetDelegateForFunctionPointer<GLColorMaterial>(loader.Invoke("glColorMaterial"));
            glFogf = Marshal.GetDelegateForFunctionPointer<GLFogf>(loader.Invoke("glFogf"));
            glFogfv = Marshal.GetDelegateForFunctionPointer<GLFogfv>(loader.Invoke("glFogfv"));
            glFogi = Marshal.GetDelegateForFunctionPointer<GLFogi>(loader.Invoke("glFogi"));
            glFogiv = Marshal.GetDelegateForFunctionPointer<GLFogiv>(loader.Invoke("glFogiv"));
            glLightf = Marshal.GetDelegateForFunctionPointer<GLLightf>(loader.Invoke("glLightf"));
            glLightfv = Marshal.GetDelegateForFunctionPointer<GLLightfv>(loader.Invoke("glLightfv"));
            glLighti = Marshal.GetDelegateForFunctionPointer<GLLighti>(loader.Invoke("glLighti"));
            glLightiv = Marshal.GetDelegateForFunctionPointer<GLLightiv>(loader.Invoke("glLightiv"));
            glLightModelf = Marshal.GetDelegateForFunctionPointer<GLLightModelf>(loader.Invoke("glLightModelf"));
            glLightModelfv = Marshal.GetDelegateForFunctionPointer<GLLightModelfv>(loader.Invoke("glLightModelfv"));
            glLightModeli = Marshal.GetDelegateForFunctionPointer<GLLightModeli>(loader.Invoke("glLightModeli"));
            glLightModeliv = Marshal.GetDelegateForFunctionPointer<GLLightModeliv>(loader.Invoke("glLightModeliv"));
            glLineStipple = Marshal.GetDelegateForFunctionPointer<GLLineStipple>(loader.Invoke("glLineStipple"));
            glMaterialf = Marshal.GetDelegateForFunctionPointer<GLMaterialf>(loader.Invoke("glMaterialf"));
            glMaterialfv = Marshal.GetDelegateForFunctionPointer<GLMaterialfv>(loader.Invoke("glMaterialfv"));
            glMateriali = Marshal.GetDelegateForFunctionPointer<GLMateriali>(loader.Invoke("glMateriali"));
            glMaterialiv = Marshal.GetDelegateForFunctionPointer<GLMaterialiv>(loader.Invoke("glMaterialiv"));
            glPolygonStipple = Marshal.GetDelegateForFunctionPointer<GLPolygonStipple>(loader.Invoke("glPolygonStipple"));
            glShadeModel = Marshal.GetDelegateForFunctionPointer<GLShadeModel>(loader.Invoke("glShadeModel"));
            glTexEnvf = Marshal.GetDelegateForFunctionPointer<GLTexEnvf>(loader.Invoke("glTexEnvf"));
            glTexEnvfv = Marshal.GetDelegateForFunctionPointer<GLTexEnvfv>(loader.Invoke("glTexEnvfv"));
            glTexEnvi = Marshal.GetDelegateForFunctionPointer<GLTexEnvi>(loader.Invoke("glTexEnvi"));
            glTexEnviv = Marshal.GetDelegateForFunctionPointer<GLTexEnviv>(loader.Invoke("glTexEnviv"));
            glTexGend = Marshal.GetDelegateForFunctionPointer<GLTexGend>(loader.Invoke("glTexGend"));
            glTexGendv = Marshal.GetDelegateForFunctionPointer<GLTexGendv>(loader.Invoke("glTexGendv"));
            glTexGenf = Marshal.GetDelegateForFunctionPointer<GLTexGenf>(loader.Invoke("glTexGenf"));
            glTexGenfv = Marshal.GetDelegateForFunctionPointer<GLTexGenfv>(loader.Invoke("glTexGenfv"));
            glTexGeni = Marshal.GetDelegateForFunctionPointer<GLTexGeni>(loader.Invoke("glTexGeni"));
            glTexGeniv = Marshal.GetDelegateForFunctionPointer<GLTexGeniv>(loader.Invoke("glTexGeniv"));
            glFeedbackBuffer = Marshal.GetDelegateForFunctionPointer<GLFeedbackBuffer>(loader.Invoke("glFeedbackBuffer"));
            glSelectBuffer = Marshal.GetDelegateForFunctionPointer<GLSelectBuffer>(loader.Invoke("glSelectBuffer"));
            glRenderMode = Marshal.GetDelegateForFunctionPointer<GLRenderMode>(loader.Invoke("glRenderMode"));
            glInitNames = Marshal.GetDelegateForFunctionPointer<GLInitNames>(loader.Invoke("glInitNames"));
            glLoadName = Marshal.GetDelegateForFunctionPointer<GLLoadName>(loader.Invoke("glLoadName"));
            glPassThrough = Marshal.GetDelegateForFunctionPointer<GLPassThrough>(loader.Invoke("glPassThrough"));
            glPopName = Marshal.GetDelegateForFunctionPointer<GLPopName>(loader.Invoke("glPopName"));
            glPushName = Marshal.GetDelegateForFunctionPointer<GLPushName>(loader.Invoke("glPushName"));
            glClearAccum = Marshal.GetDelegateForFunctionPointer<GLClearAccum>(loader.Invoke("glClearAccum"));
            glClearIndex = Marshal.GetDelegateForFunctionPointer<GLClearIndex>(loader.Invoke("glClearIndex"));
            glIndexMask = Marshal.GetDelegateForFunctionPointer<GLIndexMask>(loader.Invoke("glIndexMask"));
            glAccum = Marshal.GetDelegateForFunctionPointer<GLAccum>(loader.Invoke("glAccum"));
            glPopAttrib = Marshal.GetDelegateForFunctionPointer<GLPopAttrib>(loader.Invoke("glPopAttrib"));
            glPushAttrib = Marshal.GetDelegateForFunctionPointer<GLPushAttrib>(loader.Invoke("glPushAttrib"));
            glMap1d = Marshal.GetDelegateForFunctionPointer<GLMap1d>(loader.Invoke("glMap1d"));
            glMap1f = Marshal.GetDelegateForFunctionPointer<GLMap1f>(loader.Invoke("glMap1f"));
            glMap2d = Marshal.GetDelegateForFunctionPointer<GLMap2d>(loader.Invoke("glMap2d"));
            glMap2f = Marshal.GetDelegateForFunctionPointer<GLMap2f>(loader.Invoke("glMap2f"));
            glMapGrid1d = Marshal.GetDelegateForFunctionPointer<GLMapGrid1d>(loader.Invoke("glMapGrid1d"));
            glMapGrid1f = Marshal.GetDelegateForFunctionPointer<GLMapGrid1f>(loader.Invoke("glMapGrid1f"));
            glMapGrid2d = Marshal.GetDelegateForFunctionPointer<GLMapGrid2d>(loader.Invoke("glMapGrid2d"));
            glMapGrid2f = Marshal.GetDelegateForFunctionPointer<GLMapGrid2f>(loader.Invoke("glMapGrid2f"));
            glEvalCoord1d = Marshal.GetDelegateForFunctionPointer<GLEvalCoord1d>(loader.Invoke("glEvalCoord1d"));
            glEvalCoord1dv = Marshal.GetDelegateForFunctionPointer<GLEvalCoord1dv>(loader.Invoke("glEvalCoord1dv"));
            glEvalCoord1f = Marshal.GetDelegateForFunctionPointer<GLEvalCoord1f>(loader.Invoke("glEvalCoord1f"));
            glEvalCoord1fv = Marshal.GetDelegateForFunctionPointer<GLEvalCoord1fv>(loader.Invoke("glEvalCoord1fv"));
            glEvalCoord2d = Marshal.GetDelegateForFunctionPointer<GLEvalCoord2d>(loader.Invoke("glEvalCoord2d"));
            glEvalCoord2dv = Marshal.GetDelegateForFunctionPointer<GLEvalCoord2dv>(loader.Invoke("glEvalCoord2dv"));
            glEvalCoord2f = Marshal.GetDelegateForFunctionPointer<GLEvalCoord2f>(loader.Invoke("glEvalCoord2f"));
            glEvalCoord2fv = Marshal.GetDelegateForFunctionPointer<GLEvalCoord2fv>(loader.Invoke("glEvalCoord2fv"));
            glEvalMesh1 = Marshal.GetDelegateForFunctionPointer<GLEvalMesh1>(loader.Invoke("glEvalMesh1"));
            glEvalPoint1 = Marshal.GetDelegateForFunctionPointer<GLEvalPoint1>(loader.Invoke("glEvalPoint1"));
            glEvalMesh2 = Marshal.GetDelegateForFunctionPointer<GLEvalMesh2>(loader.Invoke("glEvalMesh2"));
            glEvalPoint2 = Marshal.GetDelegateForFunctionPointer<GLEvalPoint2>(loader.Invoke("glEvalPoint2"));
            glAlphaFunc = Marshal.GetDelegateForFunctionPointer<GLAlphaFunc>(loader.Invoke("glAlphaFunc"));
            glPixelZoom = Marshal.GetDelegateForFunctionPointer<GLPixelZoom>(loader.Invoke("glPixelZoom"));
            glPixelTransferf = Marshal.GetDelegateForFunctionPointer<GLPixelTransferf>(loader.Invoke("glPixelTransferf"));
            glPixelTransferi = Marshal.GetDelegateForFunctionPointer<GLPixelTransferi>(loader.Invoke("glPixelTransferi"));
            glPixelMapfv = Marshal.GetDelegateForFunctionPointer<GLPixelMapfv>(loader.Invoke("glPixelMapfv"));
            glPixelMapuiv = Marshal.GetDelegateForFunctionPointer<GLPixelMapuiv>(loader.Invoke("glPixelMapuiv"));
            glPixelMapusv = Marshal.GetDelegateForFunctionPointer<GLPixelMapusv>(loader.Invoke("glPixelMapusv"));
            glCopyPixels = Marshal.GetDelegateForFunctionPointer<GLCopyPixels>(loader.Invoke("glCopyPixels"));
            glDrawPixels = Marshal.GetDelegateForFunctionPointer<GLDrawPixels>(loader.Invoke("glDrawPixels"));
            glGetClipPlane = Marshal.GetDelegateForFunctionPointer<GLGetClipPlane>(loader.Invoke("glGetClipPlane"));
            glGetLightfv = Marshal.GetDelegateForFunctionPointer<GLGetLightfv>(loader.Invoke("glGetLightfv"));
            glGetLightiv = Marshal.GetDelegateForFunctionPointer<GLGetLightiv>(loader.Invoke("glGetLightiv"));
            glGetMapdv = Marshal.GetDelegateForFunctionPointer<GLGetMapdv>(loader.Invoke("glGetMapdv"));
            glGetMapfv = Marshal.GetDelegateForFunctionPointer<GLGetMapfv>(loader.Invoke("glGetMapfv"));
            glGetMapiv = Marshal.GetDelegateForFunctionPointer<GLGetMapiv>(loader.Invoke("glGetMapiv"));
            glGetMaterialfv = Marshal.GetDelegateForFunctionPointer<GLGetMaterialfv>(loader.Invoke("glGetMaterialfv"));
            glGetMaterialiv = Marshal.GetDelegateForFunctionPointer<GLGetMaterialiv>(loader.Invoke("glGetMaterialiv"));
            glGetPixelMapfv = Marshal.GetDelegateForFunctionPointer<GLGetPixelMapfv>(loader.Invoke("glGetPixelMapfv"));
            glGetPixelMapuiv = Marshal.GetDelegateForFunctionPointer<GLGetPixelMapuiv>(loader.Invoke("glGetPixelMapuiv"));
            glGetPixelMapusv = Marshal.GetDelegateForFunctionPointer<GLGetPixelMapusv>(loader.Invoke("glGetPixelMapusv"));
            glGetPolygonStipple = Marshal.GetDelegateForFunctionPointer<GLGetPolygonStipple>(loader.Invoke("glGetPolygonStipple"));
            glGetTexEnvfv = Marshal.GetDelegateForFunctionPointer<GLGetTexEnvfv>(loader.Invoke("glGetTexEnvfv"));
            glGetTexEnviv = Marshal.GetDelegateForFunctionPointer<GLGetTexEnviv>(loader.Invoke("glGetTexEnviv"));
            glGetTexGendv = Marshal.GetDelegateForFunctionPointer<GLGetTexGendv>(loader.Invoke("glGetTexGendv"));
            glGetTexGenfv = Marshal.GetDelegateForFunctionPointer<GLGetTexGenfv>(loader.Invoke("glGetTexGenfv"));
            glGetTexGeniv = Marshal.GetDelegateForFunctionPointer<GLGetTexGeniv>(loader.Invoke("glGetTexGeniv"));
            glIsList = Marshal.GetDelegateForFunctionPointer<GLIsList>(loader.Invoke("glIsList"));
            glFrustum = Marshal.GetDelegateForFunctionPointer<GLFrustum>(loader.Invoke("glFrustum"));
            glLoadIdentity = Marshal.GetDelegateForFunctionPointer<GLLoadIdentity>(loader.Invoke("glLoadIdentity"));
            glLoadMatrixf = Marshal.GetDelegateForFunctionPointer<GLLoadMatrixf>(loader.Invoke("glLoadMatrixf"));
            glLoadMatrixd = Marshal.GetDelegateForFunctionPointer<GLLoadMatrixd>(loader.Invoke("glLoadMatrixd"));
            glMatrixMode = Marshal.GetDelegateForFunctionPointer<GLMatrixMode>(loader.Invoke("glMatrixMode"));
            glMultMatrixf = Marshal.GetDelegateForFunctionPointer<GLMultMatrixf>(loader.Invoke("glMultMatrixf"));
            glMultMatrixd = Marshal.GetDelegateForFunctionPointer<GLMultMatrixd>(loader.Invoke("glMultMatrixd"));
            glOrtho = Marshal.GetDelegateForFunctionPointer<GLOrtho>(loader.Invoke("glOrtho"));
            glPopMatrix = Marshal.GetDelegateForFunctionPointer<GLPopMatrix>(loader.Invoke("glPopMatrix"));
            glPushMatrix = Marshal.GetDelegateForFunctionPointer<GLPushMatrix>(loader.Invoke("glPushMatrix"));
            glRotated = Marshal.GetDelegateForFunctionPointer<GLRotated>(loader.Invoke("glRotated"));
            glRotatef = Marshal.GetDelegateForFunctionPointer<GLRotatef>(loader.Invoke("glRotatef"));
            glScaled = Marshal.GetDelegateForFunctionPointer<GLScaled>(loader.Invoke("glScaled"));
            glScalef = Marshal.GetDelegateForFunctionPointer<GLScalef>(loader.Invoke("glScalef"));
            glTranslated = Marshal.GetDelegateForFunctionPointer<GLTranslated>(loader.Invoke("glTranslated"));
            glTranslatef = Marshal.GetDelegateForFunctionPointer<GLTranslatef>(loader.Invoke("glTranslatef"));
            glDrawArrays = Marshal.GetDelegateForFunctionPointer<GLDrawArrays>(loader.Invoke("glDrawArrays"));
            glDrawElements = Marshal.GetDelegateForFunctionPointer<GLDrawElements>(loader.Invoke("glDrawElements"));
            glPolygonOffset = Marshal.GetDelegateForFunctionPointer<GLPolygonOffset>(loader.Invoke("glPolygonOffset"));
            glCopyTexImage1D = Marshal.GetDelegateForFunctionPointer<GLCopyTexImage1D>(loader.Invoke("glCopyTexImage1D"));
            glCopyTexImage2D = Marshal.GetDelegateForFunctionPointer<GLCopyTexImage2D>(loader.Invoke("glCopyTexImage2D"));
            glCopyTexSubImage1D = Marshal.GetDelegateForFunctionPointer<GLCopyTexSubImage1D>(loader.Invoke("glCopyTexSubImage1D"));
            glCopyTexSubImage2D = Marshal.GetDelegateForFunctionPointer<GLCopyTexSubImage2D>(loader.Invoke("glCopyTexSubImage2D"));
            glTexSubImage1D = Marshal.GetDelegateForFunctionPointer<GLTexSubImage1D>(loader.Invoke("glTexSubImage1D"));
            glTexSubImage2D = Marshal.GetDelegateForFunctionPointer<GLTexSubImage2D>(loader.Invoke("glTexSubImage2D"));
            glBindTexture = Marshal.GetDelegateForFunctionPointer<GLBindTexture>(loader.Invoke("glBindTexture"));
            glDeleteTextures = Marshal.GetDelegateForFunctionPointer<GLDeleteTextures>(loader.Invoke("glDeleteTextures"));
            glGenTextures = Marshal.GetDelegateForFunctionPointer<GLGenTextures>(loader.Invoke("glGenTextures"));
            glIsTexture = Marshal.GetDelegateForFunctionPointer<GLIsTexture>(loader.Invoke("glIsTexture"));
            glArrayElement = Marshal.GetDelegateForFunctionPointer<GLArrayElement>(loader.Invoke("glArrayElement"));
            glColorPointer = Marshal.GetDelegateForFunctionPointer<GLColorPointer>(loader.Invoke("glColorPointer"));
            glDisableClientState = Marshal.GetDelegateForFunctionPointer<GLDisableClientState>(loader.Invoke("glDisableClientState"));
            glEdgeFlagPointer = Marshal.GetDelegateForFunctionPointer<GLEdgeFlagPointer>(loader.Invoke("glEdgeFlagPointer"));
            glEnableClientState = Marshal.GetDelegateForFunctionPointer<GLEnableClientState>(loader.Invoke("glEnableClientState"));
            glIndexPointer = Marshal.GetDelegateForFunctionPointer<GLIndexPointer>(loader.Invoke("glIndexPointer"));
            glInterleavedArrays = Marshal.GetDelegateForFunctionPointer<GLInterleavedArrays>(loader.Invoke("glInterleavedArrays"));
            glNormalPointer = Marshal.GetDelegateForFunctionPointer<GLNormalPointer>(loader.Invoke("glNormalPointer"));
            glTexCoordPointer = Marshal.GetDelegateForFunctionPointer<GLTexCoordPointer>(loader.Invoke("glTexCoordPointer"));
            glVertexPointer = Marshal.GetDelegateForFunctionPointer<GLVertexPointer>(loader.Invoke("glVertexPointer"));
            glAreTexturesResident = Marshal.GetDelegateForFunctionPointer<GLAreTexturesResident>(loader.Invoke("glAreTexturesResident"));
            glPrioritizeTextures = Marshal.GetDelegateForFunctionPointer<GLPrioritizeTextures>(loader.Invoke("glPrioritizeTextures"));
            glIndexub = Marshal.GetDelegateForFunctionPointer<GLIndexub>(loader.Invoke("glIndexub"));
            glIndexubv = Marshal.GetDelegateForFunctionPointer<GLIndexubv>(loader.Invoke("glIndexubv"));
            glPopClientAttrib = Marshal.GetDelegateForFunctionPointer<GLPopClientAttrib>(loader.Invoke("glPopClientAttrib"));
            glPushClientAttrib = Marshal.GetDelegateForFunctionPointer<GLPushClientAttrib>(loader.Invoke("glPushClientAttrib"));
            glDrawRangeElements = Marshal.GetDelegateForFunctionPointer<GLDrawRangeElements>(loader.Invoke("glDrawRangeElements"));
            glTexImage3D = Marshal.GetDelegateForFunctionPointer<GLTexImage3D>(loader.Invoke("glTexImage3D"));
            glTexSubImage3D = Marshal.GetDelegateForFunctionPointer<GLTexSubImage3D>(loader.Invoke("glTexSubImage3D"));
            glCopyTexSubImage3D = Marshal.GetDelegateForFunctionPointer<GLCopyTexSubImage3D>(loader.Invoke("glCopyTexSubImage3D"));
            glActiveTexture = Marshal.GetDelegateForFunctionPointer<GLActiveTexture>(loader.Invoke("glActiveTexture"));
            glSampleCoverage = Marshal.GetDelegateForFunctionPointer<GLSampleCoverage>(loader.Invoke("glSampleCoverage"));
            glCompressedTexImage3D = Marshal.GetDelegateForFunctionPointer<GLCompressedTexImage3D>(loader.Invoke("glCompressedTexImage3D"));
            glCompressedTexImage2D = Marshal.GetDelegateForFunctionPointer<GLCompressedTexImage2D>(loader.Invoke("glCompressedTexImage2D"));
            glCompressedTexImage1D = Marshal.GetDelegateForFunctionPointer<GLCompressedTexImage1D>(loader.Invoke("glCompressedTexImage1D"));
            glCompressedTexSubImage3D = Marshal.GetDelegateForFunctionPointer<GLCompressedTexSubImage3D>(loader.Invoke("glCompressedTexSubImage3D"));
            glCompressedTexSubImage2D = Marshal.GetDelegateForFunctionPointer<GLCompressedTexSubImage2D>(loader.Invoke("glCompressedTexSubImage2D"));
            glCompressedTexSubImage1D = Marshal.GetDelegateForFunctionPointer<GLCompressedTexSubImage1D>(loader.Invoke("glCompressedTexSubImage1D"));
            glGetCompressedTexImage = Marshal.GetDelegateForFunctionPointer<GLGetCompressedTexImage>(loader.Invoke("glGetCompressedTexImage"));
            glClientActiveTexture = Marshal.GetDelegateForFunctionPointer<GLClientActiveTexture>(loader.Invoke("glClientActiveTexture"));
            glMultiTexCoord1d = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1d>(loader.Invoke("glMultiTexCoord1d"));
            glMultiTexCoord1dv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1dv>(loader.Invoke("glMultiTexCoord1dv"));
            glMultiTexCoord1f = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1f>(loader.Invoke("glMultiTexCoord1f"));
            glMultiTexCoord1fv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1fv>(loader.Invoke("glMultiTexCoord1fv"));
            glMultiTexCoord1i = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1i>(loader.Invoke("glMultiTexCoord1i"));
            glMultiTexCoord1iv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1iv>(loader.Invoke("glMultiTexCoord1iv"));
            glMultiTexCoord1s = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1s>(loader.Invoke("glMultiTexCoord1s"));
            glMultiTexCoord1sv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord1sv>(loader.Invoke("glMultiTexCoord1sv"));
            glMultiTexCoord2d = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2d>(loader.Invoke("glMultiTexCoord2d"));
            glMultiTexCoord2dv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2dv>(loader.Invoke("glMultiTexCoord2dv"));
            glMultiTexCoord2f = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2f>(loader.Invoke("glMultiTexCoord2f"));
            glMultiTexCoord2fv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2fv>(loader.Invoke("glMultiTexCoord2fv"));
            glMultiTexCoord2i = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2i>(loader.Invoke("glMultiTexCoord2i"));
            glMultiTexCoord2iv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2iv>(loader.Invoke("glMultiTexCoord2iv"));
            glMultiTexCoord2s = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2s>(loader.Invoke("glMultiTexCoord2s"));
            glMultiTexCoord2sv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord2sv>(loader.Invoke("glMultiTexCoord2sv"));
            glMultiTexCoord3d = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3d>(loader.Invoke("glMultiTexCoord3d"));
            glMultiTexCoord3dv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3dv>(loader.Invoke("glMultiTexCoord3dv"));
            glMultiTexCoord3f = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3f>(loader.Invoke("glMultiTexCoord3f"));
            glMultiTexCoord3fv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3fv>(loader.Invoke("glMultiTexCoord3fv"));
            glMultiTexCoord3i = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3i>(loader.Invoke("glMultiTexCoord3i"));
            glMultiTexCoord3iv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3iv>(loader.Invoke("glMultiTexCoord3iv"));
            glMultiTexCoord3s = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3s>(loader.Invoke("glMultiTexCoord3s"));
            glMultiTexCoord3sv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord3sv>(loader.Invoke("glMultiTexCoord3sv"));
            glMultiTexCoord4d = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4d>(loader.Invoke("glMultiTexCoord4d"));
            glMultiTexCoord4dv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4dv>(loader.Invoke("glMultiTexCoord4dv"));
            glMultiTexCoord4f = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4f>(loader.Invoke("glMultiTexCoord4f"));
            glMultiTexCoord4fv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4fv>(loader.Invoke("glMultiTexCoord4fv"));
            glMultiTexCoord4i = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4i>(loader.Invoke("glMultiTexCoord4i"));
            glMultiTexCoord4iv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4iv>(loader.Invoke("glMultiTexCoord4iv"));
            glMultiTexCoord4s = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4s>(loader.Invoke("glMultiTexCoord4s"));
            glMultiTexCoord4sv = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4sv>(loader.Invoke("glMultiTexCoord4sv"));
            glLoadTransposeMatrixf = Marshal.GetDelegateForFunctionPointer<GLLoadTransposeMatrixf>(loader.Invoke("glLoadTransposeMatrixf"));
            glLoadTransposeMatrixd = Marshal.GetDelegateForFunctionPointer<GLLoadTransposeMatrixd>(loader.Invoke("glLoadTransposeMatrixd"));
            glMultTransposeMatrixf = Marshal.GetDelegateForFunctionPointer<GLMultTransposeMatrixf>(loader.Invoke("glMultTransposeMatrixf"));
            glMultTransposeMatrixd = Marshal.GetDelegateForFunctionPointer<GLMultTransposeMatrixd>(loader.Invoke("glMultTransposeMatrixd"));
            glBlendFuncSeparate = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparate>(loader.Invoke("glBlendFuncSeparate"));
            glMultiDrawArrays = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArrays>(loader.Invoke("glMultiDrawArrays"));
            glMultiDrawElements = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElements>(loader.Invoke("glMultiDrawElements"));
            glPointParameterf = Marshal.GetDelegateForFunctionPointer<GLPointParameterf>(loader.Invoke("glPointParameterf"));
            glPointParameterfv = Marshal.GetDelegateForFunctionPointer<GLPointParameterfv>(loader.Invoke("glPointParameterfv"));
            glPointParameteri = Marshal.GetDelegateForFunctionPointer<GLPointParameteri>(loader.Invoke("glPointParameteri"));
            glPointParameteriv = Marshal.GetDelegateForFunctionPointer<GLPointParameteriv>(loader.Invoke("glPointParameteriv"));
            glFogCoordf = Marshal.GetDelegateForFunctionPointer<GLFogCoordf>(loader.Invoke("glFogCoordf"));
            glFogCoordfv = Marshal.GetDelegateForFunctionPointer<GLFogCoordfv>(loader.Invoke("glFogCoordfv"));
            glFogCoordd = Marshal.GetDelegateForFunctionPointer<GLFogCoordd>(loader.Invoke("glFogCoordd"));
            glFogCoorddv = Marshal.GetDelegateForFunctionPointer<GLFogCoorddv>(loader.Invoke("glFogCoorddv"));
            glFogCoordPointer = Marshal.GetDelegateForFunctionPointer<GLFogCoordPointer>(loader.Invoke("glFogCoordPointer"));
            glSecondaryColor3b = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3b>(loader.Invoke("glSecondaryColor3b"));
            glSecondaryColor3bv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3bv>(loader.Invoke("glSecondaryColor3bv"));
            glSecondaryColor3d = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3d>(loader.Invoke("glSecondaryColor3d"));
            glSecondaryColor3dv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3dv>(loader.Invoke("glSecondaryColor3dv"));
            glSecondaryColor3f = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3f>(loader.Invoke("glSecondaryColor3f"));
            glSecondaryColor3fv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3fv>(loader.Invoke("glSecondaryColor3fv"));
            glSecondaryColor3i = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3i>(loader.Invoke("glSecondaryColor3i"));
            glSecondaryColor3iv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3iv>(loader.Invoke("glSecondaryColor3iv"));
            glSecondaryColor3s = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3s>(loader.Invoke("glSecondaryColor3s"));
            glSecondaryColor3sv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3sv>(loader.Invoke("glSecondaryColor3sv"));
            glSecondaryColor3ub = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3ub>(loader.Invoke("glSecondaryColor3ub"));
            glSecondaryColor3ubv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3ubv>(loader.Invoke("glSecondaryColor3ubv"));
            glSecondaryColor3ui = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3ui>(loader.Invoke("glSecondaryColor3ui"));
            glSecondaryColor3uiv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3uiv>(loader.Invoke("glSecondaryColor3uiv"));
            glSecondaryColor3us = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3us>(loader.Invoke("glSecondaryColor3us"));
            glSecondaryColor3usv = Marshal.GetDelegateForFunctionPointer<GLSecondaryColor3usv>(loader.Invoke("glSecondaryColor3usv"));
            glSecondaryColorPointer = Marshal.GetDelegateForFunctionPointer<GLSecondaryColorPointer>(loader.Invoke("glSecondaryColorPointer"));
            glWindowPos2d = Marshal.GetDelegateForFunctionPointer<GLWindowPos2d>(loader.Invoke("glWindowPos2d"));
            glWindowPos2dv = Marshal.GetDelegateForFunctionPointer<GLWindowPos2dv>(loader.Invoke("glWindowPos2dv"));
            glWindowPos2f = Marshal.GetDelegateForFunctionPointer<GLWindowPos2f>(loader.Invoke("glWindowPos2f"));
            glWindowPos2fv = Marshal.GetDelegateForFunctionPointer<GLWindowPos2fv>(loader.Invoke("glWindowPos2fv"));
            glWindowPos2i = Marshal.GetDelegateForFunctionPointer<GLWindowPos2i>(loader.Invoke("glWindowPos2i"));
            glWindowPos2iv = Marshal.GetDelegateForFunctionPointer<GLWindowPos2iv>(loader.Invoke("glWindowPos2iv"));
            glWindowPos2s = Marshal.GetDelegateForFunctionPointer<GLWindowPos2s>(loader.Invoke("glWindowPos2s"));
            glWindowPos2sv = Marshal.GetDelegateForFunctionPointer<GLWindowPos2sv>(loader.Invoke("glWindowPos2sv"));
            glWindowPos3d = Marshal.GetDelegateForFunctionPointer<GLWindowPos3d>(loader.Invoke("glWindowPos3d"));
            glWindowPos3dv = Marshal.GetDelegateForFunctionPointer<GLWindowPos3dv>(loader.Invoke("glWindowPos3dv"));
            glWindowPos3f = Marshal.GetDelegateForFunctionPointer<GLWindowPos3f>(loader.Invoke("glWindowPos3f"));
            glWindowPos3fv = Marshal.GetDelegateForFunctionPointer<GLWindowPos3fv>(loader.Invoke("glWindowPos3fv"));
            glWindowPos3i = Marshal.GetDelegateForFunctionPointer<GLWindowPos3i>(loader.Invoke("glWindowPos3i"));
            glWindowPos3iv = Marshal.GetDelegateForFunctionPointer<GLWindowPos3iv>(loader.Invoke("glWindowPos3iv"));
            glWindowPos3s = Marshal.GetDelegateForFunctionPointer<GLWindowPos3s>(loader.Invoke("glWindowPos3s"));
            glWindowPos3sv = Marshal.GetDelegateForFunctionPointer<GLWindowPos3sv>(loader.Invoke("glWindowPos3sv"));
            glGenQueries = Marshal.GetDelegateForFunctionPointer<GLGenQueries>(loader.Invoke("glGenQueries"));
            glDeleteQueries = Marshal.GetDelegateForFunctionPointer<GLDeleteQueries>(loader.Invoke("glDeleteQueries"));
            glIsQuery = Marshal.GetDelegateForFunctionPointer<GLIsQuery>(loader.Invoke("glIsQuery"));
            glBeginQuery = Marshal.GetDelegateForFunctionPointer<GLBeginQuery>(loader.Invoke("glBeginQuery"));
            glEndQuery = Marshal.GetDelegateForFunctionPointer<GLEndQuery>(loader.Invoke("glEndQuery"));
            glGetQueryiv = Marshal.GetDelegateForFunctionPointer<GLGetQueryiv>(loader.Invoke("glGetQueryiv"));
            glGetQueryObjectiv = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectiv>(loader.Invoke("glGetQueryObjectiv"));
            glGetQueryObjectuiv = Marshal.GetDelegateForFunctionPointer<GLGetQueryObjectuiv>(loader.Invoke("glGetQueryObjectuiv"));
            glBindBuffer = Marshal.GetDelegateForFunctionPointer<GLBindBuffer>(loader.Invoke("glBindBuffer"));
            glDeleteBuffers = Marshal.GetDelegateForFunctionPointer<GLDeleteBuffers>(loader.Invoke("glDeleteBuffers"));
            glGenBuffers = Marshal.GetDelegateForFunctionPointer<GLGenBuffers>(loader.Invoke("glGenBuffers"));
            glIsBuffer = Marshal.GetDelegateForFunctionPointer<GLIsBuffer>(loader.Invoke("glIsBuffer"));
            glBufferData = Marshal.GetDelegateForFunctionPointer<GLBufferData>(loader.Invoke("glBufferData"));
            glBufferSubData = Marshal.GetDelegateForFunctionPointer<GLBufferSubData>(loader.Invoke("glBufferSubData"));
            glGetBufferSubData = Marshal.GetDelegateForFunctionPointer<GLGetBufferSubData>(loader.Invoke("glGetBufferSubData"));
            glMapBuffer = Marshal.GetDelegateForFunctionPointer<GLMapBuffer>(loader.Invoke("glMapBuffer"));
            glUnmapBuffer = Marshal.GetDelegateForFunctionPointer<GLUnmapBuffer>(loader.Invoke("glUnmapBuffer"));
            glGetBufferParameteriv = Marshal.GetDelegateForFunctionPointer<GLGetBufferParameteriv>(loader.Invoke("glGetBufferParameteriv"));
            glGetBufferPointerv = Marshal.GetDelegateForFunctionPointer<GLGetBufferPointerv>(loader.Invoke("glGetBufferPointerv"));
            glBlendEquationSeparate = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparate>(loader.Invoke("glBlendEquationSeparate"));
            glDrawBuffers = Marshal.GetDelegateForFunctionPointer<GLDrawBuffers>(loader.Invoke("glDrawBuffers"));
            glStencilOpSeparate = Marshal.GetDelegateForFunctionPointer<GLStencilOpSeparate>(loader.Invoke("glStencilOpSeparate"));
            glStencilFuncSeparate = Marshal.GetDelegateForFunctionPointer<GLStencilFuncSeparate>(loader.Invoke("glStencilFuncSeparate"));
            glStencilMaskSeparate = Marshal.GetDelegateForFunctionPointer<GLStencilMaskSeparate>(loader.Invoke("glStencilMaskSeparate"));
            glAttachShader = Marshal.GetDelegateForFunctionPointer<GLAttachShader>(loader.Invoke("glAttachShader"));
            glBindAttribLocation = Marshal.GetDelegateForFunctionPointer<GLBindAttribLocation>(loader.Invoke("glBindAttribLocation"));
            glCompileShader = Marshal.GetDelegateForFunctionPointer<GLCompileShader>(loader.Invoke("glCompileShader"));
            glCreateProgram = Marshal.GetDelegateForFunctionPointer<GLCreateProgram>(loader.Invoke("glCreateProgram"));
            glCreateShader = Marshal.GetDelegateForFunctionPointer<GLCreateShader>(loader.Invoke("glCreateShader"));
            glDeleteProgram = Marshal.GetDelegateForFunctionPointer<GLDeleteProgram>(loader.Invoke("glDeleteProgram"));
            glDeleteShader = Marshal.GetDelegateForFunctionPointer<GLDeleteShader>(loader.Invoke("glDeleteShader"));
            glDetachShader = Marshal.GetDelegateForFunctionPointer<GLDetachShader>(loader.Invoke("glDetachShader"));
            glDisableVertexAttribArray = Marshal.GetDelegateForFunctionPointer<GLDisableVertexAttribArray>(loader.Invoke("glDisableVertexAttribArray"));
            glEnableVertexAttribArray = Marshal.GetDelegateForFunctionPointer<GLEnableVertexAttribArray>(loader.Invoke("glEnableVertexAttribArray"));
            glGetActiveAttrib = Marshal.GetDelegateForFunctionPointer<GLGetActiveAttrib>(loader.Invoke("glGetActiveAttrib"));
            glGetActiveUniform = Marshal.GetDelegateForFunctionPointer<GLGetActiveUniform>(loader.Invoke("glGetActiveUniform"));
            glGetAttachedShaders = Marshal.GetDelegateForFunctionPointer<GLGetAttachedShaders>(loader.Invoke("glGetAttachedShaders"));
            glGetAttribLocation = Marshal.GetDelegateForFunctionPointer<GLGetAttribLocation>(loader.Invoke("glGetAttribLocation"));
            glGetProgramiv = Marshal.GetDelegateForFunctionPointer<GLGetProgramiv>(loader.Invoke("glGetProgramiv"));
            glGetProgramInfoLog = Marshal.GetDelegateForFunctionPointer<GLGetProgramInfoLog>(loader.Invoke("glGetProgramInfoLog"));
            glGetShaderiv = Marshal.GetDelegateForFunctionPointer<GLGetShaderiv>(loader.Invoke("glGetShaderiv"));
            glGetShaderInfoLog = Marshal.GetDelegateForFunctionPointer<GLGetShaderInfoLog>(loader.Invoke("glGetShaderInfoLog"));
            glGetShaderSource = Marshal.GetDelegateForFunctionPointer<GLGetShaderSource>(loader.Invoke("glGetShaderSource"));
            glGetUniformLocation = Marshal.GetDelegateForFunctionPointer<GLGetUniformLocation>(loader.Invoke("glGetUniformLocation"));
            glGetUniformfv = Marshal.GetDelegateForFunctionPointer<GLGetUniformfv>(loader.Invoke("glGetUniformfv"));
            glGetUniformiv = Marshal.GetDelegateForFunctionPointer<GLGetUniformiv>(loader.Invoke("glGetUniformiv"));
            glGetVertexAttribdv = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribdv>(loader.Invoke("glGetVertexAttribdv"));
            glGetVertexAttribfv = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribfv>(loader.Invoke("glGetVertexAttribfv"));
            glGetVertexAttribiv = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribiv>(loader.Invoke("glGetVertexAttribiv"));
            glGetVertexAttribPointerv = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribPointerv>(loader.Invoke("glGetVertexAttribPointerv"));
            glIsProgram = Marshal.GetDelegateForFunctionPointer<GLIsProgram>(loader.Invoke("glIsProgram"));
            glIsShader = Marshal.GetDelegateForFunctionPointer<GLIsShader>(loader.Invoke("glIsShader"));
            glLinkProgram = Marshal.GetDelegateForFunctionPointer<GLLinkProgram>(loader.Invoke("glLinkProgram"));
            glShaderSource = Marshal.GetDelegateForFunctionPointer<GLShaderSource>(loader.Invoke("glShaderSource"));
            glUseProgram = Marshal.GetDelegateForFunctionPointer<GLUseProgram>(loader.Invoke("glUseProgram"));
            glUniform1f = Marshal.GetDelegateForFunctionPointer<GLUniform1f>(loader.Invoke("glUniform1f"));
            glUniform2f = Marshal.GetDelegateForFunctionPointer<GLUniform2f>(loader.Invoke("glUniform2f"));
            glUniform3f = Marshal.GetDelegateForFunctionPointer<GLUniform3f>(loader.Invoke("glUniform3f"));
            glUniform4f = Marshal.GetDelegateForFunctionPointer<GLUniform4f>(loader.Invoke("glUniform4f"));
            glUniform1i = Marshal.GetDelegateForFunctionPointer<GLUniform1i>(loader.Invoke("glUniform1i"));
            glUniform2i = Marshal.GetDelegateForFunctionPointer<GLUniform2i>(loader.Invoke("glUniform2i"));
            glUniform3i = Marshal.GetDelegateForFunctionPointer<GLUniform3i>(loader.Invoke("glUniform3i"));
            glUniform4i = Marshal.GetDelegateForFunctionPointer<GLUniform4i>(loader.Invoke("glUniform4i"));
            glUniform1fv = Marshal.GetDelegateForFunctionPointer<GLUniform1fv>(loader.Invoke("glUniform1fv"));
            glUniform2fv = Marshal.GetDelegateForFunctionPointer<GLUniform2fv>(loader.Invoke("glUniform2fv"));
            glUniform3fv = Marshal.GetDelegateForFunctionPointer<GLUniform3fv>(loader.Invoke("glUniform3fv"));
            glUniform4fv = Marshal.GetDelegateForFunctionPointer<GLUniform4fv>(loader.Invoke("glUniform4fv"));
            glUniform1iv = Marshal.GetDelegateForFunctionPointer<GLUniform1iv>(loader.Invoke("glUniform1iv"));
            glUniform2iv = Marshal.GetDelegateForFunctionPointer<GLUniform2iv>(loader.Invoke("glUniform2iv"));
            glUniform3iv = Marshal.GetDelegateForFunctionPointer<GLUniform3iv>(loader.Invoke("glUniform3iv"));
            glUniform4iv = Marshal.GetDelegateForFunctionPointer<GLUniform4iv>(loader.Invoke("glUniform4iv"));
            glUniformMatrix2fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2fv>(loader.Invoke("glUniformMatrix2fv"));
            glUniformMatrix3fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3fv>(loader.Invoke("glUniformMatrix3fv"));
            glUniformMatrix4fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4fv>(loader.Invoke("glUniformMatrix4fv"));
            glValidateProgram = Marshal.GetDelegateForFunctionPointer<GLValidateProgram>(loader.Invoke("glValidateProgram"));
            glVertexAttrib1d = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1d>(loader.Invoke("glVertexAttrib1d"));
            glVertexAttrib1dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1dv>(loader.Invoke("glVertexAttrib1dv"));
            glVertexAttrib1f = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1f>(loader.Invoke("glVertexAttrib1f"));
            glVertexAttrib1fv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1fv>(loader.Invoke("glVertexAttrib1fv"));
            glVertexAttrib1s = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1s>(loader.Invoke("glVertexAttrib1s"));
            glVertexAttrib1sv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib1sv>(loader.Invoke("glVertexAttrib1sv"));
            glVertexAttrib2d = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2d>(loader.Invoke("glVertexAttrib2d"));
            glVertexAttrib2dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2dv>(loader.Invoke("glVertexAttrib2dv"));
            glVertexAttrib2f = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2f>(loader.Invoke("glVertexAttrib2f"));
            glVertexAttrib2fv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2fv>(loader.Invoke("glVertexAttrib2fv"));
            glVertexAttrib2s = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2s>(loader.Invoke("glVertexAttrib2s"));
            glVertexAttrib2sv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib2sv>(loader.Invoke("glVertexAttrib2sv"));
            glVertexAttrib3d = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3d>(loader.Invoke("glVertexAttrib3d"));
            glVertexAttrib3dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3dv>(loader.Invoke("glVertexAttrib3dv"));
            glVertexAttrib3f = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3f>(loader.Invoke("glVertexAttrib3f"));
            glVertexAttrib3fv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3fv>(loader.Invoke("glVertexAttrib3fv"));
            glVertexAttrib3s = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3s>(loader.Invoke("glVertexAttrib3s"));
            glVertexAttrib3sv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib3sv>(loader.Invoke("glVertexAttrib3sv"));
            glVertexAttrib4Nbv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4Nbv>(loader.Invoke("glVertexAttrib4Nbv"));
            glVertexAttrib4Niv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4Niv>(loader.Invoke("glVertexAttrib4Niv"));
            glVertexAttrib4Nsv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4Nsv>(loader.Invoke("glVertexAttrib4Nsv"));
            glVertexAttrib4Nub = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4Nub>(loader.Invoke("glVertexAttrib4Nub"));
            glVertexAttrib4Nubv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4Nubv>(loader.Invoke("glVertexAttrib4Nubv"));
            glVertexAttrib4Nuiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4Nuiv>(loader.Invoke("glVertexAttrib4Nuiv"));
            glVertexAttrib4Nusv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4Nusv>(loader.Invoke("glVertexAttrib4Nusv"));
            glVertexAttrib4bv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4bv>(loader.Invoke("glVertexAttrib4bv"));
            glVertexAttrib4d = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4d>(loader.Invoke("glVertexAttrib4d"));
            glVertexAttrib4dv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4dv>(loader.Invoke("glVertexAttrib4dv"));
            glVertexAttrib4f = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4f>(loader.Invoke("glVertexAttrib4f"));
            glVertexAttrib4fv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4fv>(loader.Invoke("glVertexAttrib4fv"));
            glVertexAttrib4iv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4iv>(loader.Invoke("glVertexAttrib4iv"));
            glVertexAttrib4s = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4s>(loader.Invoke("glVertexAttrib4s"));
            glVertexAttrib4sv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4sv>(loader.Invoke("glVertexAttrib4sv"));
            glVertexAttrib4ubv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4ubv>(loader.Invoke("glVertexAttrib4ubv"));
            glVertexAttrib4uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4uiv>(loader.Invoke("glVertexAttrib4uiv"));
            glVertexAttrib4usv = Marshal.GetDelegateForFunctionPointer<GLVertexAttrib4usv>(loader.Invoke("glVertexAttrib4usv"));
            glVertexAttribPointer = Marshal.GetDelegateForFunctionPointer<GLVertexAttribPointer>(loader.Invoke("glVertexAttribPointer"));
            glUniformMatrix2x3fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2x3fv>(loader.Invoke("glUniformMatrix2x3fv"));
            glUniformMatrix3x2fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3x2fv>(loader.Invoke("glUniformMatrix3x2fv"));
            glUniformMatrix2x4fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix2x4fv>(loader.Invoke("glUniformMatrix2x4fv"));
            glUniformMatrix4x2fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4x2fv>(loader.Invoke("glUniformMatrix4x2fv"));
            glUniformMatrix3x4fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix3x4fv>(loader.Invoke("glUniformMatrix3x4fv"));
            glUniformMatrix4x3fv = Marshal.GetDelegateForFunctionPointer<GLUniformMatrix4x3fv>(loader.Invoke("glUniformMatrix4x3fv"));
            glColorMaski = Marshal.GetDelegateForFunctionPointer<GLColorMaski>(loader.Invoke("glColorMaski"));
            glGetBooleani_v = Marshal.GetDelegateForFunctionPointer<GLGetBooleani_v>(loader.Invoke("glGetBooleani_v"));
            glEnablei = Marshal.GetDelegateForFunctionPointer<GLEnablei>(loader.Invoke("glEnablei"));
            glDisablei = Marshal.GetDelegateForFunctionPointer<GLDisablei>(loader.Invoke("glDisablei"));
            glIsEnabledi = Marshal.GetDelegateForFunctionPointer<GLIsEnabledi>(loader.Invoke("glIsEnabledi"));
            glBeginTransformFeedback = Marshal.GetDelegateForFunctionPointer<GLBeginTransformFeedback>(loader.Invoke("glBeginTransformFeedback"));
            glEndTransformFeedback = Marshal.GetDelegateForFunctionPointer<GLEndTransformFeedback>(loader.Invoke("glEndTransformFeedback"));
            glTransformFeedbackVaryings = Marshal.GetDelegateForFunctionPointer<GLTransformFeedbackVaryings>(loader.Invoke("glTransformFeedbackVaryings"));
            glGetTransformFeedbackVarying = Marshal.GetDelegateForFunctionPointer<GLGetTransformFeedbackVarying>(loader.Invoke("glGetTransformFeedbackVarying"));
            glClampColor = Marshal.GetDelegateForFunctionPointer<GLClampColor>(loader.Invoke("glClampColor"));
            glBeginConditionalRender = Marshal.GetDelegateForFunctionPointer<GLBeginConditionalRender>(loader.Invoke("glBeginConditionalRender"));
            glEndConditionalRender = Marshal.GetDelegateForFunctionPointer<GLEndConditionalRender>(loader.Invoke("glEndConditionalRender"));
            glVertexAttribIPointer = Marshal.GetDelegateForFunctionPointer<GLVertexAttribIPointer>(loader.Invoke("glVertexAttribIPointer"));
            glGetVertexAttribIiv = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribIiv>(loader.Invoke("glGetVertexAttribIiv"));
            glGetVertexAttribIuiv = Marshal.GetDelegateForFunctionPointer<GLGetVertexAttribIuiv>(loader.Invoke("glGetVertexAttribIuiv"));
            glVertexAttribI1i = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1i>(loader.Invoke("glVertexAttribI1i"));
            glVertexAttribI2i = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2i>(loader.Invoke("glVertexAttribI2i"));
            glVertexAttribI3i = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3i>(loader.Invoke("glVertexAttribI3i"));
            glVertexAttribI4i = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4i>(loader.Invoke("glVertexAttribI4i"));
            glVertexAttribI1ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1ui>(loader.Invoke("glVertexAttribI1ui"));
            glVertexAttribI2ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2ui>(loader.Invoke("glVertexAttribI2ui"));
            glVertexAttribI3ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3ui>(loader.Invoke("glVertexAttribI3ui"));
            glVertexAttribI4ui = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4ui>(loader.Invoke("glVertexAttribI4ui"));
            glVertexAttribI1iv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1iv>(loader.Invoke("glVertexAttribI1iv"));
            glVertexAttribI2iv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2iv>(loader.Invoke("glVertexAttribI2iv"));
            glVertexAttribI3iv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3iv>(loader.Invoke("glVertexAttribI3iv"));
            glVertexAttribI4iv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4iv>(loader.Invoke("glVertexAttribI4iv"));
            glVertexAttribI1uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI1uiv>(loader.Invoke("glVertexAttribI1uiv"));
            glVertexAttribI2uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI2uiv>(loader.Invoke("glVertexAttribI2uiv"));
            glVertexAttribI3uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI3uiv>(loader.Invoke("glVertexAttribI3uiv"));
            glVertexAttribI4uiv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4uiv>(loader.Invoke("glVertexAttribI4uiv"));
            glVertexAttribI4bv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4bv>(loader.Invoke("glVertexAttribI4bv"));
            glVertexAttribI4sv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4sv>(loader.Invoke("glVertexAttribI4sv"));
            glVertexAttribI4ubv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4ubv>(loader.Invoke("glVertexAttribI4ubv"));
            glVertexAttribI4usv = Marshal.GetDelegateForFunctionPointer<GLVertexAttribI4usv>(loader.Invoke("glVertexAttribI4usv"));
            glGetUniformuiv = Marshal.GetDelegateForFunctionPointer<GLGetUniformuiv>(loader.Invoke("glGetUniformuiv"));
            glBindFragDataLocation = Marshal.GetDelegateForFunctionPointer<GLBindFragDataLocation>(loader.Invoke("glBindFragDataLocation"));
            glGetFragDataLocation = Marshal.GetDelegateForFunctionPointer<GLGetFragDataLocation>(loader.Invoke("glGetFragDataLocation"));
            glUniform1ui = Marshal.GetDelegateForFunctionPointer<GLUniform1ui>(loader.Invoke("glUniform1ui"));
            glUniform2ui = Marshal.GetDelegateForFunctionPointer<GLUniform2ui>(loader.Invoke("glUniform2ui"));
            glUniform3ui = Marshal.GetDelegateForFunctionPointer<GLUniform3ui>(loader.Invoke("glUniform3ui"));
            glUniform4ui = Marshal.GetDelegateForFunctionPointer<GLUniform4ui>(loader.Invoke("glUniform4ui"));
            glUniform1uiv = Marshal.GetDelegateForFunctionPointer<GLUniform1uiv>(loader.Invoke("glUniform1uiv"));
            glUniform2uiv = Marshal.GetDelegateForFunctionPointer<GLUniform2uiv>(loader.Invoke("glUniform2uiv"));
            glUniform3uiv = Marshal.GetDelegateForFunctionPointer<GLUniform3uiv>(loader.Invoke("glUniform3uiv"));
            glUniform4uiv = Marshal.GetDelegateForFunctionPointer<GLUniform4uiv>(loader.Invoke("glUniform4uiv"));
            glTexParameterIiv = Marshal.GetDelegateForFunctionPointer<GLTexParameterIiv>(loader.Invoke("glTexParameterIiv"));
            glTexParameterIuiv = Marshal.GetDelegateForFunctionPointer<GLTexParameterIuiv>(loader.Invoke("glTexParameterIuiv"));
            glGetTexParameterIiv = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterIiv>(loader.Invoke("glGetTexParameterIiv"));
            glGetTexParameterIuiv = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterIuiv>(loader.Invoke("glGetTexParameterIuiv"));
            glClearBufferiv = Marshal.GetDelegateForFunctionPointer<GLClearBufferiv>(loader.Invoke("glClearBufferiv"));
            glClearBufferuiv = Marshal.GetDelegateForFunctionPointer<GLClearBufferuiv>(loader.Invoke("glClearBufferuiv"));
            glClearBufferfv = Marshal.GetDelegateForFunctionPointer<GLClearBufferfv>(loader.Invoke("glClearBufferfv"));
            glClearBufferfi = Marshal.GetDelegateForFunctionPointer<GLClearBufferfi>(loader.Invoke("glClearBufferfi"));
            glGetStringi = Marshal.GetDelegateForFunctionPointer<GLGetStringi>(loader.Invoke("glGetStringi"));
            glDrawArraysInstanced = Marshal.GetDelegateForFunctionPointer<GLDrawArraysInstanced>(loader.Invoke("glDrawArraysInstanced"));
            glDrawElementsInstanced = Marshal.GetDelegateForFunctionPointer<GLDrawElementsInstanced>(loader.Invoke("glDrawElementsInstanced"));
            glTexBuffer = Marshal.GetDelegateForFunctionPointer<GLTexBuffer>(loader.Invoke("glTexBuffer"));
            glPrimitiveRestartIndex = Marshal.GetDelegateForFunctionPointer<GLPrimitiveRestartIndex>(loader.Invoke("glPrimitiveRestartIndex"));
            glGetInteger64i_v = Marshal.GetDelegateForFunctionPointer<GLGetInteger64i_v>(loader.Invoke("glGetInteger64i_v"));
            glGetBufferParameteri64v = Marshal.GetDelegateForFunctionPointer<GLGetBufferParameteri64v>(loader.Invoke("glGetBufferParameteri64v"));
            glFramebufferTexture = Marshal.GetDelegateForFunctionPointer<GLFramebufferTexture>(loader.Invoke("glFramebufferTexture"));
            glVertexAttribDivisor = Marshal.GetDelegateForFunctionPointer<GLVertexAttribDivisor>(loader.Invoke("glVertexAttribDivisor"));
            glMinSampleShading = Marshal.GetDelegateForFunctionPointer<GLMinSampleShading>(loader.Invoke("glMinSampleShading"));
            glBlendEquationi = Marshal.GetDelegateForFunctionPointer<GLBlendEquationi>(loader.Invoke("glBlendEquationi"));
            glBlendEquationSeparatei = Marshal.GetDelegateForFunctionPointer<GLBlendEquationSeparatei>(loader.Invoke("glBlendEquationSeparatei"));
            glBlendFunci = Marshal.GetDelegateForFunctionPointer<GLBlendFunci>(loader.Invoke("glBlendFunci"));
            glBlendFuncSeparatei = Marshal.GetDelegateForFunctionPointer<GLBlendFuncSeparatei>(loader.Invoke("glBlendFuncSeparatei"));
            glGetnCompressedTexImage = Marshal.GetDelegateForFunctionPointer<GLGetnCompressedTexImage>(loader.Invoke("glGetnCompressedTexImage"));
            glGetnTexImage = Marshal.GetDelegateForFunctionPointer<GLGetnTexImage>(loader.Invoke("glGetnTexImage"));
            glGetnUniformdv = Marshal.GetDelegateForFunctionPointer<GLGetnUniformdv>(loader.Invoke("glGetnUniformdv"));
            glSpecializeShader = Marshal.GetDelegateForFunctionPointer<GLSpecializeShader>(loader.Invoke("glSpecializeShader"));
            glMultiDrawArraysIndirectCount = Marshal.GetDelegateForFunctionPointer<GLMultiDrawArraysIndirectCount>(loader.Invoke("glMultiDrawArraysIndirectCount"));
            glMultiDrawElementsIndirectCount = Marshal.GetDelegateForFunctionPointer<GLMultiDrawElementsIndirectCount>(loader.Invoke("glMultiDrawElementsIndirectCount"));
            glAlphaFuncx = Marshal.GetDelegateForFunctionPointer<GLAlphaFuncx>(loader.Invoke("glAlphaFuncx"));
            glClearColorx = Marshal.GetDelegateForFunctionPointer<GLClearColorx>(loader.Invoke("glClearColorx"));
            glClearDepthx = Marshal.GetDelegateForFunctionPointer<GLClearDepthx>(loader.Invoke("glClearDepthx"));
            glClipPlanex = Marshal.GetDelegateForFunctionPointer<GLClipPlanex>(loader.Invoke("glClipPlanex"));
            glColor4x = Marshal.GetDelegateForFunctionPointer<GLColor4x>(loader.Invoke("glColor4x"));
            glDepthRangex = Marshal.GetDelegateForFunctionPointer<GLDepthRangex>(loader.Invoke("glDepthRangex"));
            glFogx = Marshal.GetDelegateForFunctionPointer<GLFogx>(loader.Invoke("glFogx"));
            glFogxv = Marshal.GetDelegateForFunctionPointer<GLFogxv>(loader.Invoke("glFogxv"));
            glFrustumx = Marshal.GetDelegateForFunctionPointer<GLFrustumx>(loader.Invoke("glFrustumx"));
            glGetClipPlanex = Marshal.GetDelegateForFunctionPointer<GLGetClipPlanex>(loader.Invoke("glGetClipPlanex"));
            glGetFixedv = Marshal.GetDelegateForFunctionPointer<GLGetFixedv>(loader.Invoke("glGetFixedv"));
            glGetLightxv = Marshal.GetDelegateForFunctionPointer<GLGetLightxv>(loader.Invoke("glGetLightxv"));
            glGetMaterialxv = Marshal.GetDelegateForFunctionPointer<GLGetMaterialxv>(loader.Invoke("glGetMaterialxv"));
            glGetTexEnvxv = Marshal.GetDelegateForFunctionPointer<GLGetTexEnvxv>(loader.Invoke("glGetTexEnvxv"));
            glGetTexParameterxv = Marshal.GetDelegateForFunctionPointer<GLGetTexParameterxv>(loader.Invoke("glGetTexParameterxv"));
            glLightModelx = Marshal.GetDelegateForFunctionPointer<GLLightModelx>(loader.Invoke("glLightModelx"));
            glLightModelxv = Marshal.GetDelegateForFunctionPointer<GLLightModelxv>(loader.Invoke("glLightModelxv"));
            glLightx = Marshal.GetDelegateForFunctionPointer<GLLightx>(loader.Invoke("glLightx"));
            glLightxv = Marshal.GetDelegateForFunctionPointer<GLLightxv>(loader.Invoke("glLightxv"));
            glLineWidthx = Marshal.GetDelegateForFunctionPointer<GLLineWidthx>(loader.Invoke("glLineWidthx"));
            glLoadMatrixx = Marshal.GetDelegateForFunctionPointer<GLLoadMatrixx>(loader.Invoke("glLoadMatrixx"));
            glMaterialx = Marshal.GetDelegateForFunctionPointer<GLMaterialx>(loader.Invoke("glMaterialx"));
            glMaterialxv = Marshal.GetDelegateForFunctionPointer<GLMaterialxv>(loader.Invoke("glMaterialxv"));
            glMultMatrixx = Marshal.GetDelegateForFunctionPointer<GLMultMatrixx>(loader.Invoke("glMultMatrixx"));
            glMultiTexCoord4x = Marshal.GetDelegateForFunctionPointer<GLMultiTexCoord4x>(loader.Invoke("glMultiTexCoord4x"));
            glNormal3x = Marshal.GetDelegateForFunctionPointer<GLNormal3x>(loader.Invoke("glNormal3x"));
            glOrthox = Marshal.GetDelegateForFunctionPointer<GLOrthox>(loader.Invoke("glOrthox"));
            glPointParameterx = Marshal.GetDelegateForFunctionPointer<GLPointParameterx>(loader.Invoke("glPointParameterx"));
            glPointParameterxv = Marshal.GetDelegateForFunctionPointer<GLPointParameterxv>(loader.Invoke("glPointParameterxv"));
            glPointSizex = Marshal.GetDelegateForFunctionPointer<GLPointSizex>(loader.Invoke("glPointSizex"));
            glPolygonOffsetx = Marshal.GetDelegateForFunctionPointer<GLPolygonOffsetx>(loader.Invoke("glPolygonOffsetx"));
            glRotatex = Marshal.GetDelegateForFunctionPointer<GLRotatex>(loader.Invoke("glRotatex"));
            glSampleCoveragex = Marshal.GetDelegateForFunctionPointer<GLSampleCoveragex>(loader.Invoke("glSampleCoveragex"));
            glScalex = Marshal.GetDelegateForFunctionPointer<GLScalex>(loader.Invoke("glScalex"));
            glTexEnvx = Marshal.GetDelegateForFunctionPointer<GLTexEnvx>(loader.Invoke("glTexEnvx"));
            glTexEnvxv = Marshal.GetDelegateForFunctionPointer<GLTexEnvxv>(loader.Invoke("glTexEnvxv"));
            glTexParameterx = Marshal.GetDelegateForFunctionPointer<GLTexParameterx>(loader.Invoke("glTexParameterx"));
            glTexParameterxv = Marshal.GetDelegateForFunctionPointer<GLTexParameterxv>(loader.Invoke("glTexParameterxv"));
            glTranslatex = Marshal.GetDelegateForFunctionPointer<GLTranslatex>(loader.Invoke("glTranslatex"));
            glBlendBarrier = Marshal.GetDelegateForFunctionPointer<GLBlendBarrier>(loader.Invoke("glBlendBarrier"));
            glPrimitiveBoundingBox = Marshal.GetDelegateForFunctionPointer<GLPrimitiveBoundingBox>(loader.Invoke("glPrimitiveBoundingBox"));
        }
    }
}
